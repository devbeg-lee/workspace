
Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc8  08004fc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08004fdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08004fdc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013413  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003305  00000000  00000000  0003344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  000379d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b7f  00000000  00000000  00038ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018184  00000000  00000000  0006165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef169  00000000  00000000  000797e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016894c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c40  00000000  00000000  0016899c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004f5c 	.word	0x08004f5c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004f5c 	.word	0x08004f5c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800052a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <MX_ADC1_Init+0xa4>)
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000558:	2201      	movs	r2, #1
 800055a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000566:	2201      	movs	r2, #1
 8000568:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056a:	480e      	ldr	r0, [pc, #56]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800056c:	f001 fa88 	bl	8001a80 <HAL_ADC_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000576:	f000 fb85 	bl	8000c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000582:	2303      	movs	r3, #3
 8000584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800058c:	f001 fabc 	bl	8001b08 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000596:	f000 fb75 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40012000 	.word	0x40012000
 80005ac:	0f000001 	.word	0x0f000001

080005b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <HAL_ADC_MspInit+0x7c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d127      	bne.n	8000622 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	6453      	str	r3, [r2, #68]	; 0x44
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_ADC_MspInit+0x80>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060e:	2303      	movs	r3, #3
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <HAL_ADC_MspInit+0x84>)
 800061e:	f001 fdb9 	bl	8002194 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40012000 	.word	0x40012000
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <LL_SYSCFG_SetEXTISource+0x58>)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	3302      	adds	r3, #2
 800075e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	0c1b      	lsrs	r3, r3, #16
 8000766:	43db      	mvns	r3, r3
 8000768:	ea02 0103 	and.w	r1, r2, r3
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	fa93 f3a3 	rbit	r3, r3
 8000778:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	fab3 f383 	clz	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	fa03 f202 	lsl.w	r2, r3, r2
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <LL_SYSCFG_SetEXTISource+0x58>)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	430a      	orrs	r2, r1
 8000792:	3302      	adds	r3, #2
 8000794:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40013800 	.word	0x40013800

080007a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b089      	sub	sp, #36	; 0x24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa93 f3a3 	rbit	r3, r3
 80007c2:	613b      	str	r3, [r7, #16]
  return result;
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	fab3 f383 	clz	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	2103      	movs	r1, #3
 80007d0:	fa01 f303 	lsl.w	r3, r1, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	401a      	ands	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	fa93 f3a3 	rbit	r3, r3
 80007e2:	61bb      	str	r3, [r7, #24]
  return result;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fab3 f383 	clz	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	431a      	orrs	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000806:	b480      	push	{r7}
 8000808:	b089      	sub	sp, #36	; 0x24
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa93 f3a3 	rbit	r3, r3
 8000820:	613b      	str	r3, [r7, #16]
  return result;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	fab3 f383 	clz	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2103      	movs	r1, #3
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	401a      	ands	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa93 f3a3 	rbit	r3, r3
 8000840:	61bb      	str	r3, [r7, #24]
  return result;
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	fab3 f383 	clz	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	431a      	orrs	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	60da      	str	r2, [r3, #12]
}
 8000858:	bf00      	nop
 800085a:	3724      	adds	r7, #36	; 0x24
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	041a      	lsls	r2, r3, #16
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	619a      	str	r2, [r3, #24]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800088e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800089a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f7ff ffd5 	bl	8000884 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80008da:	2080      	movs	r0, #128	; 0x80
 80008dc:	f7ff ffd2 	bl	8000884 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff ffcf 	bl	8000884 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80008e6:	2002      	movs	r0, #2
 80008e8:	f7ff ffcc 	bl	8000884 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80008ec:	2008      	movs	r0, #8
 80008ee:	f7ff ffc9 	bl	8000884 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin | FND_F_Pin | FND_E_Pin | FND1_SIG_Pin | FND4_SIG_Pin | FND3_SIG_Pin);
 80008f2:	f642 4107 	movw	r1, #11271	; 0x2c07
 80008f6:	4881      	ldr	r0, [pc, #516]	; (8000afc <MX_GPIO_Init+0x248>)
 80008f8:	f7ff ffb4 	bl	8000864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin | RED_LED_Pin);
 80008fc:	2182      	movs	r1, #130	; 0x82
 80008fe:	4880      	ldr	r0, [pc, #512]	; (8000b00 <MX_GPIO_Init+0x24c>)
 8000900:	f7ff ffb0 	bl	8000864 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin | LD_TRIG_Pin | FND2_SIG_Pin | FND_C_Pin | FND_B_Pin | FND_D_Pin | FND_G_Pin);
 8000904:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000908:	487e      	ldr	r0, [pc, #504]	; (8000b04 <MX_GPIO_Init+0x250>)
 800090a:	f7ff ffab 	bl	8000864 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin | FND_F_Pin | FND_E_Pin | FND1_SIG_Pin | FND4_SIG_Pin | FND3_SIG_Pin;
 800090e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000912:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000914:	2301      	movs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4874      	ldr	r0, [pc, #464]	; (8000afc <MX_GPIO_Init+0x248>)
 800092a:	f003 fe09 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin | RED_LED_Pin;
 800092e:	2382      	movs	r3, #130	; 0x82
 8000930:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000932:	2301      	movs	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800093a:	2301      	movs	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	463b      	mov	r3, r7
 8000944:	4619      	mov	r1, r3
 8000946:	486e      	ldr	r0, [pc, #440]	; (8000b00 <MX_GPIO_Init+0x24c>)
 8000948:	f003 fdfa 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 800094c:	f240 630c 	movw	r3, #1548	; 0x60c
 8000950:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000952:	2302      	movs	r3, #2
 8000954:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000962:	2307      	movs	r3, #7
 8000964:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	4865      	ldr	r0, [pc, #404]	; (8000b00 <MX_GPIO_Init+0x24c>)
 800096c:	f003 fde8 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin | Detect_SIG_2_Pin | Detect_SIG_3_Pin | SW_OP_3_Pin | SW_OP_2_Pin | SW_OP_1_Pin;
 8000970:	f641 1370 	movw	r3, #6512	; 0x1970
 8000974:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	485f      	ldr	r0, [pc, #380]	; (8000b00 <MX_GPIO_Init+0x24c>)
 8000984:	f003 fddc 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000988:	2320      	movs	r3, #32
 800098a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800098c:	2302      	movs	r3, #2
 800098e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800099c:	2307      	movs	r3, #7
 800099e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4855      	ldr	r0, [pc, #340]	; (8000afc <MX_GPIO_Init+0x248>)
 80009a6:	f003 fdcb 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009b0:	2302      	movs	r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	484e      	ldr	r0, [pc, #312]	; (8000b04 <MX_GPIO_Init+0x250>)
 80009ca:	f003 fdb9 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009d4:	2301      	movs	r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009dc:	2301      	movs	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4846      	ldr	r0, [pc, #280]	; (8000b04 <MX_GPIO_Init+0x250>)
 80009ea:	f003 fda9 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4840      	ldr	r0, [pc, #256]	; (8000b04 <MX_GPIO_Init+0x250>)
 8000a02:	f003 fd9d 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin | FND2_SIG_Pin | FND_C_Pin | FND_B_Pin | FND_D_Pin | FND_G_Pin;
 8000a06:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000a0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4838      	ldr	r0, [pc, #224]	; (8000b04 <MX_GPIO_Init+0x250>)
 8000a22:	f003 fd8d 	bl	8004540 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4830      	ldr	r0, [pc, #192]	; (8000afc <MX_GPIO_Init+0x248>)
 8000a3a:	f003 fd81 	bl	8004540 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000a3e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe82 	bl	800074c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000a48:	492f      	ldr	r1, [pc, #188]	; (8000b08 <MX_GPIO_Init+0x254>)
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fe7e 	bl	800074c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a54:	2301      	movs	r3, #1
 8000a56:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fbe5 	bl	8004234 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fbd7 	bl	8004234 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	481e      	ldr	r0, [pc, #120]	; (8000b04 <MX_GPIO_Init+0x250>)
 8000a8c:	f7ff febb 	bl	8000806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a96:	481b      	ldr	r0, [pc, #108]	; (8000b04 <MX_GPIO_Init+0x250>)
 8000a98:	f7ff feb5 	bl	8000806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_GPIO_Init+0x250>)
 8000aa2:	f7ff fe81 	bl	80007a8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	4815      	ldr	r0, [pc, #84]	; (8000b04 <MX_GPIO_Init+0x250>)
 8000aae:	f7ff fe7b 	bl	80007a8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8000ab2:	f7ff fdc1 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe11 	bl	80006e4 <NVIC_EncodePriority>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2006      	movs	r0, #6
 8000ac8:	f7ff fde2 	bl	8000690 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000acc:	2006      	movs	r0, #6
 8000ace:	f7ff fdc1 	bl	8000654 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8000ad2:	f7ff fdb1 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fe01 	bl	80006e4 <NVIC_EncodePriority>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	2028      	movs	r0, #40	; 0x28
 8000ae8:	f7ff fdd2 	bl	8000690 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aec:	2028      	movs	r0, #40	; 0x28
 8000aee:	f7ff fdb1 	bl	8000654 <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	f0000003 	.word	0xf0000003

08000b0c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	330c      	adds	r3, #12
 8000b18:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	e853 3f00 	ldrex	r3, [r3]
 8000b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	f043 0320 	orr.w	r3, r3, #32
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	330c      	adds	r3, #12
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	61ba      	str	r2, [r7, #24]
 8000b32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b34:	6979      	ldr	r1, [r7, #20]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	e841 2300 	strex	r3, r2, [r1]
 8000b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e7      	bne.n	8000b14 <LL_USART_EnableIT_RXNE+0x8>
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f000 ff1f 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f81f 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f7ff fea7 	bl	80008b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b66:	f7ff fccf 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000b6a:	f000 fdd5 	bl	8001718 <MX_UART5_Init>
  MX_TIM3_Init();
 8000b6e:	f000 fc15 	bl	800139c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000b72:	f000 fe49 	bl	8001808 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(UART5);
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <main+0x44>)
 8000b78:	f7ff ffc8 	bl	8000b0c <LL_USART_EnableIT_RXNE>
  // LL_USART_Enable(USART6);
  uint8_t feedback_ng_cnt;
  // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // buzzer
  switch_check();
 8000b7c:	f000 fbd2 	bl	8001324 <switch_check>
  uint8_t cnt = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	71fb      	strb	r3, [r7, #7]

  // avg = adc_val / 1000;
  //  buzzer_main();
  while (1)
  {
    switch (g_Status)
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <main+0x48>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <main+0x40>
    {
    case kStatus_Idle:
      Idle_status();
 8000b8e:	f000 fa3b 	bl	8001008 <Idle_status>
      break;
 8000b92:	e000      	b.n	8000b96 <main+0x42>
          case kStatus_Result:
            Result_status();
            break;
*/
    default:
      break;
 8000b94:	bf00      	nop
    switch (g_Status)
 8000b96:	e7f5      	b.n	8000b84 <main+0x30>
 8000b98:	40005000 	.word	0x40005000
 8000b9c:	20000070 	.word	0x20000070

08000ba0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2234      	movs	r2, #52	; 0x34
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 f9cc 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <SystemClock_Config+0xdc>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <SystemClock_Config+0xdc>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <SystemClock_Config+0xdc>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SystemClock_Config+0xe0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <SystemClock_Config+0xe0>)
 8000bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SystemClock_Config+0xe0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c04:	2310      	movs	r3, #16
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c10:	2308      	movs	r3, #8
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c14:	23b4      	movs	r3, #180	; 0xb4
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 ff73 	bl	8002b14 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c34:	f000 f826 	bl	8000c84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c38:	f001 fc58 	bl	80024ec <HAL_PWREx_EnableOverDrive>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c42:	f000 f81f 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c46:	230f      	movs	r3, #15
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	2105      	movs	r1, #5
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fc91 	bl	800258c <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c70:	f000 f808 	bl	8000c84 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3750      	adds	r7, #80	; 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>

08000c8e <LL_USART_IsActiveFlag_TXE>:
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9e:	2b80      	cmp	r3, #128	; 0x80
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	605a      	str	r2, [r3, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d85d      	bhi.n	8000db6 <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000cfa:	7cfb      	ldrb	r3, [r7, #19]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	74fa      	strb	r2, [r7, #19]
 8000d00:	3318      	adds	r3, #24
 8000d02:	443b      	add	r3, r7
 8000d04:	22fa      	movs	r2, #250	; 0xfa
 8000d06:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000d0a:	7cfb      	ldrb	r3, [r7, #19]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	74fa      	strb	r2, [r7, #19]
 8000d10:	3318      	adds	r3, #24
 8000d12:	443b      	add	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000d1a:	7cfb      	ldrb	r3, [r7, #19]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	74fa      	strb	r2, [r7, #19]
 8000d20:	3318      	adds	r3, #24
 8000d22:	443b      	add	r3, r7
 8000d24:	22d0      	movs	r2, #208	; 0xd0
 8000d26:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000d2a:	7cfb      	ldrb	r3, [r7, #19]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	74fa      	strb	r2, [r7, #19]
 8000d30:	3318      	adds	r3, #24
 8000d32:	443b      	add	r3, r7
 8000d34:	220f      	movs	r2, #15
 8000d36:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000d3a:	7cfb      	ldrb	r3, [r7, #19]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	74fa      	strb	r2, [r7, #19]
 8000d40:	3318      	adds	r3, #24
 8000d42:	443b      	add	r3, r7
 8000d44:	79fa      	ldrb	r2, [r7, #7]
 8000d46:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000d4a:	7cfb      	ldrb	r3, [r7, #19]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	74fa      	strb	r2, [r7, #19]
 8000d50:	3318      	adds	r3, #24
 8000d52:	443b      	add	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000d5a:	7cfb      	ldrb	r3, [r7, #19]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	74fa      	strb	r2, [r7, #19]
 8000d60:	3318      	adds	r3, #24
 8000d62:	443b      	add	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000d6a:	7cfb      	ldrb	r3, [r7, #19]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	74fa      	strb	r2, [r7, #19]
 8000d70:	3318      	adds	r3, #24
 8000d72:	443b      	add	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8000d7a:	7a3b      	ldrb	r3, [r7, #8]
 8000d7c:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000d7e:	2301      	movs	r3, #1
 8000d80:	82bb      	strh	r3, [r7, #20]
 8000d82:	e00a      	b.n	8000d9a <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8000d84:	8abb      	ldrh	r3, [r7, #20]
 8000d86:	3318      	adds	r3, #24
 8000d88:	443b      	add	r3, r7
 8000d8a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	4053      	eors	r3, r2
 8000d92:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000d94:	8abb      	ldrh	r3, [r7, #20]
 8000d96:	3301      	adds	r3, #1
 8000d98:	82bb      	strh	r3, [r7, #20]
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	8aba      	ldrh	r2, [r7, #20]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d3ef      	bcc.n	8000d84 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8000da4:	7cfb      	ldrb	r3, [r7, #19]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	74fa      	strb	r2, [r7, #19]
 8000daa:	3318      	adds	r3, #24
 8000dac:	443b      	add	r3, r7
 8000dae:	7dfa      	ldrb	r2, [r7, #23]
 8000db0:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8000db4:	e000      	b.n	8000db8 <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 8000db6:	bf00      	nop
    }
    UART_Transmit(USART6, senddata, sizeof(senddata));
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <LiDAR_Protocol_Tx+0xfc>)
 8000dc2:	f000 f8ef 	bl	8000fa4 <UART_Transmit>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40011400 	.word	0x40011400

08000dd4 <GUI_Protocol_Tx>:

void GUI_Protocol_Tx(uint8_t parameter, uint8_t data)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	747b      	strb	r3, [r7, #17]
    uint8_t senddata[9] = {0};
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d007      	beq.n	8000e10 <GUI_Protocol_Tx+0x3c>
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f2c0 80c1 	blt.w	8000f88 <GUI_Protocol_Tx+0x1b4>
 8000e06:	3b01      	subs	r3, #1
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	f200 80bd 	bhi.w	8000f88 <GUI_Protocol_Tx+0x1b4>
 8000e0e:	e05d      	b.n	8000ecc <GUI_Protocol_Tx+0xf8>
    {
    case GUI_COMMAND_CONNECT:
        senddata[cnt++] = PROTOCOL_HEADER;
 8000e10:	7c7b      	ldrb	r3, [r7, #17]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	747a      	strb	r2, [r7, #17]
 8000e16:	3318      	adds	r3, #24
 8000e18:	443b      	add	r3, r7
 8000e1a:	22fa      	movs	r2, #250	; 0xfa
 8000e1c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000e20:	7c7b      	ldrb	r3, [r7, #17]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	747a      	strb	r2, [r7, #17]
 8000e26:	3318      	adds	r3, #24
 8000e28:	443b      	add	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000e30:	7c7b      	ldrb	r3, [r7, #17]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	747a      	strb	r2, [r7, #17]
 8000e36:	3318      	adds	r3, #24
 8000e38:	443b      	add	r3, r7
 8000e3a:	22d0      	movs	r2, #208	; 0xd0
 8000e3c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 8000e40:	7c7b      	ldrb	r3, [r7, #17]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	747a      	strb	r2, [r7, #17]
 8000e46:	3318      	adds	r3, #24
 8000e48:	443b      	add	r3, r7
 8000e4a:	22f0      	movs	r2, #240	; 0xf0
 8000e4c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000e50:	7c7b      	ldrb	r3, [r7, #17]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	747a      	strb	r2, [r7, #17]
 8000e56:	3318      	adds	r3, #24
 8000e58:	443b      	add	r3, r7
 8000e5a:	79fa      	ldrb	r2, [r7, #7]
 8000e5c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000e60:	7c7b      	ldrb	r3, [r7, #17]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	747a      	strb	r2, [r7, #17]
 8000e66:	3318      	adds	r3, #24
 8000e68:	443b      	add	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000e70:	7c7b      	ldrb	r3, [r7, #17]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	747a      	strb	r2, [r7, #17]
 8000e76:	3318      	adds	r3, #24
 8000e78:	443b      	add	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data;
 8000e80:	7c7b      	ldrb	r3, [r7, #17]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	747a      	strb	r2, [r7, #17]
 8000e86:	3318      	adds	r3, #24
 8000e88:	443b      	add	r3, r7
 8000e8a:	79ba      	ldrb	r2, [r7, #6]
 8000e8c:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8000e90:	7a3b      	ldrb	r3, [r7, #8]
 8000e92:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000e94:	2301      	movs	r3, #1
 8000e96:	82bb      	strh	r3, [r7, #20]
 8000e98:	e00a      	b.n	8000eb0 <GUI_Protocol_Tx+0xdc>
        {
            checksum ^= senddata[i];
 8000e9a:	8abb      	ldrh	r3, [r7, #20]
 8000e9c:	3318      	adds	r3, #24
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	4053      	eors	r3, r2
 8000ea8:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000eaa:	8abb      	ldrh	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	82bb      	strh	r3, [r7, #20]
 8000eb0:	7c7b      	ldrb	r3, [r7, #17]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	8aba      	ldrh	r2, [r7, #20]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3ef      	bcc.n	8000e9a <GUI_Protocol_Tx+0xc6>
        }
        senddata[cnt++] = checksum;
 8000eba:	7c7b      	ldrb	r3, [r7, #17]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	747a      	strb	r2, [r7, #17]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	443b      	add	r3, r7
 8000ec4:	7dfa      	ldrb	r2, [r7, #23]
 8000ec6:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8000eca:	e05e      	b.n	8000f8a <GUI_Protocol_Tx+0x1b6>
    case GUI_COMMAND_MOT_SPEED:
    case GUI_COMMAND_ENC_CHECK:
    case GUI_COMMAND_TDC_INIT:
    case GUI_COMMAND_TDC_CAL:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000ecc:	7c7b      	ldrb	r3, [r7, #17]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	747a      	strb	r2, [r7, #17]
 8000ed2:	3318      	adds	r3, #24
 8000ed4:	443b      	add	r3, r7
 8000ed6:	22fa      	movs	r2, #250	; 0xfa
 8000ed8:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000edc:	7c7b      	ldrb	r3, [r7, #17]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	747a      	strb	r2, [r7, #17]
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	443b      	add	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000eec:	7c7b      	ldrb	r3, [r7, #17]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	747a      	strb	r2, [r7, #17]
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	443b      	add	r3, r7
 8000ef6:	22d0      	movs	r2, #208	; 0xd0
 8000ef8:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 8000efc:	7c7b      	ldrb	r3, [r7, #17]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	747a      	strb	r2, [r7, #17]
 8000f02:	3318      	adds	r3, #24
 8000f04:	443b      	add	r3, r7
 8000f06:	22f0      	movs	r2, #240	; 0xf0
 8000f08:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000f0c:	7c7b      	ldrb	r3, [r7, #17]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	747a      	strb	r2, [r7, #17]
 8000f12:	3318      	adds	r3, #24
 8000f14:	443b      	add	r3, r7
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000f1c:	7c7b      	ldrb	r3, [r7, #17]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	747a      	strb	r2, [r7, #17]
 8000f22:	3318      	adds	r3, #24
 8000f24:	443b      	add	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x01U;
 8000f2c:	7c7b      	ldrb	r3, [r7, #17]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	747a      	strb	r2, [r7, #17]
 8000f32:	3318      	adds	r3, #24
 8000f34:	443b      	add	r3, r7
 8000f36:	2201      	movs	r2, #1
 8000f38:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data; // 0x00 : Factory JIG MODE, 0x01 : Tx MODE    0x00 : OK, 0x01 : FAIL
 8000f3c:	7c7b      	ldrb	r3, [r7, #17]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	747a      	strb	r2, [r7, #17]
 8000f42:	3318      	adds	r3, #24
 8000f44:	443b      	add	r3, r7
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000f50:	2301      	movs	r3, #1
 8000f52:	827b      	strh	r3, [r7, #18]
 8000f54:	e00a      	b.n	8000f6c <GUI_Protocol_Tx+0x198>
        {
            checksum ^= senddata[i];
 8000f56:	8a7b      	ldrh	r3, [r7, #18]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	443b      	add	r3, r7
 8000f5c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4053      	eors	r3, r2
 8000f64:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000f66:	8a7b      	ldrh	r3, [r7, #18]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	827b      	strh	r3, [r7, #18]
 8000f6c:	7c7b      	ldrb	r3, [r7, #17]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	8a7a      	ldrh	r2, [r7, #18]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3ef      	bcc.n	8000f56 <GUI_Protocol_Tx+0x182>
        }
        senddata[cnt++] = checksum;
 8000f76:	7c7b      	ldrb	r3, [r7, #17]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	747a      	strb	r2, [r7, #17]
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	443b      	add	r3, r7
 8000f80:	7dfa      	ldrb	r2, [r7, #23]
 8000f82:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8000f86:	e000      	b.n	8000f8a <GUI_Protocol_Tx+0x1b6>
    default:
        break;
 8000f88:	bf00      	nop
    }
    UART_Transmit(UART5, senddata, sizeof(senddata));
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2209      	movs	r2, #9
 8000f90:	4619      	mov	r1, r3
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <GUI_Protocol_Tx+0x1cc>)
 8000f94:	f000 f806 	bl	8000fa4 <UART_Transmit>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40005000 	.word	0x40005000

08000fa4 <UART_Transmit>:

void UART_Transmit(USART_TypeDef *USARTx, uint8_t *data, uint16_t length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < length; i++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	82fb      	strh	r3, [r7, #22]
 8000fb6:	e011      	b.n	8000fdc <UART_Transmit+0x38>
    {
        LL_USART_TransmitData8(USARTx, data[i]);
 8000fb8:	8afb      	ldrh	r3, [r7, #22]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fe76 	bl	8000cb4 <LL_USART_TransmitData8>
        while (!LL_USART_IsActiveFlag_TXE(USARTx))
 8000fc8:	bf00      	nop
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fe5f 	bl	8000c8e <LL_USART_IsActiveFlag_TXE>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f9      	beq.n	8000fca <UART_Transmit+0x26>
    for (uint16_t i = 0; i < length; i++)
 8000fd6:	8afb      	ldrh	r3, [r7, #22]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	82fb      	strh	r3, [r7, #22]
 8000fdc:	8afa      	ldrh	r2, [r7, #22]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d3e9      	bcc.n	8000fb8 <UART_Transmit+0x14>
            ;
    }
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LL_USART_ReceiveData8>:
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	b2db      	uxtb	r3, r3
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <Idle_status>:
#include "status.h"

uint8_t connect = 0;

void Idle_status(void)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b093      	sub	sp, #76	; 0x4c
 800100c:	af00      	add	r7, sp, #0

    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 800100e:	4a4b      	ldr	r2, [pc, #300]	; (800113c <Idle_status+0x134>)
 8001010:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001014:	ca07      	ldmia	r2, {r0, r1, r2}
 8001016:	c303      	stmia	r3!, {r0, r1}
 8001018:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 800101a:	4a49      	ldr	r2, [pc, #292]	; (8001140 <Idle_status+0x138>)
 800101c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001020:	ca07      	ldmia	r2, {r0, r1, r2}
 8001022:	c303      	stmia	r3!, {r0, r1}
 8001024:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 8001026:	4a47      	ldr	r2, [pc, #284]	; (8001144 <Idle_status+0x13c>)
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	ca07      	ldmia	r2, {r0, r1, r2}
 800102e:	c303      	stmia	r3!, {r0, r1}
 8001030:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_RX_BUFF[13] = {
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	721a      	strb	r2, [r3, #8]
        0x00,
    };
    uint8_t INFO_RX_Flag = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint8_t checksum = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <Idle_status+0x140>)
 8001050:	1d3c      	adds	r4, r7, #4
 8001052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001054:	c407      	stmia	r4!, {r0, r1, r2}
 8001056:	7023      	strb	r3, [r4, #0]

    if (rx_flag)
 8001058:	4b3c      	ldr	r3, [pc, #240]	; (800114c <Idle_status+0x144>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d045      	beq.n	80010ec <Idle_status+0xe4>
    {
        if (memcmp(&CONNECT_BUFF, &rx_data, RX_BUFFER_SIZE) == 0) // PC Connect
 8001060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001064:	2209      	movs	r2, #9
 8001066:	493a      	ldr	r1, [pc, #232]	; (8001150 <Idle_status+0x148>)
 8001068:	4618      	mov	r0, r3
 800106a:	f003 ff5f 	bl	8004f2c <memcmp>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10a      	bne.n	800108a <Idle_status+0x82>
        {
            GUI_Protocol_Tx(GUI_COMMAND_CONNECT, 0);
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff feac 	bl	8000dd4 <GUI_Protocol_Tx>
            connect = 1;
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <Idle_status+0x14c>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
            HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // Viewer start button enable only
 8001082:	2028      	movs	r0, #40	; 0x28
 8001084:	f001 f86b 	bl	800215e <HAL_NVIC_DisableIRQ>
 8001088:	e02c      	b.n	80010e4 <Idle_status+0xdc>
        }
        else if (memcmp(&INFO_BUFF, &rx_data, RX_BUFFER_SIZE) == 0) // PC -> JIG Info request
 800108a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108e:	2209      	movs	r2, #9
 8001090:	492f      	ldr	r1, [pc, #188]	; (8001150 <Idle_status+0x148>)
 8001092:	4618      	mov	r0, r3
 8001094:	f003 ff4a 	bl	8004f2c <memcmp>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d112      	bne.n	80010c4 <Idle_status+0xbc>
        {
            if (INFO_RX_Flag == 0)
 800109e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <Idle_status+0xac>
            {
                UART_Transmit(UART5, temp_INFO_DATA, 13);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	220d      	movs	r2, #13
 80010aa:	4619      	mov	r1, r3
 80010ac:	482a      	ldr	r0, [pc, #168]	; (8001158 <Idle_status+0x150>)
 80010ae:	f7ff ff79 	bl	8000fa4 <UART_Transmit>
 80010b2:	e017      	b.n	80010e4 <Idle_status+0xdc>
                }
                */
            }
            else
            {
                UART_Transmit(UART5, INFO_RX_BUFF, 13);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	220d      	movs	r2, #13
 80010ba:	4619      	mov	r1, r3
 80010bc:	4826      	ldr	r0, [pc, #152]	; (8001158 <Idle_status+0x150>)
 80010be:	f7ff ff71 	bl	8000fa4 <UART_Transmit>
 80010c2:	e00f      	b.n	80010e4 <Idle_status+0xdc>
            }
        }
        else if (memcmp(&MODE_BUFF, &rx_data, RX_BUFFER_SIZE) == 0)
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	2209      	movs	r2, #9
 80010ca:	4921      	ldr	r1, [pc, #132]	; (8001150 <Idle_status+0x148>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 ff2d 	bl	8004f2c <memcmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <Idle_status+0xdc>
        {
            GUI_Protocol_Tx(GUI_COMMAND_MODE, Mode_data);
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <Idle_status+0x154>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff fe78 	bl	8000dd4 <GUI_Protocol_Tx>
        }
        else
        {
        }
        rx_flag = 0;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <Idle_status+0x144>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]

        else
        {
        }
    }
 80010ea:	e022      	b.n	8001132 <Idle_status+0x12a>
        if (INFO_RX_Flag == 0)
 80010ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d11e      	bne.n	8001132 <Idle_status+0x12a>
            LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fded 	bl	8000cd4 <LiDAR_Protocol_Tx>
            for (uint8_t i = 0; i <= 12; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001100:	e010      	b.n	8001124 <Idle_status+0x11c>
                INFO_RX_BUFF[i] = LL_USART_ReceiveData8(USART6);
 8001102:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <Idle_status+0x158>)
 8001108:	f7ff ff71 	bl	8000fee <LL_USART_ReceiveData8>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8001114:	443b      	add	r3, r7
 8001116:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (uint8_t i = 0; i <= 12; i++)
 800111a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800111e:	3301      	adds	r3, #1
 8001120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001124:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001128:	2b0c      	cmp	r3, #12
 800112a:	d9ea      	bls.n	8001102 <Idle_status+0xfa>
            INFO_RX_Flag = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001132:	bf00      	nop
 8001134:	374c      	adds	r7, #76	; 0x4c
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	08004f74 	.word	0x08004f74
 8001140:	08004f80 	.word	0x08004f80
 8001144:	08004f8c 	.word	0x08004f8c
 8001148:	08004f98 	.word	0x08004f98
 800114c:	200000c9 	.word	0x200000c9
 8001150:	200000c0 	.word	0x200000c0
 8001154:	20000071 	.word	0x20000071
 8001158:	40005000 	.word	0x40005000
 800115c:	20000074 	.word	0x20000074
 8001160:	40011400 	.word	0x40011400

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_MspInit+0x4c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4013      	ands	r3, r2
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6153      	str	r3, [r2, #20]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40013c00 	.word	0x40013c00

08001200 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124c:	f000 fbf8 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 interrupt.
 */
void EXTI0_IRQHandler(void) // mode switch interrupt
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 8001258:	f000 f864 	bl	8001324 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff ffa9 	bl	80011b4 <LL_EXTI_IsActiveFlag_0_31>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff ffb9 	bl	80011e0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) // start button interrupt
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  if (Mode_data == 0) // jig mode
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <EXTI15_10_IRQHandler+0x54>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10b      	bne.n	8001298 <EXTI15_10_IRQHandler+0x24>
  {
    if (jig_start_flag == 0)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <EXTI15_10_IRQHandler+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <EXTI15_10_IRQHandler+0x1c>
    {
      jig_start_flag = 1;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <EXTI15_10_IRQHandler+0x58>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	e00e      	b.n	80012ae <EXTI15_10_IRQHandler+0x3a>
    }
    else
    {
      jig_start_flag = 0;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <EXTI15_10_IRQHandler+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e00a      	b.n	80012ae <EXTI15_10_IRQHandler+0x3a>
    }
  }
  else // tx mode
  {
    if (tx_start_flag == 0)
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <EXTI15_10_IRQHandler+0x5c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d103      	bne.n	80012a8 <EXTI15_10_IRQHandler+0x34>
    {
      tx_start_flag = 1;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <EXTI15_10_IRQHandler+0x5c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e002      	b.n	80012ae <EXTI15_10_IRQHandler+0x3a>
    }
    else
    {
      tx_start_flag = 0;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <EXTI15_10_IRQHandler+0x5c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80012ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012b2:	f7ff ff7f 	bl	80011b4 <LL_EXTI_IsActiveFlag_0_31>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <EXTI15_10_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80012bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012c0:	f7ff ff8e 	bl	80011e0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000074 	.word	0x20000074
 80012cc:	20000073 	.word	0x20000073
 80012d0:	20000072 	.word	0x20000072

080012d4 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  UART5_Rx_Callback(UART5); // PC <-> JIG
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <UART5_IRQHandler+0x10>)
 80012da:	f000 fb07 	bl	80018ec <UART5_Rx_Callback>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40005000 	.word	0x40005000

080012e8 <LL_GPIO_SetOutputPin>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	619a      	str	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_GPIO_ResetOutputPin>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 8001328:	2101      	movs	r1, #1
 800132a:	4810      	ldr	r0, [pc, #64]	; (800136c <switch_check+0x48>)
 800132c:	f001 f8c6 	bl	80024bc <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00c      	beq.n	8001350 <switch_check+0x2c>
    {
        Mode_data = 0x00U;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <switch_check+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800133c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <switch_check+0x48>)
 8001342:	f7ff ffd1 	bl	80012e8 <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <switch_check+0x50>)
 800134a:	f7ff ffdb 	bl	8001304 <LL_GPIO_ResetOutputPin>
    {
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
    }
 800134e:	e00b      	b.n	8001368 <switch_check+0x44>
        Mode_data = 0x01U;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <switch_check+0x4c>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8001356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135a:	4804      	ldr	r0, [pc, #16]	; (800136c <switch_check+0x48>)
 800135c:	f7ff ffd2 	bl	8001304 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <switch_check+0x50>)
 8001364:	f7ff ffc0 	bl	80012e8 <LL_GPIO_SetOutputPin>
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40020400 	.word	0x40020400
 8001370:	20000074 	.word	0x20000074
 8001374:	40020000 	.word	0x40020000

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013ce:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <MX_TIM3_Init+0xe8>)
 80013d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013d4:	222c      	movs	r2, #44	; 0x2c
 80013d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013e0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80013e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f2:	4823      	ldr	r0, [pc, #140]	; (8001480 <MX_TIM3_Init+0xe4>)
 80013f4:	f001 fe2c 	bl	8003050 <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013fe:	f7ff fc41 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	4619      	mov	r1, r3
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001410:	f001 ff88 	bl	8003324 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800141a:	f7ff fc33 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800141e:	4818      	ldr	r0, [pc, #96]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001420:	f001 fe65 	bl	80030ee <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800142a:	f7ff fc2b 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	4619      	mov	r1, r3
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <MX_TIM3_Init+0xe4>)
 800143e:	f002 fb23 	bl	8003a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001448:	f7ff fc1c 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8001450:	23f9      	movs	r3, #249	; 0xf9
 8001452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2208      	movs	r2, #8
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001464:	f001 fe9c 	bl	80031a0 <HAL_TIM_PWM_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800146e:	f7ff fc09 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <MX_TIM3_Init+0xe4>)
 8001474:	f000 f82a 	bl	80014cc <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3738      	adds	r7, #56	; 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000078 	.word	0x20000078
 8001484:	40000400 	.word	0x40000400

08001488 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10d      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_TIM_Base_MspInit+0x40>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a09      	ldr	r2, [pc, #36]	; (80014c8 <HAL_TIM_Base_MspInit+0x40>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_TIM_Base_MspInit+0x40>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <HAL_TIM_MspPostInit+0x68>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d11e      	bne.n	800152c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_TIM_MspPostInit+0x6c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_TIM_MspPostInit+0x6c>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_TIM_MspPostInit+0x6c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800150a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_TIM_MspPostInit+0x70>)
 8001528:	f000 fe34 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40000400 	.word	0x40000400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800

08001540 <__NVIC_GetPriorityGrouping>:
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	; (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_USART_Enable>:
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60da      	str	r2, [r3, #12]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_USART_ConfigAsyncMode>:
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	615a      	str	r2, [r3, #20]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_USART_ReceiveData8>:
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b2db      	uxtb	r3, r3
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_AHB1_GRP1_EnableClock>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016c4:	4907      	ldr	r1, [pc, #28]	; (80016e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40023800 	.word	0x40023800

080016e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <LL_APB1_GRP1_EnableClock+0x2c>)
 80016fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4013      	ands	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40023800 	.word	0x40023800

08001718 <MX_UART5_Init>:

UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08e      	sub	sp, #56	; 0x38
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001742:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001746:	f7ff ffcf 	bl	80016e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800174a:	2004      	movs	r0, #4
 800174c:	f7ff ffb4 	bl	80016b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001750:	2008      	movs	r0, #8
 8001752:	f7ff ffb1 	bl	80016b8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800175c:	2302      	movs	r3, #2
 800175e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800176c:	2308      	movs	r3, #8
 800176e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4821      	ldr	r0, [pc, #132]	; (80017fc <MX_UART5_Init+0xe4>)
 8001776:	f002 fee3 	bl	8004540 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800177a:	2304      	movs	r3, #4
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800177e:	2302      	movs	r3, #2
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800178e:	2308      	movs	r3, #8
 8001790:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	481a      	ldr	r0, [pc, #104]	; (8001800 <MX_UART5_Init+0xe8>)
 8001798:	f002 fed2 	bl	8004540 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800179c:	f7ff fed0 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff20 	bl	80015ec <NVIC_EncodePriority>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4619      	mov	r1, r3
 80017b0:	2035      	movs	r0, #53	; 0x35
 80017b2:	f7ff fef1 	bl	8001598 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80017b6:	2035      	movs	r0, #53	; 0x35
 80017b8:	f7ff fed0 	bl	800155c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 80017bc:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80017c0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80017ce:	230c      	movs	r3, #12
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <MX_UART5_Init+0xec>)
 80017e2:	f003 faff 	bl	8004de4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_UART5_Init+0xec>)
 80017e8:	f7ff ff43 	bl	8001672 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_UART5_Init+0xec>)
 80017ee:	f7ff ff30 	bl	8001652 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 80017f2:	bf00      	nop
 80017f4:	3738      	adds	r7, #56	; 0x38
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40005000 	.word	0x40005000

08001808 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_USART6_UART_Init+0x50>)
 8001810:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 8001814:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001818:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_USART6_UART_Init+0x4c>)
 8001840:	f002 f99e 	bl	8003b80 <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800184a:	f7ff fa1b 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200000cc 	.word	0x200000cc
 8001858:	40011400 	.word	0x40011400

0800185c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if (uartHandle->Instance == USART6)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_UART_MspInit+0x84>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12b      	bne.n	80018d6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_UART_MspInit+0x88>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_UART_MspInit+0x88>)
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0x88>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_UART_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_UART_MspInit+0x88>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_UART_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018c6:	2308      	movs	r3, #8
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_UART_MspInit+0x8c>)
 80018d2:	f000 fc5f 	bl	8002194 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40011400 	.word	0x40011400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020800 	.word	0x40020800

080018ec <UART5_Rx_Callback>:
  }
}

/* USER CODE BEGIN 1 */
void UART5_Rx_Callback(USART_TypeDef *USARTx) // PC Interrupt
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if (rx_flag == 0)
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <UART5_Rx_Callback+0x4c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d119      	bne.n	8001930 <UART5_Rx_Callback+0x44>
  {
    rx_data[i] = LL_USART_ReceiveData8(UART5);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <UART5_Rx_Callback+0x50>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461c      	mov	r4, r3
 8001902:	480f      	ldr	r0, [pc, #60]	; (8001940 <UART5_Rx_Callback+0x54>)
 8001904:	f7ff fecb 	bl	800169e <LL_USART_ReceiveData8>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <UART5_Rx_Callback+0x58>)
 800190e:	551a      	strb	r2, [r3, r4]
    i++;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <UART5_Rx_Callback+0x50>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <UART5_Rx_Callback+0x50>)
 800191a:	701a      	strb	r2, [r3, #0]
    if (i >= RX_BUFFER_SIZE)
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <UART5_Rx_Callback+0x50>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d905      	bls.n	8001930 <UART5_Rx_Callback+0x44>
    {
      i = 0;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <UART5_Rx_Callback+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
      rx_flag = 1;
 800192a:	4b03      	ldr	r3, [pc, #12]	; (8001938 <UART5_Rx_Callback+0x4c>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}
 8001938:	200000c9 	.word	0x200000c9
 800193c:	200000ca 	.word	0x200000ca
 8001940:	40005000 	.word	0x40005000
 8001944:	200000c0 	.word	0x200000c0

08001948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194e:	490e      	ldr	r1, [pc, #56]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001950:	4a0e      	ldr	r2, [pc, #56]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001964:	4c0b      	ldr	r4, [pc, #44]	; (8001994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001972:	f7ff fd01 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001976:	f003 fab5 	bl	8004ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197a:	f7ff f8eb 	bl	8000b54 <main>
  bx  lr    
 800197e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800198c:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 8001990:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001994:	20000114 	.word	0x20000114

08001998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_Init+0x40>)
 80019a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_Init+0x40>)
 80019b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x40>)
 80019be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fba3 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fbc8 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fbbb 	bl	800217a <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 fb83 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000110 	.word	0x20000110

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000110 	.word	0x20000110

08001a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e033      	b.n	8001afe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fd86 	bl	80005b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ac6:	f023 0302 	bic.w	r3, r3, #2
 8001aca:	f043 0202 	orr.w	r2, r3, #2
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f94a 	bl	8001d6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
 8001aee:	e001      	b.n	8001af4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x1c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e113      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x244>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b09      	cmp	r3, #9
 8001b32:	d925      	bls.n	8001b80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68d9      	ldr	r1, [r3, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	3b1e      	subs	r3, #30
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43da      	mvns	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	400a      	ands	r2, r1
 8001b58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68d9      	ldr	r1, [r3, #12]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4403      	add	r3, r0
 8001b72:	3b1e      	subs	r3, #30
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	e022      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	2207      	movs	r2, #7
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4403      	add	r3, r0
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d824      	bhi.n	8001c18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b05      	subs	r3, #5
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b05      	subs	r3, #5
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
 8001c16:	e04c      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d824      	bhi.n	8001c6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b23      	subs	r3, #35	; 0x23
 8001c32:	221f      	movs	r2, #31
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	400a      	ands	r2, r1
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b23      	subs	r3, #35	; 0x23
 8001c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
 8001c68:	e023      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b41      	subs	r3, #65	; 0x41
 8001c7c:	221f      	movs	r2, #31
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	400a      	ands	r2, r1
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b41      	subs	r3, #65	; 0x41
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_ADC_ConfigChannel+0x250>)
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <HAL_ADC_ConfigChannel+0x254>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d8>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b12      	cmp	r3, #18
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_ADC_ConfigChannel+0x254>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x23a>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_ADC_ConfigChannel+0x258>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <HAL_ADC_ConfigChannel+0x1f4>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b11      	cmp	r3, #17
 8001cfa:	d122      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_ConfigChannel+0x258>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d111      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_ADC_ConfigChannel+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_ADC_ConfigChannel+0x260>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9a      	lsrs	r2, r3, #18
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	10000012 	.word	0x10000012
 8001d64:	20000000 	.word	0x20000000
 8001d68:	431bde83 	.word	0x431bde83

08001d6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d74:	4b79      	ldr	r3, [pc, #484]	; (8001f5c <ADC_Init+0x1f0>)
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	021a      	lsls	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6899      	ldr	r1, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <ADC_Init+0x1f4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d022      	beq.n	8001e4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e00f      	b.n	8001e6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0202 	bic.w	r2, r2, #2
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7e1b      	ldrb	r3, [r3, #24]
 8001e84:	005a      	lsls	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01b      	beq.n	8001ed0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	035a      	lsls	r2, r3, #13
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	e007      	b.n	8001ee0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	051a      	lsls	r2, r3, #20
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6899      	ldr	r1, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f22:	025a      	lsls	r2, r3, #9
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6899      	ldr	r1, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	029a      	lsls	r2, r3, #10
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	40012300 	.word	0x40012300
 8001f60:	0f000001 	.word	0x0f000001

08001f64 <__NVIC_SetPriorityGrouping>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_DisableIRQ>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db12      	blt.n	8002000 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	490a      	ldr	r1, [pc, #40]	; (800200c <__NVIC_DisableIRQ+0x44>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	3320      	adds	r3, #32
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff4:	f3bf 8f4f 	dsb	sy
}
 8001ff8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ffa:	f3bf 8f6f 	isb	sy
}
 8001ffe:	bf00      	nop
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff8e 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff23 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff38 	bl	8001fac <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff8e 	bl	8002064 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5d 	bl	8002010 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff2b 	bl	8001fc8 <__NVIC_DisableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffa2 	bl	80020cc <SysTick_Config>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e165      	b.n	800247c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 8154 	bne.w	8002476 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d005      	beq.n	80021e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d130      	bne.n	8002248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b03      	cmp	r3, #3
 8002252:	d017      	beq.n	8002284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d123      	bne.n	80022d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ae 	beq.w	8002476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_GPIO_Init+0x300>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a5c      	ldr	r2, [pc, #368]	; (8002494 <HAL_GPIO_Init+0x300>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b5a      	ldr	r3, [pc, #360]	; (8002494 <HAL_GPIO_Init+0x300>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002336:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_GPIO_Init+0x304>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4f      	ldr	r2, [pc, #316]	; (800249c <HAL_GPIO_Init+0x308>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x21a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4e      	ldr	r2, [pc, #312]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x216>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4d      	ldr	r2, [pc, #308]	; (80024a4 <HAL_GPIO_Init+0x310>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x212>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_GPIO_Init+0x314>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x20e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4b      	ldr	r2, [pc, #300]	; (80024ac <HAL_GPIO_Init+0x318>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x20a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x31c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x206>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a49      	ldr	r2, [pc, #292]	; (80024b4 <HAL_GPIO_Init+0x320>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x202>
 8002392:	2306      	movs	r3, #6
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 8002396:	2307      	movs	r3, #7
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x21c>
 80023ae:	2300      	movs	r3, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c0:	4935      	ldr	r1, [pc, #212]	; (8002498 <HAL_GPIO_Init+0x304>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_GPIO_Init+0x324>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_GPIO_Init+0x324>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x324>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <HAL_GPIO_Init+0x324>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x324>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_GPIO_Init+0x324>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	f67f ae96 	bls.w	80021b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40021400 	.word	0x40021400
 80024b4:	40021800 	.word	0x40021800
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e001      	b.n	80024de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_PWREx_EnableOverDrive+0x90>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_PWREx_EnableOverDrive+0x90>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_PWREx_EnableOverDrive+0x90>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_PWREx_EnableOverDrive+0x94>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002518:	f7ff faa6 	bl	8001a68 <HAL_GetTick>
 800251c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800251e:	e009      	b.n	8002534 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002520:	f7ff faa2 	bl	8001a68 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800252e:	d901      	bls.n	8002534 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e01f      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d1ee      	bne.n	8002520 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002548:	f7ff fa8e 	bl	8001a68 <HAL_GetTick>
 800254c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800254e:	e009      	b.n	8002564 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002550:	f7ff fa8a 	bl	8001a68 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255e:	d901      	bls.n	8002564 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e007      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <HAL_PWREx_EnableOverDrive+0x98>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002570:	d1ee      	bne.n	8002550 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	420e0040 	.word	0x420e0040
 8002584:	40007000 	.word	0x40007000
 8002588:	420e0044 	.word	0x420e0044

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cc      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90c      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b65      	ldr	r3, [pc, #404]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b63      	ldr	r3, [pc, #396]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b8      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e0:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	494d      	ldr	r1, [pc, #308]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d044      	beq.n	80026ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d119      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e07f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d003      	beq.n	800264a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002646:	2b03      	cmp	r3, #3
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e067      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4934      	ldr	r1, [pc, #208]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800267c:	f7ff f9f4 	bl	8001a68 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7ff f9f0 	bl	8001a68 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04f      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d20c      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x1b8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e032      	b.n	800273a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002712:	f000 f855 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002716:	4602      	mov	r2, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	5ccb      	ldrb	r3, [r1, r3]
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a09      	ldr	r2, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f954 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023c00 	.word	0x40023c00
 8002748:	40023800 	.word	0x40023800
 800274c:	08004fa8 	.word	0x08004fa8
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_RCC_GetHCLKFreq+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff0 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0a9b      	lsrs	r3, r3, #10
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	08004fb8 	.word	0x08004fb8

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffdc 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	0b5b      	lsrs	r3, r3, #13
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	08004fb8 	.word	0x08004fb8

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c4:	b0a6      	sub	sp, #152	; 0x98
 80027c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e6:	4bc8      	ldr	r3, [pc, #800]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	f200 817e 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x330>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002831 	.word	0x08002831
 8002800:	08002af1 	.word	0x08002af1
 8002804:	08002af1 	.word	0x08002af1
 8002808:	08002af1 	.word	0x08002af1
 800280c:	08002839 	.word	0x08002839
 8002810:	08002af1 	.word	0x08002af1
 8002814:	08002af1 	.word	0x08002af1
 8002818:	08002af1 	.word	0x08002af1
 800281c:	08002841 	.word	0x08002841
 8002820:	08002af1 	.word	0x08002af1
 8002824:	08002af1 	.word	0x08002af1
 8002828:	08002af1 	.word	0x08002af1
 800282c:	080029ab 	.word	0x080029ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4bb6      	ldr	r3, [pc, #728]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002836:	e15f      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4bb5      	ldr	r3, [pc, #724]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x350>)
 800283a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800283e:	e15b      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4bb1      	ldr	r3, [pc, #708]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284c:	4bae      	ldr	r3, [pc, #696]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d031      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4bab      	ldr	r3, [pc, #684]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	66bb      	str	r3, [r7, #104]	; 0x68
 8002862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286a:	663b      	str	r3, [r7, #96]	; 0x60
 800286c:	2300      	movs	r3, #0
 800286e:	667b      	str	r3, [r7, #100]	; 0x64
 8002870:	4ba7      	ldr	r3, [pc, #668]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x350>)
 8002872:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002876:	462a      	mov	r2, r5
 8002878:	fb03 f202 	mul.w	r2, r3, r2
 800287c:	2300      	movs	r3, #0
 800287e:	4621      	mov	r1, r4
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	4aa2      	ldr	r2, [pc, #648]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x350>)
 8002888:	4621      	mov	r1, r4
 800288a:	fba1 1202 	umull	r1, r2, r1, r2
 800288e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002890:	460a      	mov	r2, r1
 8002892:	67ba      	str	r2, [r7, #120]	; 0x78
 8002894:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002896:	4413      	add	r3, r2
 8002898:	67fb      	str	r3, [r7, #124]	; 0x7c
 800289a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289e:	2200      	movs	r2, #0
 80028a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80028a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80028ac:	f7fd fcaa 	bl	8000204 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028ba:	e064      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028bc:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	099b      	lsrs	r3, r3, #6
 80028c2:	2200      	movs	r2, #0
 80028c4:	653b      	str	r3, [r7, #80]	; 0x50
 80028c6:	657a      	str	r2, [r7, #84]	; 0x54
 80028c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80028d0:	2300      	movs	r3, #0
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80028d8:	4622      	mov	r2, r4
 80028da:	462b      	mov	r3, r5
 80028dc:	f04f 0000 	mov.w	r0, #0
 80028e0:	f04f 0100 	mov.w	r1, #0
 80028e4:	0159      	lsls	r1, r3, #5
 80028e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ea:	0150      	lsls	r0, r2, #5
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4621      	mov	r1, r4
 80028f2:	1a51      	subs	r1, r2, r1
 80028f4:	6139      	str	r1, [r7, #16]
 80028f6:	4629      	mov	r1, r5
 80028f8:	eb63 0301 	sbc.w	r3, r3, r1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800290a:	4659      	mov	r1, fp
 800290c:	018b      	lsls	r3, r1, #6
 800290e:	4651      	mov	r1, sl
 8002910:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002914:	4651      	mov	r1, sl
 8002916:	018a      	lsls	r2, r1, #6
 8002918:	4651      	mov	r1, sl
 800291a:	ebb2 0801 	subs.w	r8, r2, r1
 800291e:	4659      	mov	r1, fp
 8002920:	eb63 0901 	sbc.w	r9, r3, r1
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002930:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002934:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002938:	4690      	mov	r8, r2
 800293a:	4699      	mov	r9, r3
 800293c:	4623      	mov	r3, r4
 800293e:	eb18 0303 	adds.w	r3, r8, r3
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	462b      	mov	r3, r5
 8002946:	eb49 0303 	adc.w	r3, r9, r3
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002958:	4629      	mov	r1, r5
 800295a:	028b      	lsls	r3, r1, #10
 800295c:	4621      	mov	r1, r4
 800295e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002962:	4621      	mov	r1, r4
 8002964:	028a      	lsls	r2, r1, #10
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296e:	2200      	movs	r2, #0
 8002970:	643b      	str	r3, [r7, #64]	; 0x40
 8002972:	647a      	str	r2, [r7, #68]	; 0x44
 8002974:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002978:	f7fd fc44 	bl	8000204 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002986:	4b60      	ldr	r3, [pc, #384]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	3301      	adds	r3, #1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002998:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800299c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80029a8:	e0a6      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029aa:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02a      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	2200      	movs	r2, #0
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80029cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029d4:	2100      	movs	r1, #0
 80029d6:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x350>)
 80029d8:	fb03 f201 	mul.w	r2, r3, r1
 80029dc:	2300      	movs	r3, #0
 80029de:	fb00 f303 	mul.w	r3, r0, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x350>)
 80029e6:	fba0 1202 	umull	r1, r2, r0, r2
 80029ea:	677a      	str	r2, [r7, #116]	; 0x74
 80029ec:	460a      	mov	r2, r1
 80029ee:	673a      	str	r2, [r7, #112]	; 0x70
 80029f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029f2:	4413      	add	r3, r2
 80029f4:	677b      	str	r3, [r7, #116]	; 0x74
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fa:	2200      	movs	r2, #0
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
 80029fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002a00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002a08:	f7fd fbfc 	bl	8000204 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a16:	e05b      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	2200      	movs	r2, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	623b      	str	r3, [r7, #32]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0159      	lsls	r1, r3, #5
 8002a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a46:	0150      	lsls	r0, r2, #5
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4641      	mov	r1, r8
 8002a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a52:	4649      	mov	r1, r9
 8002a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a70:	eb63 050b 	sbc.w	r5, r3, fp
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	00eb      	lsls	r3, r5, #3
 8002a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a82:	00e2      	lsls	r2, r4, #3
 8002a84:	4614      	mov	r4, r2
 8002a86:	461d      	mov	r5, r3
 8002a88:	4643      	mov	r3, r8
 8002a8a:	18e3      	adds	r3, r4, r3
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	464b      	mov	r3, r9
 8002a90:	eb45 0303 	adc.w	r3, r5, r3
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	028b      	lsls	r3, r1, #10
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aac:	4621      	mov	r1, r4
 8002aae:	028a      	lsls	r2, r1, #10
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	61fa      	str	r2, [r7, #28]
 8002abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac2:	f7fd fb9f 	bl	8000204 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4613      	mov	r3, r2
 8002acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0f1b      	lsrs	r3, r3, #28
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3798      	adds	r7, #152	; 0x98
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	016e3600 	.word	0x016e3600

08002b14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e28d      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8083 	beq.w	8002c3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b34:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b40:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d106      	bne.n	8002b5a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b4c:	4b8e      	ldr	r3, [pc, #568]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d00c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b88      	ldr	r3, [pc, #544]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b84      	ldr	r3, [pc, #528]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x124>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d157      	bne.n	8002c38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e25a      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x90>
 8002b96:	4b7c      	ldr	r3, [pc, #496]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a7b      	ldr	r2, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xcc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xb4>
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a72      	ldr	r2, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xcc>
 8002bc8:	4b6f      	ldr	r3, [pc, #444]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a6e      	ldr	r2, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b6c      	ldr	r3, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6b      	ldr	r2, [pc, #428]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe ff3e 	bl	8001a68 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe ff3a 	bl	8001a68 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e21f      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xdc>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe ff2a 	bl	8001a68 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe ff26 	bl	8001a68 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e20b      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x104>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d06f      	beq.n	8002d26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c46:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d017      	beq.n	8002c82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c52:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c5e:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x186>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1d3      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4937      	ldr	r1, [pc, #220]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCC_OscConfig+0x278>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fed3 	bl	8001a68 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fecf 	bl	8001a68 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e1b4      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4925      	ldr	r1, [pc, #148]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
 8002cf8:	e015      	b.n	8002d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_OscConfig+0x278>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe feb2 	bl	8001a68 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe feae 	bl	8001a68 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e193      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d036      	beq.n	8002da0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d40:	f7fe fe92 	bl	8001a68 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fe8e 	bl	8001a68 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e173      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x234>
 8002d66:	e01b      	b.n	8002da0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fe7b 	bl	8001a68 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d74:	e00e      	b.n	8002d94 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d76:	f7fe fe77 	bl	8001a68 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d907      	bls.n	8002d94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e15c      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	42470000 	.word	0x42470000
 8002d90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ea      	bne.n	8002d76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8097 	beq.w	8002edc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db2:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a7e      	ldr	r2, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	4b79      	ldr	r3, [pc, #484]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d118      	bne.n	8002e1c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe fe37 	bl	8001a68 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfe:	f7fe fe33 	bl	8001a68 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e118      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x4b0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x31e>
 8002e24:	4b66      	ldr	r3, [pc, #408]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a65      	ldr	r2, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	e01c      	b.n	8002e6c <HAL_RCC_OscConfig+0x358>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x340>
 8002e3a:	4b61      	ldr	r3, [pc, #388]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a60      	ldr	r2, [pc, #384]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a5d      	ldr	r2, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0x358>
 8002e54:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a59      	ldr	r2, [pc, #356]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a56      	ldr	r2, [pc, #344]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d015      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe fdf8 	bl	8001a68 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fdf4 	bl	8001a68 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0d7      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e92:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ee      	beq.n	8002e7c <HAL_RCC_OscConfig+0x368>
 8002e9e:	e014      	b.n	8002eca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fde2 	bl	8001a68 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fdde 	bl	8001a68 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e0c1      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebe:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1ee      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80ad 	beq.w	8003040 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d060      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d145      	bne.n	8002f86 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_RCC_OscConfig+0x4b4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fdb2 	bl	8001a68 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe fdae 	bl	8001a68 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e093      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	019b      	lsls	r3, r3, #6
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	071b      	lsls	r3, r3, #28
 8002f52:	491b      	ldr	r1, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4b4>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fd83 	bl	8001a68 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe fd7f 	bl	8001a68 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e064      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x452>
 8002f84:	e05c      	b.n	8003040 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_OscConfig+0x4b4>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fd6c 	bl	8001a68 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe fd68 	bl	8001a68 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04d      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x480>
 8002fb2:	e045      	b.n	8003040 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e040      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_RCC_OscConfig+0x538>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d030      	beq.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d129      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d122      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d119      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d10f      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e041      	b.n	80030e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe fa06 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f000 fa10 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e041      	b.n	8003184 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f839 	bl	800318c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f000 f9c1 	bl	80034b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0ae      	b.n	800331c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	f200 809f 	bhi.w	800330c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031ce:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	08003209 	.word	0x08003209
 80031d8:	0800330d 	.word	0x0800330d
 80031dc:	0800330d 	.word	0x0800330d
 80031e0:	0800330d 	.word	0x0800330d
 80031e4:	08003249 	.word	0x08003249
 80031e8:	0800330d 	.word	0x0800330d
 80031ec:	0800330d 	.word	0x0800330d
 80031f0:	0800330d 	.word	0x0800330d
 80031f4:	0800328b 	.word	0x0800328b
 80031f8:	0800330d 	.word	0x0800330d
 80031fc:	0800330d 	.word	0x0800330d
 8003200:	0800330d 	.word	0x0800330d
 8003204:	080032cb 	.word	0x080032cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f9f0 	bl	80035f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e064      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa40 	bl	80036d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	619a      	str	r2, [r3, #24]
      break;
 8003288:	e043      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fa95 	bl	80037c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0208 	orr.w	r2, r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
      break;
 80032c8:	e023      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fae9 	bl	80038a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
      break;
 800330a:	e002      	b.n	8003312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
      break;
 8003310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800331a:	7dfb      	ldrb	r3, [r7, #23]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_TIM_ConfigClockSource+0x1c>
 800333c:	2302      	movs	r3, #2
 800333e:	e0b4      	b.n	80034aa <HAL_TIM_ConfigClockSource+0x186>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800335e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003378:	d03e      	beq.n	80033f8 <HAL_TIM_ConfigClockSource+0xd4>
 800337a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337e:	f200 8087 	bhi.w	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	f000 8086 	beq.w	8003496 <HAL_TIM_ConfigClockSource+0x172>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d87f      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b70      	cmp	r3, #112	; 0x70
 8003392:	d01a      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0xa6>
 8003394:	2b70      	cmp	r3, #112	; 0x70
 8003396:	d87b      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d050      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x11a>
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d877      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d03c      	beq.n	800341e <HAL_TIM_ConfigClockSource+0xfa>
 80033a4:	2b50      	cmp	r3, #80	; 0x50
 80033a6:	d873      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d058      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x13a>
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d86f      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d064      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d86b      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d060      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d867      	bhi.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05c      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d05a      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x15a>
 80033c8:	e062      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f000 fb35 	bl	8003a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	609a      	str	r2, [r3, #8]
      break;
 80033f6:	e04f      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f000 fb1e 	bl	8003a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341a:	609a      	str	r2, [r3, #8]
      break;
 800341c:	e03c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 fa92 	bl	8003954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2150      	movs	r1, #80	; 0x50
 8003436:	4618      	mov	r0, r3
 8003438:	f000 faeb 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 800343c:	e02c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fab1 	bl	80039b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2160      	movs	r1, #96	; 0x60
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fadb 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 800345c:	e01c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fa72 	bl	8003954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	4618      	mov	r0, r3
 8003478:	f000 facb 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 800347c:	e00c      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f000 fac2 	bl	8003a12 <TIM_ITRx_SetConfig>
      break;
 800348e:	e003      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e000      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d00f      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a3d      	ldr	r2, [pc, #244]	; (80035cc <TIM_Base_SetConfig+0x118>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <TIM_Base_SetConfig+0x11c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <TIM_Base_SetConfig+0x120>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d108      	bne.n	8003506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003514:	d027      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <TIM_Base_SetConfig+0x118>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d023      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <TIM_Base_SetConfig+0x11c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01f      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2a      	ldr	r2, [pc, #168]	; (80035d4 <TIM_Base_SetConfig+0x120>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d01b      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a29      	ldr	r2, [pc, #164]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d017      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <TIM_Base_SetConfig+0x128>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <TIM_Base_SetConfig+0x12c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00f      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <TIM_Base_SetConfig+0x130>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00b      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <TIM_Base_SetConfig+0x134>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a24      	ldr	r2, [pc, #144]	; (80035ec <TIM_Base_SetConfig+0x138>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d003      	beq.n	8003566 <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <TIM_Base_SetConfig+0x13c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d108      	bne.n	8003578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <TIM_Base_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0xf8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <TIM_Base_SetConfig+0x124>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40010400 	.word	0x40010400
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800
 80035e8:	40001800 	.word	0x40001800
 80035ec:	40001c00 	.word	0x40001c00
 80035f0:	40002000 	.word	0x40002000

080035f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f023 0302 	bic.w	r3, r3, #2
 800363c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a20      	ldr	r2, [pc, #128]	; (80036cc <TIM_OC1_SetConfig+0xd8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC1_SetConfig+0x64>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <TIM_OC1_SetConfig+0xdc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d10c      	bne.n	8003672 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0308 	bic.w	r3, r3, #8
 800365e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a15      	ldr	r2, [pc, #84]	; (80036cc <TIM_OC1_SetConfig+0xd8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_OC1_SetConfig+0x8e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <TIM_OC1_SetConfig+0xdc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d111      	bne.n	80036a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40010400 	.word	0x40010400

080036d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0210 	bic.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <TIM_OC2_SetConfig+0xe4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC2_SetConfig+0x68>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a21      	ldr	r2, [pc, #132]	; (80037bc <TIM_OC2_SetConfig+0xe8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10d      	bne.n	8003758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003756:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <TIM_OC2_SetConfig+0xe4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC2_SetConfig+0x94>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a16      	ldr	r2, [pc, #88]	; (80037bc <TIM_OC2_SetConfig+0xe8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d113      	bne.n	8003790 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800376e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40010400 	.word	0x40010400

080037c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <TIM_OC3_SetConfig+0xe0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_OC3_SetConfig+0x66>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <TIM_OC3_SetConfig+0xe4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10d      	bne.n	8003842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <TIM_OC3_SetConfig+0xe0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d003      	beq.n	8003852 <TIM_OC3_SetConfig+0x92>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <TIM_OC3_SetConfig+0xe4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d113      	bne.n	800387a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	621a      	str	r2, [r3, #32]
}
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400

080038a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	031b      	lsls	r3, r3, #12
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <TIM_OC4_SetConfig+0xa4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d003      	beq.n	8003910 <TIM_OC4_SetConfig+0x68>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a11      	ldr	r2, [pc, #68]	; (8003950 <TIM_OC4_SetConfig+0xa8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d109      	bne.n	8003924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	019b      	lsls	r3, r3, #6
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000
 8003950:	40010400 	.word	0x40010400

08003954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f023 0201 	bic.w	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 030a 	bic.w	r3, r3, #10
 8003990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b087      	sub	sp, #28
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f023 0210 	bic.w	r2, r3, #16
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	031b      	lsls	r3, r3, #12
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 0307 	orr.w	r3, r3, #7
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	609a      	str	r2, [r3, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e05a      	b.n	8003b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d022      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d01d      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10c      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40010400 	.word	0x40010400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40001800 	.word	0x40001800

08003b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e03f      	b.n	8003c12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fe58 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2224      	movs	r2, #36	; 0x24
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f829 	bl	8003c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695a      	ldr	r2, [r3, #20]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c20:	b0c0      	sub	sp, #256	; 0x100
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	68d9      	ldr	r1, [r3, #12]
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	ea40 0301 	orr.w	r3, r0, r1
 8003c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c74:	f021 010c 	bic.w	r1, r1, #12
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c82:	430b      	orrs	r3, r1
 8003c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	6999      	ldr	r1, [r3, #24]
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	ea40 0301 	orr.w	r3, r0, r1
 8003ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b8f      	ldr	r3, [pc, #572]	; (8003ee8 <UART_SetConfig+0x2cc>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d005      	beq.n	8003cbc <UART_SetConfig+0xa0>
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b8d      	ldr	r3, [pc, #564]	; (8003eec <UART_SetConfig+0x2d0>)
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d104      	bne.n	8003cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7fe fd6c 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8003cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cc4:	e003      	b.n	8003cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f7fe fd53 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd8:	f040 810c 	bne.w	8003ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cee:	4622      	mov	r2, r4
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cfe:	4621      	mov	r1, r4
 8003d00:	eb12 0801 	adds.w	r8, r2, r1
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb43 0901 	adc.w	r9, r3, r1
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1e:	4690      	mov	r8, r2
 8003d20:	4699      	mov	r9, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	eb18 0303 	adds.w	r3, r8, r3
 8003d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	eb49 0303 	adc.w	r3, r9, r3
 8003d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	18db      	adds	r3, r3, r3
 8003d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d50:	4613      	mov	r3, r2
 8003d52:	eb42 0303 	adc.w	r3, r2, r3
 8003d56:	657b      	str	r3, [r7, #84]	; 0x54
 8003d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d60:	f7fc fa50 	bl	8000204 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	011c      	lsls	r4, r3, #4
 8003d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d94:	4641      	mov	r1, r8
 8003d96:	eb12 0a01 	adds.w	sl, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db4:	4692      	mov	sl, r2
 8003db6:	469b      	mov	fp, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	eb1a 0303 	adds.w	r3, sl, r3
 8003dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003de0:	460b      	mov	r3, r1
 8003de2:	18db      	adds	r3, r3, r3
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
 8003de6:	4613      	mov	r3, r2
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
 8003dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003df6:	f7fc fa05 	bl	8000204 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003e02:	fba3 2301 	umull	r2, r3, r3, r1
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2264      	movs	r2, #100	; 0x64
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	1acb      	subs	r3, r1, r3
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003e18:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e24:	441c      	add	r4, r3
 8003e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	1891      	adds	r1, r2, r2
 8003e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e40:	415b      	adcs	r3, r3
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e48:	4641      	mov	r1, r8
 8003e4a:	1851      	adds	r1, r2, r1
 8003e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e4e:	4649      	mov	r1, r9
 8003e50:	414b      	adcs	r3, r1
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e60:	4659      	mov	r1, fp
 8003e62:	00cb      	lsls	r3, r1, #3
 8003e64:	4651      	mov	r1, sl
 8003e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e6a:	4651      	mov	r1, sl
 8003e6c:	00ca      	lsls	r2, r1, #3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	4642      	mov	r2, r8
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	460a      	mov	r2, r1
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	18db      	adds	r3, r3, r3
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eb2:	f7fc f9a7 	bl	8000204 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <UART_SetConfig+0x2d4>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 0207 	and.w	r2, r3, #7
 8003eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4422      	add	r2, r4
 8003ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee4:	e105      	b.n	80040f2 <UART_SetConfig+0x4d6>
 8003ee6:	bf00      	nop
 8003ee8:	40011000 	.word	0x40011000
 8003eec:	40011400 	.word	0x40011400
 8003ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f06:	4642      	mov	r2, r8
 8003f08:	464b      	mov	r3, r9
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	6239      	str	r1, [r7, #32]
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f16:	4641      	mov	r1, r8
 8003f18:	1854      	adds	r4, r2, r1
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	eb43 0501 	adc.w	r5, r3, r1
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	00eb      	lsls	r3, r5, #3
 8003f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2e:	00e2      	lsls	r2, r4, #3
 8003f30:	4614      	mov	r4, r2
 8003f32:	461d      	mov	r5, r3
 8003f34:	4643      	mov	r3, r8
 8003f36:	18e3      	adds	r3, r4, r3
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	eb45 0303 	adc.w	r3, r5, r3
 8003f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f62:	4629      	mov	r1, r5
 8003f64:	008b      	lsls	r3, r1, #2
 8003f66:	4621      	mov	r1, r4
 8003f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	008a      	lsls	r2, r1, #2
 8003f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f74:	f7fc f946 	bl	8000204 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4b60      	ldr	r3, [pc, #384]	; (8004100 <UART_SetConfig+0x4e4>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011c      	lsls	r4, r3, #4
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	61b9      	str	r1, [r7, #24]
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa8:	4641      	mov	r1, r8
 8003faa:	1851      	adds	r1, r2, r1
 8003fac:	6139      	str	r1, [r7, #16]
 8003fae:	4649      	mov	r1, r9
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc0:	4659      	mov	r1, fp
 8003fc2:	00cb      	lsls	r3, r1, #3
 8003fc4:	4651      	mov	r1, sl
 8003fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fca:	4651      	mov	r1, sl
 8003fcc:	00ca      	lsls	r2, r1, #3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fdc:	464b      	mov	r3, r9
 8003fde:	460a      	mov	r2, r1
 8003fe0:	eb42 0303 	adc.w	r3, r2, r3
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004000:	4649      	mov	r1, r9
 8004002:	008b      	lsls	r3, r1, #2
 8004004:	4641      	mov	r1, r8
 8004006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400a:	4641      	mov	r1, r8
 800400c:	008a      	lsls	r2, r1, #2
 800400e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004012:	f7fc f8f7 	bl	8000204 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <UART_SetConfig+0x4e4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	; 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	3332      	adds	r3, #50	; 0x32
 800402e:	4a34      	ldr	r2, [pc, #208]	; (8004100 <UART_SetConfig+0x4e4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403a:	441c      	add	r4, r3
 800403c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004040:	2200      	movs	r2, #0
 8004042:	673b      	str	r3, [r7, #112]	; 0x70
 8004044:	677a      	str	r2, [r7, #116]	; 0x74
 8004046:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800404a:	4642      	mov	r2, r8
 800404c:	464b      	mov	r3, r9
 800404e:	1891      	adds	r1, r2, r2
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	415b      	adcs	r3, r3
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800405a:	4641      	mov	r1, r8
 800405c:	1851      	adds	r1, r2, r1
 800405e:	6039      	str	r1, [r7, #0]
 8004060:	4649      	mov	r1, r9
 8004062:	414b      	adcs	r3, r1
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004072:	4659      	mov	r1, fp
 8004074:	00cb      	lsls	r3, r1, #3
 8004076:	4651      	mov	r1, sl
 8004078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407c:	4651      	mov	r1, sl
 800407e:	00ca      	lsls	r2, r1, #3
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	4603      	mov	r3, r0
 8004086:	4642      	mov	r2, r8
 8004088:	189b      	adds	r3, r3, r2
 800408a:	66bb      	str	r3, [r7, #104]	; 0x68
 800408c:	464b      	mov	r3, r9
 800408e:	460a      	mov	r2, r1
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	663b      	str	r3, [r7, #96]	; 0x60
 80040a0:	667a      	str	r2, [r7, #100]	; 0x64
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040ae:	4649      	mov	r1, r9
 80040b0:	008b      	lsls	r3, r1, #2
 80040b2:	4641      	mov	r1, r8
 80040b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b8:	4641      	mov	r1, r8
 80040ba:	008a      	lsls	r2, r1, #2
 80040bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040c0:	f7fc f8a0 	bl	8000204 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <UART_SetConfig+0x4e4>)
 80040ca:	fba3 1302 	umull	r1, r3, r3, r2
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2164      	movs	r1, #100	; 0x64
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	3332      	adds	r3, #50	; 0x32
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <UART_SetConfig+0x4e4>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4422      	add	r2, r4
 80040f0:	609a      	str	r2, [r3, #8]
}
 80040f2:	bf00      	nop
 80040f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	51eb851f 	.word	0x51eb851f

08004104 <LL_EXTI_EnableIT_0_31>:
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <LL_EXTI_EnableIT_0_31+0x20>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4904      	ldr	r1, [pc, #16]	; (8004124 <LL_EXTI_EnableIT_0_31+0x20>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40013c00 	.word	0x40013c00

08004128 <LL_EXTI_DisableIT_0_31>:
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <LL_EXTI_DisableIT_0_31+0x24>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	43db      	mvns	r3, r3
 8004138:	4904      	ldr	r1, [pc, #16]	; (800414c <LL_EXTI_DisableIT_0_31+0x24>)
 800413a:	4013      	ands	r3, r2
 800413c:	600b      	str	r3, [r1, #0]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40013c00 	.word	0x40013c00

08004150 <LL_EXTI_EnableEvent_0_31>:
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <LL_EXTI_EnableEvent_0_31+0x20>)
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	4904      	ldr	r1, [pc, #16]	; (8004170 <LL_EXTI_EnableEvent_0_31+0x20>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40013c00 	.word	0x40013c00

08004174 <LL_EXTI_DisableEvent_0_31>:
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <LL_EXTI_DisableEvent_0_31+0x24>)
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	43db      	mvns	r3, r3
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004186:	4013      	ands	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40013c00 	.word	0x40013c00

0800419c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	4904      	ldr	r1, [pc, #16]	; (80041bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40013c00 	.word	0x40013c00

080041c0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40013c00 	.word	0x40013c00

080041e8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4904      	ldr	r1, [pc, #16]	; (8004208 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60cb      	str	r3, [r1, #12]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40013c00 	.word	0x40013c00

0800420c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	43db      	mvns	r3, r3
 800421c:	4904      	ldr	r1, [pc, #16]	; (8004230 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800421e:	4013      	ands	r3, r2
 8004220:	60cb      	str	r3, [r1, #12]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40013c00 	.word	0x40013c00

08004234 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800423c:	2300      	movs	r3, #0
 800423e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d065      	beq.n	8004314 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d06c      	beq.n	800432a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	795b      	ldrb	r3, [r3, #5]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d01c      	beq.n	8004292 <LL_EXTI_Init+0x5e>
 8004258:	2b02      	cmp	r3, #2
 800425a:	dc25      	bgt.n	80042a8 <LL_EXTI_Init+0x74>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <LL_EXTI_Init+0x32>
 8004260:	2b01      	cmp	r3, #1
 8004262:	d00b      	beq.n	800427c <LL_EXTI_Init+0x48>
 8004264:	e020      	b.n	80042a8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff82 	bl	8004174 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff45 	bl	8004104 <LL_EXTI_EnableIT_0_31>
          break;
 800427a:	e018      	b.n	80042ae <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ff51 	bl	8004128 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ff60 	bl	8004150 <LL_EXTI_EnableEvent_0_31>
          break;
 8004290:	e00d      	b.n	80042ae <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ff34 	bl	8004104 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff55 	bl	8004150 <LL_EXTI_EnableEvent_0_31>
          break;
 80042a6:	e002      	b.n	80042ae <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
          break;
 80042ac:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	799b      	ldrb	r3, [r3, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d039      	beq.n	800432a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	799b      	ldrb	r3, [r3, #6]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d01c      	beq.n	80042f8 <LL_EXTI_Init+0xc4>
 80042be:	2b03      	cmp	r3, #3
 80042c0:	dc25      	bgt.n	800430e <LL_EXTI_Init+0xda>
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d002      	beq.n	80042cc <LL_EXTI_Init+0x98>
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d00b      	beq.n	80042e2 <LL_EXTI_Init+0xae>
 80042ca:	e020      	b.n	800430e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff ff9b 	bl	800420c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff5e 	bl	800419c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80042e0:	e024      	b.n	800432c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ff6a 	bl	80041c0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff79 	bl	80041e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80042f6:	e019      	b.n	800432c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff4d 	bl	800419c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ff6e 	bl	80041e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800430c:	e00e      	b.n	800432c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
            break;
 8004312:	e00b      	b.n	800432c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff05 	bl	8004128 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff26 	bl	8004174 <LL_EXTI_DisableEvent_0_31>
 8004328:	e000      	b.n	800432c <LL_EXTI_Init+0xf8>
      }
 800432a:	bf00      	nop
  }
  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <LL_GPIO_SetPinMode>:
{
 8004336:	b480      	push	{r7}
 8004338:	b089      	sub	sp, #36	; 0x24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	613b      	str	r3, [r7, #16]
  return result;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2103      	movs	r1, #3
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	401a      	ands	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa93 f3a3 	rbit	r3, r3
 8004370:	61bb      	str	r3, [r7, #24]
  return result;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	431a      	orrs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	bf00      	nop
 800438a:	3724      	adds	r7, #36	; 0x24
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_GPIO_SetPinOutputType>:
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	401a      	ands	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	605a      	str	r2, [r3, #4]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_GPIO_SetPinSpeed>:
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	613b      	str	r3, [r7, #16]
  return result;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2103      	movs	r1, #3
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	609a      	str	r2, [r3, #8]
}
 8004416:	bf00      	nop
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_GPIO_SetPinPull>:
{
 8004422:	b480      	push	{r7}
 8004424:	b089      	sub	sp, #36	; 0x24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	613b      	str	r3, [r7, #16]
  return result;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2103      	movs	r1, #3
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	401a      	ands	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	61bb      	str	r3, [r7, #24]
  return result;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	431a      	orrs	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	60da      	str	r2, [r3, #12]
}
 8004474:	bf00      	nop
 8004476:	3724      	adds	r7, #36	; 0x24
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_GPIO_SetAFPin_0_7>:
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	613b      	str	r3, [r7, #16]
  return result;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	210f      	movs	r1, #15
 80044a8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	61bb      	str	r3, [r7, #24]
  return result;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_GPIO_SetAFPin_8_15>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b089      	sub	sp, #36	; 0x24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	613b      	str	r3, [r7, #16]
  return result;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	210f      	movs	r1, #15
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	0a1b      	lsrs	r3, r3, #8
 8004514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	61bb      	str	r3, [r7, #24]
  return result;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	431a      	orrs	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004534:	bf00      	nop
 8004536:	3724      	adds	r7, #36	; 0x24
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	613b      	str	r3, [r7, #16]
  return result;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800456a:	e050      	b.n	800460e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d042      	beq.n	8004608 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d003      	beq.n	8004592 <LL_GPIO_Init+0x52>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d10d      	bne.n	80045ae <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	461a      	mov	r2, r3
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ff12 	bl	80043c4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	461a      	mov	r2, r3
 80045a6:	69b9      	ldr	r1, [r7, #24]
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fef3 	bl	8004394 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	461a      	mov	r2, r3
 80045b4:	69b9      	ldr	r1, [r7, #24]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ff33 	bl	8004422 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d11a      	bne.n	80045fa <LL_GPIO_Init+0xba>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	60bb      	str	r3, [r7, #8]
  return result;
 80045d0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b07      	cmp	r3, #7
 80045da:	d807      	bhi.n	80045ec <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	461a      	mov	r2, r3
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff4b 	bl	8004480 <LL_GPIO_SetAFPin_0_7>
 80045ea:	e006      	b.n	80045fa <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	461a      	mov	r2, r3
 80045f2:	69b9      	ldr	r1, [r7, #24]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ff72 	bl	80044de <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	461a      	mov	r2, r3
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fe97 	bl	8004336 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1a7      	bne.n	800456c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3720      	adds	r7, #32
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <LL_RCC_GetSysClkSource+0x18>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800

08004644 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <LL_RCC_GetAHBPrescaler+0x18>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800

08004660 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800

0800467c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <LL_RCC_PLL_GetN+0x18>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40023800 	.word	0x40023800

080046d0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <LL_RCC_PLL_GetP+0x18>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <LL_RCC_PLL_GetR+0x18>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800

08004708 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <LL_RCC_PLL_GetDivider+0x18>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800472c:	f000 f820 	bl	8004770 <RCC_GetSystemClockFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f85c 	bl	80047f8 <RCC_GetHCLKClockFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f86a 	bl	8004824 <RCC_GetPCLK1ClockFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f876 	bl	800484c <RCC_GetPCLK2ClockFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800477a:	f7ff ff55 	bl	8004628 <LL_RCC_GetSysClkSource>
 800477e:	4603      	mov	r3, r0
 8004780:	2b0c      	cmp	r3, #12
 8004782:	d82d      	bhi.n	80047e0 <RCC_GetSystemClockFreq+0x70>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <RCC_GetSystemClockFreq+0x1c>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047e1 	.word	0x080047e1
 8004794:	080047e1 	.word	0x080047e1
 8004798:	080047e1 	.word	0x080047e1
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047e1 	.word	0x080047e1
 80047a4:	080047e1 	.word	0x080047e1
 80047a8:	080047e1 	.word	0x080047e1
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	080047e1 	.word	0x080047e1
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047d7 	.word	0x080047d7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <RCC_GetSystemClockFreq+0x80>)
 80047c2:	607b      	str	r3, [r7, #4]
      break;
 80047c4:	e00f      	b.n	80047e6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <RCC_GetSystemClockFreq+0x84>)
 80047c8:	607b      	str	r3, [r7, #4]
      break;
 80047ca:	e00c      	b.n	80047e6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80047cc:	2008      	movs	r0, #8
 80047ce:	f000 f851 	bl	8004874 <RCC_PLL_GetFreqDomain_SYS>
 80047d2:	6078      	str	r0, [r7, #4]
      break;
 80047d4:	e007      	b.n	80047e6 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80047d6:	200c      	movs	r0, #12
 80047d8:	f000 f84c 	bl	8004874 <RCC_PLL_GetFreqDomain_SYS>
 80047dc:	6078      	str	r0, [r7, #4]
      break;
 80047de:	e002      	b.n	80047e6 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <RCC_GetSystemClockFreq+0x80>)
 80047e2:	607b      	str	r3, [r7, #4]
      break;
 80047e4:	bf00      	nop
  }

  return frequency;
 80047e6:	687b      	ldr	r3, [r7, #4]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	016e3600 	.word	0x016e3600

080047f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004800:	f7ff ff20 	bl	8004644 <LL_RCC_GetAHBPrescaler>
 8004804:	4603      	mov	r3, r0
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	4a04      	ldr	r2, [pc, #16]	; (8004820 <RCC_GetHCLKClockFreq+0x28>)
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	40d3      	lsrs	r3, r2
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	08004fa8 	.word	0x08004fa8

08004824 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800482c:	f7ff ff18 	bl	8004660 <LL_RCC_GetAPB1Prescaler>
 8004830:	4603      	mov	r3, r0
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <RCC_GetPCLK1ClockFreq+0x24>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	461a      	mov	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	40d3      	lsrs	r3, r2
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	08004fb8 	.word	0x08004fb8

0800484c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004854:	f7ff ff12 	bl	800467c <LL_RCC_GetAPB2Prescaler>
 8004858:	4603      	mov	r3, r0
 800485a:	0b5b      	lsrs	r3, r3, #13
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <RCC_GetPCLK2ClockFreq+0x24>)
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	461a      	mov	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	40d3      	lsrs	r3, r2
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	08004fb8 	.word	0x08004fb8

08004874 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004888:	f7ff ff06 	bl	8004698 <LL_RCC_PLL_GetMainSource>
 800488c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489a:	d003      	beq.n	80048a4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800489c:	e005      	b.n	80048aa <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80048a0:	617b      	str	r3, [r7, #20]
      break;
 80048a2:	e005      	b.n	80048b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80048a4:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80048a6:	617b      	str	r3, [r7, #20]
      break;
 80048a8:	e002      	b.n	80048b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80048aa:	4b19      	ldr	r3, [pc, #100]	; (8004910 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80048ac:	617b      	str	r3, [r7, #20]
      break;
 80048ae:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d114      	bne.n	80048e0 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80048b6:	f7ff ff27 	bl	8004708 <LL_RCC_PLL_GetDivider>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fbb3 f4f2 	udiv	r4, r3, r2
 80048c2:	f7ff fef7 	bl	80046b4 <LL_RCC_PLL_GetN>
 80048c6:	4603      	mov	r3, r0
 80048c8:	fb03 f404 	mul.w	r4, r3, r4
 80048cc:	f7ff ff00 	bl	80046d0 <LL_RCC_PLL_GetP>
 80048d0:	4603      	mov	r3, r0
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	3301      	adds	r3, #1
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fbb4 f3f3 	udiv	r3, r4, r3
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e011      	b.n	8004904 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80048e0:	f7ff ff12 	bl	8004708 <LL_RCC_PLL_GetDivider>
 80048e4:	4602      	mov	r2, r0
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	fbb3 f4f2 	udiv	r4, r3, r2
 80048ec:	f7ff fee2 	bl	80046b4 <LL_RCC_PLL_GetN>
 80048f0:	4603      	mov	r3, r0
 80048f2:	fb03 f404 	mul.w	r4, r3, r4
 80048f6:	f7ff fef9 	bl	80046ec <LL_RCC_PLL_GetR>
 80048fa:	4603      	mov	r3, r0
 80048fc:	0f1b      	lsrs	r3, r3, #28
 80048fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8004902:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004904:	693b      	ldr	r3, [r7, #16]
}
 8004906:	4618      	mov	r0, r3
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	bd90      	pop	{r4, r7, pc}
 800490e:	bf00      	nop
 8004910:	00f42400 	.word	0x00f42400
 8004914:	016e3600 	.word	0x016e3600

08004918 <LL_USART_IsEnabled>:
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_USART_SetStopBitsLength>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	611a      	str	r2, [r3, #16]
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_USART_SetHWFlowCtrl>:
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	615a      	str	r2, [r3, #20]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_USART_SetBaudRate>:
{
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b0c0      	sub	sp, #256	; 0x100
 8004992:	af00      	add	r7, sp, #0
 8004994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004998:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800499c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80049a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	f040 810c 	bne.w	8004bc8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80049b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6639      	str	r1, [r7, #96]	; 0x60
 80049ca:	415b      	adcs	r3, r3
 80049cc:	667b      	str	r3, [r7, #100]	; 0x64
 80049ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80049d2:	4621      	mov	r1, r4
 80049d4:	eb12 0801 	adds.w	r8, r2, r1
 80049d8:	4629      	mov	r1, r5
 80049da:	eb43 0901 	adc.w	r9, r3, r1
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f2:	4690      	mov	r8, r2
 80049f4:	4699      	mov	r9, r3
 80049f6:	4623      	mov	r3, r4
 80049f8:	eb18 0303 	adds.w	r3, r8, r3
 80049fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a00:	462b      	mov	r3, r5
 8004a02:	eb49 0303 	adc.w	r3, r9, r3
 8004a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a0e:	2200      	movs	r2, #0
 8004a10:	469a      	mov	sl, r3
 8004a12:	4693      	mov	fp, r2
 8004a14:	eb1a 030a 	adds.w	r3, sl, sl
 8004a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a1a:	eb4b 030b 	adc.w	r3, fp, fp
 8004a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a28:	f7fb fbec 	bl	8000204 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <LL_USART_SetBaudRate+0x238>)
 8004a32:	fba3 2302 	umull	r2, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	b29c      	uxth	r4, r3
 8004a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a48:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a4c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	6539      	str	r1, [r7, #80]	; 0x50
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a94:	464b      	mov	r3, r9
 8004a96:	460a      	mov	r2, r1
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004aa0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aaa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004aae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	18db      	adds	r3, r3, r3
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab8:	4613      	mov	r3, r2
 8004aba:	eb42 0303 	adc.w	r3, r2, r3
 8004abe:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ac4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004ac8:	f7fb fb9c 	bl	8000204 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4b3c      	ldr	r3, [pc, #240]	; (8004bc4 <LL_USART_SetBaudRate+0x238>)
 8004ad4:	fba3 2301 	umull	r2, r3, r3, r1
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	2264      	movs	r2, #100	; 0x64
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	1acb      	subs	r3, r1, r3
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ae8:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <LL_USART_SetBaudRate+0x238>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4423      	add	r3, r4
 8004afe:	b29c      	uxth	r4, r3
 8004b00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b0a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b0e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004b12:	4642      	mov	r2, r8
 8004b14:	464b      	mov	r3, r9
 8004b16:	1891      	adds	r1, r2, r2
 8004b18:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b1a:	415b      	adcs	r3, r3
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b22:	4641      	mov	r1, r8
 8004b24:	1851      	adds	r1, r2, r1
 8004b26:	6339      	str	r1, [r7, #48]	; 0x30
 8004b28:	4649      	mov	r1, r9
 8004b2a:	414b      	adcs	r3, r1
 8004b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b3a:	4659      	mov	r1, fp
 8004b3c:	00cb      	lsls	r3, r1, #3
 8004b3e:	4651      	mov	r1, sl
 8004b40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b44:	4651      	mov	r1, sl
 8004b46:	00ca      	lsls	r2, r1, #3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4642      	mov	r2, r8
 8004b50:	189b      	adds	r3, r3, r2
 8004b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b56:	464b      	mov	r3, r9
 8004b58:	460a      	mov	r2, r1
 8004b5a:	eb42 0303 	adc.w	r3, r2, r3
 8004b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b6c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004b70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b86:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004b8a:	f7fb fb3b 	bl	8000204 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <LL_USART_SetBaudRate+0x238>)
 8004b94:	fba3 1302 	umull	r1, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	2164      	movs	r1, #100	; 0x64
 8004b9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3332      	adds	r3, #50	; 0x32
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <LL_USART_SetBaudRate+0x238>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	4423      	add	r3, r4
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc0:	609a      	str	r2, [r3, #8]
}
 8004bc2:	e107      	b.n	8004dd4 <LL_USART_SetBaudRate+0x448>
 8004bc4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004bc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bd6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004bda:	4642      	mov	r2, r8
 8004bdc:	464b      	mov	r3, r9
 8004bde:	1891      	adds	r1, r2, r2
 8004be0:	6239      	str	r1, [r7, #32]
 8004be2:	415b      	adcs	r3, r3
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
 8004be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bea:	4641      	mov	r1, r8
 8004bec:	1854      	adds	r4, r2, r1
 8004bee:	4649      	mov	r1, r9
 8004bf0:	eb43 0501 	adc.w	r5, r3, r1
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	00eb      	lsls	r3, r5, #3
 8004bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c02:	00e2      	lsls	r2, r4, #3
 8004c04:	4614      	mov	r4, r2
 8004c06:	461d      	mov	r5, r3
 8004c08:	4643      	mov	r3, r8
 8004c0a:	18e3      	adds	r3, r4, r3
 8004c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c10:	464b      	mov	r3, r9
 8004c12:	eb45 0303 	adc.w	r3, r5, r3
 8004c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004c34:	4629      	mov	r1, r5
 8004c36:	008b      	lsls	r3, r1, #2
 8004c38:	4621      	mov	r1, r4
 8004c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c3e:	4621      	mov	r1, r4
 8004c40:	008a      	lsls	r2, r1, #2
 8004c42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c46:	f7fb fadd 	bl	8000204 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b64      	ldr	r3, [pc, #400]	; (8004de0 <LL_USART_SetBaudRate+0x454>)
 8004c50:	fba3 2302 	umull	r2, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	b29c      	uxth	r4, r3
 8004c5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c6a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004c6e:	4642      	mov	r2, r8
 8004c70:	464b      	mov	r3, r9
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	61b9      	str	r1, [r7, #24]
 8004c76:	415b      	adcs	r3, r3
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7e:	4641      	mov	r1, r8
 8004c80:	1851      	adds	r1, r2, r1
 8004c82:	6139      	str	r1, [r7, #16]
 8004c84:	4649      	mov	r1, r9
 8004c86:	414b      	adcs	r3, r1
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c96:	4659      	mov	r1, fp
 8004c98:	00cb      	lsls	r3, r1, #3
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	00ca      	lsls	r2, r1, #3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4642      	mov	r2, r8
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	eb42 0303 	adc.w	r3, r2, r3
 8004cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cc8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004cd8:	4649      	mov	r1, r9
 8004cda:	008b      	lsls	r3, r1, #2
 8004cdc:	4641      	mov	r1, r8
 8004cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	008a      	lsls	r2, r1, #2
 8004ce6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004cea:	f7fb fa8b 	bl	8000204 <__aeabi_uldivmod>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <LL_USART_SetBaudRate+0x454>)
 8004cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	2164      	movs	r1, #100	; 0x64
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	3332      	adds	r3, #50	; 0x32
 8004d06:	4a36      	ldr	r2, [pc, #216]	; (8004de0 <LL_USART_SetBaudRate+0x454>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4423      	add	r3, r4
 8004d18:	b29c      	uxth	r4, r3
 8004d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d1e:	2200      	movs	r2, #0
 8004d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	1891      	adds	r1, r2, r2
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	415b      	adcs	r3, r3
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d38:	4641      	mov	r1, r8
 8004d3a:	1851      	adds	r1, r2, r1
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	4649      	mov	r1, r9
 8004d40:	414b      	adcs	r3, r1
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d50:	4659      	mov	r1, fp
 8004d52:	00cb      	lsls	r3, r1, #3
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	00ca      	lsls	r2, r1, #3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	4642      	mov	r2, r8
 8004d66:	189b      	adds	r3, r3, r2
 8004d68:	673b      	str	r3, [r7, #112]	; 0x70
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	eb42 0303 	adc.w	r3, r2, r3
 8004d72:	677b      	str	r3, [r7, #116]	; 0x74
 8004d74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d78:	2200      	movs	r2, #0
 8004d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	008b      	lsls	r3, r1, #2
 8004d8e:	4641      	mov	r1, r8
 8004d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d94:	4641      	mov	r1, r8
 8004d96:	008a      	lsls	r2, r1, #2
 8004d98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004d9c:	f7fb fa32 	bl	8000204 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <LL_USART_SetBaudRate+0x454>)
 8004da6:	fba3 1302 	umull	r1, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2164      	movs	r1, #100	; 0x64
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	3332      	adds	r3, #50	; 0x32
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <LL_USART_SetBaudRate+0x454>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	4423      	add	r3, r4
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de0:	51eb851f 	.word	0x51eb851f

08004de4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fd8e 	bl	8004918 <LL_USART_IsEnabled>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d15e      	bne.n	8004ec0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e0a:	f023 030c 	bic.w	r3, r3, #12
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	6851      	ldr	r1, [r2, #4]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	4311      	orrs	r1, r2
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	6912      	ldr	r2, [r2, #16]
 8004e1c:	4311      	orrs	r1, r2
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	6992      	ldr	r2, [r2, #24]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fd85 	bl	8004940 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff fd92 	bl	8004966 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004e42:	f107 0308 	add.w	r3, r7, #8
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fc6c 	bl	8004724 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <LL_USART_Init+0xe8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d102      	bne.n	8004e5a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	61bb      	str	r3, [r7, #24]
 8004e58:	e021      	b.n	8004e9e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <LL_USART_Init+0xec>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d102      	bne.n	8004e68 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	e01a      	b.n	8004e9e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <LL_USART_Init+0xf0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d102      	bne.n	8004e76 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	e013      	b.n	8004e9e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <LL_USART_Init+0xf4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d102      	bne.n	8004e84 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	e00c      	b.n	8004e9e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a15      	ldr	r2, [pc, #84]	; (8004edc <LL_USART_Init+0xf8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d102      	bne.n	8004e92 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e005      	b.n	8004e9e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <LL_USART_Init+0xfc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004eac:	2300      	movs	r3, #0
 8004eae:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fd66 	bl	800498c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40011000 	.word	0x40011000
 8004ed0:	40004400 	.word	0x40004400
 8004ed4:	40004800 	.word	0x40004800
 8004ed8:	40011400 	.word	0x40011400
 8004edc:	40004c00 	.word	0x40004c00
 8004ee0:	40005000 	.word	0x40005000

08004ee4 <__libc_init_array>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4d0d      	ldr	r5, [pc, #52]	; (8004f1c <__libc_init_array+0x38>)
 8004ee8:	4c0d      	ldr	r4, [pc, #52]	; (8004f20 <__libc_init_array+0x3c>)
 8004eea:	1b64      	subs	r4, r4, r5
 8004eec:	10a4      	asrs	r4, r4, #2
 8004eee:	2600      	movs	r6, #0
 8004ef0:	42a6      	cmp	r6, r4
 8004ef2:	d109      	bne.n	8004f08 <__libc_init_array+0x24>
 8004ef4:	4d0b      	ldr	r5, [pc, #44]	; (8004f24 <__libc_init_array+0x40>)
 8004ef6:	4c0c      	ldr	r4, [pc, #48]	; (8004f28 <__libc_init_array+0x44>)
 8004ef8:	f000 f830 	bl	8004f5c <_init>
 8004efc:	1b64      	subs	r4, r4, r5
 8004efe:	10a4      	asrs	r4, r4, #2
 8004f00:	2600      	movs	r6, #0
 8004f02:	42a6      	cmp	r6, r4
 8004f04:	d105      	bne.n	8004f12 <__libc_init_array+0x2e>
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f0c:	4798      	blx	r3
 8004f0e:	3601      	adds	r6, #1
 8004f10:	e7ee      	b.n	8004ef0 <__libc_init_array+0xc>
 8004f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f16:	4798      	blx	r3
 8004f18:	3601      	adds	r6, #1
 8004f1a:	e7f2      	b.n	8004f02 <__libc_init_array+0x1e>
 8004f1c:	08004fc8 	.word	0x08004fc8
 8004f20:	08004fc8 	.word	0x08004fc8
 8004f24:	08004fc8 	.word	0x08004fc8
 8004f28:	08004fcc 	.word	0x08004fcc

08004f2c <memcmp>:
 8004f2c:	b510      	push	{r4, lr}
 8004f2e:	3901      	subs	r1, #1
 8004f30:	4402      	add	r2, r0
 8004f32:	4290      	cmp	r0, r2
 8004f34:	d101      	bne.n	8004f3a <memcmp+0xe>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e005      	b.n	8004f46 <memcmp+0x1a>
 8004f3a:	7803      	ldrb	r3, [r0, #0]
 8004f3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d001      	beq.n	8004f48 <memcmp+0x1c>
 8004f44:	1b18      	subs	r0, r3, r4
 8004f46:	bd10      	pop	{r4, pc}
 8004f48:	3001      	adds	r0, #1
 8004f4a:	e7f2      	b.n	8004f32 <memcmp+0x6>

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
