
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b1c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d9c  08006d9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da4  08006da4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000010  08006dbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006dbc  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153fc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037bc  00000000  00000000  0003543c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00038bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00039da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028399  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cf6  00000000  00000000  00063159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed872  00000000  00000000  0007ce4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a6c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004734  00000000  00000000  0016a714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006cc8 	.word	0x08006cc8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08006cc8 	.word	0x08006cc8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x98>)
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ADC1_Init+0x98>)
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_ADC1_Init+0x98>)
 800056a:	f002 fcc3 	bl	8002ef4 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fce2 	bl	8000f3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000580:	2304      	movs	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0x98>)
 800058a:	f002 fe95 	bl	80032b8 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fcd2 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000038 	.word	0x20000038
 80005a4:	40012000 	.word	0x40012000
 80005a8:	0f000001 	.word	0x0f000001

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d127      	bne.n	800061e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_MspInit+0x84>)
 800061a:	f003 fa1f 	bl	8003a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <LiDAR_Cur_Check>:
  }
}

/* USER CODE BEGIN 1 */
void LiDAR_Cur_Check(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 800063a:	f002 fc9f 	bl	8002f7c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000642:	f002 fda0 	bl	8003186 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000648:	f002 fe28 	bl	800329c <HAL_ADC_GetValue>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000652:	801a      	strh	r2, [r3, #0]
  total_adc_val += adc_val;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
  cnt++;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000672:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000676:	f002 fd53 	bl	8003120 <HAL_ADC_Stop>

  Delay_ms(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f88c 	bl	8000798 <Delay_ms>
  if (cnt == ADC_AVG_BUFFER_SIZE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d120      	bne.n	80006cc <LiDAR_Cur_Check+0x98>
  {
    avg_adc_val = total_adc_val / ADC_AVG_BUFFER_SIZE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <LiDAR_Cur_Check+0xac>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069a:	801a      	strh	r2, [r3, #0]
    load_current = avg_adc_val / ADC_OFFSET;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006aa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006e8 <LiDAR_Cur_Check+0xb4>
 80006ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <LiDAR_Cur_Check+0xb8>)
 80006be:	801a      	strh	r2, [r3, #0]
    total_adc_val = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    cnt = 0;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  }
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000038 	.word	0x20000038
 80006d4:	2000002e 	.word	0x2000002e
 80006d8:	20000030 	.word	0x20000030
 80006dc:	20000034 	.word	0x20000034
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	20000036 	.word	0x20000036
 80006e8:	4022cbfb 	.word	0x4022cbfb
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Delay_us+0x40>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006fe:	f003 fc8f 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <Delay_us+0x44>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Delay_us+0x40>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f8      	bcc.n	8000716 <Delay_us+0x26>
    	;
  }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0001000 	.word	0xe0001000
 8000734:	431bde83 	.word	0x431bde83

08000738 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <DWT_Delay_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <DWT_Delay_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <DWT_Delay_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <DWT_Delay_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <DWT_Delay_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <DWT_Delay_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile("NOP");
 8000772:	bf00      	nop
  __ASM volatile("NOP");
 8000774:	bf00      	nop
  __ASM volatile("NOP");
 8000776:	bf00      	nop

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <DWT_Delay_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <DWT_Delay_Init+0x4c>
  {
    return 0; /*clock cycle counter started*/
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /*clock cycle counter not started*/
 8000784:	2301      	movs	r3, #1
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa0 	bl	80006f0 <Delay_us>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3302      	adds	r3, #2
 80008de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	43db      	mvns	r3, r3
 80008e8:	ea02 0103 	and.w	r1, r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	fa03 f202 	lsl.w	r2, r3, r2
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	430a      	orrs	r2, r1
 8000912:	3302      	adds	r3, #2
 8000914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013800 	.word	0x40013800

08000928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa93 f3a3 	rbit	r3, r3
 8000942:	613b      	str	r3, [r7, #16]
  return result;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61bb      	str	r3, [r7, #24]
  return result;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	431a      	orrs	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000986:	b480      	push	{r7}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	613b      	str	r3, [r7, #16]
  return result;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa93 f3a3 	rbit	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
  return result;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff ffd5 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	f7ff ffd2 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffcf 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff ffcc 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff ffc9 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a72:	f642 4107 	movw	r1, #11271	; 0x2c07
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000a78:	f7ff ffb4 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	4880      	ldr	r0, [pc, #512]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000a80:	f7ff ffb0 	bl	80009e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 8000a84:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000a88:	487e      	ldr	r0, [pc, #504]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000a8a:	f7ff ffab 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a8e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000a92:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000aaa:	f006 f85d 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000aae:	2382      	movs	r3, #130	; 0x82
 8000ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486e      	ldr	r0, [pc, #440]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000ac8:	f006 f84e 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000acc:	f240 630c 	movw	r3, #1548	; 0x60c
 8000ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000aec:	f006 f83c 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 8000af0:	f641 1370 	movw	r3, #6512	; 0x1970
 8000af4:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	485f      	ldr	r0, [pc, #380]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000b04:	f006 f830 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4855      	ldr	r0, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000b26:	f006 f81f 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b4a:	f006 f80d 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b6a:	f005 fffd 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b82:	f005 fff1 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000b86:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000b8a:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000ba2:	f005 ffe1 	bl	8006b68 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000bba:	f005 ffd5 	bl	8006b68 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000bbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe82 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000bc8:	492f      	ldr	r1, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x254>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe7e 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 fe39 	bl	800685c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fe2b 	bl	800685c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c0c:	f7ff febb 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c18:	f7ff feb5 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c22:	f7ff fe81 	bl	8000928 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c2e:	f7ff fe7b 	bl	8000928 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c32:	f7ff fdc1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe11 	bl	8000864 <NVIC_EncodePriority>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fde2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f7ff fdc1 	bl	80007d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c52:	f7ff fdb1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe01 	bl	8000864 <NVIC_EncodePriority>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4619      	mov	r1, r3
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff fdd2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f7ff fdb1 	bl	80007d4 <__NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	f0000003 	.word	0xf0000003

08000c8c <LL_GPIO_SetOutputPin>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ResetOutputPin>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <Delay_us>:
  {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <Delay_us+0x40>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cd6:	f003 f9a3 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <Delay_us+0x44>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000cec:	bf00      	nop
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <Delay_us+0x40>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3f8      	bcc.n	8000cee <Delay_us+0x26>
  }
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	431bde83 	.word	0x431bde83

08000d10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f002 f87c 	bl	8002e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f89e 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fe8a 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d20:	f7ff fbf2 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000d24:	f001 ff4a 	bl	8002bbc <MX_UART5_Init>
  MX_TIM3_Init();
 8000d28:	f001 fe76 	bl	8002a18 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000d2c:	f001 ff70 	bl	8002c10 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000d30:	f7ff fd02 	bl	8000738 <DWT_Delay_Init>

  InitUartQueue(&ViewerQueue);
 8000d34:	483f      	ldr	r0, [pc, #252]	; (8000e34 <main+0x124>)
 8000d36:	f001 f9e9 	bl	800210c <InitUartQueue>
  InitUartQueue(&LiDARQueue);
 8000d3a:	483f      	ldr	r0, [pc, #252]	; (8000e38 <main+0x128>)
 8000d3c:	f001 f9e6 	bl	800210c <InitUartQueue>
  __HAL_UART_ENABLE_IT(&hLiDAR, UART_IT_RXNE);
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <main+0x12c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <main+0x12c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0220 	orr.w	r2, r2, #32
 8000d4e:	60da      	str	r2, [r3, #12]

  switch_check();
 8000d50:	f001 fe18 	bl	8002984 <switch_check>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    if (tx_start_flag == 0)
 8000d54:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <main+0x130>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d12b      	bne.n	8000db6 <main+0xa6>
    {
      switch (g_Status)
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <main+0x134>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b06      	cmp	r3, #6
 8000d66:	d862      	bhi.n	8000e2e <main+0x11e>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <main+0x60>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d8d 	.word	0x08000d8d
 8000d74:	08000d93 	.word	0x08000d93
 8000d78:	08000d99 	.word	0x08000d99
 8000d7c:	08000d9f 	.word	0x08000d9f
 8000d80:	08000da5 	.word	0x08000da5
 8000d84:	08000dab 	.word	0x08000dab
 8000d88:	08000db1 	.word	0x08000db1
      {
      case kStatus_Info:
        Info_status();
 8000d8c:	f001 fa3c 	bl	8002208 <Info_status>
        break;
 8000d90:	e04e      	b.n	8000e30 <main+0x120>

      case kStatus_Detect1:
        Detect1_status();
 8000d92:	f001 fa7b 	bl	800228c <Detect1_status>
        break;
 8000d96:	e04b      	b.n	8000e30 <main+0x120>

      case kStatus_Detect2:
        Detect2_status();
 8000d98:	f001 fab6 	bl	8002308 <Detect2_status>
        break;
 8000d9c:	e048      	b.n	8000e30 <main+0x120>

      case kStatus_Detect3:
        Detect3_status();
 8000d9e:	f001 fae7 	bl	8002370 <Detect3_status>
        break;
 8000da2:	e045      	b.n	8000e30 <main+0x120>

      case kStatus_Idle:
        Idle_status();
 8000da4:	f001 fb28 	bl	80023f8 <Idle_status>
        break;
 8000da8:	e042      	b.n	8000e30 <main+0x120>

      case kStatus_Test:
        Test_status();
 8000daa:	f001 fc47 	bl	800263c <Test_status>
        break;
 8000dae:	e03f      	b.n	8000e30 <main+0x120>

      case kStatus_Result:
        result();
 8000db0:	f000 fbe2 	bl	8001578 <result>
        break;
 8000db4:	e03c      	b.n	8000e30 <main+0x120>
        break;
      }
    }
    else // LD Tx On
    {
      if (stop_feedback == 0)
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <main+0x138>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d129      	bne.n	8000e12 <main+0x102>
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc2:	4822      	ldr	r0, [pc, #136]	; (8000e4c <main+0x13c>)
 8000dc4:	f7ff ff62 	bl	8000c8c <LL_GPIO_SetOutputPin>
        stop_feedback = HAL_GPIO_ReadPin(FB_STOP1_SIG_GPIO_Port, FB_STOP1_SIG_Pin);
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	481f      	ldr	r0, [pc, #124]	; (8000e4c <main+0x13c>)
 8000dce:	f002 ffd9 	bl	8003d84 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <main+0x138>)
 8000dd8:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dde:	481b      	ldr	r0, [pc, #108]	; (8000e4c <main+0x13c>)
 8000de0:	f7ff ff62 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        feedback_ng_cnt++;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <main+0x140>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <main+0x140>)
 8000dee:	701a      	strb	r2, [r3, #0]
        if (feedback_ng_cnt >= 5)
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <main+0x140>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d908      	bls.n	8000e0a <main+0xfa>
        {
          g_Result = kResult_Err_11;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <main+0x144>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	701a      	strb	r2, [r3, #0]
          stop_feedback = 1;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <main+0x138>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
          feedback_ng_cnt = 0;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <main+0x140>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
        }
        Delay_us(20);
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f7ff ff5c 	bl	8000cc8 <Delay_us>
 8000e10:	e7a0      	b.n	8000d54 <main+0x44>
      }
      else
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <main+0x13c>)
 8000e18:	f7ff ff38 	bl	8000c8c <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <main+0x13c>)
 8000e22:	f7ff ff41 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        Delay_us(20);
 8000e26:	2014      	movs	r0, #20
 8000e28:	f7ff ff4e 	bl	8000cc8 <Delay_us>
 8000e2c:	e792      	b.n	8000d54 <main+0x44>
        break;
 8000e2e:	bf00      	nop
    if (tx_start_flag == 0)
 8000e30:	e790      	b.n	8000d54 <main+0x44>
 8000e32:	bf00      	nop
 8000e34:	20000188 	.word	0x20000188
 8000e38:	20000084 	.word	0x20000084
 8000e3c:	2000033c 	.word	0x2000033c
 8000e40:	200002ae 	.word	0x200002ae
 8000e44:	20000080 	.word	0x20000080
 8000e48:	20000081 	.word	0x20000081
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	20000082 	.word	0x20000082
 8000e54:	20000083 	.word	0x20000083

08000e58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	; 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2234      	movs	r2, #52	; 0x34
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f005 ff26 	bl	8006cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <SystemClock_Config+0xdc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <SystemClock_Config+0xdc>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <SystemClock_Config+0xdc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <SystemClock_Config+0xe0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a25      	ldr	r2, [pc, #148]	; (8000f38 <SystemClock_Config+0xe0>)
 8000ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SystemClock_Config+0xe0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ecc:	23b4      	movs	r3, #180	; 0xb4
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fa7b 	bl	80043dc <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eec:	f000 f826 	bl	8000f3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ef0:	f002 ff60 	bl	8003db4 <HAL_PWREx_EnableOverDrive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000efa:	f000 f81f 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000efe:	230f      	movs	r3, #15
 8000f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2302      	movs	r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 ff99 	bl	8003e54 <HAL_RCC_ClockConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f28:	f000 f808 	bl	8000f3c <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3750      	adds	r7, #80	; 0x50
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000

08000f3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d85d      	bhi.n	800102a <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000f6e:	7cfb      	ldrb	r3, [r7, #19]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	74fa      	strb	r2, [r7, #19]
 8000f74:	3318      	adds	r3, #24
 8000f76:	443b      	add	r3, r7
 8000f78:	22fa      	movs	r2, #250	; 0xfa
 8000f7a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	74fa      	strb	r2, [r7, #19]
 8000f84:	3318      	adds	r3, #24
 8000f86:	443b      	add	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000f8e:	7cfb      	ldrb	r3, [r7, #19]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	74fa      	strb	r2, [r7, #19]
 8000f94:	3318      	adds	r3, #24
 8000f96:	443b      	add	r3, r7
 8000f98:	22d0      	movs	r2, #208	; 0xd0
 8000f9a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000f9e:	7cfb      	ldrb	r3, [r7, #19]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	74fa      	strb	r2, [r7, #19]
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	220f      	movs	r2, #15
 8000faa:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000fae:	7cfb      	ldrb	r3, [r7, #19]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	74fa      	strb	r2, [r7, #19]
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	443b      	add	r3, r7
 8000fb8:	79fa      	ldrb	r2, [r7, #7]
 8000fba:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fbe:	7cfb      	ldrb	r3, [r7, #19]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	74fa      	strb	r2, [r7, #19]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	443b      	add	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	74fa      	strb	r2, [r7, #19]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	443b      	add	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	74fa      	strb	r2, [r7, #19]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	443b      	add	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	82bb      	strh	r3, [r7, #20]
 8000ff6:	e00a      	b.n	800100e <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8000ff8:	8abb      	ldrh	r3, [r7, #20]
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	443b      	add	r3, r7
 8000ffe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	4053      	eors	r3, r2
 8001006:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001008:	8abb      	ldrh	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	82bb      	strh	r3, [r7, #20]
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	b29b      	uxth	r3, r3
 8001012:	8aba      	ldrh	r2, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3ef      	bcc.n	8000ff8 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8001018:	7cfb      	ldrb	r3, [r7, #19]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	74fa      	strb	r2, [r7, #19]
 800101e:	3318      	adds	r3, #24
 8001020:	443b      	add	r3, r7
 8001022:	7dfa      	ldrb	r2, [r7, #23]
 8001024:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001028:	e000      	b.n	800102c <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 800102a:	bf00      	nop
    }
    HAL_UART_Transmit(&hLiDAR, senddata, sizeof(senddata), 3000);
 800102c:	f107 0108 	add.w	r1, r7, #8
 8001030:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001034:	2209      	movs	r2, #9
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <LiDAR_Protocol_Tx+0xfc>)
 8001038:	f004 fbb1 	bl	800579e <HAL_UART_Transmit>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000033c 	.word	0x2000033c

08001048 <GUI_Protocol_Tx>:

void GUI_Protocol_Tx(uint8_t parameter, uint8_t data)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	747b      	strb	r3, [r7, #17]
    uint8_t senddata[9] = {0};
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <GUI_Protocol_Tx+0x3c>
 8001074:	2b00      	cmp	r3, #0
 8001076:	f2c0 80c1 	blt.w	80011fc <GUI_Protocol_Tx+0x1b4>
 800107a:	3b02      	subs	r3, #2
 800107c:	2b05      	cmp	r3, #5
 800107e:	f200 80bd 	bhi.w	80011fc <GUI_Protocol_Tx+0x1b4>
 8001082:	e05d      	b.n	8001140 <GUI_Protocol_Tx+0xf8>
    {
    case GUI_COMMAND_CONNECT:

        senddata[cnt++] = PROTOCOL_HEADER;
 8001084:	7c7b      	ldrb	r3, [r7, #17]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	747a      	strb	r2, [r7, #17]
 800108a:	3318      	adds	r3, #24
 800108c:	443b      	add	r3, r7
 800108e:	22fa      	movs	r2, #250	; 0xfa
 8001090:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8001094:	7c7b      	ldrb	r3, [r7, #17]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	747a      	strb	r2, [r7, #17]
 800109a:	3318      	adds	r3, #24
 800109c:	443b      	add	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80010a4:	7c7b      	ldrb	r3, [r7, #17]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	747a      	strb	r2, [r7, #17]
 80010aa:	3318      	adds	r3, #24
 80010ac:	443b      	add	r3, r7
 80010ae:	22d0      	movs	r2, #208	; 0xd0
 80010b0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 80010b4:	7c7b      	ldrb	r3, [r7, #17]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	747a      	strb	r2, [r7, #17]
 80010ba:	3318      	adds	r3, #24
 80010bc:	443b      	add	r3, r7
 80010be:	22f0      	movs	r2, #240	; 0xf0
 80010c0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 80010c4:	7c7b      	ldrb	r3, [r7, #17]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	747a      	strb	r2, [r7, #17]
 80010ca:	3318      	adds	r3, #24
 80010cc:	443b      	add	r3, r7
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 80010d4:	7c7b      	ldrb	r3, [r7, #17]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	747a      	strb	r2, [r7, #17]
 80010da:	3318      	adds	r3, #24
 80010dc:	443b      	add	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 80010e4:	7c7b      	ldrb	r3, [r7, #17]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	747a      	strb	r2, [r7, #17]
 80010ea:	3318      	adds	r3, #24
 80010ec:	443b      	add	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data;
 80010f4:	7c7b      	ldrb	r3, [r7, #17]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	747a      	strb	r2, [r7, #17]
 80010fa:	3318      	adds	r3, #24
 80010fc:	443b      	add	r3, r7
 80010fe:	79ba      	ldrb	r2, [r7, #6]
 8001100:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001104:	7a3b      	ldrb	r3, [r7, #8]
 8001106:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001108:	2301      	movs	r3, #1
 800110a:	82bb      	strh	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <GUI_Protocol_Tx+0xdc>
        {
            checksum ^= senddata[i];
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	3318      	adds	r3, #24
 8001112:	443b      	add	r3, r7
 8001114:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	4053      	eors	r3, r2
 800111c:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800111e:	8abb      	ldrh	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	82bb      	strh	r3, [r7, #20]
 8001124:	7c7b      	ldrb	r3, [r7, #17]
 8001126:	b29b      	uxth	r3, r3
 8001128:	8aba      	ldrh	r2, [r7, #20]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3ef      	bcc.n	800110e <GUI_Protocol_Tx+0xc6>
        }
        senddata[cnt++] = checksum;
 800112e:	7c7b      	ldrb	r3, [r7, #17]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	747a      	strb	r2, [r7, #17]
 8001134:	3318      	adds	r3, #24
 8001136:	443b      	add	r3, r7
 8001138:	7dfa      	ldrb	r2, [r7, #23]
 800113a:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 800113e:	e05e      	b.n	80011fe <GUI_Protocol_Tx+0x1b6>
    case GUI_COMMAND_MOT_SPEED:
    case GUI_COMMAND_ENC_CHECK:
    case GUI_COMMAND_TDC_INIT:
    case GUI_COMMAND_TDC_CAL:

        senddata[cnt++] = PROTOCOL_HEADER;
 8001140:	7c7b      	ldrb	r3, [r7, #17]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	747a      	strb	r2, [r7, #17]
 8001146:	3318      	adds	r3, #24
 8001148:	443b      	add	r3, r7
 800114a:	22fa      	movs	r2, #250	; 0xfa
 800114c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8001150:	7c7b      	ldrb	r3, [r7, #17]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	747a      	strb	r2, [r7, #17]
 8001156:	3318      	adds	r3, #24
 8001158:	443b      	add	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8001160:	7c7b      	ldrb	r3, [r7, #17]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	747a      	strb	r2, [r7, #17]
 8001166:	3318      	adds	r3, #24
 8001168:	443b      	add	r3, r7
 800116a:	22d0      	movs	r2, #208	; 0xd0
 800116c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 8001170:	7c7b      	ldrb	r3, [r7, #17]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	747a      	strb	r2, [r7, #17]
 8001176:	3318      	adds	r3, #24
 8001178:	443b      	add	r3, r7
 800117a:	22f0      	movs	r2, #240	; 0xf0
 800117c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8001180:	7c7b      	ldrb	r3, [r7, #17]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	747a      	strb	r2, [r7, #17]
 8001186:	3318      	adds	r3, #24
 8001188:	443b      	add	r3, r7
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	747a      	strb	r2, [r7, #17]
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x01U;
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	747a      	strb	r2, [r7, #17]
 80011a6:	3318      	adds	r3, #24
 80011a8:	443b      	add	r3, r7
 80011aa:	2201      	movs	r2, #1
 80011ac:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data; // 0x00 : OK, 0x01 : FAIL
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	747a      	strb	r2, [r7, #17]
 80011b6:	3318      	adds	r3, #24
 80011b8:	443b      	add	r3, r7
 80011ba:	79ba      	ldrb	r2, [r7, #6]
 80011bc:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 80011c0:	7a3b      	ldrb	r3, [r7, #8]
 80011c2:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 80011c4:	2301      	movs	r3, #1
 80011c6:	827b      	strh	r3, [r7, #18]
 80011c8:	e00a      	b.n	80011e0 <GUI_Protocol_Tx+0x198>
        {
            checksum ^= senddata[i];
 80011ca:	8a7b      	ldrh	r3, [r7, #18]
 80011cc:	3318      	adds	r3, #24
 80011ce:	443b      	add	r3, r7
 80011d0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	4053      	eors	r3, r2
 80011d8:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 80011da:	8a7b      	ldrh	r3, [r7, #18]
 80011dc:	3301      	adds	r3, #1
 80011de:	827b      	strh	r3, [r7, #18]
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	8a7a      	ldrh	r2, [r7, #18]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3ef      	bcc.n	80011ca <GUI_Protocol_Tx+0x182>
        }
        senddata[cnt++] = checksum;
 80011ea:	7c7b      	ldrb	r3, [r7, #17]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	747a      	strb	r2, [r7, #17]
 80011f0:	3318      	adds	r3, #24
 80011f2:	443b      	add	r3, r7
 80011f4:	7dfa      	ldrb	r2, [r7, #23]
 80011f6:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 80011fa:	e000      	b.n	80011fe <GUI_Protocol_Tx+0x1b6>
    default:
        break;
 80011fc:	bf00      	nop
    }
    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 80011fe:	f107 0108 	add.w	r1, r7, #8
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	2209      	movs	r2, #9
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <GUI_Protocol_Tx+0x1cc>)
 8001208:	f004 fac9 	bl	800579e <HAL_UART_Transmit>
    //    UART_Transmit(UART5, senddata, sizeof(senddata));
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002f8 	.word	0x200002f8

08001218 <GUI_Protocol_Mode_Tx>:

void GUI_Protocol_Mode_Tx(uint8_t data) // ADC Cur 추가
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[10] = {0};
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	809a      	strh	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	74fa      	strb	r2, [r7, #19]
 800123e:	3318      	adds	r3, #24
 8001240:	443b      	add	r3, r7
 8001242:	22fa      	movs	r2, #250	; 0xfa
 8001244:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	74fa      	strb	r2, [r7, #19]
 800124e:	3318      	adds	r3, #24
 8001250:	443b      	add	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 8001258:	7cfb      	ldrb	r3, [r7, #19]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	74fa      	strb	r2, [r7, #19]
 800125e:	3318      	adds	r3, #24
 8001260:	443b      	add	r3, r7
 8001262:	22d0      	movs	r2, #208	; 0xd0
 8001264:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_MODE;
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	74fa      	strb	r2, [r7, #19]
 800126e:	3318      	adds	r3, #24
 8001270:	443b      	add	r3, r7
 8001272:	22f0      	movs	r2, #240	; 0xf0
 8001274:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_COMMAND_MODE;
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	74fa      	strb	r2, [r7, #19]
 800127e:	3318      	adds	r3, #24
 8001280:	443b      	add	r3, r7
 8001282:	2201      	movs	r2, #1
 8001284:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 8001288:	7cfb      	ldrb	r3, [r7, #19]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	74fa      	strb	r2, [r7, #19]
 800128e:	3318      	adds	r3, #24
 8001290:	443b      	add	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	74fa      	strb	r2, [r7, #19]
 800129e:	3318      	adds	r3, #24
 80012a0:	443b      	add	r3, r7
 80012a2:	2201      	movs	r2, #1
 80012a4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : Factory JIG MODE, 0x01 : Tx MODE
 80012a8:	7cfb      	ldrb	r3, [r7, #19]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	74fa      	strb	r2, [r7, #19]
 80012ae:	3318      	adds	r3, #24
 80012b0:	443b      	add	r3, r7
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = load_current;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <GUI_Protocol_Mode_Tx+0x108>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	7cfb      	ldrb	r3, [r7, #19]
 80012c0:	1c59      	adds	r1, r3, #1
 80012c2:	74f9      	strb	r1, [r7, #19]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	3318      	adds	r3, #24
 80012c8:	443b      	add	r3, r7
 80012ca:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 80012d2:	2301      	movs	r3, #1
 80012d4:	82bb      	strh	r3, [r7, #20]
 80012d6:	e00a      	b.n	80012ee <GUI_Protocol_Mode_Tx+0xd6>
    {
        checksum ^= senddata[i];
 80012d8:	8abb      	ldrh	r3, [r7, #20]
 80012da:	3318      	adds	r3, #24
 80012dc:	443b      	add	r3, r7
 80012de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	4053      	eors	r3, r2
 80012e6:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 80012e8:	8abb      	ldrh	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	82bb      	strh	r3, [r7, #20]
 80012ee:	7cfb      	ldrb	r3, [r7, #19]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	8aba      	ldrh	r2, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3ef      	bcc.n	80012d8 <GUI_Protocol_Mode_Tx+0xc0>
    }
    senddata[cnt++] = checksum;
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	74fa      	strb	r2, [r7, #19]
 80012fe:	3318      	adds	r3, #24
 8001300:	443b      	add	r3, r7
 8001302:	7dfa      	ldrb	r2, [r7, #23]
 8001304:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001308:	f107 0108 	add.w	r1, r7, #8
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	220a      	movs	r2, #10
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <GUI_Protocol_Mode_Tx+0x10c>)
 8001312:	f004 fa44 	bl	800579e <HAL_UART_Transmit>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000002c 	.word	0x2000002c
 8001324:	200002f8 	.word	0x200002f8

08001328 <GUI_Protocol_Detect_Tx>:

void GUI_Protocol_Detect_Tx(uint8_t parameter, uint8_t data)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	711a      	strb	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 800134e:	7cfb      	ldrb	r3, [r7, #19]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	74fa      	strb	r2, [r7, #19]
 8001354:	3318      	adds	r3, #24
 8001356:	443b      	add	r3, r7
 8001358:	22fa      	movs	r2, #250	; 0xfa
 800135a:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 800135e:	7cfb      	ldrb	r3, [r7, #19]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	74fa      	strb	r2, [r7, #19]
 8001364:	3318      	adds	r3, #24
 8001366:	443b      	add	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 800136e:	7cfb      	ldrb	r3, [r7, #19]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	74fa      	strb	r2, [r7, #19]
 8001374:	3318      	adds	r3, #24
 8001376:	443b      	add	r3, r7
 8001378:	22d0      	movs	r2, #208	; 0xd0
 800137a:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = LIDAR_MODE;
 800137e:	7cfb      	ldrb	r3, [r7, #19]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	74fa      	strb	r2, [r7, #19]
 8001384:	3318      	adds	r3, #24
 8001386:	443b      	add	r3, r7
 8001388:	220f      	movs	r2, #15
 800138a:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = parameter;
 800138e:	7cfb      	ldrb	r3, [r7, #19]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	74fa      	strb	r2, [r7, #19]
 8001394:	3318      	adds	r3, #24
 8001396:	443b      	add	r3, r7
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 800139e:	7cfb      	ldrb	r3, [r7, #19]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	74fa      	strb	r2, [r7, #19]
 80013a4:	3318      	adds	r3, #24
 80013a6:	443b      	add	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 80013ae:	7cfb      	ldrb	r3, [r7, #19]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	74fa      	strb	r2, [r7, #19]
 80013b4:	3318      	adds	r3, #24
 80013b6:	443b      	add	r3, r7
 80013b8:	2201      	movs	r2, #1
 80013ba:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : FAIL, 0x01 : OK
 80013be:	7cfb      	ldrb	r3, [r7, #19]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	74fa      	strb	r2, [r7, #19]
 80013c4:	3318      	adds	r3, #24
 80013c6:	443b      	add	r3, r7
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 80013ce:	7a3b      	ldrb	r3, [r7, #8]
 80013d0:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 80013d2:	2301      	movs	r3, #1
 80013d4:	82bb      	strh	r3, [r7, #20]
 80013d6:	e00a      	b.n	80013ee <GUI_Protocol_Detect_Tx+0xc6>
    {
        checksum ^= senddata[i];
 80013d8:	8abb      	ldrh	r3, [r7, #20]
 80013da:	3318      	adds	r3, #24
 80013dc:	443b      	add	r3, r7
 80013de:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	4053      	eors	r3, r2
 80013e6:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 80013e8:	8abb      	ldrh	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	82bb      	strh	r3, [r7, #20]
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	8aba      	ldrh	r2, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3ef      	bcc.n	80013d8 <GUI_Protocol_Detect_Tx+0xb0>
    }
    senddata[cnt++] = checksum;
 80013f8:	7cfb      	ldrb	r3, [r7, #19]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	74fa      	strb	r2, [r7, #19]
 80013fe:	3318      	adds	r3, #24
 8001400:	443b      	add	r3, r7
 8001402:	7dfa      	ldrb	r2, [r7, #23]
 8001404:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001408:	f107 0108 	add.w	r1, r7, #8
 800140c:	2364      	movs	r3, #100	; 0x64
 800140e:	2209      	movs	r2, #9
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <GUI_Protocol_Detect_Tx+0xf8>)
 8001412:	f004 f9c4 	bl	800579e <HAL_UART_Transmit>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200002f8 	.word	0x200002f8

08001424 <LL_GPIO_SetOutputPin>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	619a      	str	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_GPIO_ResetOutputPin>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <fail_sound>:

extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;

void fail_sound(uint8_t i)
{
 8001460:	b490      	push	{r4, r7}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2)
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <fail_sound+0x16>
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d130      	bne.n	80014d8 <fail_sound+0x78>
    {
        unsigned int fail_sound[] = {C5, C5, C5, C5};
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <fail_sound+0x8c>)
 8001478:	f107 0408 	add.w	r4, r7, #8
 800147c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <fail_sound+0x90>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	3318      	adds	r3, #24
 800148e:	443b      	add	r3, r7
 8001490:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <fail_sound+0x94>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fbb1 f2f2 	udiv	r2, r1, r2
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <fail_sound+0x90>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	3318      	adds	r3, #24
 80014aa:	443b      	add	r3, r7
 80014ac:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b4:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <fail_sound+0x94>)
 80014b6:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <fail_sound+0x90>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	3318      	adds	r3, #24
 80014c4:	443b      	add	r3, r7
 80014c6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <fail_sound+0x94>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	0852      	lsrs	r2, r2, #1
 80014d4:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 80014d6:	e004      	b.n	80014e2 <fail_sound+0x82>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <fail_sound+0x94>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc90      	pop	{r4, r7}
 80014ea:	4770      	bx	lr
 80014ec:	08006ce0 	.word	0x08006ce0
 80014f0:	20000000 	.word	0x20000000
 80014f4:	200002b0 	.word	0x200002b0

080014f8 <pass_sound>:

void pass_sound(uint8_t i)
{
 80014f8:	b490      	push	{r4, r7}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C4, E4, G4, C5};
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <pass_sound+0x74>)
 8001504:	f107 0408 	add.w	r4, r7, #8
 8001508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <pass_sound+0x78>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	3318      	adds	r3, #24
 800151a:	443b      	add	r3, r7
 800151c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <pass_sound+0x7c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	fbb1 f2f2 	udiv	r2, r1, r2
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <pass_sound+0x78>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3318      	adds	r3, #24
 8001536:	443b      	add	r3, r7
 8001538:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800153c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001540:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <pass_sound+0x7c>)
 8001542:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / pass_sound[i] / 2);
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <pass_sound+0x78>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	3318      	adds	r3, #24
 8001550:	443b      	add	r3, r7
 8001552:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001556:	fbb2 f2f3 	udiv	r2, r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <pass_sound+0x7c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0852      	lsrs	r2, r2, #1
 8001560:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bc90      	pop	{r4, r7}
 800156a:	4770      	bx	lr
 800156c:	08006cf0 	.word	0x08006cf0
 8001570:	20000000 	.word	0x20000000
 8001574:	200002b0 	.word	0x200002b0

08001578 <result>:

void result(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800157e:	2108      	movs	r1, #8
 8001580:	48ba      	ldr	r0, [pc, #744]	; (800186c <result+0x2f4>)
 8001582:	f003 fa71 	bl	8004a68 <HAL_TIM_PWM_Start>

    switch (g_Result)
 8001586:	4bba      	ldr	r3, [pc, #744]	; (8001870 <result+0x2f8>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b0d      	cmp	r3, #13
 800158e:	f200 82d0 	bhi.w	8001b32 <result+0x5ba>
 8001592:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <result+0x20>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015d1 	.word	0x080015d1
 800159c:	080015f7 	.word	0x080015f7
 80015a0:	08001659 	.word	0x08001659
 80015a4:	080016bf 	.word	0x080016bf
 80015a8:	08001725 	.word	0x08001725
 80015ac:	0800178b 	.word	0x0800178b
 80015b0:	080017f1 	.word	0x080017f1
 80015b4:	08001857 	.word	0x08001857
 80015b8:	080018cf 	.word	0x080018cf
 80015bc:	08001935 	.word	0x08001935
 80015c0:	0800199b 	.word	0x0800199b
 80015c4:	08001a01 	.word	0x08001a01
 80015c8:	08001a67 	.word	0x08001a67
 80015cc:	08001acd 	.word	0x08001acd
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80015d0:	2104      	movs	r1, #4
 80015d2:	48a8      	ldr	r0, [pc, #672]	; (8001874 <result+0x2fc>)
 80015d4:	f7ff ff34 	bl	8001440 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80015d8:	2120      	movs	r1, #32
 80015da:	48a7      	ldr	r0, [pc, #668]	; (8001878 <result+0x300>)
 80015dc:	f7ff ff30 	bl	8001440 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80015e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015e4:	48a3      	ldr	r0, [pc, #652]	; (8001874 <result+0x2fc>)
 80015e6:	f7ff ff2b 	bl	8001440 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80015ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ee:	48a1      	ldr	r0, [pc, #644]	; (8001874 <result+0x2fc>)
 80015f0:	f7ff ff26 	bl	8001440 <LL_GPIO_ResetOutputPin>
        break;
 80015f4:	e29e      	b.n	8001b34 <result+0x5bc>

    case kResult_Pass:
        for (uint8_t j = 0; j <= 3; j++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	77fb      	strb	r3, [r7, #31]
 80015fa:	e029      	b.n	8001650 <result+0xd8>
        {
            pass_sound(j);
 80015fc:	7ffb      	ldrb	r3, [r7, #31]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff7a 	bl	80014f8 <pass_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001604:	2301      	movs	r3, #1
 8001606:	77bb      	strb	r3, [r7, #30]
 8001608:	e01c      	b.n	8001644 <result+0xcc>
            {
                FND_1();
 800160a:	f000 faa5 	bl	8001b58 <FND_1>
                FND_P();
 800160e:	f000 fb0b 	bl	8001c28 <FND_P>
                Delay_ms(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff f8c0 	bl	8000798 <Delay_ms>
                FND_2();
 8001618:	f000 fab8 	bl	8001b8c <FND_2>
                FND_A();
 800161c:	f000 fb2c 	bl	8001c78 <FND_A>
                Delay_ms(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff f8b9 	bl	8000798 <Delay_ms>
                FND_3();
 8001626:	f000 facb 	bl	8001bc0 <FND_3>
                FND_S();
 800162a:	f000 fb4d 	bl	8001cc8 <FND_S>
                Delay_ms(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff f8b2 	bl	8000798 <Delay_ms>
                FND_4();
 8001634:	f000 fade 	bl	8001bf4 <FND_4>
                Delay_ms(1);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff f8ad 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800163e:	7fbb      	ldrb	r3, [r7, #30]
 8001640:	3301      	adds	r3, #1
 8001642:	77bb      	strb	r3, [r7, #30]
 8001644:	7fbb      	ldrb	r3, [r7, #30]
 8001646:	2bfa      	cmp	r3, #250	; 0xfa
 8001648:	d9df      	bls.n	800160a <result+0x92>
        for (uint8_t j = 0; j <= 3; j++)
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	3301      	adds	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d9d2      	bls.n	80015fc <result+0x84>
            }
        }
        break;
 8001656:	e26d      	b.n	8001b34 <result+0x5bc>

    case kResult_Err_1: // UART Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001658:	2300      	movs	r3, #0
 800165a:	777b      	strb	r3, [r7, #29]
 800165c:	e02b      	b.n	80016b6 <result+0x13e>
        {
            fail_sound(j);
 800165e:	7f7b      	ldrb	r3, [r7, #29]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fefd 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001666:	2301      	movs	r3, #1
 8001668:	773b      	strb	r3, [r7, #28]
 800166a:	e01e      	b.n	80016aa <result+0x132>
            {
                FND_1();
 800166c:	f000 fa74 	bl	8001b58 <FND_1>
                FND_E();
 8001670:	f000 fb52 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff f88f 	bl	8000798 <Delay_ms>
                FND_2();
 800167a:	f000 fa87 	bl	8001b8c <FND_2>
                FND_r();
 800167e:	f000 fb73 	bl	8001d68 <FND_r>
                Delay_ms(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff f888 	bl	8000798 <Delay_ms>
                FND_3();
 8001688:	f000 fa9a 	bl	8001bc0 <FND_3>
                FND_zero();
 800168c:	f000 fb94 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff f881 	bl	8000798 <Delay_ms>
                FND_4();
 8001696:	f000 faad 	bl	8001bf4 <FND_4>
                FND_one();
 800169a:	f000 fbb5 	bl	8001e08 <FND_one>
                Delay_ms(1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff f87a 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80016a4:	7f3b      	ldrb	r3, [r7, #28]
 80016a6:	3301      	adds	r3, #1
 80016a8:	773b      	strb	r3, [r7, #28]
 80016aa:	7f3b      	ldrb	r3, [r7, #28]
 80016ac:	2bfa      	cmp	r3, #250	; 0xfa
 80016ae:	d9dd      	bls.n	800166c <result+0xf4>
        for (uint8_t j = 0; j <= 3; j++)
 80016b0:	7f7b      	ldrb	r3, [r7, #29]
 80016b2:	3301      	adds	r3, #1
 80016b4:	777b      	strb	r3, [r7, #29]
 80016b6:	7f7b      	ldrb	r3, [r7, #29]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d9d0      	bls.n	800165e <result+0xe6>
            }
        }
        break;
 80016bc:	e23a      	b.n	8001b34 <result+0x5bc>

    case kResult_Err_2: // Ethernet chip Fail
        for (uint8_t j = 0; j <= 3; j++)
 80016be:	2300      	movs	r3, #0
 80016c0:	76fb      	strb	r3, [r7, #27]
 80016c2:	e02b      	b.n	800171c <result+0x1a4>
        {
            fail_sound(j);
 80016c4:	7efb      	ldrb	r3, [r7, #27]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff feca 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80016cc:	2301      	movs	r3, #1
 80016ce:	76bb      	strb	r3, [r7, #26]
 80016d0:	e01e      	b.n	8001710 <result+0x198>
            {
                FND_1();
 80016d2:	f000 fa41 	bl	8001b58 <FND_1>
                FND_E();
 80016d6:	f000 fb1f 	bl	8001d18 <FND_E>
                Delay_ms(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff f85c 	bl	8000798 <Delay_ms>
                FND_2();
 80016e0:	f000 fa54 	bl	8001b8c <FND_2>
                FND_r();
 80016e4:	f000 fb40 	bl	8001d68 <FND_r>
                Delay_ms(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff f855 	bl	8000798 <Delay_ms>
                FND_3();
 80016ee:	f000 fa67 	bl	8001bc0 <FND_3>
                FND_zero();
 80016f2:	f000 fb61 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff f84e 	bl	8000798 <Delay_ms>
                FND_4();
 80016fc:	f000 fa7a 	bl	8001bf4 <FND_4>
                FND_two();
 8001700:	f000 fbaa 	bl	8001e58 <FND_two>
                Delay_ms(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff f847 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800170a:	7ebb      	ldrb	r3, [r7, #26]
 800170c:	3301      	adds	r3, #1
 800170e:	76bb      	strb	r3, [r7, #26]
 8001710:	7ebb      	ldrb	r3, [r7, #26]
 8001712:	2bfa      	cmp	r3, #250	; 0xfa
 8001714:	d9dd      	bls.n	80016d2 <result+0x15a>
        for (uint8_t j = 0; j <= 3; j++)
 8001716:	7efb      	ldrb	r3, [r7, #27]
 8001718:	3301      	adds	r3, #1
 800171a:	76fb      	strb	r3, [r7, #27]
 800171c:	7efb      	ldrb	r3, [r7, #27]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d9d0      	bls.n	80016c4 <result+0x14c>
            }
        }
        break;
 8001722:	e207      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_3: // APD BIAS Control Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001724:	2300      	movs	r3, #0
 8001726:	767b      	strb	r3, [r7, #25]
 8001728:	e02b      	b.n	8001782 <result+0x20a>
        {
            fail_sound(j);
 800172a:	7e7b      	ldrb	r3, [r7, #25]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fe97 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001732:	2301      	movs	r3, #1
 8001734:	763b      	strb	r3, [r7, #24]
 8001736:	e01e      	b.n	8001776 <result+0x1fe>
            {
                FND_1();
 8001738:	f000 fa0e 	bl	8001b58 <FND_1>
                FND_E();
 800173c:	f000 faec 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff f829 	bl	8000798 <Delay_ms>
                FND_2();
 8001746:	f000 fa21 	bl	8001b8c <FND_2>
                FND_r();
 800174a:	f000 fb0d 	bl	8001d68 <FND_r>
                Delay_ms(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff f822 	bl	8000798 <Delay_ms>
                FND_3();
 8001754:	f000 fa34 	bl	8001bc0 <FND_3>
                FND_zero();
 8001758:	f000 fb2e 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff f81b 	bl	8000798 <Delay_ms>
                FND_4();
 8001762:	f000 fa47 	bl	8001bf4 <FND_4>
                FND_three();
 8001766:	f000 fb9f 	bl	8001ea8 <FND_three>
                Delay_ms(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff f814 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001770:	7e3b      	ldrb	r3, [r7, #24]
 8001772:	3301      	adds	r3, #1
 8001774:	763b      	strb	r3, [r7, #24]
 8001776:	7e3b      	ldrb	r3, [r7, #24]
 8001778:	2bfa      	cmp	r3, #250	; 0xfa
 800177a:	d9dd      	bls.n	8001738 <result+0x1c0>
        for (uint8_t j = 0; j <= 3; j++)
 800177c:	7e7b      	ldrb	r3, [r7, #25]
 800177e:	3301      	adds	r3, #1
 8001780:	767b      	strb	r3, [r7, #25]
 8001782:	7e7b      	ldrb	r3, [r7, #25]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d9d0      	bls.n	800172a <result+0x1b2>
            }
        }
        break;
 8001788:	e1d4      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_4: // Motor Speed Cailbration Fail
        for (uint8_t j = 0; j <= 3; j++)
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]
 800178e:	e02b      	b.n	80017e8 <result+0x270>
        {
            fail_sound(j);
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fe64 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001798:	2301      	movs	r3, #1
 800179a:	75bb      	strb	r3, [r7, #22]
 800179c:	e01e      	b.n	80017dc <result+0x264>
            {
                FND_1();
 800179e:	f000 f9db 	bl	8001b58 <FND_1>
                FND_E();
 80017a2:	f000 fab9 	bl	8001d18 <FND_E>
                Delay_ms(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7fe fff6 	bl	8000798 <Delay_ms>
                FND_2();
 80017ac:	f000 f9ee 	bl	8001b8c <FND_2>
                FND_r();
 80017b0:	f000 fada 	bl	8001d68 <FND_r>
                Delay_ms(1);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7fe ffef 	bl	8000798 <Delay_ms>
                FND_3();
 80017ba:	f000 fa01 	bl	8001bc0 <FND_3>
                FND_zero();
 80017be:	f000 fafb 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7fe ffe8 	bl	8000798 <Delay_ms>
                FND_4();
 80017c8:	f000 fa14 	bl	8001bf4 <FND_4>
                FND_four();
 80017cc:	f000 fb94 	bl	8001ef8 <FND_four>
                Delay_ms(1);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7fe ffe1 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80017d6:	7dbb      	ldrb	r3, [r7, #22]
 80017d8:	3301      	adds	r3, #1
 80017da:	75bb      	strb	r3, [r7, #22]
 80017dc:	7dbb      	ldrb	r3, [r7, #22]
 80017de:	2bfa      	cmp	r3, #250	; 0xfa
 80017e0:	d9dd      	bls.n	800179e <result+0x226>
        for (uint8_t j = 0; j <= 3; j++)
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	3301      	adds	r3, #1
 80017e6:	75fb      	strb	r3, [r7, #23]
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d9d0      	bls.n	8001790 <result+0x218>
            }
        }
        break;
 80017ee:	e1a1      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_5: // Encoder Check Start Point Slit Fail
        for (uint8_t j = 0; j <= 3; j++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	757b      	strb	r3, [r7, #21]
 80017f4:	e02b      	b.n	800184e <result+0x2d6>
        {
            fail_sound(j);
 80017f6:	7d7b      	ldrb	r3, [r7, #21]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe31 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80017fe:	2301      	movs	r3, #1
 8001800:	753b      	strb	r3, [r7, #20]
 8001802:	e01e      	b.n	8001842 <result+0x2ca>
            {
                FND_1();
 8001804:	f000 f9a8 	bl	8001b58 <FND_1>
                FND_E();
 8001808:	f000 fa86 	bl	8001d18 <FND_E>
                Delay_ms(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f7fe ffc3 	bl	8000798 <Delay_ms>
                FND_2();
 8001812:	f000 f9bb 	bl	8001b8c <FND_2>
                FND_r();
 8001816:	f000 faa7 	bl	8001d68 <FND_r>
                Delay_ms(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f7fe ffbc 	bl	8000798 <Delay_ms>
                FND_3();
 8001820:	f000 f9ce 	bl	8001bc0 <FND_3>
                FND_zero();
 8001824:	f000 fac8 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 8001828:	2001      	movs	r0, #1
 800182a:	f7fe ffb5 	bl	8000798 <Delay_ms>
                FND_4();
 800182e:	f000 f9e1 	bl	8001bf4 <FND_4>
                FND_five();
 8001832:	f000 fb89 	bl	8001f48 <FND_five>
                Delay_ms(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f7fe ffae 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800183c:	7d3b      	ldrb	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	753b      	strb	r3, [r7, #20]
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	2bfa      	cmp	r3, #250	; 0xfa
 8001846:	d9dd      	bls.n	8001804 <result+0x28c>
        for (uint8_t j = 0; j <= 3; j++)
 8001848:	7d7b      	ldrb	r3, [r7, #21]
 800184a:	3301      	adds	r3, #1
 800184c:	757b      	strb	r3, [r7, #21]
 800184e:	7d7b      	ldrb	r3, [r7, #21]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d9d0      	bls.n	80017f6 <result+0x27e>
            }
        }
        break;
 8001854:	e16e      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_6: // TDC Init Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001856:	2300      	movs	r3, #0
 8001858:	74fb      	strb	r3, [r7, #19]
 800185a:	e034      	b.n	80018c6 <result+0x34e>
        {
            fail_sound(j);
 800185c:	7cfb      	ldrb	r3, [r7, #19]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fdfe 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001864:	2301      	movs	r3, #1
 8001866:	74bb      	strb	r3, [r7, #18]
 8001868:	e027      	b.n	80018ba <result+0x342>
 800186a:	bf00      	nop
 800186c:	200002b0 	.word	0x200002b0
 8001870:	20000083 	.word	0x20000083
 8001874:	40020800 	.word	0x40020800
 8001878:	40020400 	.word	0x40020400
            {
                FND_1();
 800187c:	f000 f96c 	bl	8001b58 <FND_1>
                FND_E();
 8001880:	f000 fa4a 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001884:	2001      	movs	r0, #1
 8001886:	f7fe ff87 	bl	8000798 <Delay_ms>
                FND_2();
 800188a:	f000 f97f 	bl	8001b8c <FND_2>
                FND_r();
 800188e:	f000 fa6b 	bl	8001d68 <FND_r>
                Delay_ms(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f7fe ff80 	bl	8000798 <Delay_ms>
                FND_3();
 8001898:	f000 f992 	bl	8001bc0 <FND_3>
                FND_zero();
 800189c:	f000 fa8c 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7fe ff79 	bl	8000798 <Delay_ms>
                FND_4();
 80018a6:	f000 f9a5 	bl	8001bf4 <FND_4>
                FND_six();
 80018aa:	f000 fb75 	bl	8001f98 <FND_six>
                Delay_ms(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7fe ff72 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80018b4:	7cbb      	ldrb	r3, [r7, #18]
 80018b6:	3301      	adds	r3, #1
 80018b8:	74bb      	strb	r3, [r7, #18]
 80018ba:	7cbb      	ldrb	r3, [r7, #18]
 80018bc:	2bfa      	cmp	r3, #250	; 0xfa
 80018be:	d9dd      	bls.n	800187c <result+0x304>
        for (uint8_t j = 0; j <= 3; j++)
 80018c0:	7cfb      	ldrb	r3, [r7, #19]
 80018c2:	3301      	adds	r3, #1
 80018c4:	74fb      	strb	r3, [r7, #19]
 80018c6:	7cfb      	ldrb	r3, [r7, #19]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d9c7      	bls.n	800185c <result+0x2e4>
            }
        }
        break;
 80018cc:	e132      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_7: // TDC Calibration Fail
        for (uint8_t j = 0; j <= 3; j++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	747b      	strb	r3, [r7, #17]
 80018d2:	e02b      	b.n	800192c <result+0x3b4>
        {
            fail_sound(j);
 80018d4:	7c7b      	ldrb	r3, [r7, #17]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fdc2 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80018dc:	2301      	movs	r3, #1
 80018de:	743b      	strb	r3, [r7, #16]
 80018e0:	e01e      	b.n	8001920 <result+0x3a8>
            {
                FND_1();
 80018e2:	f000 f939 	bl	8001b58 <FND_1>
                FND_E();
 80018e6:	f000 fa17 	bl	8001d18 <FND_E>
                Delay_ms(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f7fe ff54 	bl	8000798 <Delay_ms>
                FND_2();
 80018f0:	f000 f94c 	bl	8001b8c <FND_2>
                FND_r();
 80018f4:	f000 fa38 	bl	8001d68 <FND_r>
                Delay_ms(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f7fe ff4d 	bl	8000798 <Delay_ms>
                FND_3();
 80018fe:	f000 f95f 	bl	8001bc0 <FND_3>
                FND_zero();
 8001902:	f000 fa59 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f7fe ff46 	bl	8000798 <Delay_ms>
                FND_4();
 800190c:	f000 f972 	bl	8001bf4 <FND_4>
                FND_seven();
 8001910:	f000 fb6a 	bl	8001fe8 <FND_seven>
                Delay_ms(1);
 8001914:	2001      	movs	r0, #1
 8001916:	f7fe ff3f 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800191a:	7c3b      	ldrb	r3, [r7, #16]
 800191c:	3301      	adds	r3, #1
 800191e:	743b      	strb	r3, [r7, #16]
 8001920:	7c3b      	ldrb	r3, [r7, #16]
 8001922:	2bfa      	cmp	r3, #250	; 0xfa
 8001924:	d9dd      	bls.n	80018e2 <result+0x36a>
        for (uint8_t j = 0; j <= 3; j++)
 8001926:	7c7b      	ldrb	r3, [r7, #17]
 8001928:	3301      	adds	r3, #1
 800192a:	747b      	strb	r3, [r7, #17]
 800192c:	7c7b      	ldrb	r3, [r7, #17]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d9d0      	bls.n	80018d4 <result+0x35c>
            }
        }
        break;
 8001932:	e0ff      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_8: // Detect 1 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e02b      	b.n	8001992 <result+0x41a>
        {
            fail_sound(j);
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fd8f 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001942:	2301      	movs	r3, #1
 8001944:	73bb      	strb	r3, [r7, #14]
 8001946:	e01e      	b.n	8001986 <result+0x40e>
            {
                FND_1();
 8001948:	f000 f906 	bl	8001b58 <FND_1>
                FND_E();
 800194c:	f000 f9e4 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f7fe ff21 	bl	8000798 <Delay_ms>
                FND_2();
 8001956:	f000 f919 	bl	8001b8c <FND_2>
                FND_r();
 800195a:	f000 fa05 	bl	8001d68 <FND_r>
                Delay_ms(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f7fe ff1a 	bl	8000798 <Delay_ms>
                FND_3();
 8001964:	f000 f92c 	bl	8001bc0 <FND_3>
                FND_zero();
 8001968:	f000 fa26 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f7fe ff13 	bl	8000798 <Delay_ms>
                FND_4();
 8001972:	f000 f93f 	bl	8001bf4 <FND_4>
                FND_eight();
 8001976:	f000 fb5f 	bl	8002038 <FND_eight>
                Delay_ms(1);
 800197a:	2001      	movs	r0, #1
 800197c:	f7fe ff0c 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001980:	7bbb      	ldrb	r3, [r7, #14]
 8001982:	3301      	adds	r3, #1
 8001984:	73bb      	strb	r3, [r7, #14]
 8001986:	7bbb      	ldrb	r3, [r7, #14]
 8001988:	2bfa      	cmp	r3, #250	; 0xfa
 800198a:	d9dd      	bls.n	8001948 <result+0x3d0>
        for (uint8_t j = 0; j <= 3; j++)
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	3301      	adds	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d9d0      	bls.n	800193a <result+0x3c2>
            }
        }
        break;
 8001998:	e0cc      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_9: // Detect 2 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 800199a:	2300      	movs	r3, #0
 800199c:	737b      	strb	r3, [r7, #13]
 800199e:	e02b      	b.n	80019f8 <result+0x480>
        {
            fail_sound(j);
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fd5c 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80019a8:	2301      	movs	r3, #1
 80019aa:	733b      	strb	r3, [r7, #12]
 80019ac:	e01e      	b.n	80019ec <result+0x474>
            {
                FND_1();
 80019ae:	f000 f8d3 	bl	8001b58 <FND_1>
                FND_E();
 80019b2:	f000 f9b1 	bl	8001d18 <FND_E>
                Delay_ms(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f7fe feee 	bl	8000798 <Delay_ms>
                FND_2();
 80019bc:	f000 f8e6 	bl	8001b8c <FND_2>
                FND_r();
 80019c0:	f000 f9d2 	bl	8001d68 <FND_r>
                Delay_ms(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7fe fee7 	bl	8000798 <Delay_ms>
                FND_3();
 80019ca:	f000 f8f9 	bl	8001bc0 <FND_3>
                FND_zero();
 80019ce:	f000 f9f3 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7fe fee0 	bl	8000798 <Delay_ms>
                FND_4();
 80019d8:	f000 f90c 	bl	8001bf4 <FND_4>
                FND_nine();
 80019dc:	f000 fb54 	bl	8002088 <FND_nine>
                Delay_ms(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7fe fed9 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80019e6:	7b3b      	ldrb	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	733b      	strb	r3, [r7, #12]
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	2bfa      	cmp	r3, #250	; 0xfa
 80019f0:	d9dd      	bls.n	80019ae <result+0x436>
        for (uint8_t j = 0; j <= 3; j++)
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	3301      	adds	r3, #1
 80019f6:	737b      	strb	r3, [r7, #13]
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d9d0      	bls.n	80019a0 <result+0x428>
            }
        }
        break;
 80019fe:	e099      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_10: // Detect 3 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	72fb      	strb	r3, [r7, #11]
 8001a04:	e02b      	b.n	8001a5e <result+0x4e6>
        {
            fail_sound(j);
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd29 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001a0e:	2301      	movs	r3, #1
 8001a10:	72bb      	strb	r3, [r7, #10]
 8001a12:	e01e      	b.n	8001a52 <result+0x4da>
            {
                FND_1();
 8001a14:	f000 f8a0 	bl	8001b58 <FND_1>
                FND_E();
 8001a18:	f000 f97e 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7fe febb 	bl	8000798 <Delay_ms>
                FND_2();
 8001a22:	f000 f8b3 	bl	8001b8c <FND_2>
                FND_r();
 8001a26:	f000 f99f 	bl	8001d68 <FND_r>
                Delay_ms(1);
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f7fe feb4 	bl	8000798 <Delay_ms>
                FND_3();
 8001a30:	f000 f8c6 	bl	8001bc0 <FND_3>
                FND_one();
 8001a34:	f000 f9e8 	bl	8001e08 <FND_one>
                Delay_ms(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7fe fead 	bl	8000798 <Delay_ms>
                FND_4();
 8001a3e:	f000 f8d9 	bl	8001bf4 <FND_4>
                FND_zero();
 8001a42:	f000 f9b9 	bl	8001db8 <FND_zero>
                Delay_ms(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7fe fea6 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001a4c:	7abb      	ldrb	r3, [r7, #10]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	72bb      	strb	r3, [r7, #10]
 8001a52:	7abb      	ldrb	r3, [r7, #10]
 8001a54:	2bfa      	cmp	r3, #250	; 0xfa
 8001a56:	d9dd      	bls.n	8001a14 <result+0x49c>
        for (uint8_t j = 0; j <= 3; j++)
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	72fb      	strb	r3, [r7, #11]
 8001a5e:	7afb      	ldrb	r3, [r7, #11]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d9d0      	bls.n	8001a06 <result+0x48e>
            }
        }
        break;
 8001a64:	e066      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_11: // LD Tx feedback Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	727b      	strb	r3, [r7, #9]
 8001a6a:	e02b      	b.n	8001ac4 <result+0x54c>
        {
            fail_sound(j);
 8001a6c:	7a7b      	ldrb	r3, [r7, #9]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fcf6 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001a74:	2301      	movs	r3, #1
 8001a76:	723b      	strb	r3, [r7, #8]
 8001a78:	e01e      	b.n	8001ab8 <result+0x540>
            {
                FND_1();
 8001a7a:	f000 f86d 	bl	8001b58 <FND_1>
                FND_E();
 8001a7e:	f000 f94b 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7fe fe88 	bl	8000798 <Delay_ms>
                FND_2();
 8001a88:	f000 f880 	bl	8001b8c <FND_2>
                FND_r();
 8001a8c:	f000 f96c 	bl	8001d68 <FND_r>
                Delay_ms(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7fe fe81 	bl	8000798 <Delay_ms>
                FND_3();
 8001a96:	f000 f893 	bl	8001bc0 <FND_3>
                FND_one();
 8001a9a:	f000 f9b5 	bl	8001e08 <FND_one>
                Delay_ms(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7fe fe7a 	bl	8000798 <Delay_ms>
                FND_4();
 8001aa4:	f000 f8a6 	bl	8001bf4 <FND_4>
                FND_one();
 8001aa8:	f000 f9ae 	bl	8001e08 <FND_one>
                Delay_ms(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7fe fe73 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001ab2:	7a3b      	ldrb	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	723b      	strb	r3, [r7, #8]
 8001ab8:	7a3b      	ldrb	r3, [r7, #8]
 8001aba:	2bfa      	cmp	r3, #250	; 0xfa
 8001abc:	d9dd      	bls.n	8001a7a <result+0x502>
        for (uint8_t j = 0; j <= 3; j++)
 8001abe:	7a7b      	ldrb	r3, [r7, #9]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	727b      	strb	r3, [r7, #9]
 8001ac4:	7a7b      	ldrb	r3, [r7, #9]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d9d0      	bls.n	8001a6c <result+0x4f4>
            }
        }
        break;
 8001aca:	e033      	b.n	8001b34 <result+0x5bc>
    case kResult_Err_12: //여분
        for (uint8_t j = 0; j <= 3; j++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	e02b      	b.n	8001b2a <result+0x5b2>
        {
            fail_sound(j);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fcc3 	bl	8001460 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001ada:	2301      	movs	r3, #1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	e01e      	b.n	8001b1e <result+0x5a6>
            {
                FND_1();
 8001ae0:	f000 f83a 	bl	8001b58 <FND_1>
                FND_E();
 8001ae4:	f000 f918 	bl	8001d18 <FND_E>
                Delay_ms(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7fe fe55 	bl	8000798 <Delay_ms>
                FND_2();
 8001aee:	f000 f84d 	bl	8001b8c <FND_2>
                FND_r();
 8001af2:	f000 f939 	bl	8001d68 <FND_r>
                Delay_ms(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7fe fe4e 	bl	8000798 <Delay_ms>
                FND_3();
 8001afc:	f000 f860 	bl	8001bc0 <FND_3>
                FND_one();
 8001b00:	f000 f982 	bl	8001e08 <FND_one>
                Delay_ms(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7fe fe47 	bl	8000798 <Delay_ms>
                FND_4();
 8001b0a:	f000 f873 	bl	8001bf4 <FND_4>
                FND_two();
 8001b0e:	f000 f9a3 	bl	8001e58 <FND_two>
                Delay_ms(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7fe fe40 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2bfa      	cmp	r3, #250	; 0xfa
 8001b22:	d9dd      	bls.n	8001ae0 <result+0x568>
        for (uint8_t j = 0; j <= 3; j++)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	3301      	adds	r3, #1
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d9d0      	bls.n	8001ad2 <result+0x55a>
            }
        }
        break;
 8001b30:	e000      	b.n	8001b34 <result+0x5bc>

    default:
        break;
 8001b32:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001b34:	2108      	movs	r1, #8
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <result+0x5d8>)
 8001b38:	f003 f85e 	bl	8004bf8 <HAL_TIM_PWM_Stop>
    g_Result = kResult_None;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <result+0x5dc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
    turn_off();
 8001b42:	f000 fac9 	bl	80020d8 <turn_off>
}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002b0 	.word	0x200002b0
 8001b54:	20000083 	.word	0x20000083

08001b58 <FND_1>:

void FND_1(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4809      	ldr	r0, [pc, #36]	; (8001b84 <FND_1+0x2c>)
 8001b60:	f7ff fc60 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001b64:	2120      	movs	r1, #32
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <FND_1+0x30>)
 8001b68:	f7ff fc6a 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <FND_1+0x2c>)
 8001b72:	f7ff fc65 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <FND_1+0x2c>)
 8001b7c:	f7ff fc60 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020400 	.word	0x40020400

08001b8c <FND_2>:
void FND_2(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001b90:	2104      	movs	r1, #4
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <FND_2+0x2c>)
 8001b94:	f7ff fc54 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001b98:	2120      	movs	r1, #32
 8001b9a:	4808      	ldr	r0, [pc, #32]	; (8001bbc <FND_2+0x30>)
 8001b9c:	f7ff fc42 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <FND_2+0x2c>)
 8001ba6:	f7ff fc4b 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bae:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <FND_2+0x2c>)
 8001bb0:	f7ff fc46 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020400 	.word	0x40020400

08001bc0 <FND_3>:
void FND_3(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <FND_3+0x2c>)
 8001bc8:	f7ff fc3a 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001bcc:	2120      	movs	r1, #32
 8001bce:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <FND_3+0x30>)
 8001bd0:	f7ff fc36 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <FND_3+0x2c>)
 8001bda:	f7ff fc23 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be2:	4802      	ldr	r0, [pc, #8]	; (8001bec <FND_3+0x2c>)
 8001be4:	f7ff fc2c 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <FND_4>:
void FND_4(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <FND_4+0x2c>)
 8001bfc:	f7ff fc20 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c00:	2120      	movs	r1, #32
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <FND_4+0x30>)
 8001c04:	f7ff fc1c 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <FND_4+0x2c>)
 8001c0e:	f7ff fc17 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c16:	4802      	ldr	r0, [pc, #8]	; (8001c20 <FND_4+0x2c>)
 8001c18:	f7ff fc04 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020400 	.word	0x40020400

08001c28 <FND_P>:

void FND_P(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c30:	480f      	ldr	r0, [pc, #60]	; (8001c70 <FND_P+0x48>)
 8001c32:	f7ff fbf7 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <FND_P+0x4c>)
 8001c3a:	f7ff fbf3 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c3e:	2140      	movs	r1, #64	; 0x40
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <FND_P+0x4c>)
 8001c42:	f7ff fbfd 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <FND_P+0x4c>)
 8001c4c:	f7ff fbf8 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c50:	2102      	movs	r1, #2
 8001c52:	4807      	ldr	r0, [pc, #28]	; (8001c70 <FND_P+0x48>)
 8001c54:	f7ff fbe6 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <FND_P+0x48>)
 8001c5c:	f7ff fbe2 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <FND_P+0x4c>)
 8001c66:	f7ff fbdd 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020400 	.word	0x40020400

08001c78 <FND_A>:

void FND_A(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c80:	480f      	ldr	r0, [pc, #60]	; (8001cc0 <FND_A+0x48>)
 8001c82:	f7ff fbcf 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <FND_A+0x4c>)
 8001c8a:	f7ff fbcb 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <FND_A+0x4c>)
 8001c92:	f7ff fbc7 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9a:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <FND_A+0x4c>)
 8001c9c:	f7ff fbd0 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <FND_A+0x48>)
 8001ca4:	f7ff fbbe 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <FND_A+0x48>)
 8001cac:	f7ff fbba 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <FND_A+0x4c>)
 8001cb6:	f7ff fbb5 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <FND_S>:

void FND_S(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <FND_S+0x48>)
 8001cd2:	f7ff fba7 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	480e      	ldr	r0, [pc, #56]	; (8001d14 <FND_S+0x4c>)
 8001cda:	f7ff fbb1 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001cde:	2140      	movs	r1, #64	; 0x40
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <FND_S+0x4c>)
 8001ce2:	f7ff fb9f 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <FND_S+0x4c>)
 8001cec:	f7ff fb9a 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <FND_S+0x48>)
 8001cf4:	f7ff fba4 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <FND_S+0x48>)
 8001cfc:	f7ff fb92 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <FND_S+0x4c>)
 8001d06:	f7ff fb8d 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020400 	.word	0x40020400

08001d18 <FND_E>:

void FND_E(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <FND_E+0x48>)
 8001d22:	f7ff fb7f 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	480e      	ldr	r0, [pc, #56]	; (8001d64 <FND_E+0x4c>)
 8001d2a:	f7ff fb89 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <FND_E+0x4c>)
 8001d32:	f7ff fb85 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3a:	480a      	ldr	r0, [pc, #40]	; (8001d64 <FND_E+0x4c>)
 8001d3c:	f7ff fb72 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d40:	2102      	movs	r1, #2
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <FND_E+0x48>)
 8001d44:	f7ff fb6e 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <FND_E+0x48>)
 8001d4c:	f7ff fb6a 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d54:	4803      	ldr	r0, [pc, #12]	; (8001d64 <FND_E+0x4c>)
 8001d56:	f7ff fb65 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020400 	.word	0x40020400

08001d68 <FND_r>:

void FND_r(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d70:	480f      	ldr	r0, [pc, #60]	; (8001db0 <FND_r+0x48>)
 8001d72:	f7ff fb65 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	480e      	ldr	r0, [pc, #56]	; (8001db4 <FND_r+0x4c>)
 8001d7a:	f7ff fb61 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	480c      	ldr	r0, [pc, #48]	; (8001db4 <FND_r+0x4c>)
 8001d82:	f7ff fb5d 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8a:	480a      	ldr	r0, [pc, #40]	; (8001db4 <FND_r+0x4c>)
 8001d8c:	f7ff fb58 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d90:	2102      	movs	r1, #2
 8001d92:	4807      	ldr	r0, [pc, #28]	; (8001db0 <FND_r+0x48>)
 8001d94:	f7ff fb46 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <FND_r+0x48>)
 8001d9c:	f7ff fb50 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <FND_r+0x4c>)
 8001da6:	f7ff fb3d 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020400 	.word	0x40020400

08001db8 <FND_zero>:

void FND_zero(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc0:	480f      	ldr	r0, [pc, #60]	; (8001e00 <FND_zero+0x48>)
 8001dc2:	f7ff fb2f 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <FND_zero+0x4c>)
 8001dca:	f7ff fb2b 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001dce:	2140      	movs	r1, #64	; 0x40
 8001dd0:	480c      	ldr	r0, [pc, #48]	; (8001e04 <FND_zero+0x4c>)
 8001dd2:	f7ff fb27 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <FND_zero+0x4c>)
 8001ddc:	f7ff fb22 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001de0:	2102      	movs	r1, #2
 8001de2:	4807      	ldr	r0, [pc, #28]	; (8001e00 <FND_zero+0x48>)
 8001de4:	f7ff fb1e 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001de8:	2101      	movs	r1, #1
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <FND_zero+0x48>)
 8001dec:	f7ff fb1a 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <FND_zero+0x4c>)
 8001df6:	f7ff fb23 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020400 	.word	0x40020400

08001e08 <FND_one>:

void FND_one(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e10:	480f      	ldr	r0, [pc, #60]	; (8001e50 <FND_one+0x48>)
 8001e12:	f7ff fb15 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	480e      	ldr	r0, [pc, #56]	; (8001e54 <FND_one+0x4c>)
 8001e1a:	f7ff fb03 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e1e:	2140      	movs	r1, #64	; 0x40
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <FND_one+0x4c>)
 8001e22:	f7ff faff 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2a:	480a      	ldr	r0, [pc, #40]	; (8001e54 <FND_one+0x4c>)
 8001e2c:	f7ff fb08 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e30:	2102      	movs	r1, #2
 8001e32:	4807      	ldr	r0, [pc, #28]	; (8001e50 <FND_one+0x48>)
 8001e34:	f7ff fb04 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <FND_one+0x48>)
 8001e3c:	f7ff fb00 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <FND_one+0x4c>)
 8001e46:	f7ff fafb 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40020800 	.word	0x40020800
 8001e54:	40020400 	.word	0x40020400

08001e58 <FND_two>:

void FND_two(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e60:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <FND_two+0x48>)
 8001e62:	f7ff fadf 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e66:	2180      	movs	r1, #128	; 0x80
 8001e68:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <FND_two+0x4c>)
 8001e6a:	f7ff fadb 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e6e:	2140      	movs	r1, #64	; 0x40
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <FND_two+0x4c>)
 8001e72:	f7ff fae5 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <FND_two+0x4c>)
 8001e7c:	f7ff fad2 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e80:	2102      	movs	r1, #2
 8001e82:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <FND_two+0x48>)
 8001e84:	f7ff face 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <FND_two+0x48>)
 8001e8c:	f7ff fad8 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <FND_two+0x4c>)
 8001e96:	f7ff fac5 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <FND_three>:
void FND_three(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb0:	480f      	ldr	r0, [pc, #60]	; (8001ef0 <FND_three+0x48>)
 8001eb2:	f7ff fab7 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <FND_three+0x4c>)
 8001eba:	f7ff fab3 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001ebe:	2140      	movs	r1, #64	; 0x40
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <FND_three+0x4c>)
 8001ec2:	f7ff faaf 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eca:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <FND_three+0x4c>)
 8001ecc:	f7ff faaa 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <FND_three+0x48>)
 8001ed4:	f7ff fab4 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <FND_three+0x48>)
 8001edc:	f7ff fab0 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <FND_three+0x4c>)
 8001ee6:	f7ff fa9d 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <FND_four>:

void FND_four(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f00:	480f      	ldr	r0, [pc, #60]	; (8001f40 <FND_four+0x48>)
 8001f02:	f7ff fa9d 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	480e      	ldr	r0, [pc, #56]	; (8001f44 <FND_four+0x4c>)
 8001f0a:	f7ff fa8b 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <FND_four+0x4c>)
 8001f12:	f7ff fa87 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1a:	480a      	ldr	r0, [pc, #40]	; (8001f44 <FND_four+0x4c>)
 8001f1c:	f7ff fa90 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f20:	2102      	movs	r1, #2
 8001f22:	4807      	ldr	r0, [pc, #28]	; (8001f40 <FND_four+0x48>)
 8001f24:	f7ff fa8c 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <FND_four+0x48>)
 8001f2c:	f7ff fa7a 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <FND_four+0x4c>)
 8001f36:	f7ff fa75 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020400 	.word	0x40020400

08001f48 <FND_five>:

void FND_five(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <FND_five+0x48>)
 8001f52:	f7ff fa67 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	480e      	ldr	r0, [pc, #56]	; (8001f94 <FND_five+0x4c>)
 8001f5a:	f7ff fa71 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f5e:	2140      	movs	r1, #64	; 0x40
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <FND_five+0x4c>)
 8001f62:	f7ff fa5f 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6a:	480a      	ldr	r0, [pc, #40]	; (8001f94 <FND_five+0x4c>)
 8001f6c:	f7ff fa5a 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f70:	2102      	movs	r1, #2
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <FND_five+0x48>)
 8001f74:	f7ff fa64 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <FND_five+0x48>)
 8001f7c:	f7ff fa52 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <FND_five+0x4c>)
 8001f86:	f7ff fa4d 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020400 	.word	0x40020400

08001f98 <FND_six>:

void FND_six(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa0:	480f      	ldr	r0, [pc, #60]	; (8001fe0 <FND_six+0x48>)
 8001fa2:	f7ff fa3f 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <FND_six+0x4c>)
 8001faa:	f7ff fa49 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <FND_six+0x4c>)
 8001fb2:	f7ff fa37 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fba:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <FND_six+0x4c>)
 8001fbc:	f7ff fa32 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <FND_six+0x48>)
 8001fc4:	f7ff fa2e 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <FND_six+0x48>)
 8001fcc:	f7ff fa2a 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <FND_six+0x4c>)
 8001fd6:	f7ff fa25 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <FND_seven>:

void FND_seven(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff0:	480f      	ldr	r0, [pc, #60]	; (8002030 <FND_seven+0x48>)
 8001ff2:	f7ff fa17 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <FND_seven+0x4c>)
 8001ffa:	f7ff fa13 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <FND_seven+0x4c>)
 8002002:	f7ff fa0f 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8002006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200a:	480a      	ldr	r0, [pc, #40]	; (8002034 <FND_seven+0x4c>)
 800200c:	f7ff fa18 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002010:	2102      	movs	r1, #2
 8002012:	4807      	ldr	r0, [pc, #28]	; (8002030 <FND_seven+0x48>)
 8002014:	f7ff fa14 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002018:	2101      	movs	r1, #1
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <FND_seven+0x48>)
 800201c:	f7ff fa10 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <FND_seven+0x4c>)
 8002026:	f7ff fa0b 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40020800 	.word	0x40020800
 8002034:	40020400 	.word	0x40020400

08002038 <FND_eight>:

void FND_eight(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 800203c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002040:	480f      	ldr	r0, [pc, #60]	; (8002080 <FND_eight+0x48>)
 8002042:	f7ff f9ef 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	480e      	ldr	r0, [pc, #56]	; (8002084 <FND_eight+0x4c>)
 800204a:	f7ff f9eb 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <FND_eight+0x4c>)
 8002052:	f7ff f9e7 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8002056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205a:	480a      	ldr	r0, [pc, #40]	; (8002084 <FND_eight+0x4c>)
 800205c:	f7ff f9e2 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002060:	2102      	movs	r1, #2
 8002062:	4807      	ldr	r0, [pc, #28]	; (8002080 <FND_eight+0x48>)
 8002064:	f7ff f9de 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002068:	2101      	movs	r1, #1
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <FND_eight+0x48>)
 800206c:	f7ff f9da 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002070:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <FND_eight+0x4c>)
 8002076:	f7ff f9d5 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40020800 	.word	0x40020800
 8002084:	40020400 	.word	0x40020400

08002088 <FND_nine>:
void FND_nine(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 800208c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002090:	480f      	ldr	r0, [pc, #60]	; (80020d0 <FND_nine+0x48>)
 8002092:	f7ff f9c7 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	480e      	ldr	r0, [pc, #56]	; (80020d4 <FND_nine+0x4c>)
 800209a:	f7ff f9c3 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	480c      	ldr	r0, [pc, #48]	; (80020d4 <FND_nine+0x4c>)
 80020a2:	f7ff f9bf 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80020a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020aa:	480a      	ldr	r0, [pc, #40]	; (80020d4 <FND_nine+0x4c>)
 80020ac:	f7ff f9ba 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80020b0:	2102      	movs	r1, #2
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <FND_nine+0x48>)
 80020b4:	f7ff f9c4 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <FND_nine+0x48>)
 80020bc:	f7ff f9b2 	bl	8001424 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80020c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <FND_nine+0x4c>)
 80020c6:	f7ff f9ad 	bl	8001424 <LL_GPIO_SetOutputPin>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020400 	.word	0x40020400

080020d8 <turn_off>:

void turn_off(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80020dc:	2104      	movs	r1, #4
 80020de:	4809      	ldr	r0, [pc, #36]	; (8002104 <turn_off+0x2c>)
 80020e0:	f7ff f9ae 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80020e4:	2120      	movs	r1, #32
 80020e6:	4808      	ldr	r0, [pc, #32]	; (8002108 <turn_off+0x30>)
 80020e8:	f7ff f9aa 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80020ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <turn_off+0x2c>)
 80020f2:	f7ff f9a5 	bl	8001440 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80020f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020fa:	4802      	ldr	r0, [pc, #8]	; (8002104 <turn_off+0x2c>)
 80020fc:	f7ff f9a0 	bl	8001440 <LL_GPIO_ResetOutputPin>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020800 	.word	0x40020800
 8002108:	40020400 	.word	0x40020400

0800210c <InitUartQueue>:

UARTQUEUE LiDARQueue;
UARTQUEUE ViewerQueue;

void InitUartQueue(pUARTQUEUE pQueue)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    pQueue->data = pQueue->head = pQueue->tail = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	705a      	strb	r2, [r3, #1]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	785a      	ldrb	r2, [r3, #1]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	709a      	strb	r2, [r3, #2]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <PutDataToUartQueue>:

void PutDataToUartQueue(UART_HandleTypeDef *huart, uint8_t data)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <PutDataToUartQueue+0x5c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <PutDataToUartQueue+0x1a>
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <PutDataToUartQueue+0x60>)
 8002150:	e000      	b.n	8002154 <PutDataToUartQueue+0x1c>
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <PutDataToUartQueue+0x64>)
 8002154:	60fb      	str	r3, [r7, #12]
    // if (pQueue->data == QUEUE_BUFFER_LENGTH)
    //     GetDataFromUartQueue(huart);
    pQueue->Buffer[pQueue->head++] = data;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	b2d1      	uxtb	r1, r2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	7011      	strb	r1, [r2, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	70da      	strb	r2, [r3, #3]
    if (pQueue->head == QUEUE_BUFFER_LENGTH)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2bff      	cmp	r3, #255	; 0xff
 8002172:	d102      	bne.n	800217a <PutDataToUartQueue+0x42>
        pQueue->head = 0;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    pQueue->data++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	3301      	adds	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	709a      	strb	r2, [r3, #2]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40005000 	.word	0x40005000
 8002198:	20000188 	.word	0x20000188
 800219c:	20000084 	.word	0x20000084

080021a0 <GetDataFromUartQueue>:

uint8_t GetDataFromUartQueue(UART_HandleTypeDef *huart)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    uint8_t ret;

    // UART_HandleTypeDef *dst = (huart->Instance == USART5 ? &hMonitor : &hViewer);
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a13      	ldr	r2, [pc, #76]	; (80021fc <GetDataFromUartQueue+0x5c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <GetDataFromUartQueue+0x16>
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <GetDataFromUartQueue+0x60>)
 80021b4:	e000      	b.n	80021b8 <GetDataFromUartQueue+0x18>
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <GetDataFromUartQueue+0x64>)
 80021b8:	60fb      	str	r3, [r7, #12]
    // if (HAL_UART_Transmit(dst, pQueue->Buffer + pQueue->tail, 1, 3000) != HAL_OK)
    // {
    //     Error_Handler(__FILE__, __LINE__);
    // }
    ret = pQueue->Buffer[pQueue->tail];
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4413      	add	r3, r2
 80021c4:	78db      	ldrb	r3, [r3, #3]
 80021c6:	72fb      	strb	r3, [r7, #11]
    pQueue->tail++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	785b      	ldrb	r3, [r3, #1]
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	705a      	strb	r2, [r3, #1]
    if (pQueue->tail == QUEUE_BUFFER_LENGTH)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d102      	bne.n	80021e2 <GetDataFromUartQueue+0x42>
        pQueue->tail = 0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	705a      	strb	r2, [r3, #1]
    pQueue->data--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	789b      	ldrb	r3, [r3, #2]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	709a      	strb	r2, [r3, #2]
    return ret;
 80021ee:	7afb      	ldrb	r3, [r7, #11]
    HAL_Delay(1);
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40005000 	.word	0x40005000
 8002200:	20000188 	.word	0x20000188
 8002204:	20000084 	.word	0x20000084

08002208 <Info_status>:
uint8_t Detect_Check_Count = 0;
uint8_t VIEWER_RX_BUFF[9] = {0};
uint8_t VIEWER_RX_Cnt = 0;

void Info_status(void)
{
 8002208:	b598      	push	{r3, r4, r7, lr}
 800220a:	af00      	add	r7, sp, #0
    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe fe9b 	bl	8000f48 <LiDAR_Protocol_Tx>
    Delay_ms(100);
 8002212:	2064      	movs	r0, #100	; 0x64
 8002214:	f7fe fac0 	bl	8000798 <Delay_ms>
    while (LiDARQueue.data > 0)
 8002218:	e00d      	b.n	8002236 <Info_status+0x2e>
    {
        INFO_RX_BUFF[INFO_RX_Cnt++] = GetDataFromUartQueue(&hLiDAR);
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <Info_status+0x68>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	b2d1      	uxtb	r1, r2
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <Info_status+0x68>)
 8002224:	7011      	strb	r1, [r2, #0]
 8002226:	461c      	mov	r4, r3
 8002228:	4812      	ldr	r0, [pc, #72]	; (8002274 <Info_status+0x6c>)
 800222a:	f7ff ffb9 	bl	80021a0 <GetDataFromUartQueue>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <Info_status+0x70>)
 8002234:	551a      	strb	r2, [r3, r4]
    while (LiDARQueue.data > 0)
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <Info_status+0x74>)
 8002238:	789b      	ldrb	r3, [r3, #2]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ed      	bne.n	800221a <Info_status+0x12>
    }
    if (INFO_RX_BUFF[0] != 0x00)
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <Info_status+0x70>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <Info_status+0x5a>
    {
        LiDAR_Model = INFO_RX_BUFF[10]; //원래 11
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <Info_status+0x70>)
 8002248:	7a9a      	ldrb	r2, [r3, #10]
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <Info_status+0x78>)
 800224c:	701a      	strb	r2, [r3, #0]
        INFO_RX_Flag = 1;
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <Info_status+0x7c>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
        INFO_RX_Cnt = 0;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <Info_status+0x68>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
        g_Status = kStatus_Detect1;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <Info_status+0x80>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
    }
}
 8002260:	e004      	b.n	800226c <Info_status+0x64>
        memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 8002262:	220d      	movs	r2, #13
 8002264:	2100      	movs	r1, #0
 8002266:	4804      	ldr	r0, [pc, #16]	; (8002278 <Info_status+0x70>)
 8002268:	f004 fd26 	bl	8006cb8 <memset>
}
 800226c:	bf00      	nop
 800226e:	bd98      	pop	{r3, r4, r7, pc}
 8002270:	20000299 	.word	0x20000299
 8002274:	2000033c 	.word	0x2000033c
 8002278:	2000028c 	.word	0x2000028c
 800227c:	20000084 	.word	0x20000084
 8002280:	2000029a 	.word	0x2000029a
 8002284:	2000028b 	.word	0x2000028b
 8002288:	20000080 	.word	0x20000080

0800228c <Detect1_status>:

void Detect1_status(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 10 && Detect1_Result != 0x01U)
 8002290:	e013      	b.n	80022ba <Detect1_status+0x2e>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT1);
 8002292:	2002      	movs	r0, #2
 8002294:	f7fe fe58 	bl	8000f48 <LiDAR_Protocol_Tx>
        Delay_ms(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f7fe fa7d 	bl	8000798 <Delay_ms>
        Detect1_Result = HAL_GPIO_ReadPin(Detect_SIG_1_GPIO_Port, Detect_SIG_1_Pin);
 800229e:	2110      	movs	r1, #16
 80022a0:	4813      	ldr	r0, [pc, #76]	; (80022f0 <Detect1_status+0x64>)
 80022a2:	f001 fd6f 	bl	8003d84 <HAL_GPIO_ReadPin>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <Detect1_status+0x68>)
 80022ac:	701a      	strb	r2, [r3, #0]

        Detect_Check_Count++;
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <Detect1_status+0x6c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <Detect1_status+0x6c>)
 80022b8:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 10 && Detect1_Result != 0x01U)
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <Detect1_status+0x6c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b09      	cmp	r3, #9
 80022c0:	d803      	bhi.n	80022ca <Detect1_status+0x3e>
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <Detect1_status+0x68>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d1e3      	bne.n	8002292 <Detect1_status+0x6>
    }

    Detect1_Flag = 1;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <Detect1_status+0x70>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    Detect_Check_Count = 0;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <Detect1_status+0x6c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
    if (LiDAR_Model == 0x04) // R300
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <Detect1_status+0x74>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d103      	bne.n	80022e6 <Detect1_status+0x5a>
    {
        g_Status = kStatus_Detect3;
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <Detect1_status+0x78>)
 80022e0:	2203      	movs	r2, #3
 80022e2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_Status = kStatus_Detect2;
    }
}
 80022e4:	e002      	b.n	80022ec <Detect1_status+0x60>
        g_Status = kStatus_Detect2;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <Detect1_status+0x78>)
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40020000 	.word	0x40020000
 80022f4:	2000029b 	.word	0x2000029b
 80022f8:	200002a1 	.word	0x200002a1
 80022fc:	2000029c 	.word	0x2000029c
 8002300:	2000029a 	.word	0x2000029a
 8002304:	20000080 	.word	0x20000080

08002308 <Detect2_status>:

void Detect2_status(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 10 && Detect2_Result != 0x01U)
 800230c:	e013      	b.n	8002336 <Detect2_status+0x2e>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT2);
 800230e:	2003      	movs	r0, #3
 8002310:	f7fe fe1a 	bl	8000f48 <LiDAR_Protocol_Tx>
        Delay_ms(1);
 8002314:	2001      	movs	r0, #1
 8002316:	f7fe fa3f 	bl	8000798 <Delay_ms>
        Detect2_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 800231a:	2120      	movs	r1, #32
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <Detect2_status+0x54>)
 800231e:	f001 fd31 	bl	8003d84 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <Detect2_status+0x58>)
 8002328:	701a      	strb	r2, [r3, #0]

        Detect_Check_Count++;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <Detect2_status+0x5c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <Detect2_status+0x5c>)
 8002334:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 10 && Detect2_Result != 0x01U)
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <Detect2_status+0x5c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b09      	cmp	r3, #9
 800233c:	d803      	bhi.n	8002346 <Detect2_status+0x3e>
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <Detect2_status+0x58>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d1e3      	bne.n	800230e <Detect2_status+0x6>
    }

    Detect2_Flag = 1;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <Detect2_status+0x60>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    Detect_Check_Count = 0;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <Detect2_status+0x5c>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Detect3;
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <Detect2_status+0x64>)
 8002354:	2203      	movs	r2, #3
 8002356:	701a      	strb	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40020000 	.word	0x40020000
 8002360:	2000029d 	.word	0x2000029d
 8002364:	200002a1 	.word	0x200002a1
 8002368:	2000029e 	.word	0x2000029e
 800236c:	20000080 	.word	0x20000080

08002370 <Detect3_status>:

void Detect3_status(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 10 && Detect3_Result != 0x01U)
 8002374:	e020      	b.n	80023b8 <Detect3_status+0x48>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT3);
 8002376:	2004      	movs	r0, #4
 8002378:	f7fe fde6 	bl	8000f48 <LiDAR_Protocol_Tx>
        Delay_ms(5);
 800237c:	2005      	movs	r0, #5
 800237e:	f7fe fa0b 	bl	8000798 <Delay_ms>
        if (LiDAR_Model == 0x04) // R300
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <Detect3_status+0x70>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d108      	bne.n	800239c <Detect3_status+0x2c>
        {
            Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 800238a:	2120      	movs	r1, #32
 800238c:	4815      	ldr	r0, [pc, #84]	; (80023e4 <Detect3_status+0x74>)
 800238e:	f001 fcf9 	bl	8003d84 <HAL_GPIO_ReadPin>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <Detect3_status+0x78>)
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e007      	b.n	80023ac <Detect3_status+0x3c>
        }
        else
        {
            Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_3_GPIO_Port, Detect_SIG_3_Pin);
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <Detect3_status+0x74>)
 80023a0:	f001 fcf0 	bl	8003d84 <HAL_GPIO_ReadPin>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <Detect3_status+0x78>)
 80023aa:	701a      	strb	r2, [r3, #0]
        }

        Detect_Check_Count++;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <Detect3_status+0x7c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <Detect3_status+0x7c>)
 80023b6:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 10 && Detect3_Result != 0x01U)
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <Detect3_status+0x7c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d803      	bhi.n	80023c8 <Detect3_status+0x58>
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <Detect3_status+0x78>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d1d6      	bne.n	8002376 <Detect3_status+0x6>
    }

    Detect3_Flag = 1;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <Detect3_status+0x80>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
    Detect_Check_Count = 0;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <Detect3_status+0x7c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Idle;
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <Detect3_status+0x84>)
 80023d6:	2204      	movs	r2, #4
 80023d8:	701a      	strb	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000029a 	.word	0x2000029a
 80023e4:	40020000 	.word	0x40020000
 80023e8:	2000029f 	.word	0x2000029f
 80023ec:	200002a1 	.word	0x200002a1
 80023f0:	200002a0 	.word	0x200002a0
 80023f4:	20000080 	.word	0x20000080

080023f8 <Idle_status>:

void Idle_status(void)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b097      	sub	sp, #92	; 0x5c
 80023fc:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&hViewer, UART_IT_RXNE);
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <Idle_status+0x1fc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <Idle_status+0x1fc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0220 	orr.w	r2, r2, #32
 800240c:	60da      	str	r2, [r3, #12]

    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <Idle_status+0x200>)
 8002410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002414:	ca07      	ldmia	r2, {r0, r1, r2}
 8002416:	c303      	stmia	r3!, {r0, r1}
 8002418:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 800241a:	4a78      	ldr	r2, [pc, #480]	; (80025fc <Idle_status+0x204>)
 800241c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002420:	ca07      	ldmia	r2, {r0, r1, r2}
 8002422:	c303      	stmia	r3!, {r0, r1}
 8002424:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 8002426:	4a76      	ldr	r2, [pc, #472]	; (8002600 <Idle_status+0x208>)
 8002428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800242c:	ca07      	ldmia	r2, {r0, r1, r2}
 800242e:	c303      	stmia	r3!, {r0, r1}
 8002430:	701a      	strb	r2, [r3, #0]
    uint8_t START_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x24};
 8002432:	4a74      	ldr	r2, [pc, #464]	; (8002604 <Idle_status+0x20c>)
 8002434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002438:	ca07      	ldmia	r2, {r0, r1, r2}
 800243a:	c303      	stmia	r3!, {r0, r1}
 800243c:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT1_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x27};
 800243e:	4a72      	ldr	r2, [pc, #456]	; (8002608 <Idle_status+0x210>)
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	ca07      	ldmia	r2, {r0, r1, r2}
 8002446:	c303      	stmia	r3!, {r0, r1}
 8002448:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT2_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x26};
 800244a:	4a70      	ldr	r2, [pc, #448]	; (800260c <Idle_status+0x214>)
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	ca07      	ldmia	r2, {r0, r1, r2}
 8002452:	c303      	stmia	r3!, {r0, r1}
 8002454:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT3_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x21};
 8002456:	4a6e      	ldr	r2, [pc, #440]	; (8002610 <Idle_status+0x218>)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	ca07      	ldmia	r2, {r0, r1, r2}
 800245c:	c303      	stmia	r3!, {r0, r1}
 800245e:	701a      	strb	r2, [r3, #0]
    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Cur_Check();
 8002460:	f7fe f8e8 	bl	8000634 <LiDAR_Cur_Check>

    while (ViewerQueue.data > 0)
 8002464:	e00d      	b.n	8002482 <Idle_status+0x8a>
    {
        VIEWER_RX_BUFF[VIEWER_RX_Cnt++] = GetDataFromUartQueue(&hViewer);
 8002466:	4b6b      	ldr	r3, [pc, #428]	; (8002614 <Idle_status+0x21c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	b2d1      	uxtb	r1, r2
 800246e:	4a69      	ldr	r2, [pc, #420]	; (8002614 <Idle_status+0x21c>)
 8002470:	7011      	strb	r1, [r2, #0]
 8002472:	461c      	mov	r4, r3
 8002474:	485f      	ldr	r0, [pc, #380]	; (80025f4 <Idle_status+0x1fc>)
 8002476:	f7ff fe93 	bl	80021a0 <GetDataFromUartQueue>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	4b66      	ldr	r3, [pc, #408]	; (8002618 <Idle_status+0x220>)
 8002480:	551a      	strb	r2, [r3, r4]
    while (ViewerQueue.data > 0)
 8002482:	4b66      	ldr	r3, [pc, #408]	; (800261c <Idle_status+0x224>)
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ed      	bne.n	8002466 <Idle_status+0x6e>
    }

    if (memcmp(&CONNECT_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC Connect
 800248a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800248e:	2209      	movs	r2, #9
 8002490:	4961      	ldr	r1, [pc, #388]	; (8002618 <Idle_status+0x220>)
 8002492:	4618      	mov	r0, r3
 8002494:	f004 fc00 	bl	8006c98 <memcmp>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <Idle_status+0xc6>
    {
        GUI_Protocol_Tx(GUI_COMMAND_CONNECT, 0);
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fdd1 	bl	8001048 <GUI_Protocol_Tx>
        connect = 1;
 80024a6:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <Idle_status+0x228>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80024ac:	2209      	movs	r2, #9
 80024ae:	2100      	movs	r1, #0
 80024b0:	4859      	ldr	r0, [pc, #356]	; (8002618 <Idle_status+0x220>)
 80024b2:	f004 fc01 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 80024b6:	4b57      	ldr	r3, [pc, #348]	; (8002614 <Idle_status+0x21c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
    }
}
 80024bc:	e095      	b.n	80025ea <Idle_status+0x1f2>
    else if (memcmp(&INFO_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Info request
 80024be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024c2:	2209      	movs	r2, #9
 80024c4:	4954      	ldr	r1, [pc, #336]	; (8002618 <Idle_status+0x220>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fbe6 	bl	8006c98 <memcmp>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10e      	bne.n	80024f0 <Idle_status+0xf8>
        HAL_UART_Transmit(&hViewer, INFO_RX_BUFF, sizeof(INFO_RX_BUFF), 100);
 80024d2:	2364      	movs	r3, #100	; 0x64
 80024d4:	220d      	movs	r2, #13
 80024d6:	4953      	ldr	r1, [pc, #332]	; (8002624 <Idle_status+0x22c>)
 80024d8:	4846      	ldr	r0, [pc, #280]	; (80025f4 <Idle_status+0x1fc>)
 80024da:	f003 f960 	bl	800579e <HAL_UART_Transmit>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80024de:	2209      	movs	r2, #9
 80024e0:	2100      	movs	r1, #0
 80024e2:	484d      	ldr	r0, [pc, #308]	; (8002618 <Idle_status+0x220>)
 80024e4:	f004 fbe8 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <Idle_status+0x21c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
}
 80024ee:	e07c      	b.n	80025ea <Idle_status+0x1f2>
    else if (memcmp(&DETECT1_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	2209      	movs	r2, #9
 80024f6:	4948      	ldr	r1, [pc, #288]	; (8002618 <Idle_status+0x220>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 fbcd 	bl	8006c98 <memcmp>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10e      	bne.n	8002522 <Idle_status+0x12a>
        GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT1, Detect1_Result);
 8002504:	4b48      	ldr	r3, [pc, #288]	; (8002628 <Idle_status+0x230>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	2002      	movs	r0, #2
 800250c:	f7fe ff0c 	bl	8001328 <GUI_Protocol_Detect_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002510:	2209      	movs	r2, #9
 8002512:	2100      	movs	r1, #0
 8002514:	4840      	ldr	r0, [pc, #256]	; (8002618 <Idle_status+0x220>)
 8002516:	f004 fbcf 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <Idle_status+0x21c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
}
 8002520:	e063      	b.n	80025ea <Idle_status+0x1f2>
    else if (memcmp(&DETECT2_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	2209      	movs	r2, #9
 8002528:	493b      	ldr	r1, [pc, #236]	; (8002618 <Idle_status+0x220>)
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fbb4 	bl	8006c98 <memcmp>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10e      	bne.n	8002554 <Idle_status+0x15c>
        GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT2, Detect2_Result);
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <Idle_status+0x234>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	2003      	movs	r0, #3
 800253e:	f7fe fef3 	bl	8001328 <GUI_Protocol_Detect_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002542:	2209      	movs	r2, #9
 8002544:	2100      	movs	r1, #0
 8002546:	4834      	ldr	r0, [pc, #208]	; (8002618 <Idle_status+0x220>)
 8002548:	f004 fbb6 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 800254c:	4b31      	ldr	r3, [pc, #196]	; (8002614 <Idle_status+0x21c>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
}
 8002552:	e04a      	b.n	80025ea <Idle_status+0x1f2>
    else if (memcmp(&DETECT3_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2209      	movs	r2, #9
 8002558:	492f      	ldr	r1, [pc, #188]	; (8002618 <Idle_status+0x220>)
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fb9c 	bl	8006c98 <memcmp>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10e      	bne.n	8002584 <Idle_status+0x18c>
        GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT3, Detect3_Result);
 8002566:	4b32      	ldr	r3, [pc, #200]	; (8002630 <Idle_status+0x238>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	2004      	movs	r0, #4
 800256e:	f7fe fedb 	bl	8001328 <GUI_Protocol_Detect_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002572:	2209      	movs	r2, #9
 8002574:	2100      	movs	r1, #0
 8002576:	4828      	ldr	r0, [pc, #160]	; (8002618 <Idle_status+0x220>)
 8002578:	f004 fb9e 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <Idle_status+0x21c>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
}
 8002582:	e032      	b.n	80025ea <Idle_status+0x1f2>
    else if (memcmp(&MODE_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 8002584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002588:	2209      	movs	r2, #9
 800258a:	4923      	ldr	r1, [pc, #140]	; (8002618 <Idle_status+0x220>)
 800258c:	4618      	mov	r0, r3
 800258e:	f004 fb83 	bl	8006c98 <memcmp>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <Idle_status+0x1bc>
        GUI_Protocol_Mode_Tx(Mode_data);
 8002598:	4b26      	ldr	r3, [pc, #152]	; (8002634 <Idle_status+0x23c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fe3b 	bl	8001218 <GUI_Protocol_Mode_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80025a2:	2209      	movs	r2, #9
 80025a4:	2100      	movs	r1, #0
 80025a6:	481c      	ldr	r0, [pc, #112]	; (8002618 <Idle_status+0x220>)
 80025a8:	f004 fb86 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <Idle_status+0x21c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	e01a      	b.n	80025ea <Idle_status+0x1f2>
    else if (memcmp(&START_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 80025b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b8:	2209      	movs	r2, #9
 80025ba:	4917      	ldr	r1, [pc, #92]	; (8002618 <Idle_status+0x220>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 fb6b 	bl	8006c98 <memcmp>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <Idle_status+0x1e8>
        g_Status = kStatus_Test;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <Idle_status+0x240>)
 80025ca:	2205      	movs	r2, #5
 80025cc:	701a      	strb	r2, [r3, #0]
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80025ce:	2209      	movs	r2, #9
 80025d0:	2100      	movs	r1, #0
 80025d2:	4811      	ldr	r0, [pc, #68]	; (8002618 <Idle_status+0x220>)
 80025d4:	f004 fb70 	bl	8006cb8 <memset>
        VIEWER_RX_Cnt = 0;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <Idle_status+0x21c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	e004      	b.n	80025ea <Idle_status+0x1f2>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80025e0:	2209      	movs	r2, #9
 80025e2:	2100      	movs	r1, #0
 80025e4:	480c      	ldr	r0, [pc, #48]	; (8002618 <Idle_status+0x220>)
 80025e6:	f004 fb67 	bl	8006cb8 <memset>
}
 80025ea:	bf00      	nop
 80025ec:	375c      	adds	r7, #92	; 0x5c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200002f8 	.word	0x200002f8
 80025f8:	08006d00 	.word	0x08006d00
 80025fc:	08006d0c 	.word	0x08006d0c
 8002600:	08006d18 	.word	0x08006d18
 8002604:	08006d24 	.word	0x08006d24
 8002608:	08006d30 	.word	0x08006d30
 800260c:	08006d3c 	.word	0x08006d3c
 8002610:	08006d48 	.word	0x08006d48
 8002614:	200002ad 	.word	0x200002ad
 8002618:	200002a4 	.word	0x200002a4
 800261c:	20000188 	.word	0x20000188
 8002620:	2000028a 	.word	0x2000028a
 8002624:	2000028c 	.word	0x2000028c
 8002628:	2000029b 	.word	0x2000029b
 800262c:	2000029d 	.word	0x2000029d
 8002630:	2000029f 	.word	0x2000029f
 8002634:	200002af 	.word	0x200002af
 8002638:	20000080 	.word	0x20000080

0800263c <Test_status>:

void Test_status(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af00      	add	r7, sp, #0
    uint8_t ETH_BUFF[6] = {' ', 'E', 't', 'h', 'e', 'r'};
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <Test_status+0x7c>)
 8002644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264c:	6018      	str	r0, [r3, #0]
 800264e:	3304      	adds	r3, #4
 8002650:	8019      	strh	r1, [r3, #0]
    uint8_t APD_BUFF[6] = {' ', 'A', 'P', 'D', ' ', 'B'};
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <Test_status+0x80>)
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265c:	6018      	str	r0, [r3, #0]
 800265e:	3304      	adds	r3, #4
 8002660:	8019      	strh	r1, [r3, #0]
    uint8_t MOT_BUFF[6] = {' ', 'M', 'o', 't', 'o', 'r'};
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <Test_status+0x84>)
 8002664:	f107 0318 	add.w	r3, r7, #24
 8002668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800266c:	6018      	str	r0, [r3, #0]
 800266e:	3304      	adds	r3, #4
 8002670:	8019      	strh	r1, [r3, #0]
    uint8_t ENC_BUFF[6] = {' ', 'E', 'n', 'c', 'o', 'd'};
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <Test_status+0x88>)
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800267c:	6018      	str	r0, [r3, #0]
 800267e:	3304      	adds	r3, #4
 8002680:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_INIT_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'I'};
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <Test_status+0x8c>)
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800268c:	6018      	str	r0, [r3, #0]
 800268e:	3304      	adds	r3, #4
 8002690:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_CAL_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'C'};
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <Test_status+0x90>)
 8002694:	463b      	mov	r3, r7
 8002696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269a:	6018      	str	r0, [r3, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	8019      	strh	r1, [r3, #0]

    LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7fe fc51 	bl	8000f48 <LiDAR_Protocol_Tx>
    Delay_ms(500);
 80026a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026aa:	f7fe f875 	bl	8000798 <Delay_ms>
}
 80026ae:	bf00      	nop
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	08006d54 	.word	0x08006d54
 80026bc:	08006d5c 	.word	0x08006d5c
 80026c0:	08006d64 	.word	0x08006d64
 80026c4:	08006d6c 	.word	0x08006d6c
 80026c8:	08006d74 	.word	0x08006d74
 80026cc:	08006d7c 	.word	0x08006d7c

080026d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40013c00 	.word	0x40013c00

0800274c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6153      	str	r3, [r2, #20]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40013c00 	.word	0x40013c00

0800276c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002770:	e7fe      	b.n	8002770 <NMI_Handler+0x4>

08002772 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <MemManage_Handler+0x4>

0800277e <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <UsageFault_Handler+0x4>

0800278a <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b8:	f000 fb7c 	bl	8002eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}

080027c0 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 80027c4:	f000 f8de 	bl	8002984 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7ff ffa9 	bl	8002720 <LL_EXTI_IsActiveFlag_0_31>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff ffb9 	bl	800274c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (Mode_data == 0) // jig mode
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <EXTI15_10_IRQHandler+0x68>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d103      	bne.n	80027f4 <EXTI15_10_IRQHandler+0x14>
  {
    g_Status = kStatus_Test;
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <EXTI15_10_IRQHandler+0x6c>)
 80027ee:	2205      	movs	r2, #5
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e01b      	b.n	800282c <EXTI15_10_IRQHandler+0x4c>
  }
  else // tx mode
  {
    if (tx_start_flag == 0)
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <EXTI15_10_IRQHandler+0x70>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <EXTI15_10_IRQHandler+0x36>
    {
      tx_start_flag = 1;
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <EXTI15_10_IRQHandler+0x70>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
      __HAL_UART_DISABLE_IT(&hViewer, UART_IT_RXNE);
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <EXTI15_10_IRQHandler+0x74>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <EXTI15_10_IRQHandler+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0220 	bic.w	r2, r2, #32
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e00a      	b.n	800282c <EXTI15_10_IRQHandler+0x4c>
    }
    else
    {
      tx_start_flag = 0;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <EXTI15_10_IRQHandler+0x70>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(&hViewer, UART_IT_RXNE);
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <EXTI15_10_IRQHandler+0x74>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <EXTI15_10_IRQHandler+0x74>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0220 	orr.w	r2, r2, #32
 800282a:	60da      	str	r2, [r3, #12]
    }
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800282c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002830:	f7ff ff76 	bl	8002720 <LL_EXTI_IsActiveFlag_0_31>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <EXTI15_10_IRQHandler+0x62>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800283a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800283e:	f7ff ff85 	bl	800274c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200002af 	.word	0x200002af
 800284c:	20000080 	.word	0x20000080
 8002850:	200002ae 	.word	0x200002ae
 8002854:	200002f8 	.word	0x200002f8

08002858 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  if (g_Status == kStatus_Idle)
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <UART5_IRQHandler+0x54>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b04      	cmp	r3, #4
 8002866:	d11a      	bne.n	800289e <UART5_IRQHandler+0x46>
  {
    if ((__HAL_UART_GET_FLAG(&hViewer, UART_FLAG_RXNE) != RESET))
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <UART5_IRQHandler+0x58>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b20      	cmp	r3, #32
 8002874:	d107      	bne.n	8002886 <UART5_IRQHandler+0x2e>
    {
      PutDataToUartQueue(&hViewer, (uint8_t)(hViewer.Instance->DR & (uint8_t)0x00FF));
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <UART5_IRQHandler+0x58>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4619      	mov	r1, r3
 8002880:	480b      	ldr	r0, [pc, #44]	; (80028b0 <UART5_IRQHandler+0x58>)
 8002882:	f7ff fc59 	bl	8002138 <PutDataToUartQueue>
    }
    __HAL_UART_CLEAR_PEFLAG(&hViewer); /* clear event flag */
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <UART5_IRQHandler+0x58>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <UART5_IRQHandler+0x58>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
    return;
 800289c:	e002      	b.n	80028a4 <UART5_IRQHandler+0x4c>
  }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800289e:	4804      	ldr	r0, [pc, #16]	; (80028b0 <UART5_IRQHandler+0x58>)
 80028a0:	f003 f810 	bl	80058c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000080 	.word	0x20000080
 80028b0:	200002f8 	.word	0x200002f8

080028b4 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&hLiDAR, UART_FLAG_RXNE) != RESET))
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <USART6_IRQHandler+0x44>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d107      	bne.n	80028d8 <USART6_IRQHandler+0x24>
  {
    PutDataToUartQueue(&hLiDAR, (uint8_t)(hLiDAR.Instance->DR & (uint8_t)0x00FF));
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <USART6_IRQHandler+0x44>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	4809      	ldr	r0, [pc, #36]	; (80028f8 <USART6_IRQHandler+0x44>)
 80028d4:	f7ff fc30 	bl	8002138 <PutDataToUartQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&hLiDAR); /* clear event flag */
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <USART6_IRQHandler+0x44>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <USART6_IRQHandler+0x44>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
  return;
 80028ee:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000033c 	.word	0x2000033c

080028fc <LL_GPIO_SetOutputPin>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	619a      	str	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_GPIO_ResetOutputPin>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <LL_EXTI_EnableIT_0_31>:
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <LL_EXTI_EnableIT_0_31+0x20>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4904      	ldr	r1, [pc, #16]	; (8002958 <LL_EXTI_EnableIT_0_31+0x20>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40013c00 	.word	0x40013c00

0800295c <LL_EXTI_DisableIT_0_31>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <LL_EXTI_DisableIT_0_31+0x24>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	43db      	mvns	r3, r3
 800296c:	4904      	ldr	r1, [pc, #16]	; (8002980 <LL_EXTI_DisableIT_0_31+0x24>)
 800296e:	4013      	ands	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40013c00 	.word	0x40013c00

08002984 <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 8002988:	2101      	movs	r1, #1
 800298a:	4816      	ldr	r0, [pc, #88]	; (80029e4 <switch_check+0x60>)
 800298c:	f001 f9fa 	bl	8003d84 <HAL_GPIO_ReadPin>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d014      	beq.n	80029c0 <switch_check+0x3c>
    {
        Mode_data = 0x00U;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <switch_check+0x64>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800299c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a0:	4810      	ldr	r0, [pc, #64]	; (80029e4 <switch_check+0x60>)
 80029a2:	f7ff ffab 	bl	80028fc <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	4810      	ldr	r0, [pc, #64]	; (80029ec <switch_check+0x68>)
 80029aa:	f7ff ffb5 	bl	8002918 <LL_GPIO_ResetOutputPin>
        if (connect)
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <switch_check+0x6c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <switch_check+0x5c>
        {
            LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15); // Viewer start button enable only
 80029b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029ba:	f7ff ffcf 	bl	800295c <LL_EXTI_DisableIT_0_31>
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
        LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
    }
 80029be:	e00f      	b.n	80029e0 <switch_check+0x5c>
        Mode_data = 0x01U;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <switch_check+0x64>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80029c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <switch_check+0x60>)
 80029cc:	f7ff ffa4 	bl	8002918 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	4806      	ldr	r0, [pc, #24]	; (80029ec <switch_check+0x68>)
 80029d4:	f7ff ff92 	bl	80028fc <LL_GPIO_SetOutputPin>
        LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 80029d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029dc:	f7ff ffac 	bl	8002938 <LL_EXTI_EnableIT_0_31>
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40020400 	.word	0x40020400
 80029e8:	200002af 	.word	0x200002af
 80029ec:	40020000 	.word	0x40020000
 80029f0:	2000028a 	.word	0x2000028a

080029f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <SystemInit+0x20>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <SystemInit+0x20>)
 8002a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08e      	sub	sp, #56	; 0x38
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a4a:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <MX_TIM3_Init+0xe8>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a50:	222c      	movs	r2, #44	; 0x2c
 8002a52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8002a5a:	4b28      	ldr	r3, [pc, #160]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a5c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002a60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a6e:	4823      	ldr	r0, [pc, #140]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a70:	f001 ff52 	bl	8004918 <HAL_TIM_Base_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a7a:	f7fe fa5f 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	481c      	ldr	r0, [pc, #112]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a8c:	f002 f9e6 	bl	8004e5c <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a96:	f7fe fa51 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a9a:	4818      	ldr	r0, [pc, #96]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002a9c:	f001 ff8b 	bl	80049b6 <HAL_TIM_PWM_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002aa6:	f7fe fa49 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab2:	f107 0320 	add.w	r3, r7, #32
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002aba:	f002 fda7 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ac4:	f7fe fa3a 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac8:	2360      	movs	r3, #96	; 0x60
 8002aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8002acc:	23f9      	movs	r3, #249	; 0xf9
 8002ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2208      	movs	r2, #8
 8002adc:	4619      	mov	r1, r3
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002ae0:	f002 f8fa 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002aea:	f7fe fa27 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002aee:	4803      	ldr	r0, [pc, #12]	; (8002afc <MX_TIM3_Init+0xe4>)
 8002af0:	f000 f82a 	bl	8002b48 <HAL_TIM_MspPostInit>

}
 8002af4:	bf00      	nop
 8002af6:	3738      	adds	r7, #56	; 0x38
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200002b0 	.word	0x200002b0
 8002b00:	40000400 	.word	0x40000400

08002b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <HAL_TIM_Base_MspInit+0x3c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10d      	bne.n	8002b32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_TIM_Base_MspInit+0x40>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_TIM_Base_MspInit+0x40>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_TIM_Base_MspInit+0x40>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_TIM_MspPostInit+0x68>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11e      	bne.n	8002ba8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_TIM_MspPostInit+0x6c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_TIM_MspPostInit+0x6c>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_TIM_MspPostInit+0x6c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <HAL_TIM_MspPostInit+0x70>)
 8002ba4:	f000 ff5a 	bl	8003a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ba8:	bf00      	nop
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40020800 	.word	0x40020800

08002bbc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <MX_UART5_Init+0x50>)
 8002bc4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bcc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002be2:	220c      	movs	r2, #12
 8002be4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_UART5_Init+0x4c>)
 8002bf4:	f002 fd86 	bl	8005704 <HAL_UART_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002bfe:	f7fe f99d 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200002f8 	.word	0x200002f8
 8002c0c:	40005000 	.word	0x40005000

08002c10 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <MX_USART6_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c1c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002c20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_USART6_UART_Init+0x4c>)
 8002c48:	f002 fd5c 	bl	8005704 <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c52:	f7fe f973 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000033c 	.word	0x2000033c
 8002c60:	40011400 	.word	0x40011400

08002c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if (uartHandle->Instance == UART5)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_UART_MspInit+0x144>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d153      	bne.n	8002d2e <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	4b48      	ldr	r3, [pc, #288]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a47      	ldr	r2, [pc, #284]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b45      	ldr	r3, [pc, #276]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a40      	ldr	r2, [pc, #256]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a39      	ldr	r2, [pc, #228]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cc8:	f043 0308 	orr.w	r3, r3, #8
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002cec:	2308      	movs	r3, #8
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	482e      	ldr	r0, [pc, #184]	; (8002db0 <HAL_UART_MspInit+0x14c>)
 8002cf8:	f000 feb0 	bl	8003a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	4619      	mov	r1, r3
 8002d16:	4827      	ldr	r0, [pc, #156]	; (8002db4 <HAL_UART_MspInit+0x150>)
 8002d18:	f000 fea0 	bl	8003a5c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2035      	movs	r0, #53	; 0x35
 8002d22:	f000 fdd2 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002d26:	2035      	movs	r0, #53	; 0x35
 8002d28:	f000 fdeb 	bl	8003902 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }
}
 8002d2c:	e038      	b.n	8002da0 <HAL_UART_MspInit+0x13c>
  else if (uartHandle->Instance == USART6)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_UART_MspInit+0x154>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d133      	bne.n	8002da0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	6453      	str	r3, [r2, #68]	; 0x44
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6313      	str	r3, [r2, #48]	; 0x30
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d80:	2308      	movs	r3, #8
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4809      	ldr	r0, [pc, #36]	; (8002db0 <HAL_UART_MspInit+0x14c>)
 8002d8c:	f000 fe66 	bl	8003a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	2047      	movs	r0, #71	; 0x47
 8002d96:	f000 fd98 	bl	80038ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d9a:	2047      	movs	r0, #71	; 0x47
 8002d9c:	f000 fdb1 	bl	8003902 <HAL_NVIC_EnableIRQ>
}
 8002da0:	bf00      	nop
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40005000 	.word	0x40005000
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40020800 	.word	0x40020800
 8002db4:	40020c00 	.word	0x40020c00
 8002db8:	40011400 	.word	0x40011400

08002dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc0:	480d      	ldr	r0, [pc, #52]	; (8002df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dc2:	490e      	ldr	r1, [pc, #56]	; (8002dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc8:	e002      	b.n	8002dd0 <LoopCopyDataInit>

08002dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dce:	3304      	adds	r3, #4

08002dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd4:	d3f9      	bcc.n	8002dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd6:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dd8:	4c0b      	ldr	r4, [pc, #44]	; (8002e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ddc:	e001      	b.n	8002de2 <LoopFillZerobss>

08002dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de0:	3204      	adds	r2, #4

08002de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de4:	d3fb      	bcc.n	8002dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002de6:	f7ff fe05 	bl	80029f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dea:	f003 ff31 	bl	8006c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dee:	f7fd ff8f 	bl	8000d10 <main>
  bx  lr    
 8002df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002e00:	08006dac 	.word	0x08006dac
  ldr r2, =_sbss
 8002e04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002e08:	20000384 	.word	0x20000384

08002e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC_IRQHandler>
	...

08002e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <HAL_Init+0x40>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <HAL_Init+0x40>)
 8002e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_Init+0x40>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_Init+0x40>)
 8002e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e2c:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_Init+0x40>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_Init+0x40>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e38:	2003      	movs	r0, #3
 8002e3a:	f000 fd3b 	bl	80038b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3e:	200f      	movs	r0, #15
 8002e40:	f000 f808 	bl	8002e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e44:	f7ff fc44 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00

08002e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_InitTick+0x54>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_InitTick+0x58>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fd53 	bl	800391e <HAL_SYSTICK_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e00e      	b.n	8002ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b0f      	cmp	r3, #15
 8002e86:	d80a      	bhi.n	8002e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	f000 fd1b 	bl	80038ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e94:	4a06      	ldr	r2, [pc, #24]	; (8002eb0 <HAL_InitTick+0x5c>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000004 	.word	0x20000004
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	20000008 	.word	0x20000008

08002eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x20>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_IncTick+0x24>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	20000380 	.word	0x20000380

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_GetTick+0x14>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000380 	.word	0x20000380

08002ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e033      	b.n	8002f72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fb4a 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fae8 	bl	800351c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
 8002f62:	e001      	b.n	8002f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Start+0x1a>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e0b2      	b.n	80030fc <HAL_ADC_Start+0x180>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d018      	beq.n	8002fde <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_ADC_Start+0x18c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_ADC_Start+0x190>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0c9a      	lsrs	r2, r3, #18
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd0:	e002      	b.n	8002fd8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d17a      	bne.n	80030e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302a:	d106      	bne.n	800303a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f023 0206 	bic.w	r2, r3, #6
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
 8003038:	e002      	b.n	8003040 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_ADC_Start+0x194>)
 800304a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003054:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2b00      	cmp	r3, #0
 8003060:	d12a      	bne.n	80030b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a2b      	ldr	r2, [pc, #172]	; (8003114 <HAL_ADC_Start+0x198>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d015      	beq.n	8003098 <HAL_ADC_Start+0x11c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a29      	ldr	r2, [pc, #164]	; (8003118 <HAL_ADC_Start+0x19c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d105      	bne.n	8003082 <HAL_ADC_Start+0x106>
 8003076:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_ADC_Start+0x194>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a25      	ldr	r2, [pc, #148]	; (800311c <HAL_ADC_Start+0x1a0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d136      	bne.n	80030fa <HAL_ADC_Start+0x17e>
 800308c:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_ADC_Start+0x194>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d130      	bne.n	80030fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d129      	bne.n	80030fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	e020      	b.n	80030fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_ADC_Start+0x198>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d11b      	bne.n	80030fa <HAL_ADC_Start+0x17e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d114      	bne.n	80030fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e00b      	b.n	80030fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	20000004 	.word	0x20000004
 800310c:	431bde83 	.word	0x431bde83
 8003110:	40012300 	.word	0x40012300
 8003114:	40012000 	.word	0x40012000
 8003118:	40012100 	.word	0x40012100
 800311c:	40012200 	.word	0x40012200

08003120 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_ADC_Stop+0x16>
 8003132:	2302      	movs	r3, #2
 8003134:	e021      	b.n	800317a <HAL_ADC_Stop+0x5a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d113      	bne.n	80031cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b2:	d10b      	bne.n	80031cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e063      	b.n	8003294 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031cc:	f7ff fe86 	bl	8002edc <HAL_GetTick>
 80031d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031d2:	e021      	b.n	8003218 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d01d      	beq.n	8003218 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_ADC_PollForConversion+0x6c>
 80031e2:	f7ff fe7b 	bl	8002edc <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d212      	bcs.n	8003218 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d00b      	beq.n	8003218 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e03d      	b.n	8003294 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d1d6      	bne.n	80031d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f06f 0212 	mvn.w	r2, #18
 800322e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d123      	bne.n	8003292 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11f      	bne.n	8003292 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800326a:	2b00      	cmp	r3, #0
 800326c:	d111      	bne.n	8003292 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x1c>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e113      	b.n	80034fc <HAL_ADC_ConfigChannel+0x244>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	d925      	bls.n	8003330 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68d9      	ldr	r1, [r3, #12]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	3b1e      	subs	r3, #30
 80032fa:	2207      	movs	r2, #7
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43da      	mvns	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	400a      	ands	r2, r1
 8003308:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68d9      	ldr	r1, [r3, #12]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	4603      	mov	r3, r0
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4403      	add	r3, r0
 8003322:	3b1e      	subs	r3, #30
 8003324:	409a      	lsls	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e022      	b.n	8003376 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	2207      	movs	r2, #7
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	400a      	ands	r2, r1
 8003352:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6919      	ldr	r1, [r3, #16]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	4618      	mov	r0, r3
 8003366:	4603      	mov	r3, r0
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4403      	add	r3, r0
 800336c:	409a      	lsls	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d824      	bhi.n	80033c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	3b05      	subs	r3, #5
 8003390:	221f      	movs	r2, #31
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	400a      	ands	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4618      	mov	r0, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	3b05      	subs	r3, #5
 80033ba:	fa00 f203 	lsl.w	r2, r0, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34
 80033c6:	e04c      	b.n	8003462 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d824      	bhi.n	800341a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	3b23      	subs	r3, #35	; 0x23
 80033e2:	221f      	movs	r2, #31
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	3b23      	subs	r3, #35	; 0x23
 800340c:	fa00 f203 	lsl.w	r2, r0, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	e023      	b.n	8003462 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	3b41      	subs	r3, #65	; 0x41
 800342c:	221f      	movs	r2, #31
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	400a      	ands	r2, r1
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	4618      	mov	r0, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	3b41      	subs	r3, #65	; 0x41
 8003456:	fa00 f203 	lsl.w	r2, r0, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_ADC_ConfigChannel+0x250>)
 8003464:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a28      	ldr	r2, [pc, #160]	; (800350c <HAL_ADC_ConfigChannel+0x254>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10f      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x1d8>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b12      	cmp	r3, #18
 8003476:	d10b      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1d      	ldr	r2, [pc, #116]	; (800350c <HAL_ADC_ConfigChannel+0x254>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d12b      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x23a>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_ADC_ConfigChannel+0x258>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <HAL_ADC_ConfigChannel+0x1f4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b11      	cmp	r3, #17
 80034aa:	d122      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a11      	ldr	r2, [pc, #68]	; (8003510 <HAL_ADC_ConfigChannel+0x258>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d111      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_ADC_ConfigChannel+0x25c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a11      	ldr	r2, [pc, #68]	; (8003518 <HAL_ADC_ConfigChannel+0x260>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	0c9a      	lsrs	r2, r3, #18
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034e4:	e002      	b.n	80034ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f9      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40012300 	.word	0x40012300
 800350c:	40012000 	.word	0x40012000
 8003510:	10000012 	.word	0x10000012
 8003514:	20000004 	.word	0x20000004
 8003518:	431bde83 	.word	0x431bde83

0800351c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003524:	4b79      	ldr	r3, [pc, #484]	; (800370c <ADC_Init+0x1f0>)
 8003526:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	431a      	orrs	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	4a58      	ldr	r2, [pc, #352]	; (8003710 <ADC_Init+0x1f4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d022      	beq.n	80035fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	e00f      	b.n	800361a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0202 	bic.w	r2, r2, #2
 8003628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6899      	ldr	r1, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7e1b      	ldrb	r3, [r3, #24]
 8003634:	005a      	lsls	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	3b01      	subs	r3, #1
 8003674:	035a      	lsls	r2, r3, #13
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	e007      	b.n	8003690 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	051a      	lsls	r2, r3, #20
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036d2:	025a      	lsls	r2, r3, #9
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	029a      	lsls	r2, r3, #10
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40012300 	.word	0x40012300
 8003710:	0f000001 	.word	0x0f000001

08003714 <__NVIC_SetPriorityGrouping>:
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800373c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <__NVIC_SetPriorityGrouping+0x44>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	60d3      	str	r3, [r2, #12]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_GetPriorityGrouping>:
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <__NVIC_GetPriorityGrouping+0x18>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	f003 0307 	and.w	r3, r3, #7
}
 800376a:	4618      	mov	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_EnableIRQ>:
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	2b00      	cmp	r3, #0
 8003788:	db0b      	blt.n	80037a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <__NVIC_EnableIRQ+0x38>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2001      	movs	r0, #1
 800379a:	fa00 f202 	lsl.w	r2, r0, r2
 800379e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000e100 	.word	0xe000e100

080037b4 <__NVIC_SetPriority>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	db0a      	blt.n	80037de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	490c      	ldr	r1, [pc, #48]	; (8003800 <__NVIC_SetPriority+0x4c>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	440b      	add	r3, r1
 80037d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037dc:	e00a      	b.n	80037f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <__NVIC_SetPriority+0x50>)
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	3b04      	subs	r3, #4
 80037ec:	0112      	lsls	r2, r2, #4
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	440b      	add	r3, r1
 80037f2:	761a      	strb	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000e100 	.word	0xe000e100
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <NVIC_EncodePriority>:
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f1c3 0307 	rsb	r3, r3, #7
 8003822:	2b04      	cmp	r3, #4
 8003824:	bf28      	it	cs
 8003826:	2304      	movcs	r3, #4
 8003828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3304      	adds	r3, #4
 800382e:	2b06      	cmp	r3, #6
 8003830:	d902      	bls.n	8003838 <NVIC_EncodePriority+0x30>
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3b03      	subs	r3, #3
 8003836:	e000      	b.n	800383a <NVIC_EncodePriority+0x32>
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	f04f 32ff 	mov.w	r2, #4294967295
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003850:	f04f 31ff 	mov.w	r1, #4294967295
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43d9      	mvns	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	4313      	orrs	r3, r2
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003880:	d301      	bcc.n	8003886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003882:	2301      	movs	r3, #1
 8003884:	e00f      	b.n	80038a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003886:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <SysTick_Config+0x40>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800388e:	210f      	movs	r1, #15
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f7ff ff8e 	bl	80037b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <SysTick_Config+0x40>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800389e:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <SysTick_Config+0x40>)
 80038a0:	2207      	movs	r2, #7
 80038a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000e010 	.word	0xe000e010

080038b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff29 	bl	8003714 <__NVIC_SetPriorityGrouping>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038dc:	f7ff ff3e 	bl	800375c <__NVIC_GetPriorityGrouping>
 80038e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	6978      	ldr	r0, [r7, #20]
 80038e8:	f7ff ff8e 	bl	8003808 <NVIC_EncodePriority>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ff5d 	bl	80037b4 <__NVIC_SetPriority>
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff31 	bl	8003778 <__NVIC_EnableIRQ>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ffa2 	bl	8003870 <SysTick_Config>
 800392c:	4603      	mov	r3, r0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff faca 	bl	8002edc <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d008      	beq.n	8003968 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e052      	b.n	8003a0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0216 	bic.w	r2, r2, #22
 8003976:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003986:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <HAL_DMA_Abort+0x62>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b8:	e013      	b.n	80039e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ba:	f7ff fa8f 	bl	8002edc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d90c      	bls.n	80039e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2203      	movs	r2, #3
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e015      	b.n	8003a0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e4      	bne.n	80039ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	223f      	movs	r2, #63	; 0x3f
 80039f6:	409a      	lsls	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d004      	beq.n	8003a34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e00c      	b.n	8003a4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2205      	movs	r2, #5
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b089      	sub	sp, #36	; 0x24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e165      	b.n	8003d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	f040 8154 	bne.w	8003d3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d005      	beq.n	8003aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d130      	bne.n	8003b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 0201 	and.w	r2, r3, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d017      	beq.n	8003b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d123      	bne.n	8003ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	08da      	lsrs	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3208      	adds	r2, #8
 8003b9a:	69b9      	ldr	r1, [r7, #24]
 8003b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80ae 	beq.w	8003d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b5d      	ldr	r3, [pc, #372]	; (8003d5c <HAL_GPIO_Init+0x300>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a5c      	ldr	r2, [pc, #368]	; (8003d5c <HAL_GPIO_Init+0x300>)
 8003bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_GPIO_Init+0x300>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfe:	4a58      	ldr	r2, [pc, #352]	; (8003d60 <HAL_GPIO_Init+0x304>)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_GPIO_Init+0x308>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d025      	beq.n	8003c76 <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4e      	ldr	r2, [pc, #312]	; (8003d68 <HAL_GPIO_Init+0x30c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01f      	beq.n	8003c72 <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4d      	ldr	r2, [pc, #308]	; (8003d6c <HAL_GPIO_Init+0x310>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d019      	beq.n	8003c6e <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <HAL_GPIO_Init+0x314>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_GPIO_Init+0x20e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <HAL_GPIO_Init+0x318>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00d      	beq.n	8003c66 <HAL_GPIO_Init+0x20a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4a      	ldr	r2, [pc, #296]	; (8003d78 <HAL_GPIO_Init+0x31c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_Init+0x206>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a49      	ldr	r2, [pc, #292]	; (8003d7c <HAL_GPIO_Init+0x320>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_GPIO_Init+0x202>
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	e00c      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c5e:	2307      	movs	r3, #7
 8003c60:	e00a      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c62:	2305      	movs	r3, #5
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x21c>
 8003c76:	2300      	movs	r3, #0
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c88:	4935      	ldr	r1, [pc, #212]	; (8003d60 <HAL_GPIO_Init+0x304>)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a31      	ldr	r2, [pc, #196]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cea:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d0e:	4a1c      	ldr	r2, [pc, #112]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d38:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <HAL_GPIO_Init+0x324>)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3301      	adds	r3, #1
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f ae96 	bls.w	8003a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40013800 	.word	0x40013800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40020400 	.word	0x40020400
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020c00 	.word	0x40020c00
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40021400 	.word	0x40021400
 8003d7c:	40021800 	.word	0x40021800
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	887b      	ldrh	r3, [r7, #2]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e001      	b.n	8003da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dda:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <HAL_PWREx_EnableOverDrive+0x94>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de0:	f7ff f87c 	bl	8002edc <HAL_GetTick>
 8003de4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003de6:	e009      	b.n	8003dfc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003de8:	f7ff f878 	bl	8002edc <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d901      	bls.n	8003dfc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e01f      	b.n	8003e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d1ee      	bne.n	8003de8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e10:	f7ff f864 	bl	8002edc <HAL_GetTick>
 8003e14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e16:	e009      	b.n	8003e2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e18:	f7ff f860 	bl	8002edc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e26:	d901      	bls.n	8003e2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e007      	b.n	8003e3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e38:	d1ee      	bne.n	8003e18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	420e0040 	.word	0x420e0040
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	420e0044 	.word	0x420e0044

08003e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0cc      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b68      	ldr	r3, [pc, #416]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d90c      	bls.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b65      	ldr	r3, [pc, #404]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b8      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea8:	4b59      	ldr	r3, [pc, #356]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a58      	ldr	r2, [pc, #352]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec0:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ecc:	4b50      	ldr	r3, [pc, #320]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	494d      	ldr	r1, [pc, #308]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d044      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d119      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	4b3f      	ldr	r3, [pc, #252]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f22:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e067      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b37      	ldr	r3, [pc, #220]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	4934      	ldr	r1, [pc, #208]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fe ffca 	bl	8002edc <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fe ffc6 	bl	8002edc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e04f      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d20c      	bcs.n	8003f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e032      	b.n	8004002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4916      	ldr	r1, [pc, #88]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	490e      	ldr	r1, [pc, #56]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fda:	f000 f855 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	490a      	ldr	r1, [pc, #40]	; (8004014 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	5ccb      	ldrb	r3, [r1, r3]
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	4a09      	ldr	r2, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ff2a 	bl	8002e54 <HAL_InitTick>

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023c00 	.word	0x40023c00
 8004010:	40023800 	.word	0x40023800
 8004014:	08006d84 	.word	0x08006d84
 8004018:	20000004 	.word	0x20000004
 800401c:	20000008 	.word	0x20000008

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000004 	.word	0x20000004

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	08006d94 	.word	0x08006d94

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffdc 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	08006d94 	.word	0x08006d94

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b0a6      	sub	sp, #152	; 0x98
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ae:	4bc8      	ldr	r3, [pc, #800]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	f200 817e 	bhi.w	80043b8 <HAL_RCC_GetSysClockFreq+0x330>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	080043b9 	.word	0x080043b9
 80040cc:	080043b9 	.word	0x080043b9
 80040d0:	080043b9 	.word	0x080043b9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	080043b9 	.word	0x080043b9
 80040dc:	080043b9 	.word	0x080043b9
 80040e0:	080043b9 	.word	0x080043b9
 80040e4:	08004109 	.word	0x08004109
 80040e8:	080043b9 	.word	0x080043b9
 80040ec:	080043b9 	.word	0x080043b9
 80040f0:	080043b9 	.word	0x080043b9
 80040f4:	08004273 	.word	0x08004273
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4bb6      	ldr	r3, [pc, #728]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80040fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80040fe:	e15f      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004100:	4bb5      	ldr	r3, [pc, #724]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004106:	e15b      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004108:	4bb1      	ldr	r3, [pc, #708]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004110:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004114:	4bae      	ldr	r3, [pc, #696]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d031      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004120:	4bab      	ldr	r3, [pc, #684]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	2200      	movs	r2, #0
 8004128:	66bb      	str	r3, [r7, #104]	; 0x68
 800412a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800412c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	663b      	str	r3, [r7, #96]	; 0x60
 8004134:	2300      	movs	r3, #0
 8004136:	667b      	str	r3, [r7, #100]	; 0x64
 8004138:	4ba7      	ldr	r3, [pc, #668]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x350>)
 800413a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800413e:	462a      	mov	r2, r5
 8004140:	fb03 f202 	mul.w	r2, r3, r2
 8004144:	2300      	movs	r3, #0
 8004146:	4621      	mov	r1, r4
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	4aa2      	ldr	r2, [pc, #648]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004150:	4621      	mov	r1, r4
 8004152:	fba1 1202 	umull	r1, r2, r1, r2
 8004156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004158:	460a      	mov	r2, r1
 800415a:	67ba      	str	r2, [r7, #120]	; 0x78
 800415c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800415e:	4413      	add	r3, r2
 8004160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004166:	2200      	movs	r2, #0
 8004168:	65bb      	str	r3, [r7, #88]	; 0x58
 800416a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800416c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004170:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004174:	f7fc f846 	bl	8000204 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004182:	e064      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004184:	4b92      	ldr	r3, [pc, #584]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	099b      	lsrs	r3, r3, #6
 800418a:	2200      	movs	r2, #0
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
 800418e:	657a      	str	r2, [r7, #84]	; 0x54
 8004190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
 8004198:	2300      	movs	r3, #0
 800419a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800419c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	0159      	lsls	r1, r3, #5
 80041ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b2:	0150      	lsls	r0, r2, #5
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4621      	mov	r1, r4
 80041ba:	1a51      	subs	r1, r2, r1
 80041bc:	6139      	str	r1, [r7, #16]
 80041be:	4629      	mov	r1, r5
 80041c0:	eb63 0301 	sbc.w	r3, r3, r1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d2:	4659      	mov	r1, fp
 80041d4:	018b      	lsls	r3, r1, #6
 80041d6:	4651      	mov	r1, sl
 80041d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041dc:	4651      	mov	r1, sl
 80041de:	018a      	lsls	r2, r1, #6
 80041e0:	4651      	mov	r1, sl
 80041e2:	ebb2 0801 	subs.w	r8, r2, r1
 80041e6:	4659      	mov	r1, fp
 80041e8:	eb63 0901 	sbc.w	r9, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004200:	4690      	mov	r8, r2
 8004202:	4699      	mov	r9, r3
 8004204:	4623      	mov	r3, r4
 8004206:	eb18 0303 	adds.w	r3, r8, r3
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	462b      	mov	r3, r5
 800420e:	eb49 0303 	adc.w	r3, r9, r3
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004220:	4629      	mov	r1, r5
 8004222:	028b      	lsls	r3, r1, #10
 8004224:	4621      	mov	r1, r4
 8004226:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800422a:	4621      	mov	r1, r4
 800422c:	028a      	lsls	r2, r1, #10
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004236:	2200      	movs	r2, #0
 8004238:	643b      	str	r3, [r7, #64]	; 0x40
 800423a:	647a      	str	r2, [r7, #68]	; 0x44
 800423c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004240:	f7fb ffe0 	bl	8000204 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800424e:	4b60      	ldr	r3, [pc, #384]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	3301      	adds	r3, #1
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004260:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004270:	e0a6      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427e:	4b54      	ldr	r3, [pc, #336]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02a      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428a:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	099b      	lsrs	r3, r3, #6
 8004290:	2200      	movs	r2, #0
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
 8004294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800429c:	2100      	movs	r1, #0
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80042a0:	fb03 f201 	mul.w	r2, r3, r1
 80042a4:	2300      	movs	r3, #0
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	4a4a      	ldr	r2, [pc, #296]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80042ae:	fba0 1202 	umull	r1, r2, r0, r2
 80042b2:	677a      	str	r2, [r7, #116]	; 0x74
 80042b4:	460a      	mov	r2, r1
 80042b6:	673a      	str	r2, [r7, #112]	; 0x70
 80042b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042ba:	4413      	add	r3, r2
 80042bc:	677b      	str	r3, [r7, #116]	; 0x74
 80042be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c2:	2200      	movs	r2, #0
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
 80042c6:	637a      	str	r2, [r7, #52]	; 0x34
 80042c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80042d0:	f7fb ff98 	bl	8000204 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042de:	e05b      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e0:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	2200      	movs	r2, #0
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	f04f 0000 	mov.w	r0, #0
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	0159      	lsls	r1, r3, #5
 800430a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430e:	0150      	lsls	r0, r2, #5
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4641      	mov	r1, r8
 8004316:	ebb2 0a01 	subs.w	sl, r2, r1
 800431a:	4649      	mov	r1, r9
 800431c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800432c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004334:	ebb2 040a 	subs.w	r4, r2, sl
 8004338:	eb63 050b 	sbc.w	r5, r3, fp
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	00eb      	lsls	r3, r5, #3
 8004346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4643      	mov	r3, r8
 8004352:	18e3      	adds	r3, r4, r3
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	464b      	mov	r3, r9
 8004358:	eb45 0303 	adc.w	r3, r5, r3
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800436a:	4629      	mov	r1, r5
 800436c:	028b      	lsls	r3, r1, #10
 800436e:	4621      	mov	r1, r4
 8004370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004374:	4621      	mov	r1, r4
 8004376:	028a      	lsls	r2, r1, #10
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004380:	2200      	movs	r2, #0
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	61fa      	str	r2, [r7, #28]
 8004386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800438a:	f7fb ff3b 	bl	8000204 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4613      	mov	r3, r2
 8004394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	0f1b      	lsrs	r3, r3, #28
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80043a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80043b6:	e003      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80043ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80043be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3798      	adds	r7, #152	; 0x98
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	016e3600 	.word	0x016e3600

080043dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e28d      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8083 	beq.w	8004502 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043fc:	4b94      	ldr	r3, [pc, #592]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b04      	cmp	r3, #4
 8004406:	d019      	beq.n	800443c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004408:	4b91      	ldr	r3, [pc, #580]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004410:	2b08      	cmp	r3, #8
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004414:	4b8e      	ldr	r3, [pc, #568]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004420:	d00c      	beq.n	800443c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004422:	4b8b      	ldr	r3, [pc, #556]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d112      	bne.n	8004454 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442e:	4b88      	ldr	r3, [pc, #544]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443a:	d10b      	bne.n	8004454 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	4b84      	ldr	r3, [pc, #528]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05b      	beq.n	8004500 <HAL_RCC_OscConfig+0x124>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d157      	bne.n	8004500 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e25a      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d106      	bne.n	800446c <HAL_RCC_OscConfig+0x90>
 800445e:	4b7c      	ldr	r3, [pc, #496]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7b      	ldr	r2, [pc, #492]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e01d      	b.n	80044a8 <HAL_RCC_OscConfig+0xcc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0xb4>
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800447c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b73      	ldr	r3, [pc, #460]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a72      	ldr	r2, [pc, #456]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0xcc>
 8004490:	4b6f      	ldr	r3, [pc, #444]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a6e      	ldr	r2, [pc, #440]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6b      	ldr	r2, [pc, #428]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80044a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe fd14 	bl	8002edc <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b8:	f7fe fd10 	bl	8002edc <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e21f      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	4b61      	ldr	r3, [pc, #388]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0xdc>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fd00 	bl	8002edc <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fe fcfc 	bl	8002edc <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e20b      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	4b57      	ldr	r3, [pc, #348]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x104>
 80044fe:	e000      	b.n	8004502 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d06f      	beq.n	80045ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800450e:	4b50      	ldr	r3, [pc, #320]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b00      	cmp	r3, #0
 8004518:	d017      	beq.n	800454a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451a:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004522:	2b08      	cmp	r3, #8
 8004524:	d105      	bne.n	8004532 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004526:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b44      	ldr	r3, [pc, #272]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d116      	bne.n	8004578 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x186>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e1d3      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004562:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4937      	ldr	r1, [pc, #220]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	e03a      	b.n	80045ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_RCC_OscConfig+0x278>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004586:	f7fe fca9 	bl	8002edc <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458e:	f7fe fca5 	bl	8002edc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e1b4      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4925      	ldr	r1, [pc, #148]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
 80045c0:	e015      	b.n	80045ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_OscConfig+0x278>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fc88 	bl	8002edc <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fc84 	bl	8002edc <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e193      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d016      	beq.n	8004630 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_RCC_OscConfig+0x27c>)
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fe fc68 	bl	8002edc <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004610:	f7fe fc64 	bl	8002edc <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e173      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 8004624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x234>
 800462e:	e01b      	b.n	8004668 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_OscConfig+0x27c>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004636:	f7fe fc51 	bl	8002edc <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	e00e      	b.n	800465c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463e:	f7fe fc4d 	bl	8002edc <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d907      	bls.n	800465c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e15c      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
 8004650:	40023800 	.word	0x40023800
 8004654:	42470000 	.word	0x42470000
 8004658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b8a      	ldr	r3, [pc, #552]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ea      	bne.n	800463e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8097 	beq.w	80047a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	4b7f      	ldr	r3, [pc, #508]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a7e      	ldr	r2, [pc, #504]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b7c      	ldr	r3, [pc, #496]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b79      	ldr	r3, [pc, #484]	; (800488c <HAL_RCC_OscConfig+0x4b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d118      	bne.n	80046e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCC_OscConfig+0x4b0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a75      	ldr	r2, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0x4b0>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046be:	f7fe fc0d 	bl	8002edc <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7fe fc09 	bl	8002edc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e118      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	4b6c      	ldr	r3, [pc, #432]	; (800488c <HAL_RCC_OscConfig+0x4b0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x31e>
 80046ec:	4b66      	ldr	r3, [pc, #408]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	4a65      	ldr	r2, [pc, #404]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6713      	str	r3, [r2, #112]	; 0x70
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x358>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d10c      	bne.n	800471c <HAL_RCC_OscConfig+0x340>
 8004702:	4b61      	ldr	r3, [pc, #388]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a60      	ldr	r2, [pc, #384]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	4b5e      	ldr	r3, [pc, #376]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a5d      	ldr	r2, [pc, #372]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0x358>
 800471c:	4b5a      	ldr	r3, [pc, #360]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a59      	ldr	r2, [pc, #356]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	4b57      	ldr	r3, [pc, #348]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a56      	ldr	r2, [pc, #344]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe fbce 	bl	8002edc <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe fbca 	bl	8002edc <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e0d7      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475a:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0ee      	beq.n	8004744 <HAL_RCC_OscConfig+0x368>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fe fbb8 	bl	8002edc <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fe fbb4 	bl	8002edc <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	; 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0c1      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	4b40      	ldr	r3, [pc, #256]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ee      	bne.n	8004770 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004792:	7dfb      	ldrb	r3, [r7, #23]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	4a3a      	ldr	r2, [pc, #232]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80ad 	beq.w	8004908 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d060      	beq.n	800487c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d145      	bne.n	800484e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b33      	ldr	r3, [pc, #204]	; (8004890 <HAL_RCC_OscConfig+0x4b4>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe fb88 	bl	8002edc <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fe fb84 	bl	8002edc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e093      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	3b01      	subs	r3, #1
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	491b      	ldr	r1, [pc, #108]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x4b4>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fe fb59 	bl	8002edc <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe fb55 	bl	8002edc <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e064      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x452>
 800484c:	e05c      	b.n	8004908 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <HAL_RCC_OscConfig+0x4b4>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fe fb42 	bl	8002edc <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe fb3e 	bl	8002edc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04d      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x480>
 800487a:	e045      	b.n	8004908 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e040      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004894:	4b1f      	ldr	r3, [pc, #124]	; (8004914 <HAL_RCC_OscConfig+0x538>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d030      	beq.n	8004904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d129      	bne.n	8004904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d122      	bne.n	8004904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048c4:	4013      	ands	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d119      	bne.n	8004904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10f      	bne.n	8004904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d107      	bne.n	8004904 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800

08004918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e041      	b.n	80049ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe f8e0 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 fb48 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e041      	b.n	8004a4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f839 	bl	8004a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 faf9 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start+0x24>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e022      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0x3e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e015      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start+0x58>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e008      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e07c      	b.n	8004bd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0x82>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae8:	e013      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_PWM_Start+0x92>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af8:	e00b      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b08:	e003      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fd50 	bl	80055c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a2d      	ldr	r2, [pc, #180]	; (8004bdc <HAL_TIM_PWM_Start+0x174>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_TIM_PWM_Start+0xcc>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <HAL_TIM_PWM_Start+0x178>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d101      	bne.n	8004b38 <HAL_TIM_PWM_Start+0xd0>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_TIM_PWM_Start+0xd2>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d007      	beq.n	8004b4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_TIM_PWM_Start+0x174>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d022      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d01d      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <HAL_TIM_PWM_Start+0x17c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <HAL_TIM_PWM_Start+0x180>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_TIM_PWM_Start+0x184>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <HAL_TIM_PWM_Start+0x178>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIM_PWM_Start+0x188>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_TIM_PWM_Start+0x136>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIM_PWM_Start+0x18c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d111      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b06      	cmp	r3, #6
 8004bae:	d010      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	e007      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40010400 	.word	0x40010400
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fcd8 	bl	80055c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2e      	ldr	r2, [pc, #184]	; (8004cd0 <HAL_TIM_PWM_Stop+0xd8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIM_PWM_Stop+0x2c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <HAL_TIM_PWM_Stop+0xdc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_TIM_PWM_Stop+0x30>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <HAL_TIM_PWM_Stop+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <HAL_TIM_PWM_Stop+0x66>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6a1a      	ldr	r2, [r3, #32]
 8004c44:	f240 4344 	movw	r3, #1092	; 0x444
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d107      	bne.n	8004c5e <HAL_TIM_PWM_Stop+0x66>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6a1a      	ldr	r2, [r3, #32]
 8004c64:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <HAL_TIM_PWM_Stop+0x96>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a1a      	ldr	r2, [r3, #32]
 8004c74:	f240 4344 	movw	r3, #1092	; 0x444
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <HAL_TIM_PWM_Stop+0x96>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Stop+0xa6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	e013      	b.n	8004cc6 <HAL_TIM_PWM_Stop+0xce>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Stop+0xb6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cac:	e00b      	b.n	8004cc6 <HAL_TIM_PWM_Stop+0xce>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Stop+0xc6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cbc:	e003      	b.n	8004cc6 <HAL_TIM_PWM_Stop+0xce>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40010400 	.word	0x40010400

08004cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e0ae      	b.n	8004e54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b0c      	cmp	r3, #12
 8004d02:	f200 809f 	bhi.w	8004e44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004e45 	.word	0x08004e45
 8004d14:	08004e45 	.word	0x08004e45
 8004d18:	08004e45 	.word	0x08004e45
 8004d1c:	08004d81 	.word	0x08004d81
 8004d20:	08004e45 	.word	0x08004e45
 8004d24:	08004e45 	.word	0x08004e45
 8004d28:	08004e45 	.word	0x08004e45
 8004d2c:	08004dc3 	.word	0x08004dc3
 8004d30:	08004e45 	.word	0x08004e45
 8004d34:	08004e45 	.word	0x08004e45
 8004d38:	08004e45 	.word	0x08004e45
 8004d3c:	08004e03 	.word	0x08004e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f9f0 	bl	800512c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0208 	orr.w	r2, r2, #8
 8004d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0204 	bic.w	r2, r2, #4
 8004d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	619a      	str	r2, [r3, #24]
      break;
 8004d7e:	e064      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fa40 	bl	800520c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	021a      	lsls	r2, r3, #8
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	619a      	str	r2, [r3, #24]
      break;
 8004dc0:	e043      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa95 	bl	80052f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0208 	orr.w	r2, r2, #8
 8004ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0204 	bic.w	r2, r2, #4
 8004dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69d9      	ldr	r1, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]
      break;
 8004e00:	e023      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fae9 	bl	80053e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	021a      	lsls	r2, r3, #8
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	61da      	str	r2, [r3, #28]
      break;
 8004e42:	e002      	b.n	8004e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIM_ConfigClockSource+0x1c>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e0b4      	b.n	8004fe2 <HAL_TIM_ConfigClockSource+0x186>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb0:	d03e      	beq.n	8004f30 <HAL_TIM_ConfigClockSource+0xd4>
 8004eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb6:	f200 8087 	bhi.w	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	f000 8086 	beq.w	8004fce <HAL_TIM_ConfigClockSource+0x172>
 8004ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec6:	d87f      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b70      	cmp	r3, #112	; 0x70
 8004eca:	d01a      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0xa6>
 8004ecc:	2b70      	cmp	r3, #112	; 0x70
 8004ece:	d87b      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed0:	2b60      	cmp	r3, #96	; 0x60
 8004ed2:	d050      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x11a>
 8004ed4:	2b60      	cmp	r3, #96	; 0x60
 8004ed6:	d877      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b50      	cmp	r3, #80	; 0x50
 8004eda:	d03c      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0xfa>
 8004edc:	2b50      	cmp	r3, #80	; 0x50
 8004ede:	d873      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b40      	cmp	r3, #64	; 0x40
 8004ee2:	d058      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x13a>
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d86f      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b30      	cmp	r3, #48	; 0x30
 8004eea:	d064      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004eec:	2b30      	cmp	r3, #48	; 0x30
 8004eee:	d86b      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d060      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d867      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05c      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d05a      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	e062      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6899      	ldr	r1, [r3, #8]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f000 fb35 	bl	8005580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	609a      	str	r2, [r3, #8]
      break;
 8004f2e:	e04f      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6899      	ldr	r1, [r3, #8]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f000 fb1e 	bl	8005580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f52:	609a      	str	r2, [r3, #8]
      break;
 8004f54:	e03c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 fa92 	bl	800548c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2150      	movs	r1, #80	; 0x50
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 faeb 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004f74:	e02c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 fab1 	bl	80054ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2160      	movs	r1, #96	; 0x60
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fadb 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004f94:	e01c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 fa72 	bl	800548c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 facb 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e00c      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f000 fac2 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8004fc6:	e003      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e000      	b.n	8004fd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a40      	ldr	r2, [pc, #256]	; (8005100 <TIM_Base_SetConfig+0x114>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d00f      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a3d      	ldr	r2, [pc, #244]	; (8005104 <TIM_Base_SetConfig+0x118>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3c      	ldr	r2, [pc, #240]	; (8005108 <TIM_Base_SetConfig+0x11c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3b      	ldr	r2, [pc, #236]	; (800510c <TIM_Base_SetConfig+0x120>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <TIM_Base_SetConfig+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2f      	ldr	r2, [pc, #188]	; (8005100 <TIM_Base_SetConfig+0x114>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d027      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <TIM_Base_SetConfig+0x118>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d023      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2b      	ldr	r2, [pc, #172]	; (8005108 <TIM_Base_SetConfig+0x11c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01f      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2a      	ldr	r2, [pc, #168]	; (800510c <TIM_Base_SetConfig+0x120>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a29      	ldr	r2, [pc, #164]	; (8005110 <TIM_Base_SetConfig+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d017      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a28      	ldr	r2, [pc, #160]	; (8005114 <TIM_Base_SetConfig+0x128>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a27      	ldr	r2, [pc, #156]	; (8005118 <TIM_Base_SetConfig+0x12c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a26      	ldr	r2, [pc, #152]	; (800511c <TIM_Base_SetConfig+0x130>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <TIM_Base_SetConfig+0x134>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a24      	ldr	r2, [pc, #144]	; (8005124 <TIM_Base_SetConfig+0x138>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a23      	ldr	r2, [pc, #140]	; (8005128 <TIM_Base_SetConfig+0x13c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <TIM_Base_SetConfig+0x114>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0c      	ldr	r2, [pc, #48]	; (8005110 <TIM_Base_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40010400 	.word	0x40010400
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400
 800511c:	40014800 	.word	0x40014800
 8005120:	40001800 	.word	0x40001800
 8005124:	40001c00 	.word	0x40001c00
 8005128:	40002000 	.word	0x40002000

0800512c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 0302 	bic.w	r3, r3, #2
 8005174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a20      	ldr	r2, [pc, #128]	; (8005204 <TIM_OC1_SetConfig+0xd8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_OC1_SetConfig+0x64>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <TIM_OC1_SetConfig+0xdc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10c      	bne.n	80051aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0308 	bic.w	r3, r3, #8
 8005196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <TIM_OC1_SetConfig+0xd8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_OC1_SetConfig+0x8e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <TIM_OC1_SetConfig+0xdc>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d111      	bne.n	80051de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400

0800520c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0210 	bic.w	r2, r3, #16
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0320 	bic.w	r3, r3, #32
 8005256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <TIM_OC2_SetConfig+0xe4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_OC2_SetConfig+0x68>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <TIM_OC2_SetConfig+0xe8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d10d      	bne.n	8005290 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <TIM_OC2_SetConfig+0xe4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d003      	beq.n	80052a0 <TIM_OC2_SetConfig+0x94>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <TIM_OC2_SetConfig+0xe8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d113      	bne.n	80052c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400

080052f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a21      	ldr	r2, [pc, #132]	; (80053d8 <TIM_OC3_SetConfig+0xe0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC3_SetConfig+0x66>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a20      	ldr	r2, [pc, #128]	; (80053dc <TIM_OC3_SetConfig+0xe4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10d      	bne.n	800537a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <TIM_OC3_SetConfig+0xe0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_OC3_SetConfig+0x92>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a15      	ldr	r2, [pc, #84]	; (80053dc <TIM_OC3_SetConfig+0xe4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d113      	bne.n	80053b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400

080053e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800542a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	031b      	lsls	r3, r3, #12
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a12      	ldr	r2, [pc, #72]	; (8005484 <TIM_OC4_SetConfig+0xa4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC4_SetConfig+0x68>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a11      	ldr	r2, [pc, #68]	; (8005488 <TIM_OC4_SetConfig+0xa8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d109      	bne.n	800545c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800544e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	019b      	lsls	r3, r3, #6
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40010400 	.word	0x40010400

0800548c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 030a 	bic.w	r3, r3, #10
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0210 	bic.w	r2, r3, #16
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	f043 0307 	orr.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	2201      	movs	r2, #1
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	401a      	ands	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1a      	ldr	r2, [r3, #32]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	fa01 f303 	lsl.w	r3, r1, r3
 80055f8:	431a      	orrs	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005620:	2302      	movs	r3, #2
 8005622:	e05a      	b.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a21      	ldr	r2, [pc, #132]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005670:	d01d      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1a      	ldr	r2, [pc, #104]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a15      	ldr	r2, [pc, #84]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d10c      	bne.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40010400 	.word	0x40010400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40001800 	.word	0x40001800

08005704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e03f      	b.n	8005796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fd fa9a 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	; 0x24
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fd7b 	bl	8006244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800575c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695a      	ldr	r2, [r3, #20]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800576c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800577c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b08a      	sub	sp, #40	; 0x28
 80057a2:	af02      	add	r7, sp, #8
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d17c      	bne.n	80058b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d002      	beq.n	80057ca <HAL_UART_Transmit+0x2c>
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e075      	b.n	80058ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <HAL_UART_Transmit+0x3e>
 80057d8:	2302      	movs	r3, #2
 80057da:	e06e      	b.n	80058ba <HAL_UART_Transmit+0x11c>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2221      	movs	r2, #33	; 0x21
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f2:	f7fd fb73 	bl	8002edc <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	88fa      	ldrh	r2, [r7, #6]
 80057fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	88fa      	ldrh	r2, [r7, #6]
 8005802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	d108      	bne.n	8005820 <HAL_UART_Transmit+0x82>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e003      	b.n	8005828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005830:	e02a      	b.n	8005888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	2180      	movs	r1, #128	; 0x80
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 faf9 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e036      	b.n	80058ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3302      	adds	r3, #2
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e007      	b.n	800587a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3301      	adds	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1cf      	bne.n	8005832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	2140      	movs	r1, #64	; 0x40
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fac9 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e006      	b.n	80058ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e000      	b.n	80058ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3720      	adds	r7, #32
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b0ba      	sub	sp, #232	; 0xe8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10f      	bne.n	800592a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_UART_IRQHandler+0x66>
 8005916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fbd3 	bl	80060ce <UART_Receive_IT>
      return;
 8005928:	e256      	b.n	8005dd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800592a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80de 	beq.w	8005af0 <HAL_UART_IRQHandler+0x22c>
 8005934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d106      	bne.n	800594e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80d1 	beq.w	8005af0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_UART_IRQHandler+0xae>
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0201 	orr.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <HAL_UART_IRQHandler+0xd2>
 800597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f043 0202 	orr.w	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <HAL_UART_IRQHandler+0xf6>
 80059a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0204 	orr.w	r2, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d011      	beq.n	80059ea <HAL_UART_IRQHandler+0x126>
 80059c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d105      	bne.n	80059de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0208 	orr.w	r2, r3, #8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 81ed 	beq.w	8005dce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_UART_IRQHandler+0x14e>
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fb5e 	bl	80060ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b40      	cmp	r3, #64	; 0x40
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d103      	bne.n	8005a3e <HAL_UART_IRQHandler+0x17a>
 8005a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d04f      	beq.n	8005ade <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa66 	bl	8005f10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d141      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3314      	adds	r3, #20
 8005a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1d9      	bne.n	8005a52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d013      	beq.n	8005ace <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	4a7d      	ldr	r2, [pc, #500]	; (8005ca0 <HAL_UART_IRQHandler+0x3dc>)
 8005aac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fd ffaf 	bl	8003a16 <HAL_DMA_Abort_IT>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	e00e      	b.n	8005aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f99a 	bl	8005e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	e00a      	b.n	8005aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f996 	bl	8005e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	e006      	b.n	8005aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f992 	bl	8005e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005aea:	e170      	b.n	8005dce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	bf00      	nop
    return;
 8005aee:	e16e      	b.n	8005dce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	f040 814a 	bne.w	8005d8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 8143 	beq.w	8005d8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 813c 	beq.w	8005d8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	f040 80b4 	bne.w	8005ca4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8140 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	f080 8139 	bcs.w	8005dd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	f000 8088 	beq.w	8005c86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1d9      	bne.n	8005b76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3314      	adds	r3, #20
 8005bc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3314      	adds	r3, #20
 8005be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005be6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e1      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3314      	adds	r3, #20
 8005c04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e3      	bne.n	8005bfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c56:	f023 0310 	bic.w	r3, r3, #16
 8005c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	330c      	adds	r3, #12
 8005c64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c68:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e3      	bne.n	8005c44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fd fe58 	bl	8003936 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8c0 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c9c:	e099      	b.n	8005dd2 <HAL_UART_IRQHandler+0x50e>
 8005c9e:	bf00      	nop
 8005ca0:	08005fd7 	.word	0x08005fd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 808b 	beq.w	8005dd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8086 	beq.w	8005dd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cee:	647a      	str	r2, [r7, #68]	; 0x44
 8005cf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e3      	bne.n	8005cca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	623b      	str	r3, [r7, #32]
   return(result);
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d26:	633a      	str	r2, [r7, #48]	; 0x30
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e3      	bne.n	8005d02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0310 	bic.w	r3, r3, #16
 8005d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d6c:	61fa      	str	r2, [r7, #28]
 8005d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e3      	bne.n	8005d48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f848 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d8c:	e023      	b.n	8005dd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_UART_IRQHandler+0x4ea>
 8005d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f929 	bl	8005ffe <UART_Transmit_IT>
    return;
 8005dac:	e014      	b.n	8005dd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00e      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x514>
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f969 	bl	800609e <UART_EndTransmit_IT>
    return;
 8005dcc:	e004      	b.n	8005dd8 <HAL_UART_IRQHandler+0x514>
    return;
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <HAL_UART_IRQHandler+0x514>
      return;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <HAL_UART_IRQHandler+0x514>
      return;
 8005dd6:	bf00      	nop
  }
}
 8005dd8:	37e8      	adds	r7, #232	; 0xe8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop

08005de0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b090      	sub	sp, #64	; 0x40
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	e050      	b.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d04c      	beq.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e54:	f7fd f842 	bl	8002edc <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d241      	bcs.n	8005ee8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	330c      	adds	r3, #12
 8005e82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e84:	637a      	str	r2, [r7, #52]	; 0x34
 8005e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e5      	bne.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb8:	623a      	str	r2, [r7, #32]
 8005eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69f9      	ldr	r1, [r7, #28]
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e00f      	b.n	8005f08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d09f      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3740      	adds	r7, #64	; 0x40
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b095      	sub	sp, #84	; 0x54
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f38:	643a      	str	r2, [r7, #64]	; 0x40
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e5      	bne.n	8005f18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3314      	adds	r3, #20
 8005f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d119      	bne.n	8005fbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f023 0310 	bic.w	r3, r3, #16
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa8:	61ba      	str	r2, [r7, #24]
 8005faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6979      	ldr	r1, [r7, #20]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e5      	bne.n	8005f88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005fca:	bf00      	nop
 8005fcc:	3754      	adds	r7, #84	; 0x54
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff ff09 	bl	8005e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b21      	cmp	r3, #33	; 0x21
 8006010:	d13e      	bne.n	8006090 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601a:	d114      	bne.n	8006046 <UART_Transmit_IT+0x48>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d110      	bne.n	8006046 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006038:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	1c9a      	adds	r2, r3, #2
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]
 8006044:	e008      	b.n	8006058 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6211      	str	r1, [r2, #32]
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4619      	mov	r1, r3
 8006066:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10f      	bne.n	800608c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fe8e 	bl	8005de0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08c      	sub	sp, #48	; 0x30
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b22      	cmp	r3, #34	; 0x22
 80060e0:	f040 80ab 	bne.w	800623a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d117      	bne.n	800611e <UART_Receive_IT+0x50>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d113      	bne.n	800611e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610c:	b29a      	uxth	r2, r3
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	1c9a      	adds	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	629a      	str	r2, [r3, #40]	; 0x28
 800611c:	e026      	b.n	800616c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006130:	d007      	beq.n	8006142 <UART_Receive_IT+0x74>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <UART_Receive_IT+0x82>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e008      	b.n	8006162 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4619      	mov	r1, r3
 800617a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800617c:	2b00      	cmp	r3, #0
 800617e:	d15a      	bne.n	8006236 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0220 	bic.w	r2, r2, #32
 800618e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d135      	bne.n	800622c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	613b      	str	r3, [r7, #16]
   return(result);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f023 0310 	bic.w	r3, r3, #16
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	623a      	str	r2, [r7, #32]
 80061e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	69f9      	ldr	r1, [r7, #28]
 80061ec:	6a3a      	ldr	r2, [r7, #32]
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e5      	bne.n	80061c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b10      	cmp	r3, #16
 8006206:	d10a      	bne.n	800621e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fdf9 	bl	8005e1c <HAL_UARTEx_RxEventCallback>
 800622a:	e002      	b.n	8006232 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fde1 	bl	8005df4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e002      	b.n	800623c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e000      	b.n	800623c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800623a:	2302      	movs	r3, #2
  }
}
 800623c:	4618      	mov	r0, r3
 800623e:	3730      	adds	r7, #48	; 0x30
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006248:	b0c0      	sub	sp, #256	; 0x100
 800624a:	af00      	add	r7, sp, #0
 800624c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	68d9      	ldr	r1, [r3, #12]
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	ea40 0301 	orr.w	r3, r0, r1
 800626c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800626e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	431a      	orrs	r2, r3
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	431a      	orrs	r2, r3
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800629c:	f021 010c 	bic.w	r1, r1, #12
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062aa:	430b      	orrs	r3, r1
 80062ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	6999      	ldr	r1, [r3, #24]
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	ea40 0301 	orr.w	r3, r0, r1
 80062ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b8f      	ldr	r3, [pc, #572]	; (8006510 <UART_SetConfig+0x2cc>)
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d005      	beq.n	80062e4 <UART_SetConfig+0xa0>
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b8d      	ldr	r3, [pc, #564]	; (8006514 <UART_SetConfig+0x2d0>)
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d104      	bne.n	80062ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062e4:	f7fd febc 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 80062e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062ec:	e003      	b.n	80062f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ee:	f7fd fea3 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 80062f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006300:	f040 810c 	bne.w	800651c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006308:	2200      	movs	r2, #0
 800630a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800630e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006316:	4622      	mov	r2, r4
 8006318:	462b      	mov	r3, r5
 800631a:	1891      	adds	r1, r2, r2
 800631c:	65b9      	str	r1, [r7, #88]	; 0x58
 800631e:	415b      	adcs	r3, r3
 8006320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006326:	4621      	mov	r1, r4
 8006328:	eb12 0801 	adds.w	r8, r2, r1
 800632c:	4629      	mov	r1, r5
 800632e:	eb43 0901 	adc.w	r9, r3, r1
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	f04f 0300 	mov.w	r3, #0
 800633a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800633e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006346:	4690      	mov	r8, r2
 8006348:	4699      	mov	r9, r3
 800634a:	4623      	mov	r3, r4
 800634c:	eb18 0303 	adds.w	r3, r8, r3
 8006350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006354:	462b      	mov	r3, r5
 8006356:	eb49 0303 	adc.w	r3, r9, r3
 800635a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800636a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800636e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006372:	460b      	mov	r3, r1
 8006374:	18db      	adds	r3, r3, r3
 8006376:	653b      	str	r3, [r7, #80]	; 0x50
 8006378:	4613      	mov	r3, r2
 800637a:	eb42 0303 	adc.w	r3, r2, r3
 800637e:	657b      	str	r3, [r7, #84]	; 0x54
 8006380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006388:	f7f9 ff3c 	bl	8000204 <__aeabi_uldivmod>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4b61      	ldr	r3, [pc, #388]	; (8006518 <UART_SetConfig+0x2d4>)
 8006392:	fba3 2302 	umull	r2, r3, r3, r2
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	011c      	lsls	r4, r3, #4
 800639a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063b4:	415b      	adcs	r3, r3
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063bc:	4641      	mov	r1, r8
 80063be:	eb12 0a01 	adds.w	sl, r2, r1
 80063c2:	4649      	mov	r1, r9
 80063c4:	eb43 0b01 	adc.w	fp, r3, r1
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063dc:	4692      	mov	sl, r2
 80063de:	469b      	mov	fp, r3
 80063e0:	4643      	mov	r3, r8
 80063e2:	eb1a 0303 	adds.w	r3, sl, r3
 80063e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ea:	464b      	mov	r3, r9
 80063ec:	eb4b 0303 	adc.w	r3, fp, r3
 80063f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006400:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006408:	460b      	mov	r3, r1
 800640a:	18db      	adds	r3, r3, r3
 800640c:	643b      	str	r3, [r7, #64]	; 0x40
 800640e:	4613      	mov	r3, r2
 8006410:	eb42 0303 	adc.w	r3, r2, r3
 8006414:	647b      	str	r3, [r7, #68]	; 0x44
 8006416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800641a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800641e:	f7f9 fef1 	bl	8000204 <__aeabi_uldivmod>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4611      	mov	r1, r2
 8006428:	4b3b      	ldr	r3, [pc, #236]	; (8006518 <UART_SetConfig+0x2d4>)
 800642a:	fba3 2301 	umull	r2, r3, r3, r1
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	2264      	movs	r2, #100	; 0x64
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	1acb      	subs	r3, r1, r3
 8006438:	00db      	lsls	r3, r3, #3
 800643a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800643e:	4b36      	ldr	r3, [pc, #216]	; (8006518 <UART_SetConfig+0x2d4>)
 8006440:	fba3 2302 	umull	r2, r3, r3, r2
 8006444:	095b      	lsrs	r3, r3, #5
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800644c:	441c      	add	r4, r3
 800644e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006452:	2200      	movs	r2, #0
 8006454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006458:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800645c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006460:	4642      	mov	r2, r8
 8006462:	464b      	mov	r3, r9
 8006464:	1891      	adds	r1, r2, r2
 8006466:	63b9      	str	r1, [r7, #56]	; 0x38
 8006468:	415b      	adcs	r3, r3
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800646c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006470:	4641      	mov	r1, r8
 8006472:	1851      	adds	r1, r2, r1
 8006474:	6339      	str	r1, [r7, #48]	; 0x30
 8006476:	4649      	mov	r1, r9
 8006478:	414b      	adcs	r3, r1
 800647a:	637b      	str	r3, [r7, #52]	; 0x34
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006488:	4659      	mov	r1, fp
 800648a:	00cb      	lsls	r3, r1, #3
 800648c:	4651      	mov	r1, sl
 800648e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006492:	4651      	mov	r1, sl
 8006494:	00ca      	lsls	r2, r1, #3
 8006496:	4610      	mov	r0, r2
 8006498:	4619      	mov	r1, r3
 800649a:	4603      	mov	r3, r0
 800649c:	4642      	mov	r2, r8
 800649e:	189b      	adds	r3, r3, r2
 80064a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064a4:	464b      	mov	r3, r9
 80064a6:	460a      	mov	r2, r1
 80064a8:	eb42 0303 	adc.w	r3, r2, r3
 80064ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064c4:	460b      	mov	r3, r1
 80064c6:	18db      	adds	r3, r3, r3
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ca:	4613      	mov	r3, r2
 80064cc:	eb42 0303 	adc.w	r3, r2, r3
 80064d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064da:	f7f9 fe93 	bl	8000204 <__aeabi_uldivmod>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <UART_SetConfig+0x2d4>)
 80064e4:	fba3 1302 	umull	r1, r3, r3, r2
 80064e8:	095b      	lsrs	r3, r3, #5
 80064ea:	2164      	movs	r1, #100	; 0x64
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	3332      	adds	r3, #50	; 0x32
 80064f6:	4a08      	ldr	r2, [pc, #32]	; (8006518 <UART_SetConfig+0x2d4>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	f003 0207 	and.w	r2, r3, #7
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4422      	add	r2, r4
 800650a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800650c:	e105      	b.n	800671a <UART_SetConfig+0x4d6>
 800650e:	bf00      	nop
 8006510:	40011000 	.word	0x40011000
 8006514:	40011400 	.word	0x40011400
 8006518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800651c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006520:	2200      	movs	r2, #0
 8006522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006526:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800652a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800652e:	4642      	mov	r2, r8
 8006530:	464b      	mov	r3, r9
 8006532:	1891      	adds	r1, r2, r2
 8006534:	6239      	str	r1, [r7, #32]
 8006536:	415b      	adcs	r3, r3
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
 800653a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800653e:	4641      	mov	r1, r8
 8006540:	1854      	adds	r4, r2, r1
 8006542:	4649      	mov	r1, r9
 8006544:	eb43 0501 	adc.w	r5, r3, r1
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	00eb      	lsls	r3, r5, #3
 8006552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006556:	00e2      	lsls	r2, r4, #3
 8006558:	4614      	mov	r4, r2
 800655a:	461d      	mov	r5, r3
 800655c:	4643      	mov	r3, r8
 800655e:	18e3      	adds	r3, r4, r3
 8006560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006564:	464b      	mov	r3, r9
 8006566:	eb45 0303 	adc.w	r3, r5, r3
 800656a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800657a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800658a:	4629      	mov	r1, r5
 800658c:	008b      	lsls	r3, r1, #2
 800658e:	4621      	mov	r1, r4
 8006590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006594:	4621      	mov	r1, r4
 8006596:	008a      	lsls	r2, r1, #2
 8006598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800659c:	f7f9 fe32 	bl	8000204 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4b60      	ldr	r3, [pc, #384]	; (8006728 <UART_SetConfig+0x4e4>)
 80065a6:	fba3 2302 	umull	r2, r3, r3, r2
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	011c      	lsls	r4, r3, #4
 80065ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	1891      	adds	r1, r2, r2
 80065c6:	61b9      	str	r1, [r7, #24]
 80065c8:	415b      	adcs	r3, r3
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065d0:	4641      	mov	r1, r8
 80065d2:	1851      	adds	r1, r2, r1
 80065d4:	6139      	str	r1, [r7, #16]
 80065d6:	4649      	mov	r1, r9
 80065d8:	414b      	adcs	r3, r1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065e8:	4659      	mov	r1, fp
 80065ea:	00cb      	lsls	r3, r1, #3
 80065ec:	4651      	mov	r1, sl
 80065ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065f2:	4651      	mov	r1, sl
 80065f4:	00ca      	lsls	r2, r1, #3
 80065f6:	4610      	mov	r0, r2
 80065f8:	4619      	mov	r1, r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	4642      	mov	r2, r8
 80065fe:	189b      	adds	r3, r3, r2
 8006600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006604:	464b      	mov	r3, r9
 8006606:	460a      	mov	r2, r1
 8006608:	eb42 0303 	adc.w	r3, r2, r3
 800660c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	67bb      	str	r3, [r7, #120]	; 0x78
 800661a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006628:	4649      	mov	r1, r9
 800662a:	008b      	lsls	r3, r1, #2
 800662c:	4641      	mov	r1, r8
 800662e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006632:	4641      	mov	r1, r8
 8006634:	008a      	lsls	r2, r1, #2
 8006636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800663a:	f7f9 fde3 	bl	8000204 <__aeabi_uldivmod>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4b39      	ldr	r3, [pc, #228]	; (8006728 <UART_SetConfig+0x4e4>)
 8006644:	fba3 1302 	umull	r1, r3, r3, r2
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	2164      	movs	r1, #100	; 0x64
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	3332      	adds	r3, #50	; 0x32
 8006656:	4a34      	ldr	r2, [pc, #208]	; (8006728 <UART_SetConfig+0x4e4>)
 8006658:	fba2 2303 	umull	r2, r3, r2, r3
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006662:	441c      	add	r4, r3
 8006664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006668:	2200      	movs	r2, #0
 800666a:	673b      	str	r3, [r7, #112]	; 0x70
 800666c:	677a      	str	r2, [r7, #116]	; 0x74
 800666e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006672:	4642      	mov	r2, r8
 8006674:	464b      	mov	r3, r9
 8006676:	1891      	adds	r1, r2, r2
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	415b      	adcs	r3, r3
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006682:	4641      	mov	r1, r8
 8006684:	1851      	adds	r1, r2, r1
 8006686:	6039      	str	r1, [r7, #0]
 8006688:	4649      	mov	r1, r9
 800668a:	414b      	adcs	r3, r1
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800669a:	4659      	mov	r1, fp
 800669c:	00cb      	lsls	r3, r1, #3
 800669e:	4651      	mov	r1, sl
 80066a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066a4:	4651      	mov	r1, sl
 80066a6:	00ca      	lsls	r2, r1, #3
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	4603      	mov	r3, r0
 80066ae:	4642      	mov	r2, r8
 80066b0:	189b      	adds	r3, r3, r2
 80066b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b4:	464b      	mov	r3, r9
 80066b6:	460a      	mov	r2, r1
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	663b      	str	r3, [r7, #96]	; 0x60
 80066c8:	667a      	str	r2, [r7, #100]	; 0x64
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066d6:	4649      	mov	r1, r9
 80066d8:	008b      	lsls	r3, r1, #2
 80066da:	4641      	mov	r1, r8
 80066dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e0:	4641      	mov	r1, r8
 80066e2:	008a      	lsls	r2, r1, #2
 80066e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066e8:	f7f9 fd8c 	bl	8000204 <__aeabi_uldivmod>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <UART_SetConfig+0x4e4>)
 80066f2:	fba3 1302 	umull	r1, r3, r3, r2
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2164      	movs	r1, #100	; 0x64
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	3332      	adds	r3, #50	; 0x32
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <UART_SetConfig+0x4e4>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4422      	add	r2, r4
 8006718:	609a      	str	r2, [r3, #8]
}
 800671a:	bf00      	nop
 800671c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006720:	46bd      	mov	sp, r7
 8006722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006726:	bf00      	nop
 8006728:	51eb851f 	.word	0x51eb851f

0800672c <LL_EXTI_EnableIT_0_31>:
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <LL_EXTI_EnableIT_0_31+0x20>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	4904      	ldr	r1, [pc, #16]	; (800674c <LL_EXTI_EnableIT_0_31+0x20>)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4313      	orrs	r3, r2
 800673e:	600b      	str	r3, [r1, #0]
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	40013c00 	.word	0x40013c00

08006750 <LL_EXTI_DisableIT_0_31>:
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <LL_EXTI_DisableIT_0_31+0x24>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	43db      	mvns	r3, r3
 8006760:	4904      	ldr	r1, [pc, #16]	; (8006774 <LL_EXTI_DisableIT_0_31+0x24>)
 8006762:	4013      	ands	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40013c00 	.word	0x40013c00

08006778 <LL_EXTI_EnableEvent_0_31>:
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	4904      	ldr	r1, [pc, #16]	; (8006798 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4313      	orrs	r3, r2
 800678a:	604b      	str	r3, [r1, #4]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40013c00 	.word	0x40013c00

0800679c <LL_EXTI_DisableEvent_0_31>:
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	4904      	ldr	r1, [pc, #16]	; (80067c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	604b      	str	r3, [r1, #4]
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40013c00 	.word	0x40013c00

080067c4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	4904      	ldr	r1, [pc, #16]	; (80067e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	608b      	str	r3, [r1, #8]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40013c00 	.word	0x40013c00

080067e8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	4904      	ldr	r1, [pc, #16]	; (800680c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	608b      	str	r3, [r1, #8]
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40013c00 	.word	0x40013c00

08006810 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	4904      	ldr	r1, [pc, #16]	; (8006830 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4313      	orrs	r3, r2
 8006822:	60cb      	str	r3, [r1, #12]
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40013c00 	.word	0x40013c00

08006834 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	43db      	mvns	r3, r3
 8006844:	4904      	ldr	r1, [pc, #16]	; (8006858 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006846:	4013      	ands	r3, r2
 8006848:	60cb      	str	r3, [r1, #12]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40013c00 	.word	0x40013c00

0800685c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	791b      	ldrb	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d065      	beq.n	800693c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d06c      	beq.n	8006952 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	795b      	ldrb	r3, [r3, #5]
 800687c:	2b02      	cmp	r3, #2
 800687e:	d01c      	beq.n	80068ba <LL_EXTI_Init+0x5e>
 8006880:	2b02      	cmp	r3, #2
 8006882:	dc25      	bgt.n	80068d0 <LL_EXTI_Init+0x74>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <LL_EXTI_Init+0x32>
 8006888:	2b01      	cmp	r3, #1
 800688a:	d00b      	beq.n	80068a4 <LL_EXTI_Init+0x48>
 800688c:	e020      	b.n	80068d0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff ff82 	bl	800679c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff ff45 	bl	800672c <LL_EXTI_EnableIT_0_31>
          break;
 80068a2:	e018      	b.n	80068d6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff ff51 	bl	8006750 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff ff60 	bl	8006778 <LL_EXTI_EnableEvent_0_31>
          break;
 80068b8:	e00d      	b.n	80068d6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff ff34 	bl	800672c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff55 	bl	8006778 <LL_EXTI_EnableEvent_0_31>
          break;
 80068ce:	e002      	b.n	80068d6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
          break;
 80068d4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	799b      	ldrb	r3, [r3, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d039      	beq.n	8006952 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	799b      	ldrb	r3, [r3, #6]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d01c      	beq.n	8006920 <LL_EXTI_Init+0xc4>
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	dc25      	bgt.n	8006936 <LL_EXTI_Init+0xda>
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d002      	beq.n	80068f4 <LL_EXTI_Init+0x98>
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d00b      	beq.n	800690a <LL_EXTI_Init+0xae>
 80068f2:	e020      	b.n	8006936 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff9b 	bl	8006834 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff ff5e 	bl	80067c4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006908:	e024      	b.n	8006954 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff6a 	bl	80067e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff79 	bl	8006810 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800691e:	e019      	b.n	8006954 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff ff4d 	bl	80067c4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7ff ff6e 	bl	8006810 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006934:	e00e      	b.n	8006954 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
            break;
 800693a:	e00b      	b.n	8006954 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ff05 	bl	8006750 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff ff26 	bl	800679c <LL_EXTI_DisableEvent_0_31>
 8006950:	e000      	b.n	8006954 <LL_EXTI_Init+0xf8>
      }
 8006952:	bf00      	nop
  }
  return status;
 8006954:	7bfb      	ldrb	r3, [r7, #15]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <LL_GPIO_SetPinMode>:
{
 800695e:	b480      	push	{r7}
 8006960:	b089      	sub	sp, #36	; 0x24
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	fa93 f3a3 	rbit	r3, r3
 8006978:	613b      	str	r3, [r7, #16]
  return result;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	fab3 f383 	clz	r3, r3
 8006980:	b2db      	uxtb	r3, r3
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2103      	movs	r1, #3
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	401a      	ands	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	fa93 f3a3 	rbit	r3, r3
 8006998:	61bb      	str	r3, [r7, #24]
  return result;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	fab3 f383 	clz	r3, r3
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	431a      	orrs	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	601a      	str	r2, [r3, #0]
}
 80069b0:	bf00      	nop
 80069b2:	3724      	adds	r7, #36	; 0x24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_GPIO_SetPinOutputType>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	43db      	mvns	r3, r3
 80069d0:	401a      	ands	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	431a      	orrs	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	605a      	str	r2, [r3, #4]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_GPIO_SetPinSpeed>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	; 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	fa93 f3a3 	rbit	r3, r3
 8006a06:	613b      	str	r3, [r7, #16]
  return result;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	fab3 f383 	clz	r3, r3
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	2103      	movs	r1, #3
 8006a14:	fa01 f303 	lsl.w	r3, r1, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	401a      	ands	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	61bb      	str	r3, [r7, #24]
  return result;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	fab3 f383 	clz	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	609a      	str	r2, [r3, #8]
}
 8006a3e:	bf00      	nop
 8006a40:	3724      	adds	r7, #36	; 0x24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <LL_GPIO_SetPinPull>:
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b089      	sub	sp, #36	; 0x24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	fa93 f3a3 	rbit	r3, r3
 8006a64:	613b      	str	r3, [r7, #16]
  return result;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	fab3 f383 	clz	r3, r3
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	2103      	movs	r1, #3
 8006a72:	fa01 f303 	lsl.w	r3, r1, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	401a      	ands	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	fa93 f3a3 	rbit	r3, r3
 8006a84:	61bb      	str	r3, [r7, #24]
  return result;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	fab3 f383 	clz	r3, r3
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	60da      	str	r2, [r3, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	3724      	adds	r7, #36	; 0x24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_GPIO_SetAFPin_0_7>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b089      	sub	sp, #36	; 0x24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1a      	ldr	r2, [r3, #32]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	fa93 f3a3 	rbit	r3, r3
 8006ac2:	613b      	str	r3, [r7, #16]
  return result;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	fab3 f383 	clz	r3, r3
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	210f      	movs	r1, #15
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	401a      	ands	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	fa93 f3a3 	rbit	r3, r3
 8006ae2:	61bb      	str	r3, [r7, #24]
  return result;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	fab3 f383 	clz	r3, r3
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	431a      	orrs	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	3724      	adds	r7, #36	; 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <LL_GPIO_SetAFPin_8_15>:
{
 8006b06:	b480      	push	{r7}
 8006b08:	b089      	sub	sp, #36	; 0x24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	0a1b      	lsrs	r3, r3, #8
 8006b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fa93 f3a3 	rbit	r3, r3
 8006b22:	613b      	str	r3, [r7, #16]
  return result;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	fab3 f383 	clz	r3, r3
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	210f      	movs	r1, #15
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	43db      	mvns	r3, r3
 8006b36:	401a      	ands	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	0a1b      	lsrs	r3, r3, #8
 8006b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	61bb      	str	r3, [r7, #24]
  return result;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	fab3 f383 	clz	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006b5c:	bf00      	nop
 8006b5e:	3724      	adds	r7, #36	; 0x24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	fa93 f3a3 	rbit	r3, r3
 8006b86:	613b      	str	r3, [r7, #16]
  return result;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	fab3 f383 	clz	r3, r3
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006b92:	e050      	b.n	8006c36 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d042      	beq.n	8006c30 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d003      	beq.n	8006bba <LL_GPIO_Init+0x52>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d10d      	bne.n	8006bd6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	69b9      	ldr	r1, [r7, #24]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ff12 	bl	80069ec <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	69b9      	ldr	r1, [r7, #24]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff fef3 	bl	80069bc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7ff ff33 	bl	8006a4a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d11a      	bne.n	8006c22 <LL_GPIO_Init+0xba>
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	fa93 f3a3 	rbit	r3, r3
 8006bf6:	60bb      	str	r3, [r7, #8]
  return result;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006bfa:	fab3 f383 	clz	r3, r3
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b07      	cmp	r3, #7
 8006c02:	d807      	bhi.n	8006c14 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	69b9      	ldr	r1, [r7, #24]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ff4b 	bl	8006aa8 <LL_GPIO_SetAFPin_0_7>
 8006c12:	e006      	b.n	8006c22 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	69b9      	ldr	r1, [r7, #24]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff ff72 	bl	8006b06 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	461a      	mov	r2, r3
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fe97 	bl	800695e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	3301      	adds	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1a7      	bne.n	8006b94 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <__libc_init_array>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	4d0d      	ldr	r5, [pc, #52]	; (8006c88 <__libc_init_array+0x38>)
 8006c54:	4c0d      	ldr	r4, [pc, #52]	; (8006c8c <__libc_init_array+0x3c>)
 8006c56:	1b64      	subs	r4, r4, r5
 8006c58:	10a4      	asrs	r4, r4, #2
 8006c5a:	2600      	movs	r6, #0
 8006c5c:	42a6      	cmp	r6, r4
 8006c5e:	d109      	bne.n	8006c74 <__libc_init_array+0x24>
 8006c60:	4d0b      	ldr	r5, [pc, #44]	; (8006c90 <__libc_init_array+0x40>)
 8006c62:	4c0c      	ldr	r4, [pc, #48]	; (8006c94 <__libc_init_array+0x44>)
 8006c64:	f000 f830 	bl	8006cc8 <_init>
 8006c68:	1b64      	subs	r4, r4, r5
 8006c6a:	10a4      	asrs	r4, r4, #2
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	42a6      	cmp	r6, r4
 8006c70:	d105      	bne.n	8006c7e <__libc_init_array+0x2e>
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c78:	4798      	blx	r3
 8006c7a:	3601      	adds	r6, #1
 8006c7c:	e7ee      	b.n	8006c5c <__libc_init_array+0xc>
 8006c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c82:	4798      	blx	r3
 8006c84:	3601      	adds	r6, #1
 8006c86:	e7f2      	b.n	8006c6e <__libc_init_array+0x1e>
 8006c88:	08006da4 	.word	0x08006da4
 8006c8c:	08006da4 	.word	0x08006da4
 8006c90:	08006da4 	.word	0x08006da4
 8006c94:	08006da8 	.word	0x08006da8

08006c98 <memcmp>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	3901      	subs	r1, #1
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4290      	cmp	r0, r2
 8006ca0:	d101      	bne.n	8006ca6 <memcmp+0xe>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e005      	b.n	8006cb2 <memcmp+0x1a>
 8006ca6:	7803      	ldrb	r3, [r0, #0]
 8006ca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d001      	beq.n	8006cb4 <memcmp+0x1c>
 8006cb0:	1b18      	subs	r0, r3, r4
 8006cb2:	bd10      	pop	{r4, pc}
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	e7f2      	b.n	8006c9e <memcmp+0x6>

08006cb8 <memset>:
 8006cb8:	4402      	add	r2, r0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d100      	bne.n	8006cc2 <memset+0xa>
 8006cc0:	4770      	bx	lr
 8006cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc6:	e7f9      	b.n	8006cbc <memset+0x4>

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
