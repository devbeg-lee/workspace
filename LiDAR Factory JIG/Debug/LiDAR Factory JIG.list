
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005818  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a14  08005a14  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a1c  08005a1c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  08005a34  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08005a34  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ec3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e9  00000000  00000000  00033f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  000372f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00038638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028885  00000000  00000000  00039818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185c2  00000000  00000000  0006209d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef3be  00000000  00000000  0007a65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f2c  00000000  00000000  00169a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080059c4 	.word	0x080059c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080059c4 	.word	0x080059c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800052a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000538:	2200      	movs	r2, #0
 800053a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800053e:	2200      	movs	r2, #0
 8000540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <MX_ADC1_Init+0xa4>)
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000558:	2201      	movs	r2, #1
 800055a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_ADC1_Init+0x9c>)
 8000566:	2201      	movs	r2, #1
 8000568:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056a:	480e      	ldr	r0, [pc, #56]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800056c:	f001 fea0 	bl	80022b0 <HAL_ADC_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000576:	f000 fbaf 	bl	8000cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000582:	2303      	movs	r3, #3
 8000584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800058c:	f001 fed4 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000596:	f000 fb9f 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000002c 	.word	0x2000002c
 80005a8:	40012000 	.word	0x40012000
 80005ac:	0f000001 	.word	0x0f000001

080005b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <HAL_ADC_MspInit+0x7c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d127      	bne.n	8000622 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	6453      	str	r3, [r2, #68]	; 0x44
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_ADC_MspInit+0x80>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_ADC_MspInit+0x80>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060e:	2303      	movs	r3, #3
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <HAL_ADC_MspInit+0x84>)
 800061e:	f002 f99f 	bl	8002960 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000622:	bf00      	nop
 8000624:	3728      	adds	r7, #40	; 0x28
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40012000 	.word	0x40012000
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000

08000638 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <Delay_us+0x40>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000646:	f002 fc6d 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <Delay_us+0x44>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	0c9b      	lsrs	r3, r3, #18
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	fb02 f303 	mul.w	r3, r2, r3
 800065a:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 800065c:	bf00      	nop
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <Delay_us+0x40>)
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	1ad2      	subs	r2, r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3f8      	bcc.n	800065e <Delay_us+0x26>
      ;
  }
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	e0001000 	.word	0xe0001000
 800067c:	431bde83 	.word	0x431bde83

08000680 <Delay_ms>:
    return 1; /*clock cycle counter not started*/
  }
}

void Delay_ms(uint32_t ms)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffd0 	bl	8000638 <Delay_us>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__NVIC_GetPriorityGrouping+0x18>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	f003 0307 	and.w	r3, r3, #7
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4907      	ldr	r1, [pc, #28]	; (80006f4 <__NVIC_EnableIRQ+0x38>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <LL_SYSCFG_SetEXTISource+0x58>)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	3302      	adds	r3, #2
 80007c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	43db      	mvns	r3, r3
 80007d0:	ea02 0103 	and.w	r1, r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	fa93 f3a3 	rbit	r3, r3
 80007e0:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	fab3 f383 	clz	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	fa03 f202 	lsl.w	r2, r3, r2
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <LL_SYSCFG_SetEXTISource+0x58>)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	430a      	orrs	r2, r1
 80007fa:	3302      	adds	r3, #2
 80007fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40013800 	.word	0x40013800

08000810 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa93 f3a3 	rbit	r3, r3
 800082a:	613b      	str	r3, [r7, #16]
  return result;
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	fab3 f383 	clz	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2103      	movs	r1, #3
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	401a      	ands	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	fa93 f3a3 	rbit	r3, r3
 800084a:	61bb      	str	r3, [r7, #24]
  return result;
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fab3 f383 	clz	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	431a      	orrs	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800086e:	b480      	push	{r7}
 8000870:	b089      	sub	sp, #36	; 0x24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	68da      	ldr	r2, [r3, #12]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	fa93 f3a3 	rbit	r3, r3
 8000888:	613b      	str	r3, [r7, #16]
  return result;
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	fab3 f383 	clz	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	2103      	movs	r1, #3
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	401a      	ands	r2, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa93 f3a3 	rbit	r3, r3
 80008a8:	61bb      	str	r3, [r7, #24]
  return result;
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	fab3 f383 	clz	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	431a      	orrs	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	60da      	str	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3724      	adds	r7, #36	; 0x24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	041a      	lsls	r2, r3, #16
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	619a      	str	r2, [r3, #24]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800

0800091c <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	463b      	mov	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800093c:	2004      	movs	r0, #4
 800093e:	f7ff ffd5 	bl	80008ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000942:	2080      	movs	r0, #128	; 0x80
 8000944:	f7ff ffd2 	bl	80008ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff ffcf 	bl	80008ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800094e:	2002      	movs	r0, #2
 8000950:	f7ff ffcc 	bl	80008ec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000954:	2008      	movs	r0, #8
 8000956:	f7ff ffc9 	bl	80008ec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 800095a:	f642 4107 	movw	r1, #11271	; 0x2c07
 800095e:	4881      	ldr	r0, [pc, #516]	; (8000b64 <MX_GPIO_Init+0x248>)
 8000960:	f7ff ffb4 	bl	80008cc <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000964:	2182      	movs	r1, #130	; 0x82
 8000966:	4880      	ldr	r0, [pc, #512]	; (8000b68 <MX_GPIO_Init+0x24c>)
 8000968:	f7ff ffb0 	bl	80008cc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 800096c:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000970:	487e      	ldr	r0, [pc, #504]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000972:	f7ff ffab 	bl	80008cc <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000976:	f642 4307 	movw	r3, #11271	; 0x2c07
 800097a:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800097c:	2301      	movs	r3, #1
 800097e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4874      	ldr	r0, [pc, #464]	; (8000b64 <MX_GPIO_Init+0x248>)
 8000992:	f004 fb19 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000996:	2382      	movs	r3, #130	; 0x82
 8000998:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800099a:	2301      	movs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	463b      	mov	r3, r7
 80009ac:	4619      	mov	r1, r3
 80009ae:	486e      	ldr	r0, [pc, #440]	; (8000b68 <MX_GPIO_Init+0x24c>)
 80009b0:	f004 fb0a 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80009b4:	f240 630c 	movw	r3, #1548	; 0x60c
 80009b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ba:	2302      	movs	r3, #2
 80009bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80009ca:	2307      	movs	r3, #7
 80009cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4865      	ldr	r0, [pc, #404]	; (8000b68 <MX_GPIO_Init+0x24c>)
 80009d4:	f004 faf8 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 80009d8:	f641 1370 	movw	r3, #6512	; 0x1970
 80009dc:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	463b      	mov	r3, r7
 80009e8:	4619      	mov	r1, r3
 80009ea:	485f      	ldr	r0, [pc, #380]	; (8000b68 <MX_GPIO_Init+0x24c>)
 80009ec:	f004 faec 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009f0:	2320      	movs	r3, #32
 80009f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009f4:	2302      	movs	r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4855      	ldr	r0, [pc, #340]	; (8000b64 <MX_GPIO_Init+0x248>)
 8000a0e:	f004 fadb 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000a32:	f004 fac9 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4846      	ldr	r0, [pc, #280]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000a52:	f004 fab9 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4840      	ldr	r0, [pc, #256]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000a6a:	f004 faad 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000a6e:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000a72:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a74:	2301      	movs	r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4838      	ldr	r0, [pc, #224]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000a8a:	f004 fa9d 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4830      	ldr	r0, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x248>)
 8000aa2:	f004 fa91 	bl	8004fc8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000aa6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fe82 	bl	80007b4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000ab0:	492f      	ldr	r1, [pc, #188]	; (8000b70 <MX_GPIO_Init+0x254>)
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fe7e 	bl	80007b4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 f8f5 	bl	8004cbc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f8e7 	bl	8004cbc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2101      	movs	r1, #1
 8000af2:	481e      	ldr	r0, [pc, #120]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000af4:	f7ff febb 	bl	800086e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000afe:	481b      	ldr	r0, [pc, #108]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000b00:	f7ff feb5 	bl	800086e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4818      	ldr	r0, [pc, #96]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000b0a:	f7ff fe81 	bl	8000810 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <MX_GPIO_Init+0x250>)
 8000b16:	f7ff fe7b 	bl	8000810 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b1a:	f7ff fdc1 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe11 	bl	800074c <NVIC_EncodePriority>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2006      	movs	r0, #6
 8000b30:	f7ff fde2 	bl	80006f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000b34:	2006      	movs	r0, #6
 8000b36:	f7ff fdc1 	bl	80006bc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b3a:	f7ff fdb1 	bl	80006a0 <__NVIC_GetPriorityGrouping>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fe01 	bl	800074c <NVIC_EncodePriority>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	2028      	movs	r0, #40	; 0x28
 8000b50:	f7ff fdd2 	bl	80006f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b54:	2028      	movs	r0, #40	; 0x28
 8000b56:	f7ff fdb1 	bl	80006bc <__NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	f0000003 	.word	0xf0000003

08000b74 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	330c      	adds	r3, #12
 8000b80:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	e853 3f00 	ldrex	r3, [r3]
 8000b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f043 0320 	orr.w	r3, r3, #32
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	330c      	adds	r3, #12
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	61ba      	str	r2, [r7, #24]
 8000b9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b9c:	6979      	ldr	r1, [r7, #20]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	e841 2300 	strex	r3, r2, [r1]
 8000ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1e7      	bne.n	8000b7c <LL_USART_EnableIT_RXNE+0x8>
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f001 fb03 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f815 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f7ff fea7 	bl	800091c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bce:	f7ff fc9b 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000bd2:	f001 f9b9 	bl	8001f48 <MX_UART5_Init>
  MX_TIM3_Init();
 8000bd6:	f000 fff9 	bl	8001bcc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000bda:	f001 fa2d 	bl	8002038 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(UART5);
 8000bde:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <main+0x34>)
 8000be0:	f7ff ffc8 	bl	8000b74 <LL_USART_EnableIT_RXNE>
  // LL_USART_Enable(USART6);
  uint8_t feedback_ng_cnt;
  // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // buzzer
  switch_check();
 8000be4:	f000 ffb6 	bl	8001b54 <switch_check>
  uint8_t cnt = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]
  }
  */

  // avg = adc_val / 1000;
  //  buzzer_main();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <main+0x30>
 8000bee:	bf00      	nop
 8000bf0:	40005000 	.word	0x40005000

08000bf4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2234      	movs	r2, #52	; 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f004 fed6 	bl	80059b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <SystemClock_Config+0xdc>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a2b      	ldr	r2, [pc, #172]	; (8000cd0 <SystemClock_Config+0xdc>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <SystemClock_Config+0xdc>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <SystemClock_Config+0xe0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2300      	movs	r3, #0
 8000c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c64:	2308      	movs	r3, #8
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c68:	23b4      	movs	r3, #180	; 0xb4
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fb2f 	bl	80032e0 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c88:	f000 f826 	bl	8000cd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c8c:	f002 f814 	bl	8002cb8 <HAL_PWREx_EnableOverDrive>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c96:	f000 f81f 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ca6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	2105      	movs	r1, #5
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 f84d 	bl	8002d58 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000cc4:	f000 f808 	bl	8000cd8 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3750      	adds	r7, #80	; 0x50
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>

08000ce2 <LL_GPIO_SetOutputPin>:
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <LL_GPIO_ResetOutputPin>:
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	041a      	lsls	r2, r3, #16
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <fail_sound>:

extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;

void fail_sound(uint8_t i)
{
 8000d1c:	b490      	push	{r4, r7}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2)
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <fail_sound+0x16>
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d130      	bne.n	8000d94 <fail_sound+0x78>
    {
        unsigned int fail_sound[] = {C5, C5, C5, C5};
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <fail_sound+0x8c>)
 8000d34:	f107 0408 	add.w	r4, r7, #8
 8000d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <fail_sound+0x90>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	3318      	adds	r3, #24
 8000d4a:	443b      	add	r3, r7
 8000d4c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <fail_sound+0x94>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	fbb1 f2f2 	udiv	r2, r1, r2
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <fail_sound+0x90>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	3318      	adds	r3, #24
 8000d66:	443b      	add	r3, r7
 8000d68:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <fail_sound+0x94>)
 8000d72:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <fail_sound+0x90>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	3318      	adds	r3, #24
 8000d80:	443b      	add	r3, r7
 8000d82:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d86:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <fail_sound+0x94>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	0852      	lsrs	r2, r2, #1
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 8000d92:	e004      	b.n	8000d9e <fail_sound+0x82>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <fail_sound+0x94>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc90      	pop	{r4, r7}
 8000da6:	4770      	bx	lr
 8000da8:	080059dc 	.word	0x080059dc
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000078 	.word	0x20000078

08000db4 <pass_sound>:

void pass_sound(uint8_t i)
{
 8000db4:	b490      	push	{r4, r7}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C4, E4, G4, C5};
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <pass_sound+0x74>)
 8000dc0:	f107 0408 	add.w	r4, r7, #8
 8000dc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <pass_sound+0x78>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	443b      	add	r3, r7
 8000dd8:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <pass_sound+0x7c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	fbb1 f2f2 	udiv	r2, r1, r2
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <pass_sound+0x78>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	3318      	adds	r3, #24
 8000df2:	443b      	add	r3, r7
 8000df4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <pass_sound+0x7c>)
 8000dfe:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / pass_sound[i] / 2);
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <pass_sound+0x78>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	443b      	add	r3, r7
 8000e0e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000e12:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <pass_sound+0x7c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	0852      	lsrs	r2, r2, #1
 8000e1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc90      	pop	{r4, r7}
 8000e26:	4770      	bx	lr
 8000e28:	080059ec 	.word	0x080059ec
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000078 	.word	0x20000078

08000e34 <result>:

void result(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	48ba      	ldr	r0, [pc, #744]	; (8001128 <result+0x2f4>)
 8000e3e:	f002 fd95 	bl	800396c <HAL_TIM_PWM_Start>

    switch (g_Result)
 8000e42:	4bba      	ldr	r3, [pc, #744]	; (800112c <result+0x2f8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b0d      	cmp	r3, #13
 8000e4a:	f200 82d0 	bhi.w	80013ee <result+0x5ba>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <result+0x20>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000e8d 	.word	0x08000e8d
 8000e58:	08000eb3 	.word	0x08000eb3
 8000e5c:	08000f15 	.word	0x08000f15
 8000e60:	08000f7b 	.word	0x08000f7b
 8000e64:	08000fe1 	.word	0x08000fe1
 8000e68:	08001047 	.word	0x08001047
 8000e6c:	080010ad 	.word	0x080010ad
 8000e70:	08001113 	.word	0x08001113
 8000e74:	0800118b 	.word	0x0800118b
 8000e78:	080011f1 	.word	0x080011f1
 8000e7c:	08001257 	.word	0x08001257
 8000e80:	080012bd 	.word	0x080012bd
 8000e84:	08001323 	.word	0x08001323
 8000e88:	08001389 	.word	0x08001389
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	48a8      	ldr	r0, [pc, #672]	; (8001130 <result+0x2fc>)
 8000e90:	f7ff ff35 	bl	8000cfe <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8000e94:	2120      	movs	r1, #32
 8000e96:	48a7      	ldr	r0, [pc, #668]	; (8001134 <result+0x300>)
 8000e98:	f7ff ff31 	bl	8000cfe <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8000e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea0:	48a3      	ldr	r0, [pc, #652]	; (8001130 <result+0x2fc>)
 8000ea2:	f7ff ff2c 	bl	8000cfe <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8000ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eaa:	48a1      	ldr	r0, [pc, #644]	; (8001130 <result+0x2fc>)
 8000eac:	f7ff ff27 	bl	8000cfe <LL_GPIO_ResetOutputPin>
        break;
 8000eb0:	e29e      	b.n	80013f0 <result+0x5bc>

    case kResult_Pass:
        for (uint8_t j = 0; j <= 3; j++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	77fb      	strb	r3, [r7, #31]
 8000eb6:	e029      	b.n	8000f0c <result+0xd8>
        {
            pass_sound(j);
 8000eb8:	7ffb      	ldrb	r3, [r7, #31]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff7a 	bl	8000db4 <pass_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	77bb      	strb	r3, [r7, #30]
 8000ec4:	e01c      	b.n	8000f00 <result+0xcc>
            {
                FND_1();
 8000ec6:	f000 faa5 	bl	8001414 <FND_1>
                FND_P();
 8000eca:	f000 fb0b 	bl	80014e4 <FND_P>
                Delay_ms(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fbd6 	bl	8000680 <Delay_ms>
                FND_2();
 8000ed4:	f000 fab8 	bl	8001448 <FND_2>
                FND_A();
 8000ed8:	f000 fb2c 	bl	8001534 <FND_A>
                Delay_ms(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f7ff fbcf 	bl	8000680 <Delay_ms>
                FND_3();
 8000ee2:	f000 facb 	bl	800147c <FND_3>
                FND_S();
 8000ee6:	f000 fb4d 	bl	8001584 <FND_S>
                Delay_ms(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fbc8 	bl	8000680 <Delay_ms>
                FND_4();
 8000ef0:	f000 fade 	bl	80014b0 <FND_4>
                Delay_ms(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fbc3 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8000efa:	7fbb      	ldrb	r3, [r7, #30]
 8000efc:	3301      	adds	r3, #1
 8000efe:	77bb      	strb	r3, [r7, #30]
 8000f00:	7fbb      	ldrb	r3, [r7, #30]
 8000f02:	2bfa      	cmp	r3, #250	; 0xfa
 8000f04:	d9df      	bls.n	8000ec6 <result+0x92>
        for (uint8_t j = 0; j <= 3; j++)
 8000f06:	7ffb      	ldrb	r3, [r7, #31]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	77fb      	strb	r3, [r7, #31]
 8000f0c:	7ffb      	ldrb	r3, [r7, #31]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d9d2      	bls.n	8000eb8 <result+0x84>
            }
        }
        break;
 8000f12:	e26d      	b.n	80013f0 <result+0x5bc>

    case kResult_Err_1:
        for (uint8_t j = 0; j <= 3; j++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	777b      	strb	r3, [r7, #29]
 8000f18:	e02b      	b.n	8000f72 <result+0x13e>
        {
            fail_sound(j);
 8000f1a:	7f7b      	ldrb	r3, [r7, #29]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fefd 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8000f22:	2301      	movs	r3, #1
 8000f24:	773b      	strb	r3, [r7, #28]
 8000f26:	e01e      	b.n	8000f66 <result+0x132>
            {
                FND_1();
 8000f28:	f000 fa74 	bl	8001414 <FND_1>
                FND_E();
 8000f2c:	f000 fb52 	bl	80015d4 <FND_E>
                Delay_ms(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff fba5 	bl	8000680 <Delay_ms>
                FND_2();
 8000f36:	f000 fa87 	bl	8001448 <FND_2>
                FND_r();
 8000f3a:	f000 fb73 	bl	8001624 <FND_r>
                Delay_ms(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fb9e 	bl	8000680 <Delay_ms>
                FND_3();
 8000f44:	f000 fa9a 	bl	800147c <FND_3>
                FND_zero();
 8000f48:	f000 fb94 	bl	8001674 <FND_zero>
                Delay_ms(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fb97 	bl	8000680 <Delay_ms>
                FND_4();
 8000f52:	f000 faad 	bl	80014b0 <FND_4>
                FND_one();
 8000f56:	f000 fbb5 	bl	80016c4 <FND_one>
                Delay_ms(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff fb90 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8000f60:	7f3b      	ldrb	r3, [r7, #28]
 8000f62:	3301      	adds	r3, #1
 8000f64:	773b      	strb	r3, [r7, #28]
 8000f66:	7f3b      	ldrb	r3, [r7, #28]
 8000f68:	2bfa      	cmp	r3, #250	; 0xfa
 8000f6a:	d9dd      	bls.n	8000f28 <result+0xf4>
        for (uint8_t j = 0; j <= 3; j++)
 8000f6c:	7f7b      	ldrb	r3, [r7, #29]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	777b      	strb	r3, [r7, #29]
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d9d0      	bls.n	8000f1a <result+0xe6>
            }
        }
        break;
 8000f78:	e23a      	b.n	80013f0 <result+0x5bc>

    case kResult_Err_2:
        for (uint8_t j = 0; j <= 3; j++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	76fb      	strb	r3, [r7, #27]
 8000f7e:	e02b      	b.n	8000fd8 <result+0x1a4>
        {
            fail_sound(j);
 8000f80:	7efb      	ldrb	r3, [r7, #27]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff feca 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8000f88:	2301      	movs	r3, #1
 8000f8a:	76bb      	strb	r3, [r7, #26]
 8000f8c:	e01e      	b.n	8000fcc <result+0x198>
            {
                FND_1();
 8000f8e:	f000 fa41 	bl	8001414 <FND_1>
                FND_E();
 8000f92:	f000 fb1f 	bl	80015d4 <FND_E>
                Delay_ms(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fb72 	bl	8000680 <Delay_ms>
                FND_2();
 8000f9c:	f000 fa54 	bl	8001448 <FND_2>
                FND_r();
 8000fa0:	f000 fb40 	bl	8001624 <FND_r>
                Delay_ms(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fb6b 	bl	8000680 <Delay_ms>
                FND_3();
 8000faa:	f000 fa67 	bl	800147c <FND_3>
                FND_zero();
 8000fae:	f000 fb61 	bl	8001674 <FND_zero>
                Delay_ms(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fb64 	bl	8000680 <Delay_ms>
                FND_4();
 8000fb8:	f000 fa7a 	bl	80014b0 <FND_4>
                FND_two();
 8000fbc:	f000 fbaa 	bl	8001714 <FND_two>
                Delay_ms(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff fb5d 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8000fc6:	7ebb      	ldrb	r3, [r7, #26]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	76bb      	strb	r3, [r7, #26]
 8000fcc:	7ebb      	ldrb	r3, [r7, #26]
 8000fce:	2bfa      	cmp	r3, #250	; 0xfa
 8000fd0:	d9dd      	bls.n	8000f8e <result+0x15a>
        for (uint8_t j = 0; j <= 3; j++)
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	76fb      	strb	r3, [r7, #27]
 8000fd8:	7efb      	ldrb	r3, [r7, #27]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d9d0      	bls.n	8000f80 <result+0x14c>
            }
        }
        break;
 8000fde:	e207      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_3:
        for (uint8_t j = 0; j <= 3; j++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	767b      	strb	r3, [r7, #25]
 8000fe4:	e02b      	b.n	800103e <result+0x20a>
        {
            fail_sound(j);
 8000fe6:	7e7b      	ldrb	r3, [r7, #25]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe97 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8000fee:	2301      	movs	r3, #1
 8000ff0:	763b      	strb	r3, [r7, #24]
 8000ff2:	e01e      	b.n	8001032 <result+0x1fe>
            {
                FND_1();
 8000ff4:	f000 fa0e 	bl	8001414 <FND_1>
                FND_E();
 8000ff8:	f000 faec 	bl	80015d4 <FND_E>
                Delay_ms(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff fb3f 	bl	8000680 <Delay_ms>
                FND_2();
 8001002:	f000 fa21 	bl	8001448 <FND_2>
                FND_r();
 8001006:	f000 fb0d 	bl	8001624 <FND_r>
                Delay_ms(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fb38 	bl	8000680 <Delay_ms>
                FND_3();
 8001010:	f000 fa34 	bl	800147c <FND_3>
                FND_zero();
 8001014:	f000 fb2e 	bl	8001674 <FND_zero>
                Delay_ms(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fb31 	bl	8000680 <Delay_ms>
                FND_4();
 800101e:	f000 fa47 	bl	80014b0 <FND_4>
                FND_three();
 8001022:	f000 fb9f 	bl	8001764 <FND_three>
                Delay_ms(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fb2a 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800102c:	7e3b      	ldrb	r3, [r7, #24]
 800102e:	3301      	adds	r3, #1
 8001030:	763b      	strb	r3, [r7, #24]
 8001032:	7e3b      	ldrb	r3, [r7, #24]
 8001034:	2bfa      	cmp	r3, #250	; 0xfa
 8001036:	d9dd      	bls.n	8000ff4 <result+0x1c0>
        for (uint8_t j = 0; j <= 3; j++)
 8001038:	7e7b      	ldrb	r3, [r7, #25]
 800103a:	3301      	adds	r3, #1
 800103c:	767b      	strb	r3, [r7, #25]
 800103e:	7e7b      	ldrb	r3, [r7, #25]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d9d0      	bls.n	8000fe6 <result+0x1b2>
            }
        }
        break;
 8001044:	e1d4      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_4:
        for (uint8_t j = 0; j <= 3; j++)
 8001046:	2300      	movs	r3, #0
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	e02b      	b.n	80010a4 <result+0x270>
        {
            fail_sound(j);
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe64 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001054:	2301      	movs	r3, #1
 8001056:	75bb      	strb	r3, [r7, #22]
 8001058:	e01e      	b.n	8001098 <result+0x264>
            {
                FND_1();
 800105a:	f000 f9db 	bl	8001414 <FND_1>
                FND_E();
 800105e:	f000 fab9 	bl	80015d4 <FND_E>
                Delay_ms(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff fb0c 	bl	8000680 <Delay_ms>
                FND_2();
 8001068:	f000 f9ee 	bl	8001448 <FND_2>
                FND_r();
 800106c:	f000 fada 	bl	8001624 <FND_r>
                Delay_ms(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff fb05 	bl	8000680 <Delay_ms>
                FND_3();
 8001076:	f000 fa01 	bl	800147c <FND_3>
                FND_zero();
 800107a:	f000 fafb 	bl	8001674 <FND_zero>
                Delay_ms(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fafe 	bl	8000680 <Delay_ms>
                FND_4();
 8001084:	f000 fa14 	bl	80014b0 <FND_4>
                FND_four();
 8001088:	f000 fb94 	bl	80017b4 <FND_four>
                Delay_ms(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff faf7 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001092:	7dbb      	ldrb	r3, [r7, #22]
 8001094:	3301      	adds	r3, #1
 8001096:	75bb      	strb	r3, [r7, #22]
 8001098:	7dbb      	ldrb	r3, [r7, #22]
 800109a:	2bfa      	cmp	r3, #250	; 0xfa
 800109c:	d9dd      	bls.n	800105a <result+0x226>
        for (uint8_t j = 0; j <= 3; j++)
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	3301      	adds	r3, #1
 80010a2:	75fb      	strb	r3, [r7, #23]
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d9d0      	bls.n	800104c <result+0x218>
            }
        }
        break;
 80010aa:	e1a1      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_5:
        for (uint8_t j = 0; j <= 3; j++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	757b      	strb	r3, [r7, #21]
 80010b0:	e02b      	b.n	800110a <result+0x2d6>
        {
            fail_sound(j);
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe31 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80010ba:	2301      	movs	r3, #1
 80010bc:	753b      	strb	r3, [r7, #20]
 80010be:	e01e      	b.n	80010fe <result+0x2ca>
            {
                FND_1();
 80010c0:	f000 f9a8 	bl	8001414 <FND_1>
                FND_E();
 80010c4:	f000 fa86 	bl	80015d4 <FND_E>
                Delay_ms(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff fad9 	bl	8000680 <Delay_ms>
                FND_2();
 80010ce:	f000 f9bb 	bl	8001448 <FND_2>
                FND_r();
 80010d2:	f000 faa7 	bl	8001624 <FND_r>
                Delay_ms(1);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fad2 	bl	8000680 <Delay_ms>
                FND_3();
 80010dc:	f000 f9ce 	bl	800147c <FND_3>
                FND_zero();
 80010e0:	f000 fac8 	bl	8001674 <FND_zero>
                Delay_ms(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff facb 	bl	8000680 <Delay_ms>
                FND_4();
 80010ea:	f000 f9e1 	bl	80014b0 <FND_4>
                FND_five();
 80010ee:	f000 fb89 	bl	8001804 <FND_five>
                Delay_ms(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff fac4 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80010f8:	7d3b      	ldrb	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	753b      	strb	r3, [r7, #20]
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	2bfa      	cmp	r3, #250	; 0xfa
 8001102:	d9dd      	bls.n	80010c0 <result+0x28c>
        for (uint8_t j = 0; j <= 3; j++)
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	3301      	adds	r3, #1
 8001108:	757b      	strb	r3, [r7, #21]
 800110a:	7d7b      	ldrb	r3, [r7, #21]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d9d0      	bls.n	80010b2 <result+0x27e>
            }
        }
        break;
 8001110:	e16e      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_6:
        for (uint8_t j = 0; j <= 3; j++)
 8001112:	2300      	movs	r3, #0
 8001114:	74fb      	strb	r3, [r7, #19]
 8001116:	e034      	b.n	8001182 <result+0x34e>
        {
            fail_sound(j);
 8001118:	7cfb      	ldrb	r3, [r7, #19]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fdfe 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001120:	2301      	movs	r3, #1
 8001122:	74bb      	strb	r3, [r7, #18]
 8001124:	e027      	b.n	8001176 <result+0x342>
 8001126:	bf00      	nop
 8001128:	20000078 	.word	0x20000078
 800112c:	20000074 	.word	0x20000074
 8001130:	40020800 	.word	0x40020800
 8001134:	40020400 	.word	0x40020400
            {
                FND_1();
 8001138:	f000 f96c 	bl	8001414 <FND_1>
                FND_E();
 800113c:	f000 fa4a 	bl	80015d4 <FND_E>
                Delay_ms(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff fa9d 	bl	8000680 <Delay_ms>
                FND_2();
 8001146:	f000 f97f 	bl	8001448 <FND_2>
                FND_r();
 800114a:	f000 fa6b 	bl	8001624 <FND_r>
                Delay_ms(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f7ff fa96 	bl	8000680 <Delay_ms>
                FND_3();
 8001154:	f000 f992 	bl	800147c <FND_3>
                FND_zero();
 8001158:	f000 fa8c 	bl	8001674 <FND_zero>
                Delay_ms(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fa8f 	bl	8000680 <Delay_ms>
                FND_4();
 8001162:	f000 f9a5 	bl	80014b0 <FND_4>
                FND_six();
 8001166:	f000 fb75 	bl	8001854 <FND_six>
                Delay_ms(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fa88 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001170:	7cbb      	ldrb	r3, [r7, #18]
 8001172:	3301      	adds	r3, #1
 8001174:	74bb      	strb	r3, [r7, #18]
 8001176:	7cbb      	ldrb	r3, [r7, #18]
 8001178:	2bfa      	cmp	r3, #250	; 0xfa
 800117a:	d9dd      	bls.n	8001138 <result+0x304>
        for (uint8_t j = 0; j <= 3; j++)
 800117c:	7cfb      	ldrb	r3, [r7, #19]
 800117e:	3301      	adds	r3, #1
 8001180:	74fb      	strb	r3, [r7, #19]
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d9c7      	bls.n	8001118 <result+0x2e4>
            }
        }
        break;
 8001188:	e132      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_7:
        for (uint8_t j = 0; j <= 3; j++)
 800118a:	2300      	movs	r3, #0
 800118c:	747b      	strb	r3, [r7, #17]
 800118e:	e02b      	b.n	80011e8 <result+0x3b4>
        {
            fail_sound(j);
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fdc2 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001198:	2301      	movs	r3, #1
 800119a:	743b      	strb	r3, [r7, #16]
 800119c:	e01e      	b.n	80011dc <result+0x3a8>
            {
                FND_1();
 800119e:	f000 f939 	bl	8001414 <FND_1>
                FND_E();
 80011a2:	f000 fa17 	bl	80015d4 <FND_E>
                Delay_ms(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fa6a 	bl	8000680 <Delay_ms>
                FND_2();
 80011ac:	f000 f94c 	bl	8001448 <FND_2>
                FND_r();
 80011b0:	f000 fa38 	bl	8001624 <FND_r>
                Delay_ms(1);
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff fa63 	bl	8000680 <Delay_ms>
                FND_3();
 80011ba:	f000 f95f 	bl	800147c <FND_3>
                FND_zero();
 80011be:	f000 fa59 	bl	8001674 <FND_zero>
                Delay_ms(1);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fa5c 	bl	8000680 <Delay_ms>
                FND_4();
 80011c8:	f000 f972 	bl	80014b0 <FND_4>
                FND_seven();
 80011cc:	f000 fb6a 	bl	80018a4 <FND_seven>
                Delay_ms(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fa55 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80011d6:	7c3b      	ldrb	r3, [r7, #16]
 80011d8:	3301      	adds	r3, #1
 80011da:	743b      	strb	r3, [r7, #16]
 80011dc:	7c3b      	ldrb	r3, [r7, #16]
 80011de:	2bfa      	cmp	r3, #250	; 0xfa
 80011e0:	d9dd      	bls.n	800119e <result+0x36a>
        for (uint8_t j = 0; j <= 3; j++)
 80011e2:	7c7b      	ldrb	r3, [r7, #17]
 80011e4:	3301      	adds	r3, #1
 80011e6:	747b      	strb	r3, [r7, #17]
 80011e8:	7c7b      	ldrb	r3, [r7, #17]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d9d0      	bls.n	8001190 <result+0x35c>
            }
        }
        break;
 80011ee:	e0ff      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_8:
        for (uint8_t j = 0; j <= 3; j++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e02b      	b.n	800124e <result+0x41a>
        {
            fail_sound(j);
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fd8f 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80011fe:	2301      	movs	r3, #1
 8001200:	73bb      	strb	r3, [r7, #14]
 8001202:	e01e      	b.n	8001242 <result+0x40e>
            {
                FND_1();
 8001204:	f000 f906 	bl	8001414 <FND_1>
                FND_E();
 8001208:	f000 f9e4 	bl	80015d4 <FND_E>
                Delay_ms(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fa37 	bl	8000680 <Delay_ms>
                FND_2();
 8001212:	f000 f919 	bl	8001448 <FND_2>
                FND_r();
 8001216:	f000 fa05 	bl	8001624 <FND_r>
                Delay_ms(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fa30 	bl	8000680 <Delay_ms>
                FND_3();
 8001220:	f000 f92c 	bl	800147c <FND_3>
                FND_zero();
 8001224:	f000 fa26 	bl	8001674 <FND_zero>
                Delay_ms(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff fa29 	bl	8000680 <Delay_ms>
                FND_4();
 800122e:	f000 f93f 	bl	80014b0 <FND_4>
                FND_eight();
 8001232:	f000 fb5f 	bl	80018f4 <FND_eight>
                Delay_ms(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff fa22 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	3301      	adds	r3, #1
 8001240:	73bb      	strb	r3, [r7, #14]
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	2bfa      	cmp	r3, #250	; 0xfa
 8001246:	d9dd      	bls.n	8001204 <result+0x3d0>
        for (uint8_t j = 0; j <= 3; j++)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3301      	adds	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d9d0      	bls.n	80011f6 <result+0x3c2>
            }
        }
        break;
 8001254:	e0cc      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_9:
        for (uint8_t j = 0; j <= 3; j++)
 8001256:	2300      	movs	r3, #0
 8001258:	737b      	strb	r3, [r7, #13]
 800125a:	e02b      	b.n	80012b4 <result+0x480>
        {
            fail_sound(j);
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fd5c 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001264:	2301      	movs	r3, #1
 8001266:	733b      	strb	r3, [r7, #12]
 8001268:	e01e      	b.n	80012a8 <result+0x474>
            {
                FND_1();
 800126a:	f000 f8d3 	bl	8001414 <FND_1>
                FND_E();
 800126e:	f000 f9b1 	bl	80015d4 <FND_E>
                Delay_ms(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fa04 	bl	8000680 <Delay_ms>
                FND_2();
 8001278:	f000 f8e6 	bl	8001448 <FND_2>
                FND_r();
 800127c:	f000 f9d2 	bl	8001624 <FND_r>
                Delay_ms(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff f9fd 	bl	8000680 <Delay_ms>
                FND_3();
 8001286:	f000 f8f9 	bl	800147c <FND_3>
                FND_zero();
 800128a:	f000 f9f3 	bl	8001674 <FND_zero>
                Delay_ms(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff f9f6 	bl	8000680 <Delay_ms>
                FND_4();
 8001294:	f000 f90c 	bl	80014b0 <FND_4>
                FND_nine();
 8001298:	f000 fb54 	bl	8001944 <FND_nine>
                Delay_ms(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff f9ef 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80012a2:	7b3b      	ldrb	r3, [r7, #12]
 80012a4:	3301      	adds	r3, #1
 80012a6:	733b      	strb	r3, [r7, #12]
 80012a8:	7b3b      	ldrb	r3, [r7, #12]
 80012aa:	2bfa      	cmp	r3, #250	; 0xfa
 80012ac:	d9dd      	bls.n	800126a <result+0x436>
        for (uint8_t j = 0; j <= 3; j++)
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	3301      	adds	r3, #1
 80012b2:	737b      	strb	r3, [r7, #13]
 80012b4:	7b7b      	ldrb	r3, [r7, #13]
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d9d0      	bls.n	800125c <result+0x428>
            }
        }
        break;
 80012ba:	e099      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_10:
        for (uint8_t j = 0; j <= 3; j++)
 80012bc:	2300      	movs	r3, #0
 80012be:	72fb      	strb	r3, [r7, #11]
 80012c0:	e02b      	b.n	800131a <result+0x4e6>
        {
            fail_sound(j);
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd29 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80012ca:	2301      	movs	r3, #1
 80012cc:	72bb      	strb	r3, [r7, #10]
 80012ce:	e01e      	b.n	800130e <result+0x4da>
            {
                FND_1();
 80012d0:	f000 f8a0 	bl	8001414 <FND_1>
                FND_E();
 80012d4:	f000 f97e 	bl	80015d4 <FND_E>
                Delay_ms(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff f9d1 	bl	8000680 <Delay_ms>
                FND_2();
 80012de:	f000 f8b3 	bl	8001448 <FND_2>
                FND_r();
 80012e2:	f000 f99f 	bl	8001624 <FND_r>
                Delay_ms(1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff f9ca 	bl	8000680 <Delay_ms>
                FND_3();
 80012ec:	f000 f8c6 	bl	800147c <FND_3>
                FND_one();
 80012f0:	f000 f9e8 	bl	80016c4 <FND_one>
                Delay_ms(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff f9c3 	bl	8000680 <Delay_ms>
                FND_4();
 80012fa:	f000 f8d9 	bl	80014b0 <FND_4>
                FND_zero();
 80012fe:	f000 f9b9 	bl	8001674 <FND_zero>
                Delay_ms(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff f9bc 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	3301      	adds	r3, #1
 800130c:	72bb      	strb	r3, [r7, #10]
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	2bfa      	cmp	r3, #250	; 0xfa
 8001312:	d9dd      	bls.n	80012d0 <result+0x49c>
        for (uint8_t j = 0; j <= 3; j++)
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	3301      	adds	r3, #1
 8001318:	72fb      	strb	r3, [r7, #11]
 800131a:	7afb      	ldrb	r3, [r7, #11]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d9d0      	bls.n	80012c2 <result+0x48e>
            }
        }
        break;
 8001320:	e066      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_11:
        for (uint8_t j = 0; j <= 3; j++)
 8001322:	2300      	movs	r3, #0
 8001324:	727b      	strb	r3, [r7, #9]
 8001326:	e02b      	b.n	8001380 <result+0x54c>
        {
            fail_sound(j);
 8001328:	7a7b      	ldrb	r3, [r7, #9]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fcf6 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001330:	2301      	movs	r3, #1
 8001332:	723b      	strb	r3, [r7, #8]
 8001334:	e01e      	b.n	8001374 <result+0x540>
            {
                FND_1();
 8001336:	f000 f86d 	bl	8001414 <FND_1>
                FND_E();
 800133a:	f000 f94b 	bl	80015d4 <FND_E>
                Delay_ms(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff f99e 	bl	8000680 <Delay_ms>
                FND_2();
 8001344:	f000 f880 	bl	8001448 <FND_2>
                FND_r();
 8001348:	f000 f96c 	bl	8001624 <FND_r>
                Delay_ms(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff f997 	bl	8000680 <Delay_ms>
                FND_3();
 8001352:	f000 f893 	bl	800147c <FND_3>
                FND_one();
 8001356:	f000 f9b5 	bl	80016c4 <FND_one>
                Delay_ms(1);
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff f990 	bl	8000680 <Delay_ms>
                FND_4();
 8001360:	f000 f8a6 	bl	80014b0 <FND_4>
                FND_one();
 8001364:	f000 f9ae 	bl	80016c4 <FND_one>
                Delay_ms(1);
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff f989 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800136e:	7a3b      	ldrb	r3, [r7, #8]
 8001370:	3301      	adds	r3, #1
 8001372:	723b      	strb	r3, [r7, #8]
 8001374:	7a3b      	ldrb	r3, [r7, #8]
 8001376:	2bfa      	cmp	r3, #250	; 0xfa
 8001378:	d9dd      	bls.n	8001336 <result+0x502>
        for (uint8_t j = 0; j <= 3; j++)
 800137a:	7a7b      	ldrb	r3, [r7, #9]
 800137c:	3301      	adds	r3, #1
 800137e:	727b      	strb	r3, [r7, #9]
 8001380:	7a7b      	ldrb	r3, [r7, #9]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d9d0      	bls.n	8001328 <result+0x4f4>
            }
        }
        break;
 8001386:	e033      	b.n	80013f0 <result+0x5bc>
    case kResult_Err_12:
        for (uint8_t j = 0; j <= 3; j++)
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	e02b      	b.n	80013e6 <result+0x5b2>
        {
            fail_sound(j);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fcc3 	bl	8000d1c <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001396:	2301      	movs	r3, #1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	e01e      	b.n	80013da <result+0x5a6>
            {
                FND_1();
 800139c:	f000 f83a 	bl	8001414 <FND_1>
                FND_E();
 80013a0:	f000 f918 	bl	80015d4 <FND_E>
                Delay_ms(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff f96b 	bl	8000680 <Delay_ms>
                FND_2();
 80013aa:	f000 f84d 	bl	8001448 <FND_2>
                FND_r();
 80013ae:	f000 f939 	bl	8001624 <FND_r>
                Delay_ms(1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff f964 	bl	8000680 <Delay_ms>
                FND_3();
 80013b8:	f000 f860 	bl	800147c <FND_3>
                FND_one();
 80013bc:	f000 f982 	bl	80016c4 <FND_one>
                Delay_ms(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff f95d 	bl	8000680 <Delay_ms>
                FND_4();
 80013c6:	f000 f873 	bl	80014b0 <FND_4>
                FND_two();
 80013ca:	f000 f9a3 	bl	8001714 <FND_two>
                Delay_ms(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff f956 	bl	8000680 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	3301      	adds	r3, #1
 80013d8:	71bb      	strb	r3, [r7, #6]
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	2bfa      	cmp	r3, #250	; 0xfa
 80013de:	d9dd      	bls.n	800139c <result+0x568>
        for (uint8_t j = 0; j <= 3; j++)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	3301      	adds	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d9d0      	bls.n	800138e <result+0x55a>
            }
        }
        break;
 80013ec:	e000      	b.n	80013f0 <result+0x5bc>

    default:
        break;
 80013ee:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80013f0:	2108      	movs	r1, #8
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <result+0x5d8>)
 80013f4:	f002 fb82 	bl	8003afc <HAL_TIM_PWM_Stop>
    g_Result = kResult_None;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <result+0x5dc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
    turn_off();
 80013fe:	f000 fac9 	bl	8001994 <turn_off>
}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000078 	.word	0x20000078
 8001410:	20000074 	.word	0x20000074

08001414 <FND_1>:

void FND_1(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001418:	2104      	movs	r1, #4
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <FND_1+0x2c>)
 800141c:	f7ff fc61 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001420:	2120      	movs	r1, #32
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <FND_1+0x30>)
 8001424:	f7ff fc6b 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <FND_1+0x2c>)
 800142e:	f7ff fc66 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001436:	4802      	ldr	r0, [pc, #8]	; (8001440 <FND_1+0x2c>)
 8001438:	f7ff fc61 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020800 	.word	0x40020800
 8001444:	40020400 	.word	0x40020400

08001448 <FND_2>:
void FND_2(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 800144c:	2104      	movs	r1, #4
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <FND_2+0x2c>)
 8001450:	f7ff fc55 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001454:	2120      	movs	r1, #32
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <FND_2+0x30>)
 8001458:	f7ff fc43 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <FND_2+0x2c>)
 8001462:	f7ff fc4c 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146a:	4802      	ldr	r0, [pc, #8]	; (8001474 <FND_2+0x2c>)
 800146c:	f7ff fc47 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40020800 	.word	0x40020800
 8001478:	40020400 	.word	0x40020400

0800147c <FND_3>:
void FND_3(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001480:	2104      	movs	r1, #4
 8001482:	4809      	ldr	r0, [pc, #36]	; (80014a8 <FND_3+0x2c>)
 8001484:	f7ff fc3b 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001488:	2120      	movs	r1, #32
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <FND_3+0x30>)
 800148c:	f7ff fc37 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <FND_3+0x2c>)
 8001496:	f7ff fc24 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800149a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149e:	4802      	ldr	r0, [pc, #8]	; (80014a8 <FND_3+0x2c>)
 80014a0:	f7ff fc2d 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020400 	.word	0x40020400

080014b0 <FND_4>:
void FND_4(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80014b4:	2104      	movs	r1, #4
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <FND_4+0x2c>)
 80014b8:	f7ff fc21 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80014bc:	2120      	movs	r1, #32
 80014be:	4808      	ldr	r0, [pc, #32]	; (80014e0 <FND_4+0x30>)
 80014c0:	f7ff fc1d 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <FND_4+0x2c>)
 80014ca:	f7ff fc18 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80014ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d2:	4802      	ldr	r0, [pc, #8]	; (80014dc <FND_4+0x2c>)
 80014d4:	f7ff fc05 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020400 	.word	0x40020400

080014e4 <FND_P>:

void FND_P(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	480f      	ldr	r0, [pc, #60]	; (800152c <FND_P+0x48>)
 80014ee:	f7ff fbf8 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <FND_P+0x4c>)
 80014f6:	f7ff fbf4 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <FND_P+0x4c>)
 80014fe:	f7ff fbfe 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <FND_P+0x4c>)
 8001508:	f7ff fbf9 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800150c:	2102      	movs	r1, #2
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <FND_P+0x48>)
 8001510:	f7ff fbe7 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001514:	2101      	movs	r1, #1
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <FND_P+0x48>)
 8001518:	f7ff fbe3 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <FND_P+0x4c>)
 8001522:	f7ff fbde 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020800 	.word	0x40020800
 8001530:	40020400 	.word	0x40020400

08001534 <FND_A>:

void FND_A(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153c:	480f      	ldr	r0, [pc, #60]	; (800157c <FND_A+0x48>)
 800153e:	f7ff fbd0 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <FND_A+0x4c>)
 8001546:	f7ff fbcc 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <FND_A+0x4c>)
 800154e:	f7ff fbc8 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001556:	480a      	ldr	r0, [pc, #40]	; (8001580 <FND_A+0x4c>)
 8001558:	f7ff fbd1 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800155c:	2102      	movs	r1, #2
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <FND_A+0x48>)
 8001560:	f7ff fbbf 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001564:	2101      	movs	r1, #1
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <FND_A+0x48>)
 8001568:	f7ff fbbb 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800156c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <FND_A+0x4c>)
 8001572:	f7ff fbb6 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020800 	.word	0x40020800
 8001580:	40020400 	.word	0x40020400

08001584 <FND_S>:

void FND_S(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158c:	480f      	ldr	r0, [pc, #60]	; (80015cc <FND_S+0x48>)
 800158e:	f7ff fba8 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <FND_S+0x4c>)
 8001596:	f7ff fbb2 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800159a:	2140      	movs	r1, #64	; 0x40
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <FND_S+0x4c>)
 800159e:	f7ff fba0 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <FND_S+0x4c>)
 80015a8:	f7ff fb9b 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80015ac:	2102      	movs	r1, #2
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <FND_S+0x48>)
 80015b0:	f7ff fba5 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80015b4:	2101      	movs	r1, #1
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <FND_S+0x48>)
 80015b8:	f7ff fb93 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <FND_S+0x4c>)
 80015c2:	f7ff fb8e 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020400 	.word	0x40020400

080015d4 <FND_E>:

void FND_E(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80015d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015dc:	480f      	ldr	r0, [pc, #60]	; (800161c <FND_E+0x48>)
 80015de:	f7ff fb80 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <FND_E+0x4c>)
 80015e6:	f7ff fb8a 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <FND_E+0x4c>)
 80015ee:	f7ff fb86 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <FND_E+0x4c>)
 80015f8:	f7ff fb73 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80015fc:	2102      	movs	r1, #2
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <FND_E+0x48>)
 8001600:	f7ff fb6f 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001604:	2101      	movs	r1, #1
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <FND_E+0x48>)
 8001608:	f7ff fb6b 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800160c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <FND_E+0x4c>)
 8001612:	f7ff fb66 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40020800 	.word	0x40020800
 8001620:	40020400 	.word	0x40020400

08001624 <FND_r>:

void FND_r(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162c:	480f      	ldr	r0, [pc, #60]	; (800166c <FND_r+0x48>)
 800162e:	f7ff fb66 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <FND_r+0x4c>)
 8001636:	f7ff fb62 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800163a:	2140      	movs	r1, #64	; 0x40
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <FND_r+0x4c>)
 800163e:	f7ff fb5e 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <FND_r+0x4c>)
 8001648:	f7ff fb59 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800164c:	2102      	movs	r1, #2
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <FND_r+0x48>)
 8001650:	f7ff fb47 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001654:	2101      	movs	r1, #1
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <FND_r+0x48>)
 8001658:	f7ff fb51 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800165c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <FND_r+0x4c>)
 8001662:	f7ff fb3e 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40020800 	.word	0x40020800
 8001670:	40020400 	.word	0x40020400

08001674 <FND_zero>:

void FND_zero(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <FND_zero+0x48>)
 800167e:	f7ff fb30 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	480e      	ldr	r0, [pc, #56]	; (80016c0 <FND_zero+0x4c>)
 8001686:	f7ff fb2c 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <FND_zero+0x4c>)
 800168e:	f7ff fb28 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001696:	480a      	ldr	r0, [pc, #40]	; (80016c0 <FND_zero+0x4c>)
 8001698:	f7ff fb23 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800169c:	2102      	movs	r1, #2
 800169e:	4807      	ldr	r0, [pc, #28]	; (80016bc <FND_zero+0x48>)
 80016a0:	f7ff fb1f 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80016a4:	2101      	movs	r1, #1
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <FND_zero+0x48>)
 80016a8:	f7ff fb1b 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <FND_zero+0x4c>)
 80016b2:	f7ff fb24 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020400 	.word	0x40020400

080016c4 <FND_one>:

void FND_one(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80016c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <FND_one+0x48>)
 80016ce:	f7ff fb16 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <FND_one+0x4c>)
 80016d6:	f7ff fb04 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <FND_one+0x4c>)
 80016de:	f7ff fb00 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80016e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e6:	480a      	ldr	r0, [pc, #40]	; (8001710 <FND_one+0x4c>)
 80016e8:	f7ff fb09 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80016ec:	2102      	movs	r1, #2
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <FND_one+0x48>)
 80016f0:	f7ff fb05 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80016f4:	2101      	movs	r1, #1
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <FND_one+0x48>)
 80016f8:	f7ff fb01 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80016fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <FND_one+0x4c>)
 8001702:	f7ff fafc 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020800 	.word	0x40020800
 8001710:	40020400 	.word	0x40020400

08001714 <FND_two>:

void FND_two(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	480f      	ldr	r0, [pc, #60]	; (800175c <FND_two+0x48>)
 800171e:	f7ff fae0 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <FND_two+0x4c>)
 8001726:	f7ff fadc 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800172a:	2140      	movs	r1, #64	; 0x40
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <FND_two+0x4c>)
 800172e:	f7ff fae6 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001736:	480a      	ldr	r0, [pc, #40]	; (8001760 <FND_two+0x4c>)
 8001738:	f7ff fad3 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800173c:	2102      	movs	r1, #2
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <FND_two+0x48>)
 8001740:	f7ff facf 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001744:	2101      	movs	r1, #1
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <FND_two+0x48>)
 8001748:	f7ff fad9 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <FND_two+0x4c>)
 8001752:	f7ff fac6 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40020800 	.word	0x40020800
 8001760:	40020400 	.word	0x40020400

08001764 <FND_three>:
void FND_three(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <FND_three+0x48>)
 800176e:	f7ff fab8 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	480e      	ldr	r0, [pc, #56]	; (80017b0 <FND_three+0x4c>)
 8001776:	f7ff fab4 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <FND_three+0x4c>)
 800177e:	f7ff fab0 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <FND_three+0x4c>)
 8001788:	f7ff faab 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800178c:	2102      	movs	r1, #2
 800178e:	4807      	ldr	r0, [pc, #28]	; (80017ac <FND_three+0x48>)
 8001790:	f7ff fab5 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001794:	2101      	movs	r1, #1
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <FND_three+0x48>)
 8001798:	f7ff fab1 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800179c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <FND_three+0x4c>)
 80017a2:	f7ff fa9e 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020400 	.word	0x40020400

080017b4 <FND_four>:

void FND_four(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480f      	ldr	r0, [pc, #60]	; (80017fc <FND_four+0x48>)
 80017be:	f7ff fa9e 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <FND_four+0x4c>)
 80017c6:	f7ff fa8c 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <FND_four+0x4c>)
 80017ce:	f7ff fa88 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80017d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d6:	480a      	ldr	r0, [pc, #40]	; (8001800 <FND_four+0x4c>)
 80017d8:	f7ff fa91 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80017dc:	2102      	movs	r1, #2
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <FND_four+0x48>)
 80017e0:	f7ff fa8d 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80017e4:	2101      	movs	r1, #1
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <FND_four+0x48>)
 80017e8:	f7ff fa7b 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80017ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <FND_four+0x4c>)
 80017f2:	f7ff fa76 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020400 	.word	0x40020400

08001804 <FND_five>:

void FND_five(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180c:	480f      	ldr	r0, [pc, #60]	; (800184c <FND_five+0x48>)
 800180e:	f7ff fa68 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <FND_five+0x4c>)
 8001816:	f7ff fa72 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	480c      	ldr	r0, [pc, #48]	; (8001850 <FND_five+0x4c>)
 800181e:	f7ff fa60 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001826:	480a      	ldr	r0, [pc, #40]	; (8001850 <FND_five+0x4c>)
 8001828:	f7ff fa5b 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800182c:	2102      	movs	r1, #2
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <FND_five+0x48>)
 8001830:	f7ff fa65 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001834:	2101      	movs	r1, #1
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <FND_five+0x48>)
 8001838:	f7ff fa53 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800183c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <FND_five+0x4c>)
 8001842:	f7ff fa4e 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020800 	.word	0x40020800
 8001850:	40020400 	.word	0x40020400

08001854 <FND_six>:

void FND_six(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185c:	480f      	ldr	r0, [pc, #60]	; (800189c <FND_six+0x48>)
 800185e:	f7ff fa40 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	480e      	ldr	r0, [pc, #56]	; (80018a0 <FND_six+0x4c>)
 8001866:	f7ff fa4a 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <FND_six+0x4c>)
 800186e:	f7ff fa38 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <FND_six+0x4c>)
 8001878:	f7ff fa33 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800187c:	2102      	movs	r1, #2
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <FND_six+0x48>)
 8001880:	f7ff fa2f 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001884:	2101      	movs	r1, #1
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <FND_six+0x48>)
 8001888:	f7ff fa2b 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800188c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <FND_six+0x4c>)
 8001892:	f7ff fa26 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020400 	.word	0x40020400

080018a4 <FND_seven>:

void FND_seven(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80018a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ac:	480f      	ldr	r0, [pc, #60]	; (80018ec <FND_seven+0x48>)
 80018ae:	f7ff fa18 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	480e      	ldr	r0, [pc, #56]	; (80018f0 <FND_seven+0x4c>)
 80018b6:	f7ff fa14 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80018ba:	2140      	movs	r1, #64	; 0x40
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <FND_seven+0x4c>)
 80018be:	f7ff fa10 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <FND_seven+0x4c>)
 80018c8:	f7ff fa19 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80018cc:	2102      	movs	r1, #2
 80018ce:	4807      	ldr	r0, [pc, #28]	; (80018ec <FND_seven+0x48>)
 80018d0:	f7ff fa15 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80018d4:	2101      	movs	r1, #1
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <FND_seven+0x48>)
 80018d8:	f7ff fa11 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80018dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <FND_seven+0x4c>)
 80018e2:	f7ff fa0c 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020800 	.word	0x40020800
 80018f0:	40020400 	.word	0x40020400

080018f4 <FND_eight>:

void FND_eight(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80018f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <FND_eight+0x48>)
 80018fe:	f7ff f9f0 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	480e      	ldr	r0, [pc, #56]	; (8001940 <FND_eight+0x4c>)
 8001906:	f7ff f9ec 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <FND_eight+0x4c>)
 800190e:	f7ff f9e8 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	480a      	ldr	r0, [pc, #40]	; (8001940 <FND_eight+0x4c>)
 8001918:	f7ff f9e3 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800191c:	2102      	movs	r1, #2
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <FND_eight+0x48>)
 8001920:	f7ff f9df 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001924:	2101      	movs	r1, #1
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <FND_eight+0x48>)
 8001928:	f7ff f9db 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800192c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <FND_eight+0x4c>)
 8001932:	f7ff f9d6 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40020800 	.word	0x40020800
 8001940:	40020400 	.word	0x40020400

08001944 <FND_nine>:
void FND_nine(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <FND_nine+0x48>)
 800194e:	f7ff f9c8 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	480e      	ldr	r0, [pc, #56]	; (8001990 <FND_nine+0x4c>)
 8001956:	f7ff f9c4 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800195a:	2140      	movs	r1, #64	; 0x40
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <FND_nine+0x4c>)
 800195e:	f7ff f9c0 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <FND_nine+0x4c>)
 8001968:	f7ff f9bb 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800196c:	2102      	movs	r1, #2
 800196e:	4807      	ldr	r0, [pc, #28]	; (800198c <FND_nine+0x48>)
 8001970:	f7ff f9c5 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001974:	2101      	movs	r1, #1
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <FND_nine+0x48>)
 8001978:	f7ff f9b3 	bl	8000ce2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800197c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <FND_nine+0x4c>)
 8001982:	f7ff f9ae 	bl	8000ce2 <LL_GPIO_SetOutputPin>
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40020800 	.word	0x40020800
 8001990:	40020400 	.word	0x40020400

08001994 <turn_off>:

void turn_off(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001998:	2104      	movs	r1, #4
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <turn_off+0x2c>)
 800199c:	f7ff f9af 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80019a0:	2120      	movs	r1, #32
 80019a2:	4808      	ldr	r0, [pc, #32]	; (80019c4 <turn_off+0x30>)
 80019a4:	f7ff f9ab 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80019a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <turn_off+0x2c>)
 80019ae:	f7ff f9a6 	bl	8000cfe <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80019b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019b6:	4802      	ldr	r0, [pc, #8]	; (80019c0 <turn_off+0x2c>)
 80019b8:	f7ff f9a1 	bl	8000cfe <LL_GPIO_ResetOutputPin>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020400 	.word	0x40020400

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_MspInit+0x4c>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4013      	ands	r3, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6153      	str	r3, [r2, #20]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 fbde 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 interrupt.
 */
void EXTI0_IRQHandler(void) // mode switch interrupt
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 8001abc:	f000 f84a 	bl	8001b54 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff ffa9 	bl	8001a18 <LL_EXTI_IsActiveFlag_0_31>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff ffb9 	bl	8001a44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) // start button interrupt
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    else
    {
      tx_start_flag = 0;
    }
  }*/
  g_Result = kResult_Err_1;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <EXTI15_10_IRQHandler+0x28>)
 8001ade:	2202      	movs	r2, #2
 8001ae0:	701a      	strb	r2, [r3, #0]
  result();
 8001ae2:	f7ff f9a7 	bl	8000e34 <result>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001ae6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001aea:	f7ff ff95 	bl	8001a18 <LL_EXTI_IsActiveFlag_0_31>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <EXTI15_10_IRQHandler+0x24>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001af4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001af8:	f7ff ffa4 	bl	8001a44 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000074 	.word	0x20000074

08001b04 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  UART5_Rx_Callback(UART5); // PC <-> JIG
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <UART5_IRQHandler+0x10>)
 8001b0a:	f000 fb07 	bl	800211c <UART5_Rx_Callback>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40005000 	.word	0x40005000

08001b18 <LL_GPIO_SetOutputPin>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	619a      	str	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_GPIO_ResetOutputPin>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <switch_check>:

uint8_t Mode_data;
extern uint8_t Mode_data;

void switch_check(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 8001b58:	2101      	movs	r1, #1
 8001b5a:	4810      	ldr	r0, [pc, #64]	; (8001b9c <switch_check+0x48>)
 8001b5c:	f001 f894 	bl	8002c88 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <switch_check+0x2c>
    {
        Mode_data = 0x00U;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <switch_check+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8001b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <switch_check+0x48>)
 8001b72:	f7ff ffd1 	bl	8001b18 <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <switch_check+0x50>)
 8001b7a:	f7ff ffdb 	bl	8001b34 <LL_GPIO_ResetOutputPin>
    {
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
    }
 8001b7e:	e00b      	b.n	8001b98 <switch_check+0x44>
        Mode_data = 0x01U;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <switch_check+0x4c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <switch_check+0x48>)
 8001b8c:	f7ff ffd2 	bl	8001b34 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <switch_check+0x50>)
 8001b94:	f7ff ffc0 	bl	8001b18 <LL_GPIO_SetOutputPin>
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	20000075 	.word	0x20000075
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001bfe:	4a2d      	ldr	r2, [pc, #180]	; (8001cb4 <MX_TIM3_Init+0xe8>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c04:	222c      	movs	r2, #44	; 0x2c
 8001c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c22:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c24:	f001 fdfa 	bl	800381c <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c2e:	f7ff f853 	bl	8000cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481c      	ldr	r0, [pc, #112]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c40:	f002 f88e 	bl	8003d60 <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c4a:	f7ff f845 	bl	8000cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c50:	f001 fe33 	bl	80038ba <HAL_TIM_PWM_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c5a:	f7ff f83d 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c66:	f107 0320 	add.w	r3, r7, #32
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c6e:	f002 fc4f 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c78:	f7ff f82e 	bl	8000cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7c:	2360      	movs	r3, #96	; 0x60
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8001c80:	23f9      	movs	r3, #249	; 0xf9
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2208      	movs	r2, #8
 8001c90:	4619      	mov	r1, r3
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001c94:	f001 ffa2 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c9e:	f7ff f81b 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ca2:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <MX_TIM3_Init+0xe4>)
 8001ca4:	f000 f82a 	bl	8001cfc <HAL_TIM_MspPostInit>

}
 8001ca8:	bf00      	nop
 8001caa:	3738      	adds	r7, #56	; 0x38
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000078 	.word	0x20000078
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <HAL_TIM_Base_MspInit+0x3c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_TIM_Base_MspInit+0x40>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_TIM_Base_MspInit+0x40>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_TIM_Base_MspInit+0x40>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_TIM_MspPostInit+0x68>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d11e      	bne.n	8001d5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_TIM_MspPostInit+0x6c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_TIM_MspPostInit+0x6c>)
 8001d28:	f043 0304 	orr.w	r3, r3, #4
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_TIM_MspPostInit+0x6c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <HAL_TIM_MspPostInit+0x70>)
 8001d58:	f000 fe02 	bl	8002960 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020800 	.word	0x40020800

08001d70 <__NVIC_GetPriorityGrouping>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_USART_Enable>:
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60da      	str	r2, [r3, #12]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_USART_ConfigAsyncMode>:
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	615a      	str	r2, [r3, #20]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	b2db      	uxtb	r3, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_AHB1_GRP1_EnableClock>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4013      	ands	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40023800 	.word	0x40023800

08001f18 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4013      	ands	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40023800 	.word	0x40023800

08001f48 <MX_UART5_Init>:

UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8001f72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f76:	f7ff ffcf 	bl	8001f18 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f7a:	2004      	movs	r0, #4
 8001f7c:	f7ff ffb4 	bl	8001ee8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001f80:	2008      	movs	r0, #8
 8001f82:	f7ff ffb1 	bl	8001ee8 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4821      	ldr	r0, [pc, #132]	; (800202c <MX_UART5_Init+0xe4>)
 8001fa6:	f003 f80f 	bl	8004fc8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001faa:	2304      	movs	r3, #4
 8001fac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481a      	ldr	r0, [pc, #104]	; (8002030 <MX_UART5_Init+0xe8>)
 8001fc8:	f002 fffe 	bl	8004fc8 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8001fcc:	f7ff fed0 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff20 	bl	8001e1c <NVIC_EncodePriority>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	2035      	movs	r0, #53	; 0x35
 8001fe2:	f7ff fef1 	bl	8001dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8001fe6:	2035      	movs	r0, #53	; 0x35
 8001fe8:	f7ff fed0 	bl	8001d8c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 8001fec:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8001ff0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ffe:	230c      	movs	r3, #12
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002002:	2300      	movs	r3, #0
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <MX_UART5_Init+0xec>)
 8002012:	f003 fc2b 	bl	800586c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <MX_UART5_Init+0xec>)
 8002018:	f7ff ff43 	bl	8001ea2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_UART5_Init+0xec>)
 800201e:	f7ff ff30 	bl	8001e82 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8002022:	bf00      	nop
 8002024:	3738      	adds	r7, #56	; 0x38
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40020800 	.word	0x40020800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40005000 	.word	0x40005000

08002038 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <MX_USART6_UART_Init+0x50>)
 8002040:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 8002044:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002048:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800206e:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_USART6_UART_Init+0x4c>)
 8002070:	f002 faca 	bl	8004608 <HAL_UART_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800207a:	f7fe fe2d 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200000cc 	.word	0x200000cc
 8002088:	40011400 	.word	0x40011400

0800208c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if (uartHandle->Instance == USART6)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_UART_MspInit+0x84>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d12b      	bne.n	8002106 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_UART_MspInit+0x88>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_UART_MspInit+0x88>)
 80020b8:	f043 0320 	orr.w	r3, r3, #32
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_UART_MspInit+0x88>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_UART_MspInit+0x88>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_UART_MspInit+0x88>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_UART_MspInit+0x88>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020f6:	2308      	movs	r3, #8
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <HAL_UART_MspInit+0x8c>)
 8002102:	f000 fc2d 	bl	8002960 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }
}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40011400 	.word	0x40011400
 8002114:	40023800 	.word	0x40023800
 8002118:	40020800 	.word	0x40020800

0800211c <UART5_Rx_Callback>:
  }
}

/* USER CODE BEGIN 1 */
void UART5_Rx_Callback(USART_TypeDef *USARTx) // PC Interrupt
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  // uint8_t rx_data[9] = {
  //     0,
  // };
  if (rx_flag == 0)
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <UART5_Rx_Callback+0x4c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d119      	bne.n	8002160 <UART5_Rx_Callback+0x44>
  {
    rx_data[i] = LL_USART_ReceiveData8(UART5);
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <UART5_Rx_Callback+0x50>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461c      	mov	r4, r3
 8002132:	480f      	ldr	r0, [pc, #60]	; (8002170 <UART5_Rx_Callback+0x54>)
 8002134:	f7ff fecb 	bl	8001ece <LL_USART_ReceiveData8>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <UART5_Rx_Callback+0x58>)
 800213e:	551a      	strb	r2, [r3, r4]
    i++;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <UART5_Rx_Callback+0x50>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <UART5_Rx_Callback+0x50>)
 800214a:	701a      	strb	r2, [r3, #0]
    if (i >= RX_BUFFER_SIZE)
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <UART5_Rx_Callback+0x50>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d905      	bls.n	8002160 <UART5_Rx_Callback+0x44>
    {
      i = 0;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <UART5_Rx_Callback+0x50>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
      rx_flag = 1;
 800215a:	4b03      	ldr	r3, [pc, #12]	; (8002168 <UART5_Rx_Callback+0x4c>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]

  // if (memcmp(INFO_BUFF, rx_data, 9) == 0)
  // {
  //   GUI_Protocol_Mode()
  // }
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	200000c9 	.word	0x200000c9
 800216c:	200000ca 	.word	0x200000ca
 8002170:	40005000 	.word	0x40005000
 8002174:	200000c0 	.word	0x200000c0

08002178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021a2:	f7ff fd01 	bl	8001ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f003 fbe1 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021aa:	f7fe fd07 	bl	8000bbc <main>
  bx  lr    
 80021ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80021bc:	08005a24 	.word	0x08005a24
  ldr r2, =_sbss
 80021c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80021c4:	20000114 	.word	0x20000114

080021c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC_IRQHandler>
	...

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_Init+0x40>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_Init+0x40>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_Init+0x40>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_Init+0x40>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_Init+0x40>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 fb7f 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	200f      	movs	r0, #15
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fbe2 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fb89 	bl	8002946 <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 fb5f 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000004 	.word	0x20000004
 8002268:	2000000c 	.word	0x2000000c
 800226c:	20000008 	.word	0x20000008

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000110 	.word	0x20000110

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000110 	.word	0x20000110

080022b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e033      	b.n	800232e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe f96e 	bl	80005b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022f6:	f023 0302 	bic.w	r3, r3, #2
 80022fa:	f043 0202 	orr.w	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f94a 	bl	800259c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
 800231e:	e001      	b.n	8002324 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x1c>
 8002350:	2302      	movs	r3, #2
 8002352:	e113      	b.n	800257c <HAL_ADC_ConfigChannel+0x244>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d925      	bls.n	80023b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68d9      	ldr	r1, [r3, #12]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	2207      	movs	r2, #7
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43da      	mvns	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	400a      	ands	r2, r1
 8002388:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68d9      	ldr	r1, [r3, #12]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	4618      	mov	r0, r3
 800239c:	4603      	mov	r3, r0
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4403      	add	r3, r0
 80023a2:	3b1e      	subs	r3, #30
 80023a4:	409a      	lsls	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	e022      	b.n	80023f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6919      	ldr	r1, [r3, #16]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	2207      	movs	r2, #7
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4618      	mov	r0, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4403      	add	r3, r0
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d824      	bhi.n	8002448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b05      	subs	r3, #5
 8002410:	221f      	movs	r2, #31
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b05      	subs	r3, #5
 800243a:	fa00 f203 	lsl.w	r2, r0, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	635a      	str	r2, [r3, #52]	; 0x34
 8002446:	e04c      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d824      	bhi.n	800249a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3b23      	subs	r3, #35	; 0x23
 8002462:	221f      	movs	r2, #31
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43da      	mvns	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	400a      	ands	r2, r1
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	3b23      	subs	r3, #35	; 0x23
 800248c:	fa00 f203 	lsl.w	r2, r0, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
 8002498:	e023      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	3b41      	subs	r3, #65	; 0x41
 80024ac:	221f      	movs	r2, #31
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	400a      	ands	r2, r1
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3b41      	subs	r3, #65	; 0x41
 80024d6:	fa00 f203 	lsl.w	r2, r0, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e2:	4b29      	ldr	r3, [pc, #164]	; (8002588 <HAL_ADC_ConfigChannel+0x250>)
 80024e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_ADC_ConfigChannel+0x254>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10f      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1d8>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d10b      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_ADC_ConfigChannel+0x254>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d12b      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x23a>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_ADC_ConfigChannel+0x258>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d003      	beq.n	800252c <HAL_ADC_ConfigChannel+0x1f4>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b11      	cmp	r3, #17
 800252a:	d122      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_ADC_ConfigChannel+0x258>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d111      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_ADC_ConfigChannel+0x25c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_ADC_ConfigChannel+0x260>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	0c9a      	lsrs	r2, r3, #18
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002564:	e002      	b.n	800256c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40012300 	.word	0x40012300
 800258c:	40012000 	.word	0x40012000
 8002590:	10000012 	.word	0x10000012
 8002594:	20000004 	.word	0x20000004
 8002598:	431bde83 	.word	0x431bde83

0800259c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a4:	4b79      	ldr	r3, [pc, #484]	; (800278c <ADC_Init+0x1f0>)
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	021a      	lsls	r2, r3, #8
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	4a58      	ldr	r2, [pc, #352]	; (8002790 <ADC_Init+0x1f4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d022      	beq.n	800267a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6899      	ldr	r1, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	e00f      	b.n	800269a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0202 	bic.w	r2, r2, #2
 80026a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e1b      	ldrb	r3, [r3, #24]
 80026b4:	005a      	lsls	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	3b01      	subs	r3, #1
 80026f4:	035a      	lsls	r2, r3, #13
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e007      	b.n	8002710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	3b01      	subs	r3, #1
 800272c:	051a      	lsls	r2, r3, #20
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002752:	025a      	lsls	r2, r3, #9
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	029a      	lsls	r2, r3, #10
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40012300 	.word	0x40012300
 8002790:	0f000001 	.word	0x0f000001

08002794 <__NVIC_SetPriorityGrouping>:
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c6:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	60d3      	str	r3, [r2, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_GetPriorityGrouping>:
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <__NVIC_GetPriorityGrouping+0x18>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	f003 0307 	and.w	r3, r3, #7
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_SetPriority>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	; (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	; (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff47 	bl	8002794 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff5c 	bl	80027dc <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ffb0 	bl	80028b4 <SysTick_Config>
 8002954:	4603      	mov	r3, r0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e165      	b.n	8002c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	f040 8154 	bne.w	8002c42 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d005      	beq.n	80029b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d130      	bne.n	8002a14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e8:	2201      	movs	r2, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0201 	and.w	r2, r3, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d017      	beq.n	8002a50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d123      	bne.n	8002aa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	08da      	lsrs	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3208      	adds	r2, #8
 8002a9e:	69b9      	ldr	r1, [r7, #24]
 8002aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0203 	and.w	r2, r3, #3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80ae 	beq.w	8002c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_GPIO_Init+0x300>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a5c      	ldr	r2, [pc, #368]	; (8002c60 <HAL_GPIO_Init+0x300>)
 8002af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <HAL_GPIO_Init+0x300>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <HAL_GPIO_Init+0x308>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d025      	beq.n	8002b7a <HAL_GPIO_Init+0x21a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4e      	ldr	r2, [pc, #312]	; (8002c6c <HAL_GPIO_Init+0x30c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01f      	beq.n	8002b76 <HAL_GPIO_Init+0x216>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_GPIO_Init+0x310>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d019      	beq.n	8002b72 <HAL_GPIO_Init+0x212>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_GPIO_Init+0x314>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_GPIO_Init+0x20e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_GPIO_Init+0x318>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00d      	beq.n	8002b6a <HAL_GPIO_Init+0x20a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_GPIO_Init+0x31c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_Init+0x206>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a49      	ldr	r2, [pc, #292]	; (8002c80 <HAL_GPIO_Init+0x320>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_GPIO_Init+0x202>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e00c      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00a      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b66:	2305      	movs	r3, #5
 8002b68:	e008      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e004      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e002      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <HAL_GPIO_Init+0x21c>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	f002 0203 	and.w	r2, r2, #3
 8002b82:	0092      	lsls	r2, r2, #2
 8002b84:	4093      	lsls	r3, r2
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b8c:	4935      	ldr	r1, [pc, #212]	; (8002c64 <HAL_GPIO_Init+0x304>)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	3302      	adds	r3, #2
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bbe:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c12:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3c:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_GPIO_Init+0x324>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	f67f ae96 	bls.w	800297c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40013800 	.word	0x40013800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40021400 	.word	0x40021400
 8002c80:	40021800 	.word	0x40021800
 8002c84:	40013c00 	.word	0x40013c00

08002c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	887b      	ldrh	r3, [r7, #2]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e001      	b.n	8002caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b1d      	ldr	r3, [pc, #116]	; (8002d48 <HAL_PWREx_EnableOverDrive+0x90>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x94>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce4:	f7ff fad8 	bl	8002298 <HAL_GetTick>
 8002ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cea:	e009      	b.n	8002d00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cec:	f7ff fad4 	bl	8002298 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfa:	d901      	bls.n	8002d00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e01f      	b.n	8002d40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d1ee      	bne.n	8002cec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d14:	f7ff fac0 	bl	8002298 <HAL_GetTick>
 8002d18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1a:	e009      	b.n	8002d30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d1c:	f7ff fabc 	bl	8002298 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2a:	d901      	bls.n	8002d30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e007      	b.n	8002d40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	420e0040 	.word	0x420e0040
 8002d50:	40007000 	.word	0x40007000
 8002d54:	420e0044 	.word	0x420e0044

08002d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0cc      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90c      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b63      	ldr	r3, [pc, #396]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b8      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dac:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a52      	ldr	r2, [pc, #328]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	494d      	ldr	r1, [pc, #308]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d044      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d119      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e067      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 0203 	bic.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4934      	ldr	r1, [pc, #208]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7ff fa26 	bl	8002298 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7ff fa22 	bl	8002298 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e04f      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 020c 	and.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1eb      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d20c      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e032      	b.n	8002f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	490e      	ldr	r1, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ede:	f000 f855 	bl	8002f8c <HAL_RCC_GetSysClockFreq>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	5ccb      	ldrb	r3, [r1, r3]
 8002ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f986 	bl	8002210 <HAL_InitTick>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	080059fc 	.word	0x080059fc
 8002f1c:	20000004 	.word	0x20000004
 8002f20:	20000008 	.word	0x20000008

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000004 	.word	0x20000004

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08005a0c 	.word	0x08005a0c

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffdc 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08005a0c 	.word	0x08005a0c

08002f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f90:	b0a6      	sub	sp, #152	; 0x98
 8002f92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb2:	4bc8      	ldr	r3, [pc, #800]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	f200 817e 	bhi.w	80032bc <HAL_RCC_GetSysClockFreq+0x330>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002ffd 	.word	0x08002ffd
 8002fcc:	080032bd 	.word	0x080032bd
 8002fd0:	080032bd 	.word	0x080032bd
 8002fd4:	080032bd 	.word	0x080032bd
 8002fd8:	08003005 	.word	0x08003005
 8002fdc:	080032bd 	.word	0x080032bd
 8002fe0:	080032bd 	.word	0x080032bd
 8002fe4:	080032bd 	.word	0x080032bd
 8002fe8:	0800300d 	.word	0x0800300d
 8002fec:	080032bd 	.word	0x080032bd
 8002ff0:	080032bd 	.word	0x080032bd
 8002ff4:	080032bd 	.word	0x080032bd
 8002ff8:	08003177 	.word	0x08003177
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4bb6      	ldr	r3, [pc, #728]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003002:	e15f      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003004:	4bb5      	ldr	r3, [pc, #724]	; (80032dc <HAL_RCC_GetSysClockFreq+0x350>)
 8003006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800300a:	e15b      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800300c:	4bb1      	ldr	r3, [pc, #708]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003018:	4bae      	ldr	r3, [pc, #696]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d031      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003024:	4bab      	ldr	r3, [pc, #684]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	2200      	movs	r2, #0
 800302c:	66bb      	str	r3, [r7, #104]	; 0x68
 800302e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003036:	663b      	str	r3, [r7, #96]	; 0x60
 8003038:	2300      	movs	r3, #0
 800303a:	667b      	str	r3, [r7, #100]	; 0x64
 800303c:	4ba7      	ldr	r3, [pc, #668]	; (80032dc <HAL_RCC_GetSysClockFreq+0x350>)
 800303e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003042:	462a      	mov	r2, r5
 8003044:	fb03 f202 	mul.w	r2, r3, r2
 8003048:	2300      	movs	r3, #0
 800304a:	4621      	mov	r1, r4
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	4aa2      	ldr	r2, [pc, #648]	; (80032dc <HAL_RCC_GetSysClockFreq+0x350>)
 8003054:	4621      	mov	r1, r4
 8003056:	fba1 1202 	umull	r1, r2, r1, r2
 800305a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800305c:	460a      	mov	r2, r1
 800305e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003060:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003062:	4413      	add	r3, r2
 8003064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306a:	2200      	movs	r2, #0
 800306c:	65bb      	str	r3, [r7, #88]	; 0x58
 800306e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003070:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003074:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003078:	f7fd f8c4 	bl	8000204 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003086:	e064      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003088:	4b92      	ldr	r3, [pc, #584]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	2200      	movs	r2, #0
 8003090:	653b      	str	r3, [r7, #80]	; 0x50
 8003092:	657a      	str	r2, [r7, #84]	; 0x54
 8003094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
 800309c:	2300      	movs	r3, #0
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030a4:	4622      	mov	r2, r4
 80030a6:	462b      	mov	r3, r5
 80030a8:	f04f 0000 	mov.w	r0, #0
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	0159      	lsls	r1, r3, #5
 80030b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b6:	0150      	lsls	r0, r2, #5
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4621      	mov	r1, r4
 80030be:	1a51      	subs	r1, r2, r1
 80030c0:	6139      	str	r1, [r7, #16]
 80030c2:	4629      	mov	r1, r5
 80030c4:	eb63 0301 	sbc.w	r3, r3, r1
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d6:	4659      	mov	r1, fp
 80030d8:	018b      	lsls	r3, r1, #6
 80030da:	4651      	mov	r1, sl
 80030dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e0:	4651      	mov	r1, sl
 80030e2:	018a      	lsls	r2, r1, #6
 80030e4:	4651      	mov	r1, sl
 80030e6:	ebb2 0801 	subs.w	r8, r2, r1
 80030ea:	4659      	mov	r1, fp
 80030ec:	eb63 0901 	sbc.w	r9, r3, r1
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003100:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003104:	4690      	mov	r8, r2
 8003106:	4699      	mov	r9, r3
 8003108:	4623      	mov	r3, r4
 800310a:	eb18 0303 	adds.w	r3, r8, r3
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	462b      	mov	r3, r5
 8003112:	eb49 0303 	adc.w	r3, r9, r3
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003124:	4629      	mov	r1, r5
 8003126:	028b      	lsls	r3, r1, #10
 8003128:	4621      	mov	r1, r4
 800312a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312e:	4621      	mov	r1, r4
 8003130:	028a      	lsls	r2, r1, #10
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313a:	2200      	movs	r2, #0
 800313c:	643b      	str	r3, [r7, #64]	; 0x40
 800313e:	647a      	str	r2, [r7, #68]	; 0x44
 8003140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003144:	f7fd f85e 	bl	8000204 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003152:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	3301      	adds	r3, #1
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003164:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003174:	e0a6      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003176:	4b57      	ldr	r3, [pc, #348]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003182:	4b54      	ldr	r3, [pc, #336]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d02a      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
 8003198:	63fa      	str	r2, [r7, #60]	; 0x3c
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031a0:	2100      	movs	r1, #0
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCC_GetSysClockFreq+0x350>)
 80031a4:	fb03 f201 	mul.w	r2, r3, r1
 80031a8:	2300      	movs	r3, #0
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <HAL_RCC_GetSysClockFreq+0x350>)
 80031b2:	fba0 1202 	umull	r1, r2, r0, r2
 80031b6:	677a      	str	r2, [r7, #116]	; 0x74
 80031b8:	460a      	mov	r2, r1
 80031ba:	673a      	str	r2, [r7, #112]	; 0x70
 80031bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031be:	4413      	add	r3, r2
 80031c0:	677b      	str	r3, [r7, #116]	; 0x74
 80031c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031c6:	2200      	movs	r2, #0
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ca:	637a      	str	r2, [r7, #52]	; 0x34
 80031cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80031d4:	f7fd f816 	bl	8000204 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031e2:	e05b      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e4:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0159      	lsls	r1, r3, #5
 800320e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003212:	0150      	lsls	r0, r2, #5
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4641      	mov	r1, r8
 800321a:	ebb2 0a01 	subs.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb63 0b01 	sbc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003238:	ebb2 040a 	subs.w	r4, r2, sl
 800323c:	eb63 050b 	sbc.w	r5, r3, fp
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	464b      	mov	r3, r9
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326e:	4629      	mov	r1, r5
 8003270:	028b      	lsls	r3, r1, #10
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003278:	4621      	mov	r1, r4
 800327a:	028a      	lsls	r2, r1, #10
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003284:	2200      	movs	r2, #0
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	61fa      	str	r2, [r7, #28]
 800328a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328e:	f7fc ffb9 	bl	8000204 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4613      	mov	r3, r2
 8003298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0f1b      	lsrs	r3, r3, #28
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80032aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032ba:	e003      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80032be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3798      	adds	r7, #152	; 0x98
 80032cc:	46bd      	mov	sp, r7
 80032ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	016e3600 	.word	0x016e3600

080032e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e28d      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8083 	beq.w	8003406 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003300:	4b94      	ldr	r3, [pc, #592]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b04      	cmp	r3, #4
 800330a:	d019      	beq.n	8003340 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800330c:	4b91      	ldr	r3, [pc, #580]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003314:	2b08      	cmp	r3, #8
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003318:	4b8e      	ldr	r3, [pc, #568]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003324:	d00c      	beq.n	8003340 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d112      	bne.n	8003358 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b88      	ldr	r3, [pc, #544]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800333e:	d10b      	bne.n	8003358 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	4b84      	ldr	r3, [pc, #528]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05b      	beq.n	8003404 <HAL_RCC_OscConfig+0x124>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d157      	bne.n	8003404 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e25a      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d106      	bne.n	8003370 <HAL_RCC_OscConfig+0x90>
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7b      	ldr	r2, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xcc>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xb4>
 800337a:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a72      	ldr	r2, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xcc>
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6b      	ldr	r2, [pc, #428]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe ff70 	bl	8002298 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe ff6c 	bl	8002298 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e21f      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xdc>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe ff5c 	bl	8002298 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe ff58 	bl	8002298 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e20b      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x104>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d06f      	beq.n	80034f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003412:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800341e:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d11c      	bne.n	800347c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003442:	4b44      	ldr	r3, [pc, #272]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_RCC_OscConfig+0x186>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1d3      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4937      	ldr	r1, [pc, #220]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	e03a      	b.n	80034f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003484:	4b34      	ldr	r3, [pc, #208]	; (8003558 <HAL_RCC_OscConfig+0x278>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe ff05 	bl	8002298 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe ff01 	bl	8002298 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1b4      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4925      	ldr	r1, [pc, #148]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCC_OscConfig+0x278>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe fee4 	bl	8002298 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fe fee0 	bl	8002298 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e193      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d036      	beq.n	800356c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fe fec4 	bl	8002298 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe fec0 	bl	8002298 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e173      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_OscConfig+0x274>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x234>
 8003532:	e01b      	b.n	800356c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_OscConfig+0x27c>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe fead 	bl	8002298 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	e00e      	b.n	8003560 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fea9 	bl	8002298 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d907      	bls.n	8003560 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e15c      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
 8003554:	40023800 	.word	0x40023800
 8003558:	42470000 	.word	0x42470000
 800355c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003560:	4b8a      	ldr	r3, [pc, #552]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ea      	bne.n	8003542 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8097 	beq.w	80036a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357e:	4b83      	ldr	r3, [pc, #524]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b7f      	ldr	r3, [pc, #508]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	4a7e      	ldr	r2, [pc, #504]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
 800359a:	4b7c      	ldr	r3, [pc, #496]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a6:	2301      	movs	r3, #1
 80035a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035aa:	4b79      	ldr	r3, [pc, #484]	; (8003790 <HAL_RCC_OscConfig+0x4b0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d118      	bne.n	80035e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x4b0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a75      	ldr	r2, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x4b0>)
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c2:	f7fe fe69 	bl	8002298 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ca:	f7fe fe65 	bl	8002298 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e118      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_RCC_OscConfig+0x4b0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x31e>
 80035f0:	4b66      	ldr	r3, [pc, #408]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a65      	ldr	r2, [pc, #404]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
 80035fc:	e01c      	b.n	8003638 <HAL_RCC_OscConfig+0x358>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b05      	cmp	r3, #5
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x340>
 8003606:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	4a5d      	ldr	r2, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6713      	str	r3, [r2, #112]	; 0x70
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0x358>
 8003620:	4b5a      	ldr	r3, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a59      	ldr	r2, [pc, #356]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	4b57      	ldr	r3, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a56      	ldr	r2, [pc, #344]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003632:	f023 0304 	bic.w	r3, r3, #4
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d015      	beq.n	800366c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7fe fe2a 	bl	8002298 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fe fe26 	bl	8002298 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0d7      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ee      	beq.n	8003648 <HAL_RCC_OscConfig+0x368>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe fe14 	bl	8002298 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003672:	e00a      	b.n	800368a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003674:	f7fe fe10 	bl	8002298 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0c1      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368a:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ee      	bne.n	8003674 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369c:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	4a3a      	ldr	r2, [pc, #232]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80ad 	beq.w	800380c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d060      	beq.n	8003780 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d145      	bne.n	8003752 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x4b4>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fde4 	bl	8002298 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe fde0 	bl	8002298 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e093      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	019b      	lsls	r3, r3, #6
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	3b01      	subs	r3, #1
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	061b      	lsls	r3, r3, #24
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4b4>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe fdb5 	bl	8002298 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fdb1 	bl	8002298 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e064      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x452>
 8003750:	e05c      	b.n	800380c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x4b4>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fd9e 	bl	8002298 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe fd9a 	bl	8002298 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e04d      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x4ac>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x480>
 800377e:	e045      	b.n	800380c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e040      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
 8003794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_RCC_OscConfig+0x538>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d030      	beq.n	8003808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d129      	bne.n	8003808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d122      	bne.n	8003808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d119      	bne.n	8003808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d10f      	bne.n	8003808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e041      	b.n	80038b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fa38 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fb48 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e041      	b.n	8003950 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f839 	bl	8003958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f000 faf9 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x24>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e022      	b.n	80039d6 <HAL_TIM_PWM_Start+0x6a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d109      	bne.n	80039aa <HAL_TIM_PWM_Start+0x3e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e015      	b.n	80039d6 <HAL_TIM_PWM_Start+0x6a>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x58>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e008      	b.n	80039d6 <HAL_TIM_PWM_Start+0x6a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07c      	b.n	8003ad8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0x82>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	e013      	b.n	8003a16 <HAL_TIM_PWM_Start+0xaa>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start+0x92>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fc:	e00b      	b.n	8003a16 <HAL_TIM_PWM_Start+0xaa>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	e003      	b.n	8003a16 <HAL_TIM_PWM_Start+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd50 	bl	80044c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <HAL_TIM_PWM_Start+0x174>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_TIM_PWM_Start+0xcc>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2c      	ldr	r2, [pc, #176]	; (8003ae4 <HAL_TIM_PWM_Start+0x178>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_TIM_PWM_Start+0xd0>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_TIM_PWM_Start+0xd2>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_TIM_PWM_Start+0x174>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d01d      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_TIM_PWM_Start+0x17c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_TIM_PWM_Start+0x180>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <HAL_TIM_PWM_Start+0x184>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_TIM_PWM_Start+0x178>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a18      	ldr	r2, [pc, #96]	; (8003af4 <HAL_TIM_PWM_Start+0x188>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x136>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <HAL_TIM_PWM_Start+0x18c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d010      	beq.n	8003ad6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	e007      	b.n	8003ad6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40010400 	.word	0x40010400
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	6839      	ldr	r1, [r7, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fcd8 	bl	80044c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_TIM_PWM_Stop+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_PWM_Stop+0x2c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_TIM_PWM_Stop+0xdc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_PWM_Stop+0x30>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_TIM_PWM_Stop+0x32>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d017      	beq.n	8003b62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6a1a      	ldr	r2, [r3, #32]
 8003b38:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_TIM_PWM_Stop+0x66>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f240 4344 	movw	r3, #1092	; 0x444
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <HAL_TIM_PWM_Stop+0x66>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0x96>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	f240 4344 	movw	r3, #1092	; 0x444
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0x96>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_PWM_Stop+0xa6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba0:	e013      	b.n	8003bca <HAL_TIM_PWM_Stop+0xce>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_PWM_Stop+0xb6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb0:	e00b      	b.n	8003bca <HAL_TIM_PWM_Stop+0xce>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Stop+0xc6>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	e003      	b.n	8003bca <HAL_TIM_PWM_Stop+0xce>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40010400 	.word	0x40010400

08003bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e0ae      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b0c      	cmp	r3, #12
 8003c06:	f200 809f 	bhi.w	8003d48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003d49 	.word	0x08003d49
 8003c18:	08003d49 	.word	0x08003d49
 8003c1c:	08003d49 	.word	0x08003d49
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003d49 	.word	0x08003d49
 8003c28:	08003d49 	.word	0x08003d49
 8003c2c:	08003d49 	.word	0x08003d49
 8003c30:	08003cc7 	.word	0x08003cc7
 8003c34:	08003d49 	.word	0x08003d49
 8003c38:	08003d49 	.word	0x08003d49
 8003c3c:	08003d49 	.word	0x08003d49
 8003c40:	08003d07 	.word	0x08003d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f9f0 	bl	8004030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0208 	orr.w	r2, r2, #8
 8003c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0204 	bic.w	r2, r2, #4
 8003c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	619a      	str	r2, [r3, #24]
      break;
 8003c82:	e064      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fa40 	bl	8004110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6999      	ldr	r1, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	021a      	lsls	r2, r3, #8
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	619a      	str	r2, [r3, #24]
      break;
 8003cc4:	e043      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fa95 	bl	80041fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0208 	orr.w	r2, r2, #8
 8003ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0204 	bic.w	r2, r2, #4
 8003cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
      break;
 8003d04:	e023      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fae9 	bl	80042e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	021a      	lsls	r2, r3, #8
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	61da      	str	r2, [r3, #28]
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x1c>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e0b4      	b.n	8003ee6 <HAL_TIM_ConfigClockSource+0x186>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d03e      	beq.n	8003e34 <HAL_TIM_ConfigClockSource+0xd4>
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	f200 8087 	bhi.w	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	f000 8086 	beq.w	8003ed2 <HAL_TIM_ConfigClockSource+0x172>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d87f      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d01a      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xa6>
 8003dd0:	2b70      	cmp	r3, #112	; 0x70
 8003dd2:	d87b      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d050      	beq.n	8003e7a <HAL_TIM_ConfigClockSource+0x11a>
 8003dd8:	2b60      	cmp	r3, #96	; 0x60
 8003dda:	d877      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b50      	cmp	r3, #80	; 0x50
 8003dde:	d03c      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0xfa>
 8003de0:	2b50      	cmp	r3, #80	; 0x50
 8003de2:	d873      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d058      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0x13a>
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d86f      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b30      	cmp	r3, #48	; 0x30
 8003dee:	d064      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	2b30      	cmp	r3, #48	; 0x30
 8003df2:	d86b      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d060      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x15a>
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d867      	bhi.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05c      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x15a>
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d05a      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0x15a>
 8003e04:	e062      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f000 fb35 	bl	8004484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	609a      	str	r2, [r3, #8]
      break;
 8003e32:	e04f      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6899      	ldr	r1, [r3, #8]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f000 fb1e 	bl	8004484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e56:	609a      	str	r2, [r3, #8]
      break;
 8003e58:	e03c      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f000 fa92 	bl	8004390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2150      	movs	r1, #80	; 0x50
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 faeb 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003e78:	e02c      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6859      	ldr	r1, [r3, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f000 fab1 	bl	80043ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2160      	movs	r1, #96	; 0x60
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fadb 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003e98:	e01c      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f000 fa72 	bl	8004390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 facb 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003eb8:	e00c      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f000 fac2 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003eca:	e003      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed0:	e000      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a40      	ldr	r2, [pc, #256]	; (8004004 <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d00f      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3d      	ldr	r2, [pc, #244]	; (8004008 <TIM_Base_SetConfig+0x118>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3c      	ldr	r2, [pc, #240]	; (800400c <TIM_Base_SetConfig+0x11c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3b      	ldr	r2, [pc, #236]	; (8004010 <TIM_Base_SetConfig+0x120>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3a      	ldr	r2, [pc, #232]	; (8004014 <TIM_Base_SetConfig+0x124>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <TIM_Base_SetConfig+0x114>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d02b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f50:	d027      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a2c      	ldr	r2, [pc, #176]	; (8004008 <TIM_Base_SetConfig+0x118>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d023      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	; (800400c <TIM_Base_SetConfig+0x11c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01f      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <TIM_Base_SetConfig+0x120>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a29      	ldr	r2, [pc, #164]	; (8004014 <TIM_Base_SetConfig+0x124>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d017      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a28      	ldr	r2, [pc, #160]	; (8004018 <TIM_Base_SetConfig+0x128>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a27      	ldr	r2, [pc, #156]	; (800401c <TIM_Base_SetConfig+0x12c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a26      	ldr	r2, [pc, #152]	; (8004020 <TIM_Base_SetConfig+0x130>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00b      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a25      	ldr	r2, [pc, #148]	; (8004024 <TIM_Base_SetConfig+0x134>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <TIM_Base_SetConfig+0x138>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d003      	beq.n	8003fa2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a23      	ldr	r2, [pc, #140]	; (800402c <TIM_Base_SetConfig+0x13c>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d108      	bne.n	8003fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <TIM_Base_SetConfig+0x114>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0xf8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <TIM_Base_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40010400 	.word	0x40010400
 8004018:	40014000 	.word	0x40014000
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800
 8004024:	40001800 	.word	0x40001800
 8004028:	40001c00 	.word	0x40001c00
 800402c:	40002000 	.word	0x40002000

08004030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0302 	bic.w	r3, r3, #2
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a20      	ldr	r2, [pc, #128]	; (8004108 <TIM_OC1_SetConfig+0xd8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC1_SetConfig+0x64>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a1f      	ldr	r2, [pc, #124]	; (800410c <TIM_OC1_SetConfig+0xdc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d10c      	bne.n	80040ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0308 	bic.w	r3, r3, #8
 800409a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f023 0304 	bic.w	r3, r3, #4
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a15      	ldr	r2, [pc, #84]	; (8004108 <TIM_OC1_SetConfig+0xd8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC1_SetConfig+0x8e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a14      	ldr	r2, [pc, #80]	; (800410c <TIM_OC1_SetConfig+0xdc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d111      	bne.n	80040e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	621a      	str	r2, [r3, #32]
}
 80040fc:	bf00      	nop
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40010000 	.word	0x40010000
 800410c:	40010400 	.word	0x40010400

08004110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0210 	bic.w	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a22      	ldr	r2, [pc, #136]	; (80041f4 <TIM_OC2_SetConfig+0xe4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_OC2_SetConfig+0x68>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a21      	ldr	r2, [pc, #132]	; (80041f8 <TIM_OC2_SetConfig+0xe8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d10d      	bne.n	8004194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <TIM_OC2_SetConfig+0xe4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_OC2_SetConfig+0x94>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a16      	ldr	r2, [pc, #88]	; (80041f8 <TIM_OC2_SetConfig+0xe8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d113      	bne.n	80041cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010400 	.word	0x40010400

080041fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	021b      	lsls	r3, r3, #8
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <TIM_OC3_SetConfig+0xe0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_OC3_SetConfig+0x66>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <TIM_OC3_SetConfig+0xe4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10d      	bne.n	800427e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800427c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <TIM_OC3_SetConfig+0xe0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d003      	beq.n	800428e <TIM_OC3_SetConfig+0x92>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <TIM_OC3_SetConfig+0xe4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d113      	bne.n	80042b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40010400 	.word	0x40010400

080042e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800432e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <TIM_OC4_SetConfig+0xa4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_OC4_SetConfig+0x68>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a11      	ldr	r2, [pc, #68]	; (800438c <TIM_OC4_SetConfig+0xa8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d109      	bne.n	8004360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	019b      	lsls	r3, r3, #6
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40010400 	.word	0x40010400

08004390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 030a 	bic.w	r3, r3, #10
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0210 	bic.w	r2, r3, #16
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	031b      	lsls	r3, r3, #12
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	f043 0307 	orr.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800449e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	021a      	lsls	r2, r3, #8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2201      	movs	r2, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e05a      	b.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a21      	ldr	r2, [pc, #132]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004574:	d01d      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a18      	ldr	r2, [pc, #96]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10c      	bne.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40010400 	.word	0x40010400
 8004600:	40014000 	.word	0x40014000
 8004604:	40001800 	.word	0x40001800

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e03f      	b.n	800469a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fd2c 	bl	800208c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f829 	bl	80046a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a8:	b0c0      	sub	sp, #256	; 0x100
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c0:	68d9      	ldr	r1, [r3, #12]
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	ea40 0301 	orr.w	r3, r0, r1
 80046cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046fc:	f021 010c 	bic.w	r1, r1, #12
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800470a:	430b      	orrs	r3, r1
 800470c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471e:	6999      	ldr	r1, [r3, #24]
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	ea40 0301 	orr.w	r3, r0, r1
 800472a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <UART_SetConfig+0x2cc>)
 8004734:	429a      	cmp	r2, r3
 8004736:	d005      	beq.n	8004744 <UART_SetConfig+0xa0>
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <UART_SetConfig+0x2d0>)
 8004740:	429a      	cmp	r2, r3
 8004742:	d104      	bne.n	800474e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe fc0e 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8004748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800474c:	e003      	b.n	8004756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800474e:	f7fe fbf5 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8004752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	f040 810c 	bne.w	800497c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800476e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	1891      	adds	r1, r2, r2
 800477c:	65b9      	str	r1, [r7, #88]	; 0x58
 800477e:	415b      	adcs	r3, r3
 8004780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004786:	4621      	mov	r1, r4
 8004788:	eb12 0801 	adds.w	r8, r2, r1
 800478c:	4629      	mov	r1, r5
 800478e:	eb43 0901 	adc.w	r9, r3, r1
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a6:	4690      	mov	r8, r2
 80047a8:	4699      	mov	r9, r3
 80047aa:	4623      	mov	r3, r4
 80047ac:	eb18 0303 	adds.w	r3, r8, r3
 80047b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047b4:	462b      	mov	r3, r5
 80047b6:	eb49 0303 	adc.w	r3, r9, r3
 80047ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047d2:	460b      	mov	r3, r1
 80047d4:	18db      	adds	r3, r3, r3
 80047d6:	653b      	str	r3, [r7, #80]	; 0x50
 80047d8:	4613      	mov	r3, r2
 80047da:	eb42 0303 	adc.w	r3, r2, r3
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
 80047e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047e8:	f7fb fd0c 	bl	8000204 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4b61      	ldr	r3, [pc, #388]	; (8004978 <UART_SetConfig+0x2d4>)
 80047f2:	fba3 2302 	umull	r2, r3, r3, r2
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	011c      	lsls	r4, r3, #4
 80047fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	1891      	adds	r1, r2, r2
 8004812:	64b9      	str	r1, [r7, #72]	; 0x48
 8004814:	415b      	adcs	r3, r3
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800481c:	4641      	mov	r1, r8
 800481e:	eb12 0a01 	adds.w	sl, r2, r1
 8004822:	4649      	mov	r1, r9
 8004824:	eb43 0b01 	adc.w	fp, r3, r1
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800483c:	4692      	mov	sl, r2
 800483e:	469b      	mov	fp, r3
 8004840:	4643      	mov	r3, r8
 8004842:	eb1a 0303 	adds.w	r3, sl, r3
 8004846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484a:	464b      	mov	r3, r9
 800484c:	eb4b 0303 	adc.w	r3, fp, r3
 8004850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004868:	460b      	mov	r3, r1
 800486a:	18db      	adds	r3, r3, r3
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
 800486e:	4613      	mov	r3, r2
 8004870:	eb42 0303 	adc.w	r3, r2, r3
 8004874:	647b      	str	r3, [r7, #68]	; 0x44
 8004876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800487a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800487e:	f7fb fcc1 	bl	8000204 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4611      	mov	r1, r2
 8004888:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <UART_SetConfig+0x2d4>)
 800488a:	fba3 2301 	umull	r2, r3, r3, r1
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2264      	movs	r2, #100	; 0x64
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	1acb      	subs	r3, r1, r3
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <UART_SetConfig+0x2d4>)
 80048a0:	fba3 2302 	umull	r2, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048ac:	441c      	add	r4, r3
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048c8:	415b      	adcs	r3, r3
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048d0:	4641      	mov	r1, r8
 80048d2:	1851      	adds	r1, r2, r1
 80048d4:	6339      	str	r1, [r7, #48]	; 0x30
 80048d6:	4649      	mov	r1, r9
 80048d8:	414b      	adcs	r3, r1
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048e8:	4659      	mov	r1, fp
 80048ea:	00cb      	lsls	r3, r1, #3
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f2:	4651      	mov	r1, sl
 80048f4:	00ca      	lsls	r2, r1, #3
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	4642      	mov	r2, r8
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800491c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004924:	460b      	mov	r3, r1
 8004926:	18db      	adds	r3, r3, r3
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
 800492a:	4613      	mov	r3, r2
 800492c:	eb42 0303 	adc.w	r3, r2, r3
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800493a:	f7fb fc63 	bl	8000204 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <UART_SetConfig+0x2d4>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	; 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	3332      	adds	r3, #50	; 0x32
 8004956:	4a08      	ldr	r2, [pc, #32]	; (8004978 <UART_SetConfig+0x2d4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	f003 0207 	and.w	r2, r3, #7
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4422      	add	r2, r4
 800496a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800496c:	e105      	b.n	8004b7a <UART_SetConfig+0x4d6>
 800496e:	bf00      	nop
 8004970:	40011000 	.word	0x40011000
 8004974:	40011400 	.word	0x40011400
 8004978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004980:	2200      	movs	r2, #0
 8004982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800498a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800498e:	4642      	mov	r2, r8
 8004990:	464b      	mov	r3, r9
 8004992:	1891      	adds	r1, r2, r2
 8004994:	6239      	str	r1, [r7, #32]
 8004996:	415b      	adcs	r3, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499e:	4641      	mov	r1, r8
 80049a0:	1854      	adds	r4, r2, r1
 80049a2:	4649      	mov	r1, r9
 80049a4:	eb43 0501 	adc.w	r5, r3, r1
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	00eb      	lsls	r3, r5, #3
 80049b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b6:	00e2      	lsls	r2, r4, #3
 80049b8:	4614      	mov	r4, r2
 80049ba:	461d      	mov	r5, r3
 80049bc:	4643      	mov	r3, r8
 80049be:	18e3      	adds	r3, r4, r3
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049c4:	464b      	mov	r3, r9
 80049c6:	eb45 0303 	adc.w	r3, r5, r3
 80049ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049de:	f04f 0200 	mov.w	r2, #0
 80049e2:	f04f 0300 	mov.w	r3, #0
 80049e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ea:	4629      	mov	r1, r5
 80049ec:	008b      	lsls	r3, r1, #2
 80049ee:	4621      	mov	r1, r4
 80049f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f4:	4621      	mov	r1, r4
 80049f6:	008a      	lsls	r2, r1, #2
 80049f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049fc:	f7fb fc02 	bl	8000204 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b60      	ldr	r3, [pc, #384]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	61b9      	str	r1, [r7, #24]
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a30:	4641      	mov	r1, r8
 8004a32:	1851      	adds	r1, r2, r1
 8004a34:	6139      	str	r1, [r7, #16]
 8004a36:	4649      	mov	r1, r9
 8004a38:	414b      	adcs	r3, r1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a48:	4659      	mov	r1, fp
 8004a4a:	00cb      	lsls	r3, r1, #3
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a52:	4651      	mov	r1, sl
 8004a54:	00ca      	lsls	r2, r1, #3
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a64:	464b      	mov	r3, r9
 8004a66:	460a      	mov	r2, r1
 8004a68:	eb42 0303 	adc.w	r3, r2, r3
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a88:	4649      	mov	r1, r9
 8004a8a:	008b      	lsls	r3, r1, #2
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a92:	4641      	mov	r1, r8
 8004a94:	008a      	lsls	r2, r1, #2
 8004a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a9a:	f7fb fbb3 	bl	8000204 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	2164      	movs	r1, #100	; 0x64
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	3332      	adds	r3, #50	; 0x32
 8004ab6:	4a34      	ldr	r2, [pc, #208]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac2:	441c      	add	r4, r3
 8004ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac8:	2200      	movs	r2, #0
 8004aca:	673b      	str	r3, [r7, #112]	; 0x70
 8004acc:	677a      	str	r2, [r7, #116]	; 0x74
 8004ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	415b      	adcs	r3, r3
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	1851      	adds	r1, r2, r1
 8004ae6:	6039      	str	r1, [r7, #0]
 8004ae8:	4649      	mov	r1, r9
 8004aea:	414b      	adcs	r3, r1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004afa:	4659      	mov	r1, fp
 8004afc:	00cb      	lsls	r3, r1, #3
 8004afe:	4651      	mov	r1, sl
 8004b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b04:	4651      	mov	r1, sl
 8004b06:	00ca      	lsls	r2, r1, #3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	4642      	mov	r2, r8
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b14:	464b      	mov	r3, r9
 8004b16:	460a      	mov	r2, r1
 8004b18:	eb42 0303 	adc.w	r3, r2, r3
 8004b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	663b      	str	r3, [r7, #96]	; 0x60
 8004b28:	667a      	str	r2, [r7, #100]	; 0x64
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b36:	4649      	mov	r1, r9
 8004b38:	008b      	lsls	r3, r1, #2
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b40:	4641      	mov	r1, r8
 8004b42:	008a      	lsls	r2, r1, #2
 8004b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b48:	f7fb fb5c 	bl	8000204 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <UART_SetConfig+0x4e4>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 020f 	and.w	r2, r3, #15
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4422      	add	r2, r4
 8004b78:	609a      	str	r2, [r3, #8]
}
 8004b7a:	bf00      	nop
 8004b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	51eb851f 	.word	0x51eb851f

08004b8c <LL_EXTI_EnableIT_0_31>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <LL_EXTI_EnableIT_0_31+0x20>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4904      	ldr	r1, [pc, #16]	; (8004bac <LL_EXTI_EnableIT_0_31+0x20>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40013c00 	.word	0x40013c00

08004bb0 <LL_EXTI_DisableIT_0_31>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <LL_EXTI_DisableIT_0_31+0x24>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	4904      	ldr	r1, [pc, #16]	; (8004bd4 <LL_EXTI_DisableIT_0_31+0x24>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40013c00 	.word	0x40013c00

08004bd8 <LL_EXTI_EnableEvent_0_31>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40013c00 	.word	0x40013c00

08004bfc <LL_EXTI_DisableEvent_0_31>:
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	4904      	ldr	r1, [pc, #16]	; (8004c20 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40013c00 	.word	0x40013c00

08004c24 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	4904      	ldr	r1, [pc, #16]	; (8004c44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	40013c00 	.word	0x40013c00

08004c48 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	43db      	mvns	r3, r3
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40013c00 	.word	0x40013c00

08004c70 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	4904      	ldr	r1, [pc, #16]	; (8004c90 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60cb      	str	r3, [r1, #12]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40013c00 	.word	0x40013c00

08004c94 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	4904      	ldr	r1, [pc, #16]	; (8004cb8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60cb      	str	r3, [r1, #12]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40013c00 	.word	0x40013c00

08004cbc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d065      	beq.n	8004d9c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d06c      	beq.n	8004db2 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	795b      	ldrb	r3, [r3, #5]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d01c      	beq.n	8004d1a <LL_EXTI_Init+0x5e>
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	dc25      	bgt.n	8004d30 <LL_EXTI_Init+0x74>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <LL_EXTI_Init+0x32>
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d00b      	beq.n	8004d04 <LL_EXTI_Init+0x48>
 8004cec:	e020      	b.n	8004d30 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ff82 	bl	8004bfc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff45 	bl	8004b8c <LL_EXTI_EnableIT_0_31>
          break;
 8004d02:	e018      	b.n	8004d36 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff51 	bl	8004bb0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ff60 	bl	8004bd8 <LL_EXTI_EnableEvent_0_31>
          break;
 8004d18:	e00d      	b.n	8004d36 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ff34 	bl	8004b8c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff55 	bl	8004bd8 <LL_EXTI_EnableEvent_0_31>
          break;
 8004d2e:	e002      	b.n	8004d36 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
          break;
 8004d34:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	799b      	ldrb	r3, [r3, #6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d039      	beq.n	8004db2 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	799b      	ldrb	r3, [r3, #6]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d01c      	beq.n	8004d80 <LL_EXTI_Init+0xc4>
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	dc25      	bgt.n	8004d96 <LL_EXTI_Init+0xda>
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d002      	beq.n	8004d54 <LL_EXTI_Init+0x98>
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d00b      	beq.n	8004d6a <LL_EXTI_Init+0xae>
 8004d52:	e020      	b.n	8004d96 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff ff9b 	bl	8004c94 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ff5e 	bl	8004c24 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004d68:	e024      	b.n	8004db4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ff6a 	bl	8004c48 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff79 	bl	8004c70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004d7e:	e019      	b.n	8004db4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff4d 	bl	8004c24 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff6e 	bl	8004c70 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004d94:	e00e      	b.n	8004db4 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
            break;
 8004d9a:	e00b      	b.n	8004db4 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff05 	bl	8004bb0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff26 	bl	8004bfc <LL_EXTI_DisableEvent_0_31>
 8004db0:	e000      	b.n	8004db4 <LL_EXTI_Init+0xf8>
      }
 8004db2:	bf00      	nop
  }
  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <LL_GPIO_SetPinMode>:
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b089      	sub	sp, #36	; 0x24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	613b      	str	r3, [r7, #16]
  return result;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	2103      	movs	r1, #3
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	401a      	ands	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	61bb      	str	r3, [r7, #24]
  return result;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]
}
 8004e10:	bf00      	nop
 8004e12:	3724      	adds	r7, #36	; 0x24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_GPIO_SetPinOutputType>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	401a      	ands	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	605a      	str	r2, [r3, #4]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_GPIO_SetPinSpeed>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	613b      	str	r3, [r7, #16]
  return result;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	2103      	movs	r1, #3
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	61bb      	str	r3, [r7, #24]
  return result;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	fa01 f303 	lsl.w	r3, r1, r3
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	609a      	str	r2, [r3, #8]
}
 8004e9e:	bf00      	nop
 8004ea0:	3724      	adds	r7, #36	; 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <LL_GPIO_SetPinPull>:
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b089      	sub	sp, #36	; 0x24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	fa93 f3a3 	rbit	r3, r3
 8004ec4:	613b      	str	r3, [r7, #16]
  return result;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	fab3 f383 	clz	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	2103      	movs	r1, #3
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	401a      	ands	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	61bb      	str	r3, [r7, #24]
  return result;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
}
 8004efc:	bf00      	nop
 8004efe:	3724      	adds	r7, #36	; 0x24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_GPIO_SetAFPin_0_7>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	; 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	613b      	str	r3, [r7, #16]
  return result;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	210f      	movs	r1, #15
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	401a      	ands	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	61bb      	str	r3, [r7, #24]
  return result;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	fab3 f383 	clz	r3, r3
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	fa01 f303 	lsl.w	r3, r1, r3
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <LL_GPIO_SetAFPin_8_15>:
{
 8004f66:	b480      	push	{r7}
 8004f68:	b089      	sub	sp, #36	; 0x24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	613b      	str	r3, [r7, #16]
  return result;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	210f      	movs	r1, #15
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	401a      	ands	r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa93 f3a3 	rbit	r3, r3
 8004fa4:	61bb      	str	r3, [r7, #24]
  return result;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	fab3 f383 	clz	r3, r3
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004fbc:	bf00      	nop
 8004fbe:	3724      	adds	r7, #36	; 0x24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	613b      	str	r3, [r7, #16]
  return result;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004ff2:	e050      	b.n	8005096 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	4013      	ands	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d042      	beq.n	8005090 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d003      	beq.n	800501a <LL_GPIO_Init+0x52>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d10d      	bne.n	8005036 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	461a      	mov	r2, r3
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff ff12 	bl	8004e4c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	461a      	mov	r2, r3
 800502e:	69b9      	ldr	r1, [r7, #24]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fef3 	bl	8004e1c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	461a      	mov	r2, r3
 800503c:	69b9      	ldr	r1, [r7, #24]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ff33 	bl	8004eaa <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d11a      	bne.n	8005082 <LL_GPIO_Init+0xba>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	fa93 f3a3 	rbit	r3, r3
 8005056:	60bb      	str	r3, [r7, #8]
  return result;
 8005058:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b07      	cmp	r3, #7
 8005062:	d807      	bhi.n	8005074 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	461a      	mov	r2, r3
 800506a:	69b9      	ldr	r1, [r7, #24]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff4b 	bl	8004f08 <LL_GPIO_SetAFPin_0_7>
 8005072:	e006      	b.n	8005082 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	461a      	mov	r2, r3
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff72 	bl	8004f66 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff fe97 	bl	8004dbe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1a7      	bne.n	8004ff4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <LL_RCC_GetSysClkSource+0x18>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 030c 	and.w	r3, r3, #12
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800

080050cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <LL_RCC_GetAHBPrescaler+0x18>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <LL_RCC_GetAPB1Prescaler+0x18>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800

08005104 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <LL_RCC_GetAPB2Prescaler+0x18>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800

08005120 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005124:	4b04      	ldr	r3, [pc, #16]	; (8005138 <LL_RCC_PLL_GetMainSource+0x18>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800

0800513c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <LL_RCC_PLL_GetN+0x18>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	40023800 	.word	0x40023800

08005158 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <LL_RCC_PLL_GetP+0x18>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800

08005174 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <LL_RCC_PLL_GetR+0x18>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800

08005190 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005194:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <LL_RCC_PLL_GetDivider+0x18>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800

080051ac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80051b4:	f000 f820 	bl	80051f8 <RCC_GetSystemClockFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f85c 	bl	8005280 <RCC_GetHCLKClockFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f86a 	bl	80052ac <RCC_GetPCLK1ClockFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f876 	bl	80052d4 <RCC_GetPCLK2ClockFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005202:	f7ff ff55 	bl	80050b0 <LL_RCC_GetSysClkSource>
 8005206:	4603      	mov	r3, r0
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d82d      	bhi.n	8005268 <RCC_GetSystemClockFreq+0x70>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <RCC_GetSystemClockFreq+0x1c>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005249 	.word	0x08005249
 8005218:	08005269 	.word	0x08005269
 800521c:	08005269 	.word	0x08005269
 8005220:	08005269 	.word	0x08005269
 8005224:	0800524f 	.word	0x0800524f
 8005228:	08005269 	.word	0x08005269
 800522c:	08005269 	.word	0x08005269
 8005230:	08005269 	.word	0x08005269
 8005234:	08005255 	.word	0x08005255
 8005238:	08005269 	.word	0x08005269
 800523c:	08005269 	.word	0x08005269
 8005240:	08005269 	.word	0x08005269
 8005244:	0800525f 	.word	0x0800525f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <RCC_GetSystemClockFreq+0x80>)
 800524a:	607b      	str	r3, [r7, #4]
      break;
 800524c:	e00f      	b.n	800526e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <RCC_GetSystemClockFreq+0x84>)
 8005250:	607b      	str	r3, [r7, #4]
      break;
 8005252:	e00c      	b.n	800526e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005254:	2008      	movs	r0, #8
 8005256:	f000 f851 	bl	80052fc <RCC_PLL_GetFreqDomain_SYS>
 800525a:	6078      	str	r0, [r7, #4]
      break;
 800525c:	e007      	b.n	800526e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800525e:	200c      	movs	r0, #12
 8005260:	f000 f84c 	bl	80052fc <RCC_PLL_GetFreqDomain_SYS>
 8005264:	6078      	str	r0, [r7, #4]
      break;
 8005266:	e002      	b.n	800526e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <RCC_GetSystemClockFreq+0x80>)
 800526a:	607b      	str	r3, [r7, #4]
      break;
 800526c:	bf00      	nop
  }

  return frequency;
 800526e:	687b      	ldr	r3, [r7, #4]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	00f42400 	.word	0x00f42400
 800527c:	016e3600 	.word	0x016e3600

08005280 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005288:	f7ff ff20 	bl	80050cc <LL_RCC_GetAHBPrescaler>
 800528c:	4603      	mov	r3, r0
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <RCC_GetHCLKClockFreq+0x28>)
 8005296:	5cd3      	ldrb	r3, [r2, r3]
 8005298:	461a      	mov	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	40d3      	lsrs	r3, r2
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	080059fc 	.word	0x080059fc

080052ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80052b4:	f7ff ff18 	bl	80050e8 <LL_RCC_GetAPB1Prescaler>
 80052b8:	4603      	mov	r3, r0
 80052ba:	0a9b      	lsrs	r3, r3, #10
 80052bc:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80052be:	5cd3      	ldrb	r3, [r2, r3]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	40d3      	lsrs	r3, r2
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	08005a0c 	.word	0x08005a0c

080052d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80052dc:	f7ff ff12 	bl	8005104 <LL_RCC_GetAPB2Prescaler>
 80052e0:	4603      	mov	r3, r0
 80052e2:	0b5b      	lsrs	r3, r3, #13
 80052e4:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80052e6:	5cd3      	ldrb	r3, [r2, r3]
 80052e8:	461a      	mov	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	40d3      	lsrs	r3, r2
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	08005a0c 	.word	0x08005a0c

080052fc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80052fc:	b590      	push	{r4, r7, lr}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005310:	f7ff ff06 	bl	8005120 <LL_RCC_PLL_GetMainSource>
 8005314:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005322:	d003      	beq.n	800532c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005324:	e005      	b.n	8005332 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8005328:	617b      	str	r3, [r7, #20]
      break;
 800532a:	e005      	b.n	8005338 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800532c:	4b1b      	ldr	r3, [pc, #108]	; (800539c <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800532e:	617b      	str	r3, [r7, #20]
      break;
 8005330:	e002      	b.n	8005338 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8005334:	617b      	str	r3, [r7, #20]
      break;
 8005336:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b08      	cmp	r3, #8
 800533c:	d114      	bne.n	8005368 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800533e:	f7ff ff27 	bl	8005190 <LL_RCC_PLL_GetDivider>
 8005342:	4602      	mov	r2, r0
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	fbb3 f4f2 	udiv	r4, r3, r2
 800534a:	f7ff fef7 	bl	800513c <LL_RCC_PLL_GetN>
 800534e:	4603      	mov	r3, r0
 8005350:	fb03 f404 	mul.w	r4, r3, r4
 8005354:	f7ff ff00 	bl	8005158 <LL_RCC_PLL_GetP>
 8005358:	4603      	mov	r3, r0
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	3301      	adds	r3, #1
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fbb4 f3f3 	udiv	r3, r4, r3
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	e011      	b.n	800538c <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005368:	f7ff ff12 	bl	8005190 <LL_RCC_PLL_GetDivider>
 800536c:	4602      	mov	r2, r0
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	fbb3 f4f2 	udiv	r4, r3, r2
 8005374:	f7ff fee2 	bl	800513c <LL_RCC_PLL_GetN>
 8005378:	4603      	mov	r3, r0
 800537a:	fb03 f404 	mul.w	r4, r3, r4
 800537e:	f7ff fef9 	bl	8005174 <LL_RCC_PLL_GetR>
 8005382:	4603      	mov	r3, r0
 8005384:	0f1b      	lsrs	r3, r3, #28
 8005386:	fbb4 f3f3 	udiv	r3, r4, r3
 800538a:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800538c:	693b      	ldr	r3, [r7, #16]
}
 800538e:	4618      	mov	r0, r3
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}
 8005396:	bf00      	nop
 8005398:	00f42400 	.word	0x00f42400
 800539c:	016e3600 	.word	0x016e3600

080053a0 <LL_USART_IsEnabled>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_USART_SetStopBitsLength>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <LL_USART_SetHWFlowCtrl>:
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	615a      	str	r2, [r3, #20]
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <LL_USART_SetBaudRate>:
{
 8005414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005418:	b0c0      	sub	sp, #256	; 0x100
 800541a:	af00      	add	r7, sp, #0
 800541c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005420:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005424:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005428:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005434:	f040 810c 	bne.w	8005650 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005438:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800543c:	2200      	movs	r2, #0
 800543e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800544a:	4622      	mov	r2, r4
 800544c:	462b      	mov	r3, r5
 800544e:	1891      	adds	r1, r2, r2
 8005450:	6639      	str	r1, [r7, #96]	; 0x60
 8005452:	415b      	adcs	r3, r3
 8005454:	667b      	str	r3, [r7, #100]	; 0x64
 8005456:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800545a:	4621      	mov	r1, r4
 800545c:	eb12 0801 	adds.w	r8, r2, r1
 8005460:	4629      	mov	r1, r5
 8005462:	eb43 0901 	adc.w	r9, r3, r1
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800547a:	4690      	mov	r8, r2
 800547c:	4699      	mov	r9, r3
 800547e:	4623      	mov	r3, r4
 8005480:	eb18 0303 	adds.w	r3, r8, r3
 8005484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005488:	462b      	mov	r3, r5
 800548a:	eb49 0303 	adc.w	r3, r9, r3
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005492:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005496:	2200      	movs	r2, #0
 8005498:	469a      	mov	sl, r3
 800549a:	4693      	mov	fp, r2
 800549c:	eb1a 030a 	adds.w	r3, sl, sl
 80054a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054a2:	eb4b 030b 	adc.w	r3, fp, fp
 80054a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054b0:	f7fa fea8 	bl	8000204 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4b64      	ldr	r3, [pc, #400]	; (800564c <LL_USART_SetBaudRate+0x238>)
 80054ba:	fba3 2302 	umull	r2, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	b29c      	uxth	r4, r3
 80054c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054d0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054d4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	1891      	adds	r1, r2, r2
 80054de:	6539      	str	r1, [r7, #80]	; 0x50
 80054e0:	415b      	adcs	r3, r3
 80054e2:	657b      	str	r3, [r7, #84]	; 0x54
 80054e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054e8:	4641      	mov	r1, r8
 80054ea:	1851      	adds	r1, r2, r1
 80054ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80054ee:	4649      	mov	r1, r9
 80054f0:	414b      	adcs	r3, r1
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005500:	4659      	mov	r1, fp
 8005502:	00cb      	lsls	r3, r1, #3
 8005504:	4651      	mov	r1, sl
 8005506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800550a:	4651      	mov	r1, sl
 800550c:	00ca      	lsls	r2, r1, #3
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	4603      	mov	r3, r0
 8005514:	4642      	mov	r2, r8
 8005516:	189b      	adds	r3, r3, r2
 8005518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800551c:	464b      	mov	r3, r9
 800551e:	460a      	mov	r2, r1
 8005520:	eb42 0303 	adc.w	r3, r2, r3
 8005524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005528:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800552c:	2200      	movs	r2, #0
 800552e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005532:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005536:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800553a:	460b      	mov	r3, r1
 800553c:	18db      	adds	r3, r3, r3
 800553e:	643b      	str	r3, [r7, #64]	; 0x40
 8005540:	4613      	mov	r3, r2
 8005542:	eb42 0303 	adc.w	r3, r2, r3
 8005546:	647b      	str	r3, [r7, #68]	; 0x44
 8005548:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800554c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005550:	f7fa fe58 	bl	8000204 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4611      	mov	r1, r2
 800555a:	4b3c      	ldr	r3, [pc, #240]	; (800564c <LL_USART_SetBaudRate+0x238>)
 800555c:	fba3 2301 	umull	r2, r3, r3, r1
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	2264      	movs	r2, #100	; 0x64
 8005564:	fb02 f303 	mul.w	r3, r2, r3
 8005568:	1acb      	subs	r3, r1, r3
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <LL_USART_SetBaudRate+0x238>)
 8005572:	fba3 2302 	umull	r2, r3, r3, r2
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b29b      	uxth	r3, r3
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005582:	b29b      	uxth	r3, r3
 8005584:	4423      	add	r3, r4
 8005586:	b29c      	uxth	r4, r3
 8005588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800558c:	2200      	movs	r2, #0
 800558e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005592:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005596:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	1891      	adds	r1, r2, r2
 80055a0:	63b9      	str	r1, [r7, #56]	; 0x38
 80055a2:	415b      	adcs	r3, r3
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055aa:	4641      	mov	r1, r8
 80055ac:	1851      	adds	r1, r2, r1
 80055ae:	6339      	str	r1, [r7, #48]	; 0x30
 80055b0:	4649      	mov	r1, r9
 80055b2:	414b      	adcs	r3, r1
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055c2:	4659      	mov	r1, fp
 80055c4:	00cb      	lsls	r3, r1, #3
 80055c6:	4651      	mov	r1, sl
 80055c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055cc:	4651      	mov	r1, sl
 80055ce:	00ca      	lsls	r2, r1, #3
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	4642      	mov	r2, r8
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055de:	464b      	mov	r3, r9
 80055e0:	460a      	mov	r2, r1
 80055e2:	eb42 0303 	adc.w	r3, r2, r3
 80055e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80055ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80055f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80055fc:	460b      	mov	r3, r1
 80055fe:	18db      	adds	r3, r3, r3
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
 8005602:	4613      	mov	r3, r2
 8005604:	eb42 0303 	adc.w	r3, r2, r3
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800560e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005612:	f7fa fdf7 	bl	8000204 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4b0c      	ldr	r3, [pc, #48]	; (800564c <LL_USART_SetBaudRate+0x238>)
 800561c:	fba3 1302 	umull	r1, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2164      	movs	r1, #100	; 0x64
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a07      	ldr	r2, [pc, #28]	; (800564c <LL_USART_SetBaudRate+0x238>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	b29b      	uxth	r3, r3
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	b29b      	uxth	r3, r3
 800563e:	4423      	add	r3, r4
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005648:	609a      	str	r2, [r3, #8]
}
 800564a:	e107      	b.n	800585c <LL_USART_SetBaudRate+0x448>
 800564c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005650:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800565a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800565e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005662:	4642      	mov	r2, r8
 8005664:	464b      	mov	r3, r9
 8005666:	1891      	adds	r1, r2, r2
 8005668:	6239      	str	r1, [r7, #32]
 800566a:	415b      	adcs	r3, r3
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005672:	4641      	mov	r1, r8
 8005674:	1854      	adds	r4, r2, r1
 8005676:	4649      	mov	r1, r9
 8005678:	eb43 0501 	adc.w	r5, r3, r1
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005698:	464b      	mov	r3, r9
 800569a:	eb45 0303 	adc.w	r3, r5, r3
 800569e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80056bc:	4629      	mov	r1, r5
 80056be:	008b      	lsls	r3, r1, #2
 80056c0:	4621      	mov	r1, r4
 80056c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c6:	4621      	mov	r1, r4
 80056c8:	008a      	lsls	r2, r1, #2
 80056ca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80056ce:	f7fa fd99 	bl	8000204 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4b64      	ldr	r3, [pc, #400]	; (8005868 <LL_USART_SetBaudRate+0x454>)
 80056d8:	fba3 2302 	umull	r2, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	b29b      	uxth	r3, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	b29c      	uxth	r4, r3
 80056e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056e8:	2200      	movs	r2, #0
 80056ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056f2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80056f6:	4642      	mov	r2, r8
 80056f8:	464b      	mov	r3, r9
 80056fa:	1891      	adds	r1, r2, r2
 80056fc:	61b9      	str	r1, [r7, #24]
 80056fe:	415b      	adcs	r3, r3
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005706:	4641      	mov	r1, r8
 8005708:	1851      	adds	r1, r2, r1
 800570a:	6139      	str	r1, [r7, #16]
 800570c:	4649      	mov	r1, r9
 800570e:	414b      	adcs	r3, r1
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800571e:	4659      	mov	r1, fp
 8005720:	00cb      	lsls	r3, r1, #3
 8005722:	4651      	mov	r1, sl
 8005724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005728:	4651      	mov	r1, sl
 800572a:	00ca      	lsls	r2, r1, #3
 800572c:	4610      	mov	r0, r2
 800572e:	4619      	mov	r1, r3
 8005730:	4603      	mov	r3, r0
 8005732:	4642      	mov	r2, r8
 8005734:	189b      	adds	r3, r3, r2
 8005736:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800573a:	464b      	mov	r3, r9
 800573c:	460a      	mov	r2, r1
 800573e:	eb42 0303 	adc.w	r3, r2, r3
 8005742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005750:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005760:	4649      	mov	r1, r9
 8005762:	008b      	lsls	r3, r1, #2
 8005764:	4641      	mov	r1, r8
 8005766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800576a:	4641      	mov	r1, r8
 800576c:	008a      	lsls	r2, r1, #2
 800576e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005772:	f7fa fd47 	bl	8000204 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <LL_USART_SetBaudRate+0x454>)
 800577c:	fba3 1302 	umull	r1, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	2164      	movs	r1, #100	; 0x64
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	3332      	adds	r3, #50	; 0x32
 800578e:	4a36      	ldr	r2, [pc, #216]	; (8005868 <LL_USART_SetBaudRate+0x454>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	b29b      	uxth	r3, r3
 8005798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579c:	b29b      	uxth	r3, r3
 800579e:	4423      	add	r3, r4
 80057a0:	b29c      	uxth	r4, r3
 80057a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057a6:	2200      	movs	r2, #0
 80057a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	415b      	adcs	r3, r3
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c0:	4641      	mov	r1, r8
 80057c2:	1851      	adds	r1, r2, r1
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	4649      	mov	r1, r9
 80057c8:	414b      	adcs	r3, r1
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057d8:	4659      	mov	r1, fp
 80057da:	00cb      	lsls	r3, r1, #3
 80057dc:	4651      	mov	r1, sl
 80057de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e2:	4651      	mov	r1, sl
 80057e4:	00ca      	lsls	r2, r1, #3
 80057e6:	4610      	mov	r0, r2
 80057e8:	4619      	mov	r1, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	4642      	mov	r2, r8
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	673b      	str	r3, [r7, #112]	; 0x70
 80057f2:	464b      	mov	r3, r9
 80057f4:	460a      	mov	r2, r1
 80057f6:	eb42 0303 	adc.w	r3, r2, r3
 80057fa:	677b      	str	r3, [r7, #116]	; 0x74
 80057fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005800:	2200      	movs	r2, #0
 8005802:	66bb      	str	r3, [r7, #104]	; 0x68
 8005804:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005806:	f04f 0200 	mov.w	r2, #0
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005812:	4649      	mov	r1, r9
 8005814:	008b      	lsls	r3, r1, #2
 8005816:	4641      	mov	r1, r8
 8005818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581c:	4641      	mov	r1, r8
 800581e:	008a      	lsls	r2, r1, #2
 8005820:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005824:	f7fa fcee 	bl	8000204 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <LL_USART_SetBaudRate+0x454>)
 800582e:	fba3 1302 	umull	r1, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2164      	movs	r1, #100	; 0x64
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	3332      	adds	r3, #50	; 0x32
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <LL_USART_SetBaudRate+0x454>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	b29b      	uxth	r3, r3
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	b29b      	uxth	r3, r3
 8005850:	4423      	add	r3, r4
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005862:	46bd      	mov	sp, r7
 8005864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005868:	51eb851f 	.word	0x51eb851f

0800586c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fd8e 	bl	80053a0 <LL_USART_IsEnabled>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d15e      	bne.n	8005948 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005892:	f023 030c 	bic.w	r3, r3, #12
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	6851      	ldr	r1, [r2, #4]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	68d2      	ldr	r2, [r2, #12]
 800589e:	4311      	orrs	r1, r2
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	6912      	ldr	r2, [r2, #16]
 80058a4:	4311      	orrs	r1, r2
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	6992      	ldr	r2, [r2, #24]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fd85 	bl	80053c8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fd92 	bl	80053ee <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80058ca:	f107 0308 	add.w	r3, r7, #8
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fc6c 	bl	80051ac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <LL_USART_Init+0xe8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d102      	bne.n	80058e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e021      	b.n	8005926 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <LL_USART_Init+0xec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d102      	bne.n	80058f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	e01a      	b.n	8005926 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	; (800595c <LL_USART_Init+0xf0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d102      	bne.n	80058fe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e013      	b.n	8005926 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <LL_USART_Init+0xf4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d102      	bne.n	800590c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	e00c      	b.n	8005926 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a15      	ldr	r2, [pc, #84]	; (8005964 <LL_USART_Init+0xf8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d102      	bne.n	800591a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e005      	b.n	8005926 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a12      	ldr	r2, [pc, #72]	; (8005968 <LL_USART_Init+0xfc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d101      	bne.n	8005926 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005934:	2300      	movs	r3, #0
 8005936:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69b9      	ldr	r1, [r7, #24]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fd66 	bl	8005414 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005948:	7ffb      	ldrb	r3, [r7, #31]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40011000 	.word	0x40011000
 8005958:	40004400 	.word	0x40004400
 800595c:	40004800 	.word	0x40004800
 8005960:	40011400 	.word	0x40011400
 8005964:	40004c00 	.word	0x40004c00
 8005968:	40005000 	.word	0x40005000

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	4d0d      	ldr	r5, [pc, #52]	; (80059a4 <__libc_init_array+0x38>)
 8005970:	4c0d      	ldr	r4, [pc, #52]	; (80059a8 <__libc_init_array+0x3c>)
 8005972:	1b64      	subs	r4, r4, r5
 8005974:	10a4      	asrs	r4, r4, #2
 8005976:	2600      	movs	r6, #0
 8005978:	42a6      	cmp	r6, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	4d0b      	ldr	r5, [pc, #44]	; (80059ac <__libc_init_array+0x40>)
 800597e:	4c0c      	ldr	r4, [pc, #48]	; (80059b0 <__libc_init_array+0x44>)
 8005980:	f000 f820 	bl	80059c4 <_init>
 8005984:	1b64      	subs	r4, r4, r5
 8005986:	10a4      	asrs	r4, r4, #2
 8005988:	2600      	movs	r6, #0
 800598a:	42a6      	cmp	r6, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	f855 3b04 	ldr.w	r3, [r5], #4
 8005994:	4798      	blx	r3
 8005996:	3601      	adds	r6, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	f855 3b04 	ldr.w	r3, [r5], #4
 800599e:	4798      	blx	r3
 80059a0:	3601      	adds	r6, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	08005a1c 	.word	0x08005a1c
 80059a8:	08005a1c 	.word	0x08005a1c
 80059ac:	08005a1c 	.word	0x08005a1c
 80059b0:	08005a20 	.word	0x08005a20

080059b4 <memset>:
 80059b4:	4402      	add	r2, r0
 80059b6:	4603      	mov	r3, r0
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d100      	bne.n	80059be <memset+0xa>
 80059bc:	4770      	bx	lr
 80059be:	f803 1b01 	strb.w	r1, [r3], #1
 80059c2:	e7f9      	b.n	80059b8 <memset+0x4>

080059c4 <_init>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr

080059d0 <_fini>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	bf00      	nop
 80059d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d6:	bc08      	pop	{r3}
 80059d8:	469e      	mov	lr, r3
 80059da:	4770      	bx	lr
