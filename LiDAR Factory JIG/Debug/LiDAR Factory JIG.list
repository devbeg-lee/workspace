
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080079b0  080079b0  000179b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a98  08007a98  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa0  08007aa0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a98  20000014  08007abc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  08007abc  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001630d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ce  00000000  00000000  00036351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00039c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002840f  00000000  00000000  0003be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0d3  00000000  00000000  00064277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed897  00000000  00000000  0007e34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bbe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  0016bc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007998 	.word	0x08007998

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08007998 	.word	0x08007998

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x98>)
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ADC1_Init+0x98>)
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_ADC1_Init+0x98>)
 800056a:	f003 f92d 	bl	80037c8 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fcf6 	bl	8000f64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000580:	2304      	movs	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0x98>)
 800058a:	f003 faff 	bl	8003b8c <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fce6 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	40012000 	.word	0x40012000
 80005a8:	0f000001 	.word	0x0f000001

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if (adcHandle->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d127      	bne.n	800061e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_MspInit+0x84>)
 800061a:	f003 fe89 	bl	8004330 <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <LiDAR_Cur_Check>:
  }
}

/* USER CODE BEGIN 1 */
void LiDAR_Cur_Check(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 800063a:	f003 f909 	bl	8003850 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000642:	f003 fa0a 	bl	8003a5a <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000648:	f003 fa92 	bl	8003b70 <HAL_ADC_GetValue>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000652:	801a      	strh	r2, [r3, #0]
  total_adc_val += adc_val;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
  cnt++;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000672:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000676:	f003 f9bd 	bl	80039f4 <HAL_ADC_Stop>

  Delay_ms(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f88c 	bl	8000798 <Delay_ms>
  if (cnt == ADC_AVG_BUFFER_SIZE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d120      	bne.n	80006cc <LiDAR_Cur_Check+0x98>
  {
    avg_adc_val = total_adc_val / ADC_AVG_BUFFER_SIZE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <LiDAR_Cur_Check+0xac>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069a:	801a      	strh	r2, [r3, #0]
    load_current = avg_adc_val / ADC_OFFSET;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006aa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006e8 <LiDAR_Cur_Check+0xb4>
 80006ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <LiDAR_Cur_Check+0xb8>)
 80006be:	801a      	strh	r2, [r3, #0]
    total_adc_val = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    cnt = 0;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  }
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000003c 	.word	0x2000003c
 80006d4:	20000032 	.word	0x20000032
 80006d8:	20000034 	.word	0x20000034
 80006dc:	20000038 	.word	0x20000038
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	2000003a 	.word	0x2000003a
 80006e8:	4022cbfb 	.word	0x4022cbfb
 80006ec:	20000030 	.word	0x20000030

080006f0 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Delay_us+0x40>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006fe:	f004 f913 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <Delay_us+0x44>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Delay_us+0x40>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f8      	bcc.n	8000716 <Delay_us+0x26>
    	;
  }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0001000 	.word	0xe0001000
 8000734:	431bde83 	.word	0x431bde83

08000738 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <DWT_Delay_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <DWT_Delay_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <DWT_Delay_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <DWT_Delay_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <DWT_Delay_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <DWT_Delay_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile("NOP");
 8000772:	bf00      	nop
  __ASM volatile("NOP");
 8000774:	bf00      	nop
  __ASM volatile("NOP");
 8000776:	bf00      	nop

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <DWT_Delay_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <DWT_Delay_Init+0x4c>
  {
    return 0; /*clock cycle counter started*/
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /*clock cycle counter not started*/
 8000784:	2301      	movs	r3, #1
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa0 	bl	80006f0 <Delay_us>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3302      	adds	r3, #2
 80008de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	43db      	mvns	r3, r3
 80008e8:	ea02 0103 	and.w	r1, r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	fa03 f202 	lsl.w	r2, r3, r2
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	430a      	orrs	r2, r1
 8000912:	3302      	adds	r3, #2
 8000914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013800 	.word	0x40013800

08000928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa93 f3a3 	rbit	r3, r3
 8000942:	613b      	str	r3, [r7, #16]
  return result;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61bb      	str	r3, [r7, #24]
  return result;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	431a      	orrs	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000986:	b480      	push	{r7}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	613b      	str	r3, [r7, #16]
  return result;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa93 f3a3 	rbit	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
  return result;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff ffd5 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	f7ff ffd2 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffcf 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff ffcc 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff ffc9 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a72:	f642 4107 	movw	r1, #11271	; 0x2c07
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000a78:	f7ff ffb4 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	4880      	ldr	r0, [pc, #512]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000a80:	f7ff ffb0 	bl	80009e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 8000a84:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000a88:	487e      	ldr	r0, [pc, #504]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000a8a:	f7ff ffab 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a8e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000a92:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000aaa:	f006 fec5 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000aae:	2382      	movs	r3, #130	; 0x82
 8000ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486e      	ldr	r0, [pc, #440]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000ac8:	f006 feb6 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000acc:	f240 630c 	movw	r3, #1548	; 0x60c
 8000ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000aec:	f006 fea4 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 8000af0:	f641 1370 	movw	r3, #6512	; 0x1970
 8000af4:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	485f      	ldr	r0, [pc, #380]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000b04:	f006 fe98 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4855      	ldr	r0, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000b26:	f006 fe87 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b4a:	f006 fe75 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b6a:	f006 fe65 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b82:	f006 fe59 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000b86:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000b8a:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000ba2:	f006 fe49 	bl	8007838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000bba:	f006 fe3d 	bl	8007838 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000bbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe82 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000bc8:	492f      	ldr	r1, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x254>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe7e 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 fca1 	bl	800752c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f006 fc93 	bl	800752c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c0c:	f7ff febb 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c18:	f7ff feb5 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c22:	f7ff fe81 	bl	8000928 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c2e:	f7ff fe7b 	bl	8000928 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c32:	f7ff fdc1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe11 	bl	8000864 <NVIC_EncodePriority>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fde2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f7ff fdc1 	bl	80007d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c52:	f7ff fdb1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe01 	bl	8000864 <NVIC_EncodePriority>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4619      	mov	r1, r3
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff fdd2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f7ff fdb1 	bl	80007d4 <__NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	f0000003 	.word	0xf0000003

08000c8c <LL_GPIO_SetOutputPin>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ResetOutputPin>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <Delay_us>:
  {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <Delay_us+0x40>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cd6:	f003 fe27 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <Delay_us+0x44>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000cec:	bf00      	nop
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <Delay_us+0x40>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3f8      	bcc.n	8000cee <Delay_us+0x26>
  }
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	431bde83 	.word	0x431bde83

08000d10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f002 fce6 	bl	80036e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f8a6 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fe8a 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d20:	f7ff fbf2 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000d24:	f002 fbb4 	bl	8003490 <MX_UART5_Init>
  MX_TIM3_Init();
 8000d28:	f002 f9b2 	bl	8003090 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000d2c:	f002 fbda 	bl	80034e4 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000d30:	f002 f960 	bl	8002ff4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d34:	f000 f90a 	bl	8000f4c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000d38:	f7ff fcfe 	bl	8000738 <DWT_Delay_Init>

  InitUartQueue(&ViewerQueue);
 8000d3c:	4841      	ldr	r0, [pc, #260]	; (8000e44 <main+0x134>)
 8000d3e:	f001 fa09 	bl	8002154 <InitUartQueue>
  InitUartQueue(&LiDARQueue);
 8000d42:	4841      	ldr	r0, [pc, #260]	; (8000e48 <main+0x138>)
 8000d44:	f001 fa06 	bl	8002154 <InitUartQueue>

  switch_check();
 8000d48:	f002 f8ec 	bl	8002f24 <switch_check>

  __HAL_UART_ENABLE_IT(&hLiDAR, UART_IT_RXNE);
 8000d4c:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <main+0x13c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <main+0x13c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0220 	orr.w	r2, r2, #32
 8000d5a:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    if (tx_start_flag == 0)
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <main+0x140>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d12f      	bne.n	8000dc6 <main+0xb6>
    {
      switch (g_Status)
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <main+0x144>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d866      	bhi.n	8000e3e <main+0x12e>
 8000d70:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <main+0x68>)
 8000d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d76:	bf00      	nop
 8000d78:	08000d95 	.word	0x08000d95
 8000d7c:	08000d9b 	.word	0x08000d9b
 8000d80:	08000da1 	.word	0x08000da1
 8000d84:	08000da7 	.word	0x08000da7
 8000d88:	08000dad 	.word	0x08000dad
 8000d8c:	08000db3 	.word	0x08000db3
 8000d90:	08000db9 	.word	0x08000db9
      {
      case kStatus_Info:
        Info_status();
 8000d94:	f001 fa84 	bl	80022a0 <Info_status>
        break;
 8000d98:	e052      	b.n	8000e40 <main+0x130>

      case kStatus_Detect1:
        Detect1_status();
 8000d9a:	f001 faeb 	bl	8002374 <Detect1_status>
        break;
 8000d9e:	e04f      	b.n	8000e40 <main+0x130>

      case kStatus_Detect2:
        Detect2_status();
 8000da0:	f001 fb32 	bl	8002408 <Detect2_status>
        break;
 8000da4:	e04c      	b.n	8000e40 <main+0x130>

      case kStatus_Detect3:
        Detect3_status();
 8000da6:	f001 fb6f 	bl	8002488 <Detect3_status>
        break;
 8000daa:	e049      	b.n	8000e40 <main+0x130>

      case kStatus_Idle:
        Idle_status();
 8000dac:	f001 fbd0 	bl	8002550 <Idle_status>
        break;
 8000db0:	e046      	b.n	8000e40 <main+0x130>

      case kStatus_Test:

        Test_status();
 8000db2:	f001 fd5b 	bl	800286c <Test_status>
        break;
 8000db6:	e043      	b.n	8000e40 <main+0x130>

      case kStatus_Result:
        result(g_Result);
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <main+0x148>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fba0 	bl	8001504 <result>
        break;
 8000dc4:	e03c      	b.n	8000e40 <main+0x130>
        break;
      }
    }
    else // LD Tx On
    {
      if (stop_feedback == 0)
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <main+0x14c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d129      	bne.n	8000e22 <main+0x112>
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <main+0x150>)
 8000dd4:	f7ff ff5a 	bl	8000c8c <LL_GPIO_SetOutputPin>
        stop_feedback = HAL_GPIO_ReadPin(FB_STOP1_SIG_GPIO_Port, FB_STOP1_SIG_Pin);
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4820      	ldr	r0, [pc, #128]	; (8000e60 <main+0x150>)
 8000dde:	f003 fc3b 	bl	8004658 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <main+0x14c>)
 8000de8:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dee:	481c      	ldr	r0, [pc, #112]	; (8000e60 <main+0x150>)
 8000df0:	f7ff ff5a 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        feedback_ng_cnt++;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <main+0x154>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <main+0x154>)
 8000dfe:	701a      	strb	r2, [r3, #0]
        if (feedback_ng_cnt >= 5)
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <main+0x154>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d908      	bls.n	8000e1a <main+0x10a>
        {
          result(kResult_Err_11);
 8000e08:	200c      	movs	r0, #12
 8000e0a:	f000 fb7b 	bl	8001504 <result>
          stop_feedback = 1;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <main+0x14c>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
          feedback_ng_cnt = 0;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <main+0x154>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
        }
        Delay_us(20);
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f7ff ff54 	bl	8000cc8 <Delay_us>
 8000e20:	e79c      	b.n	8000d5c <main+0x4c>
      }
      else
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <main+0x150>)
 8000e28:	f7ff ff30 	bl	8000c8c <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <main+0x150>)
 8000e32:	f7ff ff39 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        Delay_us(20);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ff46 	bl	8000cc8 <Delay_us>
 8000e3c:	e78e      	b.n	8000d5c <main+0x4c>
        break;
 8000e3e:	bf00      	nop
    if (tx_start_flag == 0)
 8000e40:	e78c      	b.n	8000d5c <main+0x4c>
 8000e42:	bf00      	nop
 8000e44:	20000478 	.word	0x20000478
 8000e48:	20000088 	.word	0x20000088
 8000e4c:	20000a64 	.word	0x20000a64
 8000e50:	2000098a 	.word	0x2000098a
 8000e54:	20000084 	.word	0x20000084
 8000e58:	20000087 	.word	0x20000087
 8000e5c:	20000085 	.word	0x20000085
 8000e60:	40020400 	.word	0x40020400
 8000e64:	20000086 	.word	0x20000086

08000e68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2234      	movs	r2, #52	; 0x34
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f006 fd86 	bl	8007988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <SystemClock_Config+0xdc>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <SystemClock_Config+0xdc>)
 8000e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <SystemClock_Config+0xdc>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <SystemClock_Config+0xe0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <SystemClock_Config+0xe0>)
 8000eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <SystemClock_Config+0xe0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000edc:	23b4      	movs	r3, #180	; 0xb4
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f003 fef7 	bl	8004ce4 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000efc:	f000 f832 	bl	8000f64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f00:	f003 fbdc 	bl	80046bc <HAL_PWREx_EnableOverDrive>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f0a:	f000 f82b 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f0e:	230f      	movs	r3, #15
 8000f10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000f12:	2303      	movs	r3, #3
 8000f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	2105      	movs	r1, #5
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fc15 	bl	800475c <HAL_RCC_ClockConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f38:	f000 f814 	bl	8000f64 <Error_Handler>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3750      	adds	r7, #80	; 0x50
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40007000 	.word	0x40007000

08000f4c <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	201c      	movs	r0, #28
 8000f56:	f003 f922 	bl	800419e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f003 f93b 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	d85d      	bhi.n	8001052 <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000f96:	7cfb      	ldrb	r3, [r7, #19]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	74fa      	strb	r2, [r7, #19]
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	443b      	add	r3, r7
 8000fa0:	22fa      	movs	r2, #250	; 0xfa
 8000fa2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000fa6:	7cfb      	ldrb	r3, [r7, #19]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	74fa      	strb	r2, [r7, #19]
 8000fac:	3318      	adds	r3, #24
 8000fae:	443b      	add	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000fb6:	7cfb      	ldrb	r3, [r7, #19]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	74fa      	strb	r2, [r7, #19]
 8000fbc:	3318      	adds	r3, #24
 8000fbe:	443b      	add	r3, r7
 8000fc0:	22d0      	movs	r2, #208	; 0xd0
 8000fc2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000fc6:	7cfb      	ldrb	r3, [r7, #19]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	74fa      	strb	r2, [r7, #19]
 8000fcc:	3318      	adds	r3, #24
 8000fce:	443b      	add	r3, r7
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000fd6:	7cfb      	ldrb	r3, [r7, #19]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	74fa      	strb	r2, [r7, #19]
 8000fdc:	3318      	adds	r3, #24
 8000fde:	443b      	add	r3, r7
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fe6:	7cfb      	ldrb	r3, [r7, #19]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	74fa      	strb	r2, [r7, #19]
 8000fec:	3318      	adds	r3, #24
 8000fee:	443b      	add	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	74fa      	strb	r2, [r7, #19]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	443b      	add	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	74fa      	strb	r2, [r7, #19]
 800100c:	3318      	adds	r3, #24
 800100e:	443b      	add	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001016:	7a3b      	ldrb	r3, [r7, #8]
 8001018:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800101a:	2301      	movs	r3, #1
 800101c:	82bb      	strh	r3, [r7, #20]
 800101e:	e00a      	b.n	8001036 <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8001020:	8abb      	ldrh	r3, [r7, #20]
 8001022:	3318      	adds	r3, #24
 8001024:	443b      	add	r3, r7
 8001026:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	4053      	eors	r3, r2
 800102e:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001030:	8abb      	ldrh	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	82bb      	strh	r3, [r7, #20]
 8001036:	7cfb      	ldrb	r3, [r7, #19]
 8001038:	b29b      	uxth	r3, r3
 800103a:	8aba      	ldrh	r2, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3ef      	bcc.n	8001020 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8001040:	7cfb      	ldrb	r3, [r7, #19]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	74fa      	strb	r2, [r7, #19]
 8001046:	3318      	adds	r3, #24
 8001048:	443b      	add	r3, r7
 800104a:	7dfa      	ldrb	r2, [r7, #23]
 800104c:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001050:	e000      	b.n	8001054 <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 8001052:	bf00      	nop
    }
    HAL_UART_Transmit(&hLiDAR, senddata, sizeof(senddata), 3000);
 8001054:	f107 0108 	add.w	r1, r7, #8
 8001058:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800105c:	2209      	movs	r2, #9
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <LiDAR_Protocol_Tx+0xfc>)
 8001060:	f005 fa05 	bl	800646e <HAL_UART_Transmit>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000a64 	.word	0x20000a64

08001070 <GUI_Protocol_Tx>:

void GUI_Protocol_Tx(uint8_t parameter, uint8_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <GUI_Protocol_Tx+0x36>
 800109c:	2b00      	cmp	r3, #0
 800109e:	db60      	blt.n	8001162 <GUI_Protocol_Tx+0xf2>
 80010a0:	3b02      	subs	r3, #2
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d85d      	bhi.n	8001162 <GUI_Protocol_Tx+0xf2>
    case GUI_COMMAND_MOT_SPEED:
    case GUI_COMMAND_ENC_CHECK:
    case GUI_COMMAND_TDC_INIT:
    case GUI_COMMAND_TDC_CAL:

        senddata[cnt++] = PROTOCOL_HEADER;
 80010a6:	7cfb      	ldrb	r3, [r7, #19]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	74fa      	strb	r2, [r7, #19]
 80010ac:	3318      	adds	r3, #24
 80010ae:	443b      	add	r3, r7
 80010b0:	22fa      	movs	r2, #250	; 0xfa
 80010b2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	74fa      	strb	r2, [r7, #19]
 80010bc:	3318      	adds	r3, #24
 80010be:	443b      	add	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80010c6:	7cfb      	ldrb	r3, [r7, #19]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	74fa      	strb	r2, [r7, #19]
 80010cc:	3318      	adds	r3, #24
 80010ce:	443b      	add	r3, r7
 80010d0:	22d0      	movs	r2, #208	; 0xd0
 80010d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	74fa      	strb	r2, [r7, #19]
 80010dc:	3318      	adds	r3, #24
 80010de:	443b      	add	r3, r7
 80010e0:	22f0      	movs	r2, #240	; 0xf0
 80010e2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	74fa      	strb	r2, [r7, #19]
 80010ec:	3318      	adds	r3, #24
 80010ee:	443b      	add	r3, r7
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 80010f6:	7cfb      	ldrb	r3, [r7, #19]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	74fa      	strb	r2, [r7, #19]
 80010fc:	3318      	adds	r3, #24
 80010fe:	443b      	add	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x01U;
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	74fa      	strb	r2, [r7, #19]
 800110c:	3318      	adds	r3, #24
 800110e:	443b      	add	r3, r7
 8001110:	2201      	movs	r2, #1
 8001112:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data; // 0x00 : OK, 0x01 : FAIL / ACK
 8001116:	7cfb      	ldrb	r3, [r7, #19]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	74fa      	strb	r2, [r7, #19]
 800111c:	3318      	adds	r3, #24
 800111e:	443b      	add	r3, r7
 8001120:	79ba      	ldrb	r2, [r7, #6]
 8001122:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001126:	7a3b      	ldrb	r3, [r7, #8]
 8001128:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800112a:	2301      	movs	r3, #1
 800112c:	82bb      	strh	r3, [r7, #20]
 800112e:	e00a      	b.n	8001146 <GUI_Protocol_Tx+0xd6>
        {
            checksum ^= senddata[i];
 8001130:	8abb      	ldrh	r3, [r7, #20]
 8001132:	3318      	adds	r3, #24
 8001134:	443b      	add	r3, r7
 8001136:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	4053      	eors	r3, r2
 800113e:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	82bb      	strh	r3, [r7, #20]
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	b29b      	uxth	r3, r3
 800114a:	8aba      	ldrh	r2, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3ef      	bcc.n	8001130 <GUI_Protocol_Tx+0xc0>
        }
        senddata[cnt++] = checksum;
 8001150:	7cfb      	ldrb	r3, [r7, #19]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	74fa      	strb	r2, [r7, #19]
 8001156:	3318      	adds	r3, #24
 8001158:	443b      	add	r3, r7
 800115a:	7dfa      	ldrb	r2, [r7, #23]
 800115c:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001160:	e000      	b.n	8001164 <GUI_Protocol_Tx+0xf4>
    default:
        break;
 8001162:	bf00      	nop
    }
    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001164:	f107 0108 	add.w	r1, r7, #8
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2209      	movs	r2, #9
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <GUI_Protocol_Tx+0x10c>)
 800116e:	f005 f97e 	bl	800646e <HAL_UART_Transmit>
    //    UART_Transmit(UART5, senddata, sizeof(senddata));
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000a20 	.word	0x20000a20

08001180 <GUI_Protocol_Mode_Tx>:

void GUI_Protocol_Mode_Tx(uint8_t data) // ADC Cur 추가
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[10] = {0};
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	809a      	strh	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 80011a0:	7cfb      	ldrb	r3, [r7, #19]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	74fa      	strb	r2, [r7, #19]
 80011a6:	3318      	adds	r3, #24
 80011a8:	443b      	add	r3, r7
 80011aa:	22fa      	movs	r2, #250	; 0xfa
 80011ac:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 80011b0:	7cfb      	ldrb	r3, [r7, #19]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	74fa      	strb	r2, [r7, #19]
 80011b6:	3318      	adds	r3, #24
 80011b8:	443b      	add	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	74fa      	strb	r2, [r7, #19]
 80011c6:	3318      	adds	r3, #24
 80011c8:	443b      	add	r3, r7
 80011ca:	22d0      	movs	r2, #208	; 0xd0
 80011cc:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_MODE;
 80011d0:	7cfb      	ldrb	r3, [r7, #19]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	74fa      	strb	r2, [r7, #19]
 80011d6:	3318      	adds	r3, #24
 80011d8:	443b      	add	r3, r7
 80011da:	22f0      	movs	r2, #240	; 0xf0
 80011dc:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_COMMAND_MODE;
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	74fa      	strb	r2, [r7, #19]
 80011e6:	3318      	adds	r3, #24
 80011e8:	443b      	add	r3, r7
 80011ea:	2201      	movs	r2, #1
 80011ec:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	74fa      	strb	r2, [r7, #19]
 80011f6:	3318      	adds	r3, #24
 80011f8:	443b      	add	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	74fa      	strb	r2, [r7, #19]
 8001206:	3318      	adds	r3, #24
 8001208:	443b      	add	r3, r7
 800120a:	2201      	movs	r2, #1
 800120c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : Factory JIG MODE, 0x01 : Tx MODE
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	74fa      	strb	r2, [r7, #19]
 8001216:	3318      	adds	r3, #24
 8001218:	443b      	add	r3, r7
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = load_current;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <GUI_Protocol_Mode_Tx+0x108>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
 8001226:	7cfb      	ldrb	r3, [r7, #19]
 8001228:	1c59      	adds	r1, r3, #1
 800122a:	74f9      	strb	r1, [r7, #19]
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	3318      	adds	r3, #24
 8001230:	443b      	add	r3, r7
 8001232:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 8001236:	7a3b      	ldrb	r3, [r7, #8]
 8001238:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 800123a:	2301      	movs	r3, #1
 800123c:	82bb      	strh	r3, [r7, #20]
 800123e:	e00a      	b.n	8001256 <GUI_Protocol_Mode_Tx+0xd6>
    {
        checksum ^= senddata[i];
 8001240:	8abb      	ldrh	r3, [r7, #20]
 8001242:	3318      	adds	r3, #24
 8001244:	443b      	add	r3, r7
 8001246:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	4053      	eors	r3, r2
 800124e:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001250:	8abb      	ldrh	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	82bb      	strh	r3, [r7, #20]
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	b29b      	uxth	r3, r3
 800125a:	8aba      	ldrh	r2, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3ef      	bcc.n	8001240 <GUI_Protocol_Mode_Tx+0xc0>
    }
    senddata[cnt++] = checksum;
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	74fa      	strb	r2, [r7, #19]
 8001266:	3318      	adds	r3, #24
 8001268:	443b      	add	r3, r7
 800126a:	7dfa      	ldrb	r2, [r7, #23]
 800126c:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001270:	f107 0108 	add.w	r1, r7, #8
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	220a      	movs	r2, #10
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <GUI_Protocol_Mode_Tx+0x10c>)
 800127a:	f005 f8f8 	bl	800646e <HAL_UART_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000030 	.word	0x20000030
 800128c:	20000a20 	.word	0x20000a20

08001290 <GUI_Protocol_Detect_Tx>:

void GUI_Protocol_Detect_Tx(uint8_t parameter, uint8_t data)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	711a      	strb	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 80012b6:	7cfb      	ldrb	r3, [r7, #19]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	74fa      	strb	r2, [r7, #19]
 80012bc:	3318      	adds	r3, #24
 80012be:	443b      	add	r3, r7
 80012c0:	22fa      	movs	r2, #250	; 0xfa
 80012c2:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 80012c6:	7cfb      	ldrb	r3, [r7, #19]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	74fa      	strb	r2, [r7, #19]
 80012cc:	3318      	adds	r3, #24
 80012ce:	443b      	add	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 80012d6:	7cfb      	ldrb	r3, [r7, #19]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	74fa      	strb	r2, [r7, #19]
 80012dc:	3318      	adds	r3, #24
 80012de:	443b      	add	r3, r7
 80012e0:	22d0      	movs	r2, #208	; 0xd0
 80012e2:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = LIDAR_MODE;
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	74fa      	strb	r2, [r7, #19]
 80012ec:	3318      	adds	r3, #24
 80012ee:	443b      	add	r3, r7
 80012f0:	220f      	movs	r2, #15
 80012f2:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = parameter;
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	74fa      	strb	r2, [r7, #19]
 80012fc:	3318      	adds	r3, #24
 80012fe:	443b      	add	r3, r7
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 8001306:	7cfb      	ldrb	r3, [r7, #19]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	74fa      	strb	r2, [r7, #19]
 800130c:	3318      	adds	r3, #24
 800130e:	443b      	add	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 8001316:	7cfb      	ldrb	r3, [r7, #19]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	74fa      	strb	r2, [r7, #19]
 800131c:	3318      	adds	r3, #24
 800131e:	443b      	add	r3, r7
 8001320:	2201      	movs	r2, #1
 8001322:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : FAIL, 0x01 : OK
 8001326:	7cfb      	ldrb	r3, [r7, #19]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	74fa      	strb	r2, [r7, #19]
 800132c:	3318      	adds	r3, #24
 800132e:	443b      	add	r3, r7
 8001330:	79ba      	ldrb	r2, [r7, #6]
 8001332:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 8001336:	7a3b      	ldrb	r3, [r7, #8]
 8001338:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 800133a:	2301      	movs	r3, #1
 800133c:	82bb      	strh	r3, [r7, #20]
 800133e:	e00a      	b.n	8001356 <GUI_Protocol_Detect_Tx+0xc6>
    {
        checksum ^= senddata[i];
 8001340:	8abb      	ldrh	r3, [r7, #20]
 8001342:	3318      	adds	r3, #24
 8001344:	443b      	add	r3, r7
 8001346:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	4053      	eors	r3, r2
 800134e:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001350:	8abb      	ldrh	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	82bb      	strh	r3, [r7, #20]
 8001356:	7cfb      	ldrb	r3, [r7, #19]
 8001358:	b29b      	uxth	r3, r3
 800135a:	8aba      	ldrh	r2, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3ef      	bcc.n	8001340 <GUI_Protocol_Detect_Tx+0xb0>
    }
    senddata[cnt++] = checksum;
 8001360:	7cfb      	ldrb	r3, [r7, #19]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	74fa      	strb	r2, [r7, #19]
 8001366:	3318      	adds	r3, #24
 8001368:	443b      	add	r3, r7
 800136a:	7dfa      	ldrb	r2, [r7, #23]
 800136c:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001370:	f107 0108 	add.w	r1, r7, #8
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	2209      	movs	r2, #9
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <GUI_Protocol_Detect_Tx+0xf8>)
 800137a:	f005 f878 	bl	800646e <HAL_UART_Transmit>
}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000a20 	.word	0x20000a20

0800138c <LL_GPIO_SetOutputPin>:
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	619a      	str	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_GPIO_ResetOutputPin>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <fail_sound>:
extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;
int duty_freq = 3500000;

void fail_sound(uint8_t i)
{
 80013c8:	b4b0      	push	{r4, r5, r7}
 80013ca:	b08b      	sub	sp, #44	; 0x2c
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2 || i == 4 || i == 6)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <fail_sound+0x22>
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d005      	beq.n	80013ea <fail_sound+0x22>
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d002      	beq.n	80013ea <fail_sound+0x22>
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d134      	bne.n	8001454 <fail_sound+0x8c>
    {
        unsigned int fail_sound[] = {T5, T5, T5, T5, T5, T5, T5, T5}; //수정 중
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <fail_sound+0xa0>)
 80013ec:	f107 0408 	add.w	r4, r7, #8
 80013f0:	461d      	mov	r5, r3
 80013f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <fail_sound+0xa4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3328      	adds	r3, #40	; 0x28
 800140a:	443b      	add	r3, r7
 800140c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <fail_sound+0xa8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fbb1 f2f2 	udiv	r2, r1, r2
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <fail_sound+0xa4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	3328      	adds	r3, #40	; 0x28
 8001426:	443b      	add	r3, r7
 8001428:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <fail_sound+0xa8>)
 8001432:	60d3      	str	r3, [r2, #12]
        //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_freq / fail_sound[i] / 2);
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <fail_sound+0xac>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	3328      	adds	r3, #40	; 0x28
 8001440:	443b      	add	r3, r7
 8001442:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001446:	fbb2 f2f3 	udiv	r2, r2, r3
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <fail_sound+0xa8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	0852      	lsrs	r2, r2, #1
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 8001452:	e004      	b.n	800145e <fail_sound+0x96>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <fail_sound+0xa8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	372c      	adds	r7, #44	; 0x2c
 8001462:	46bd      	mov	sp, r7
 8001464:	bcb0      	pop	{r4, r5, r7}
 8001466:	4770      	bx	lr
 8001468:	080079b0 	.word	0x080079b0
 800146c:	20000000 	.word	0x20000000
 8001470:	200009d8 	.word	0x200009d8
 8001474:	20000004 	.word	0x20000004

08001478 <pass_sound>:

void pass_sound(uint8_t i)
{
 8001478:	b4b0      	push	{r4, r5, r7}
 800147a:	b08b      	sub	sp, #44	; 0x2c
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C5, E5, G5, C6, C5, E5, G5, C6};
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <pass_sound+0x7c>)
 8001484:	f107 0408 	add.w	r4, r7, #8
 8001488:	461d      	mov	r5, r3
 800148a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800148c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <pass_sound+0x80>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3328      	adds	r3, #40	; 0x28
 80014a2:	443b      	add	r3, r7
 80014a4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <pass_sound+0x84>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fbb1 f2f2 	udiv	r2, r1, r2
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <pass_sound+0x80>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	3328      	adds	r3, #40	; 0x28
 80014be:	443b      	add	r3, r7
 80014c0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <pass_sound+0x84>)
 80014ca:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_freq / pass_sound[i] / 2);
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <pass_sound+0x88>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	3328      	adds	r3, #40	; 0x28
 80014d8:	443b      	add	r3, r7
 80014da:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80014de:	fbb2 f2f3 	udiv	r2, r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <pass_sound+0x84>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0852      	lsrs	r2, r2, #1
 80014e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014ea:	bf00      	nop
 80014ec:	372c      	adds	r7, #44	; 0x2c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bcb0      	pop	{r4, r5, r7}
 80014f2:	4770      	bx	lr
 80014f4:	080079d0 	.word	0x080079d0
 80014f8:	20000000 	.word	0x20000000
 80014fc:	200009d8 	.word	0x200009d8
 8001500:	20000004 	.word	0x20000004

08001504 <result>:

void result(uint8_t data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
    g_Result = data;
 800150e:	4ad7      	ldr	r2, [pc, #860]	; (800186c <result+0x368>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	7013      	strb	r3, [r2, #0]

    switch (g_Result)
 8001514:	4bd5      	ldr	r3, [pc, #852]	; (800186c <result+0x368>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b0d      	cmp	r3, #13
 800151c:	f200 8328 	bhi.w	8001b70 <result+0x66c>
 8001520:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <result+0x24>)
 8001522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001526:	bf00      	nop
 8001528:	08001561 	.word	0x08001561
 800152c:	08001587 	.word	0x08001587
 8001530:	08001603 	.word	0x08001603
 8001534:	08001683 	.word	0x08001683
 8001538:	08001703 	.word	0x08001703
 800153c:	08001783 	.word	0x08001783
 8001540:	080017f1 	.word	0x080017f1
 8001544:	0800185f 	.word	0x0800185f
 8001548:	080018dd 	.word	0x080018dd
 800154c:	0800194b 	.word	0x0800194b
 8001550:	080019b9 	.word	0x080019b9
 8001554:	08001a27 	.word	0x08001a27
 8001558:	08001a95 	.word	0x08001a95
 800155c:	08001b03 	.word	0x08001b03
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001560:	2104      	movs	r1, #4
 8001562:	48c3      	ldr	r0, [pc, #780]	; (8001870 <result+0x36c>)
 8001564:	f7ff ff20 	bl	80013a8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001568:	2120      	movs	r1, #32
 800156a:	48c2      	ldr	r0, [pc, #776]	; (8001874 <result+0x370>)
 800156c:	f7ff ff1c 	bl	80013a8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001574:	48be      	ldr	r0, [pc, #760]	; (8001870 <result+0x36c>)
 8001576:	f7ff ff17 	bl	80013a8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800157a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800157e:	48bc      	ldr	r0, [pc, #752]	; (8001870 <result+0x36c>)
 8001580:	f7ff ff12 	bl	80013a8 <LL_GPIO_ResetOutputPin>
        break;
 8001584:	e2f5      	b.n	8001b72 <result+0x66e>

    case kResult_Pass:
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001586:	2108      	movs	r1, #8
 8001588:	48bb      	ldr	r0, [pc, #748]	; (8001878 <result+0x374>)
 800158a:	f003 ff91 	bl	80054b0 <HAL_TIM_PWM_Start>
        for (uint8_t j = 0; j <= 7; j++)
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001594:	e030      	b.n	80015f8 <result+0xf4>
        {
            pass_sound(j);
 8001596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff6c 	bl	8001478 <pass_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015a6:	e01e      	b.n	80015e6 <result+0xe2>
            {
                FND_1();
 80015a8:	f000 fafa 	bl	8001ba0 <FND_1>
                FND_P();
 80015ac:	f000 fb60 	bl	8001c70 <FND_P>
                Delay_ms(1);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff f8f1 	bl	8000798 <Delay_ms>
                FND_2();
 80015b6:	f000 fb0d 	bl	8001bd4 <FND_2>
                FND_A();
 80015ba:	f000 fb81 	bl	8001cc0 <FND_A>
                Delay_ms(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff f8ea 	bl	8000798 <Delay_ms>
                FND_3();
 80015c4:	f000 fb20 	bl	8001c08 <FND_3>
                FND_S();
 80015c8:	f000 fba2 	bl	8001d10 <FND_S>
                Delay_ms(1);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff f8e3 	bl	8000798 <Delay_ms>
                FND_4();
 80015d2:	f000 fb33 	bl	8001c3c <FND_4>
                Delay_ms(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff f8de 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 80015dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015e0:	3301      	adds	r3, #1
 80015e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ea:	2b7d      	cmp	r3, #125	; 0x7d
 80015ec:	d9dc      	bls.n	80015a8 <result+0xa4>
        for (uint8_t j = 0; j <= 7; j++)
 80015ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f2:	3301      	adds	r3, #1
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015fc:	2b07      	cmp	r3, #7
 80015fe:	d9ca      	bls.n	8001596 <result+0x92>
            }
        }
        break;
 8001600:	e2b7      	b.n	8001b72 <result+0x66e>

    case kResult_Err_1: // UART Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001602:	2108      	movs	r1, #8
 8001604:	489c      	ldr	r0, [pc, #624]	; (8001878 <result+0x374>)
 8001606:	f003 ff53 	bl	80054b0 <HAL_TIM_PWM_Start>
        for (uint8_t j = 0; j <= 7; j++)
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001610:	e032      	b.n	8001678 <result+0x174>
        {
            fail_sound(j);
 8001612:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fed6 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 800161c:	2301      	movs	r3, #1
 800161e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001622:	e020      	b.n	8001666 <result+0x162>
            {
                FND_1();
 8001624:	f000 fabc 	bl	8001ba0 <FND_1>
                FND_E();
 8001628:	f000 fb9a 	bl	8001d60 <FND_E>
                Delay_ms(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff f8b3 	bl	8000798 <Delay_ms>
                FND_2();
 8001632:	f000 facf 	bl	8001bd4 <FND_2>
                FND_r();
 8001636:	f000 fbbb 	bl	8001db0 <FND_r>
                Delay_ms(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff f8ac 	bl	8000798 <Delay_ms>
                FND_3();
 8001640:	f000 fae2 	bl	8001c08 <FND_3>
                FND_zero();
 8001644:	f000 fbdc 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 8001648:	2001      	movs	r0, #1
 800164a:	f7ff f8a5 	bl	8000798 <Delay_ms>
                FND_4();
 800164e:	f000 faf5 	bl	8001c3c <FND_4>
                FND_one();
 8001652:	f000 fbfd 	bl	8001e50 <FND_one>
                Delay_ms(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff f89e 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800165c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800166a:	2b7d      	cmp	r3, #125	; 0x7d
 800166c:	d9da      	bls.n	8001624 <result+0x120>
        for (uint8_t j = 0; j <= 7; j++)
 800166e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001672:	3301      	adds	r3, #1
 8001674:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001678:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800167c:	2b07      	cmp	r3, #7
 800167e:	d9c8      	bls.n	8001612 <result+0x10e>
            }
        }
        break;
 8001680:	e277      	b.n	8001b72 <result+0x66e>

    case kResult_Err_2: // Detect Pin 1 Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001682:	2108      	movs	r1, #8
 8001684:	487c      	ldr	r0, [pc, #496]	; (8001878 <result+0x374>)
 8001686:	f003 ff13 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001690:	e032      	b.n	80016f8 <result+0x1f4>
        {
            fail_sound(j);
 8001692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe96 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 800169c:	2301      	movs	r3, #1
 800169e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016a2:	e020      	b.n	80016e6 <result+0x1e2>
            {
                FND_1();
 80016a4:	f000 fa7c 	bl	8001ba0 <FND_1>
                FND_E();
 80016a8:	f000 fb5a 	bl	8001d60 <FND_E>
                Delay_ms(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff f873 	bl	8000798 <Delay_ms>
                FND_2();
 80016b2:	f000 fa8f 	bl	8001bd4 <FND_2>
                FND_r();
 80016b6:	f000 fb7b 	bl	8001db0 <FND_r>
                Delay_ms(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff f86c 	bl	8000798 <Delay_ms>
                FND_3();
 80016c0:	f000 faa2 	bl	8001c08 <FND_3>
                FND_zero();
 80016c4:	f000 fb9c 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff f865 	bl	8000798 <Delay_ms>
                FND_4();
 80016ce:	f000 fab5 	bl	8001c3c <FND_4>
                FND_two();
 80016d2:	f000 fbe5 	bl	8001ea0 <FND_two>
                Delay_ms(1);
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff f85e 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 80016dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016e0:	3301      	adds	r3, #1
 80016e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016ea:	2b7d      	cmp	r3, #125	; 0x7d
 80016ec:	d9da      	bls.n	80016a4 <result+0x1a0>
        for (uint8_t j = 0; j <= 7; j++)
 80016ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016f2:	3301      	adds	r3, #1
 80016f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fc:	2b07      	cmp	r3, #7
 80016fe:	d9c8      	bls.n	8001692 <result+0x18e>
            }
        }
        break;
 8001700:	e237      	b.n	8001b72 <result+0x66e>
    case kResult_Err_3: // Detect Pin 2 Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001702:	2108      	movs	r1, #8
 8001704:	485c      	ldr	r0, [pc, #368]	; (8001878 <result+0x374>)
 8001706:	f003 fed3 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001710:	e032      	b.n	8001778 <result+0x274>
        {
            fail_sound(j);
 8001712:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe56 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3020 	strb.w	r3, [r7, #32]
 8001722:	e020      	b.n	8001766 <result+0x262>
            {
                FND_1();
 8001724:	f000 fa3c 	bl	8001ba0 <FND_1>
                FND_E();
 8001728:	f000 fb1a 	bl	8001d60 <FND_E>
                Delay_ms(1);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff f833 	bl	8000798 <Delay_ms>
                FND_2();
 8001732:	f000 fa4f 	bl	8001bd4 <FND_2>
                FND_r();
 8001736:	f000 fb3b 	bl	8001db0 <FND_r>
                Delay_ms(1);
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff f82c 	bl	8000798 <Delay_ms>
                FND_3();
 8001740:	f000 fa62 	bl	8001c08 <FND_3>
                FND_zero();
 8001744:	f000 fb5c 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff f825 	bl	8000798 <Delay_ms>
                FND_4();
 800174e:	f000 fa75 	bl	8001c3c <FND_4>
                FND_three();
 8001752:	f000 fbcd 	bl	8001ef0 <FND_three>
                Delay_ms(1);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff f81e 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800175c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001760:	3301      	adds	r3, #1
 8001762:	f887 3020 	strb.w	r3, [r7, #32]
 8001766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176a:	2b7d      	cmp	r3, #125	; 0x7d
 800176c:	d9da      	bls.n	8001724 <result+0x220>
        for (uint8_t j = 0; j <= 7; j++)
 800176e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001772:	3301      	adds	r3, #1
 8001774:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001778:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800177c:	2b07      	cmp	r3, #7
 800177e:	d9c8      	bls.n	8001712 <result+0x20e>
            }
        }
        break;
 8001780:	e1f7      	b.n	8001b72 <result+0x66e>
    case kResult_Err_4: // Err Pin Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001782:	2108      	movs	r1, #8
 8001784:	483c      	ldr	r0, [pc, #240]	; (8001878 <result+0x374>)
 8001786:	f003 fe93 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 800178a:	2300      	movs	r3, #0
 800178c:	77fb      	strb	r3, [r7, #31]
 800178e:	e02b      	b.n	80017e8 <result+0x2e4>
        {
            fail_sound(j);
 8001790:	7ffb      	ldrb	r3, [r7, #31]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fe18 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001798:	2301      	movs	r3, #1
 800179a:	77bb      	strb	r3, [r7, #30]
 800179c:	e01e      	b.n	80017dc <result+0x2d8>
            {
                FND_1();
 800179e:	f000 f9ff 	bl	8001ba0 <FND_1>
                FND_E();
 80017a2:	f000 fadd 	bl	8001d60 <FND_E>
                Delay_ms(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7fe fff6 	bl	8000798 <Delay_ms>
                FND_2();
 80017ac:	f000 fa12 	bl	8001bd4 <FND_2>
                FND_r();
 80017b0:	f000 fafe 	bl	8001db0 <FND_r>
                Delay_ms(1);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7fe ffef 	bl	8000798 <Delay_ms>
                FND_3();
 80017ba:	f000 fa25 	bl	8001c08 <FND_3>
                FND_zero();
 80017be:	f000 fb1f 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7fe ffe8 	bl	8000798 <Delay_ms>
                FND_4();
 80017c8:	f000 fa38 	bl	8001c3c <FND_4>
                FND_four();
 80017cc:	f000 fbb8 	bl	8001f40 <FND_four>
                Delay_ms(1);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7fe ffe1 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	3301      	adds	r3, #1
 80017da:	77bb      	strb	r3, [r7, #30]
 80017dc:	7fbb      	ldrb	r3, [r7, #30]
 80017de:	2b7d      	cmp	r3, #125	; 0x7d
 80017e0:	d9dd      	bls.n	800179e <result+0x29a>
        for (uint8_t j = 0; j <= 7; j++)
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	3301      	adds	r3, #1
 80017e6:	77fb      	strb	r3, [r7, #31]
 80017e8:	7ffb      	ldrb	r3, [r7, #31]
 80017ea:	2b07      	cmp	r3, #7
 80017ec:	d9d0      	bls.n	8001790 <result+0x28c>
            }
        }
        break;
 80017ee:	e1c0      	b.n	8001b72 <result+0x66e>
    case kResult_Err_5: // Ethernet chip Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017f0:	2108      	movs	r1, #8
 80017f2:	4821      	ldr	r0, [pc, #132]	; (8001878 <result+0x374>)
 80017f4:	f003 fe5c 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	777b      	strb	r3, [r7, #29]
 80017fc:	e02b      	b.n	8001856 <result+0x352>
        {
            fail_sound(j);
 80017fe:	7f7b      	ldrb	r3, [r7, #29]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fde1 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001806:	2301      	movs	r3, #1
 8001808:	773b      	strb	r3, [r7, #28]
 800180a:	e01e      	b.n	800184a <result+0x346>
            {
                FND_1();
 800180c:	f000 f9c8 	bl	8001ba0 <FND_1>
                FND_E();
 8001810:	f000 faa6 	bl	8001d60 <FND_E>
                Delay_ms(1);
 8001814:	2001      	movs	r0, #1
 8001816:	f7fe ffbf 	bl	8000798 <Delay_ms>
                FND_2();
 800181a:	f000 f9db 	bl	8001bd4 <FND_2>
                FND_r();
 800181e:	f000 fac7 	bl	8001db0 <FND_r>
                Delay_ms(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f7fe ffb8 	bl	8000798 <Delay_ms>
                FND_3();
 8001828:	f000 f9ee 	bl	8001c08 <FND_3>
                FND_zero();
 800182c:	f000 fae8 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f7fe ffb1 	bl	8000798 <Delay_ms>
                FND_4();
 8001836:	f000 fa01 	bl	8001c3c <FND_4>
                FND_five();
 800183a:	f000 fba9 	bl	8001f90 <FND_five>
                Delay_ms(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f7fe ffaa 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001844:	7f3b      	ldrb	r3, [r7, #28]
 8001846:	3301      	adds	r3, #1
 8001848:	773b      	strb	r3, [r7, #28]
 800184a:	7f3b      	ldrb	r3, [r7, #28]
 800184c:	2b7d      	cmp	r3, #125	; 0x7d
 800184e:	d9dd      	bls.n	800180c <result+0x308>
        for (uint8_t j = 0; j <= 7; j++)
 8001850:	7f7b      	ldrb	r3, [r7, #29]
 8001852:	3301      	adds	r3, #1
 8001854:	777b      	strb	r3, [r7, #29]
 8001856:	7f7b      	ldrb	r3, [r7, #29]
 8001858:	2b07      	cmp	r3, #7
 800185a:	d9d0      	bls.n	80017fe <result+0x2fa>
            }
        }
        break;
 800185c:	e189      	b.n	8001b72 <result+0x66e>
    case kResult_Err_6: // APD BIAS Control Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800185e:	2108      	movs	r1, #8
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <result+0x374>)
 8001862:	f003 fe25 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001866:	2300      	movs	r3, #0
 8001868:	76fb      	strb	r3, [r7, #27]
 800186a:	e033      	b.n	80018d4 <result+0x3d0>
 800186c:	20000087 	.word	0x20000087
 8001870:	40020800 	.word	0x40020800
 8001874:	40020400 	.word	0x40020400
 8001878:	200009d8 	.word	0x200009d8
        {
            fail_sound(j);
 800187c:	7efb      	ldrb	r3, [r7, #27]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fda2 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001884:	2301      	movs	r3, #1
 8001886:	76bb      	strb	r3, [r7, #26]
 8001888:	e01e      	b.n	80018c8 <result+0x3c4>
            {
                FND_1();
 800188a:	f000 f989 	bl	8001ba0 <FND_1>
                FND_E();
 800188e:	f000 fa67 	bl	8001d60 <FND_E>
                Delay_ms(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f7fe ff80 	bl	8000798 <Delay_ms>
                FND_2();
 8001898:	f000 f99c 	bl	8001bd4 <FND_2>
                FND_r();
 800189c:	f000 fa88 	bl	8001db0 <FND_r>
                Delay_ms(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7fe ff79 	bl	8000798 <Delay_ms>
                FND_3();
 80018a6:	f000 f9af 	bl	8001c08 <FND_3>
                FND_zero();
 80018aa:	f000 faa9 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7fe ff72 	bl	8000798 <Delay_ms>
                FND_4();
 80018b4:	f000 f9c2 	bl	8001c3c <FND_4>
                FND_six();
 80018b8:	f000 fb92 	bl	8001fe0 <FND_six>
                Delay_ms(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7fe ff6b 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 80018c2:	7ebb      	ldrb	r3, [r7, #26]
 80018c4:	3301      	adds	r3, #1
 80018c6:	76bb      	strb	r3, [r7, #26]
 80018c8:	7ebb      	ldrb	r3, [r7, #26]
 80018ca:	2b7d      	cmp	r3, #125	; 0x7d
 80018cc:	d9dd      	bls.n	800188a <result+0x386>
        for (uint8_t j = 0; j <= 7; j++)
 80018ce:	7efb      	ldrb	r3, [r7, #27]
 80018d0:	3301      	adds	r3, #1
 80018d2:	76fb      	strb	r3, [r7, #27]
 80018d4:	7efb      	ldrb	r3, [r7, #27]
 80018d6:	2b07      	cmp	r3, #7
 80018d8:	d9d0      	bls.n	800187c <result+0x378>
            }
        }
        break;
 80018da:	e14a      	b.n	8001b72 <result+0x66e>
    case kResult_Err_7: // Motor speed calibration Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80018dc:	2108      	movs	r1, #8
 80018de:	48ad      	ldr	r0, [pc, #692]	; (8001b94 <result+0x690>)
 80018e0:	f003 fde6 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	767b      	strb	r3, [r7, #25]
 80018e8:	e02b      	b.n	8001942 <result+0x43e>
        {
            fail_sound(j);
 80018ea:	7e7b      	ldrb	r3, [r7, #25]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fd6b 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80018f2:	2301      	movs	r3, #1
 80018f4:	763b      	strb	r3, [r7, #24]
 80018f6:	e01e      	b.n	8001936 <result+0x432>
            {
                FND_1();
 80018f8:	f000 f952 	bl	8001ba0 <FND_1>
                FND_E();
 80018fc:	f000 fa30 	bl	8001d60 <FND_E>
                Delay_ms(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f7fe ff49 	bl	8000798 <Delay_ms>
                FND_2();
 8001906:	f000 f965 	bl	8001bd4 <FND_2>
                FND_r();
 800190a:	f000 fa51 	bl	8001db0 <FND_r>
                Delay_ms(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f7fe ff42 	bl	8000798 <Delay_ms>
                FND_3();
 8001914:	f000 f978 	bl	8001c08 <FND_3>
                FND_zero();
 8001918:	f000 fa72 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 800191c:	2001      	movs	r0, #1
 800191e:	f7fe ff3b 	bl	8000798 <Delay_ms>
                FND_4();
 8001922:	f000 f98b 	bl	8001c3c <FND_4>
                FND_seven();
 8001926:	f000 fb83 	bl	8002030 <FND_seven>
                Delay_ms(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f7fe ff34 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001930:	7e3b      	ldrb	r3, [r7, #24]
 8001932:	3301      	adds	r3, #1
 8001934:	763b      	strb	r3, [r7, #24]
 8001936:	7e3b      	ldrb	r3, [r7, #24]
 8001938:	2b7d      	cmp	r3, #125	; 0x7d
 800193a:	d9dd      	bls.n	80018f8 <result+0x3f4>
        for (uint8_t j = 0; j <= 7; j++)
 800193c:	7e7b      	ldrb	r3, [r7, #25]
 800193e:	3301      	adds	r3, #1
 8001940:	767b      	strb	r3, [r7, #25]
 8001942:	7e7b      	ldrb	r3, [r7, #25]
 8001944:	2b07      	cmp	r3, #7
 8001946:	d9d0      	bls.n	80018ea <result+0x3e6>
            }
        }
        break;
 8001948:	e113      	b.n	8001b72 <result+0x66e>
    case kResult_Err_8: // Encoder check start slit Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800194a:	2108      	movs	r1, #8
 800194c:	4891      	ldr	r0, [pc, #580]	; (8001b94 <result+0x690>)
 800194e:	f003 fdaf 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
 8001956:	e02b      	b.n	80019b0 <result+0x4ac>
        {
            fail_sound(j);
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fd34 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001960:	2301      	movs	r3, #1
 8001962:	75bb      	strb	r3, [r7, #22]
 8001964:	e01e      	b.n	80019a4 <result+0x4a0>
            {
                FND_1();
 8001966:	f000 f91b 	bl	8001ba0 <FND_1>
                FND_E();
 800196a:	f000 f9f9 	bl	8001d60 <FND_E>
                Delay_ms(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f7fe ff12 	bl	8000798 <Delay_ms>
                FND_2();
 8001974:	f000 f92e 	bl	8001bd4 <FND_2>
                FND_r();
 8001978:	f000 fa1a 	bl	8001db0 <FND_r>
                Delay_ms(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f7fe ff0b 	bl	8000798 <Delay_ms>
                FND_3();
 8001982:	f000 f941 	bl	8001c08 <FND_3>
                FND_zero();
 8001986:	f000 fa3b 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 800198a:	2001      	movs	r0, #1
 800198c:	f7fe ff04 	bl	8000798 <Delay_ms>
                FND_4();
 8001990:	f000 f954 	bl	8001c3c <FND_4>
                FND_eight();
 8001994:	f000 fb74 	bl	8002080 <FND_eight>
                Delay_ms(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f7fe fefd 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800199e:	7dbb      	ldrb	r3, [r7, #22]
 80019a0:	3301      	adds	r3, #1
 80019a2:	75bb      	strb	r3, [r7, #22]
 80019a4:	7dbb      	ldrb	r3, [r7, #22]
 80019a6:	2b7d      	cmp	r3, #125	; 0x7d
 80019a8:	d9dd      	bls.n	8001966 <result+0x462>
        for (uint8_t j = 0; j <= 7; j++)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	3301      	adds	r3, #1
 80019ae:	75fb      	strb	r3, [r7, #23]
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	d9d0      	bls.n	8001958 <result+0x454>
            }
        }
        break;
 80019b6:	e0dc      	b.n	8001b72 <result+0x66e>
    case kResult_Err_9: // TDC Init Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019b8:	2108      	movs	r1, #8
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <result+0x690>)
 80019bc:	f003 fd78 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	757b      	strb	r3, [r7, #21]
 80019c4:	e02b      	b.n	8001a1e <result+0x51a>
        {
            fail_sound(j);
 80019c6:	7d7b      	ldrb	r3, [r7, #21]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fcfd 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80019ce:	2301      	movs	r3, #1
 80019d0:	753b      	strb	r3, [r7, #20]
 80019d2:	e01e      	b.n	8001a12 <result+0x50e>
            {
                FND_1();
 80019d4:	f000 f8e4 	bl	8001ba0 <FND_1>
                FND_E();
 80019d8:	f000 f9c2 	bl	8001d60 <FND_E>
                Delay_ms(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f7fe fedb 	bl	8000798 <Delay_ms>
                FND_2();
 80019e2:	f000 f8f7 	bl	8001bd4 <FND_2>
                FND_r();
 80019e6:	f000 f9e3 	bl	8001db0 <FND_r>
                Delay_ms(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7fe fed4 	bl	8000798 <Delay_ms>
                FND_3();
 80019f0:	f000 f90a 	bl	8001c08 <FND_3>
                FND_zero();
 80019f4:	f000 fa04 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7fe fecd 	bl	8000798 <Delay_ms>
                FND_4();
 80019fe:	f000 f91d 	bl	8001c3c <FND_4>
                FND_nine();
 8001a02:	f000 fb65 	bl	80020d0 <FND_nine>
                Delay_ms(1);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7fe fec6 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001a0c:	7d3b      	ldrb	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	753b      	strb	r3, [r7, #20]
 8001a12:	7d3b      	ldrb	r3, [r7, #20]
 8001a14:	2b7d      	cmp	r3, #125	; 0x7d
 8001a16:	d9dd      	bls.n	80019d4 <result+0x4d0>
        for (uint8_t j = 0; j <= 7; j++)
 8001a18:	7d7b      	ldrb	r3, [r7, #21]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	757b      	strb	r3, [r7, #21]
 8001a1e:	7d7b      	ldrb	r3, [r7, #21]
 8001a20:	2b07      	cmp	r3, #7
 8001a22:	d9d0      	bls.n	80019c6 <result+0x4c2>
            }
        }
        break;
 8001a24:	e0a5      	b.n	8001b72 <result+0x66e>
    case kResult_Err_10: // TDC Calibration Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a26:	2108      	movs	r1, #8
 8001a28:	485a      	ldr	r0, [pc, #360]	; (8001b94 <result+0x690>)
 8001a2a:	f003 fd41 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	74fb      	strb	r3, [r7, #19]
 8001a32:	e02b      	b.n	8001a8c <result+0x588>
        {
            fail_sound(j);
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fcc6 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	74bb      	strb	r3, [r7, #18]
 8001a40:	e01e      	b.n	8001a80 <result+0x57c>
            {
                FND_1();
 8001a42:	f000 f8ad 	bl	8001ba0 <FND_1>
                FND_E();
 8001a46:	f000 f98b 	bl	8001d60 <FND_E>
                Delay_ms(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7fe fea4 	bl	8000798 <Delay_ms>
                FND_2();
 8001a50:	f000 f8c0 	bl	8001bd4 <FND_2>
                FND_r();
 8001a54:	f000 f9ac 	bl	8001db0 <FND_r>
                Delay_ms(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7fe fe9d 	bl	8000798 <Delay_ms>
                FND_3();
 8001a5e:	f000 f8d3 	bl	8001c08 <FND_3>
                FND_one();
 8001a62:	f000 f9f5 	bl	8001e50 <FND_one>
                Delay_ms(1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7fe fe96 	bl	8000798 <Delay_ms>
                FND_4();
 8001a6c:	f000 f8e6 	bl	8001c3c <FND_4>
                FND_zero();
 8001a70:	f000 f9c6 	bl	8001e00 <FND_zero>
                Delay_ms(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f7fe fe8f 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001a7a:	7cbb      	ldrb	r3, [r7, #18]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	74bb      	strb	r3, [r7, #18]
 8001a80:	7cbb      	ldrb	r3, [r7, #18]
 8001a82:	2b7d      	cmp	r3, #125	; 0x7d
 8001a84:	d9dd      	bls.n	8001a42 <result+0x53e>
        for (uint8_t j = 0; j <= 7; j++)
 8001a86:	7cfb      	ldrb	r3, [r7, #19]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	74fb      	strb	r3, [r7, #19]
 8001a8c:	7cfb      	ldrb	r3, [r7, #19]
 8001a8e:	2b07      	cmp	r3, #7
 8001a90:	d9d0      	bls.n	8001a34 <result+0x530>
            }
        }
        break;
 8001a92:	e06e      	b.n	8001b72 <result+0x66e>
    case kResult_Err_11: // LD Tx feedback Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a94:	2108      	movs	r1, #8
 8001a96:	483f      	ldr	r0, [pc, #252]	; (8001b94 <result+0x690>)
 8001a98:	f003 fd0a 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	747b      	strb	r3, [r7, #17]
 8001aa0:	e02b      	b.n	8001afa <result+0x5f6>
        {
            fail_sound(j);
 8001aa2:	7c7b      	ldrb	r3, [r7, #17]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fc8f 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001aaa:	2301      	movs	r3, #1
 8001aac:	743b      	strb	r3, [r7, #16]
 8001aae:	e01e      	b.n	8001aee <result+0x5ea>
            {
                FND_1();
 8001ab0:	f000 f876 	bl	8001ba0 <FND_1>
                FND_E();
 8001ab4:	f000 f954 	bl	8001d60 <FND_E>
                Delay_ms(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7fe fe6d 	bl	8000798 <Delay_ms>
                FND_2();
 8001abe:	f000 f889 	bl	8001bd4 <FND_2>
                FND_r();
 8001ac2:	f000 f975 	bl	8001db0 <FND_r>
                Delay_ms(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7fe fe66 	bl	8000798 <Delay_ms>
                FND_3();
 8001acc:	f000 f89c 	bl	8001c08 <FND_3>
                FND_one();
 8001ad0:	f000 f9be 	bl	8001e50 <FND_one>
                Delay_ms(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7fe fe5f 	bl	8000798 <Delay_ms>
                FND_4();
 8001ada:	f000 f8af 	bl	8001c3c <FND_4>
                FND_one();
 8001ade:	f000 f9b7 	bl	8001e50 <FND_one>
                Delay_ms(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7fe fe58 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001ae8:	7c3b      	ldrb	r3, [r7, #16]
 8001aea:	3301      	adds	r3, #1
 8001aec:	743b      	strb	r3, [r7, #16]
 8001aee:	7c3b      	ldrb	r3, [r7, #16]
 8001af0:	2b7d      	cmp	r3, #125	; 0x7d
 8001af2:	d9dd      	bls.n	8001ab0 <result+0x5ac>
        for (uint8_t j = 0; j <= 7; j++)
 8001af4:	7c7b      	ldrb	r3, [r7, #17]
 8001af6:	3301      	adds	r3, #1
 8001af8:	747b      	strb	r3, [r7, #17]
 8001afa:	7c7b      	ldrb	r3, [r7, #17]
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d9d0      	bls.n	8001aa2 <result+0x59e>
            }
        }
        break;
 8001b00:	e037      	b.n	8001b72 <result+0x66e>
    case kResult_Err_12: //여분
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b02:	2108      	movs	r1, #8
 8001b04:	4823      	ldr	r0, [pc, #140]	; (8001b94 <result+0x690>)
 8001b06:	f003 fcd3 	bl	80054b0 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	e02b      	b.n	8001b68 <result+0x664>
        {
            fail_sound(j);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fc58 	bl	80013c8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73bb      	strb	r3, [r7, #14]
 8001b1c:	e01e      	b.n	8001b5c <result+0x658>
            {
                FND_1();
 8001b1e:	f000 f83f 	bl	8001ba0 <FND_1>
                FND_E();
 8001b22:	f000 f91d 	bl	8001d60 <FND_E>
                Delay_ms(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7fe fe36 	bl	8000798 <Delay_ms>
                FND_2();
 8001b2c:	f000 f852 	bl	8001bd4 <FND_2>
                FND_r();
 8001b30:	f000 f93e 	bl	8001db0 <FND_r>
                Delay_ms(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7fe fe2f 	bl	8000798 <Delay_ms>
                FND_3();
 8001b3a:	f000 f865 	bl	8001c08 <FND_3>
                FND_one();
 8001b3e:	f000 f987 	bl	8001e50 <FND_one>
                Delay_ms(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7fe fe28 	bl	8000798 <Delay_ms>
                FND_4();
 8001b48:	f000 f878 	bl	8001c3c <FND_4>
                FND_two();
 8001b4c:	f000 f9a8 	bl	8001ea0 <FND_two>
                Delay_ms(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7fe fe21 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	73bb      	strb	r3, [r7, #14]
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	2b7d      	cmp	r3, #125	; 0x7d
 8001b60:	d9dd      	bls.n	8001b1e <result+0x61a>
        for (uint8_t j = 0; j <= 7; j++)
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	3301      	adds	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d9d0      	bls.n	8001b10 <result+0x60c>
            }
        }
        break;
 8001b6e:	e000      	b.n	8001b72 <result+0x66e>

    default:
        break;
 8001b70:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001b72:	2108      	movs	r1, #8
 8001b74:	4807      	ldr	r0, [pc, #28]	; (8001b94 <result+0x690>)
 8001b76:	f003 fd63 	bl	8005640 <HAL_TIM_PWM_Stop>
    turn_off();
 8001b7a:	f000 fad1 	bl	8002120 <turn_off>
    g_Result = kResult_None;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <result+0x694>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Idle;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <result+0x698>)
 8001b86:	2204      	movs	r2, #4
 8001b88:	701a      	strb	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200009d8 	.word	0x200009d8
 8001b98:	20000087 	.word	0x20000087
 8001b9c:	20000084 	.word	0x20000084

08001ba0 <FND_1>:

void FND_1(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4809      	ldr	r0, [pc, #36]	; (8001bcc <FND_1+0x2c>)
 8001ba8:	f7ff fbf0 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001bac:	2120      	movs	r1, #32
 8001bae:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <FND_1+0x30>)
 8001bb0:	f7ff fbfa 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <FND_1+0x2c>)
 8001bba:	f7ff fbf5 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc2:	4802      	ldr	r0, [pc, #8]	; (8001bcc <FND_1+0x2c>)
 8001bc4:	f7ff fbf0 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <FND_2>:
void FND_2(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <FND_2+0x2c>)
 8001bdc:	f7ff fbe4 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001be0:	2120      	movs	r1, #32
 8001be2:	4808      	ldr	r0, [pc, #32]	; (8001c04 <FND_2+0x30>)
 8001be4:	f7ff fbd2 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <FND_2+0x2c>)
 8001bee:	f7ff fbdb 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf6:	4802      	ldr	r0, [pc, #8]	; (8001c00 <FND_2+0x2c>)
 8001bf8:	f7ff fbd6 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020400 	.word	0x40020400

08001c08 <FND_3>:
void FND_3(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <FND_3+0x2c>)
 8001c10:	f7ff fbca 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c14:	2120      	movs	r1, #32
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <FND_3+0x30>)
 8001c18:	f7ff fbc6 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c20:	4804      	ldr	r0, [pc, #16]	; (8001c34 <FND_3+0x2c>)
 8001c22:	f7ff fbb3 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c2a:	4802      	ldr	r0, [pc, #8]	; (8001c34 <FND_3+0x2c>)
 8001c2c:	f7ff fbbc 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020400 	.word	0x40020400

08001c3c <FND_4>:
void FND_4(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c40:	2104      	movs	r1, #4
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <FND_4+0x2c>)
 8001c44:	f7ff fbb0 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c48:	2120      	movs	r1, #32
 8001c4a:	4808      	ldr	r0, [pc, #32]	; (8001c6c <FND_4+0x30>)
 8001c4c:	f7ff fbac 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <FND_4+0x2c>)
 8001c56:	f7ff fba7 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c5e:	4802      	ldr	r0, [pc, #8]	; (8001c68 <FND_4+0x2c>)
 8001c60:	f7ff fb94 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <FND_P>:

void FND_P(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c78:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <FND_P+0x48>)
 8001c7a:	f7ff fb87 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <FND_P+0x4c>)
 8001c82:	f7ff fb83 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c86:	2140      	movs	r1, #64	; 0x40
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <FND_P+0x4c>)
 8001c8a:	f7ff fb8d 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c92:	480a      	ldr	r0, [pc, #40]	; (8001cbc <FND_P+0x4c>)
 8001c94:	f7ff fb88 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4807      	ldr	r0, [pc, #28]	; (8001cb8 <FND_P+0x48>)
 8001c9c:	f7ff fb76 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <FND_P+0x48>)
 8001ca4:	f7ff fb72 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <FND_P+0x4c>)
 8001cae:	f7ff fb6d 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <FND_A>:

void FND_A(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc8:	480f      	ldr	r0, [pc, #60]	; (8001d08 <FND_A+0x48>)
 8001cca:	f7ff fb5f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	480e      	ldr	r0, [pc, #56]	; (8001d0c <FND_A+0x4c>)
 8001cd2:	f7ff fb5b 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001cd6:	2140      	movs	r1, #64	; 0x40
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <FND_A+0x4c>)
 8001cda:	f7ff fb57 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce2:	480a      	ldr	r0, [pc, #40]	; (8001d0c <FND_A+0x4c>)
 8001ce4:	f7ff fb60 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ce8:	2102      	movs	r1, #2
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <FND_A+0x48>)
 8001cec:	f7ff fb4e 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <FND_A+0x48>)
 8001cf4:	f7ff fb4a 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <FND_A+0x4c>)
 8001cfe:	f7ff fb45 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020400 	.word	0x40020400

08001d10 <FND_S>:

void FND_S(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <FND_S+0x48>)
 8001d1a:	f7ff fb37 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	480e      	ldr	r0, [pc, #56]	; (8001d5c <FND_S+0x4c>)
 8001d22:	f7ff fb41 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d26:	2140      	movs	r1, #64	; 0x40
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <FND_S+0x4c>)
 8001d2a:	f7ff fb2f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d32:	480a      	ldr	r0, [pc, #40]	; (8001d5c <FND_S+0x4c>)
 8001d34:	f7ff fb2a 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d38:	2102      	movs	r1, #2
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <FND_S+0x48>)
 8001d3c:	f7ff fb34 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d40:	2101      	movs	r1, #1
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <FND_S+0x48>)
 8001d44:	f7ff fb22 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <FND_S+0x4c>)
 8001d4e:	f7ff fb1d 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020400 	.word	0x40020400

08001d60 <FND_E>:

void FND_E(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d68:	480f      	ldr	r0, [pc, #60]	; (8001da8 <FND_E+0x48>)
 8001d6a:	f7ff fb0f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	480e      	ldr	r0, [pc, #56]	; (8001dac <FND_E+0x4c>)
 8001d72:	f7ff fb19 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d76:	2140      	movs	r1, #64	; 0x40
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <FND_E+0x4c>)
 8001d7a:	f7ff fb15 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d82:	480a      	ldr	r0, [pc, #40]	; (8001dac <FND_E+0x4c>)
 8001d84:	f7ff fb02 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <FND_E+0x48>)
 8001d8c:	f7ff fafe 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d90:	2101      	movs	r1, #1
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <FND_E+0x48>)
 8001d94:	f7ff fafa 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <FND_E+0x4c>)
 8001d9e:	f7ff faf5 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020400 	.word	0x40020400

08001db0 <FND_r>:

void FND_r(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db8:	480f      	ldr	r0, [pc, #60]	; (8001df8 <FND_r+0x48>)
 8001dba:	f7ff faf5 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	480e      	ldr	r0, [pc, #56]	; (8001dfc <FND_r+0x4c>)
 8001dc2:	f7ff faf1 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001dc6:	2140      	movs	r1, #64	; 0x40
 8001dc8:	480c      	ldr	r0, [pc, #48]	; (8001dfc <FND_r+0x4c>)
 8001dca:	f7ff faed 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd2:	480a      	ldr	r0, [pc, #40]	; (8001dfc <FND_r+0x4c>)
 8001dd4:	f7ff fae8 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4807      	ldr	r0, [pc, #28]	; (8001df8 <FND_r+0x48>)
 8001ddc:	f7ff fad6 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001de0:	2101      	movs	r1, #1
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <FND_r+0x48>)
 8001de4:	f7ff fae0 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <FND_r+0x4c>)
 8001dee:	f7ff facd 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020400 	.word	0x40020400

08001e00 <FND_zero>:

void FND_zero(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e08:	480f      	ldr	r0, [pc, #60]	; (8001e48 <FND_zero+0x48>)
 8001e0a:	f7ff fabf 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	480e      	ldr	r0, [pc, #56]	; (8001e4c <FND_zero+0x4c>)
 8001e12:	f7ff fabb 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	480c      	ldr	r0, [pc, #48]	; (8001e4c <FND_zero+0x4c>)
 8001e1a:	f7ff fab7 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e22:	480a      	ldr	r0, [pc, #40]	; (8001e4c <FND_zero+0x4c>)
 8001e24:	f7ff fab2 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4807      	ldr	r0, [pc, #28]	; (8001e48 <FND_zero+0x48>)
 8001e2c:	f7ff faae 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e30:	2101      	movs	r1, #1
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <FND_zero+0x48>)
 8001e34:	f7ff faaa 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <FND_zero+0x4c>)
 8001e3e:	f7ff fab3 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020400 	.word	0x40020400

08001e50 <FND_one>:

void FND_one(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e58:	480f      	ldr	r0, [pc, #60]	; (8001e98 <FND_one+0x48>)
 8001e5a:	f7ff faa5 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	480e      	ldr	r0, [pc, #56]	; (8001e9c <FND_one+0x4c>)
 8001e62:	f7ff fa93 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e66:	2140      	movs	r1, #64	; 0x40
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <FND_one+0x4c>)
 8001e6a:	f7ff fa8f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e72:	480a      	ldr	r0, [pc, #40]	; (8001e9c <FND_one+0x4c>)
 8001e74:	f7ff fa98 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <FND_one+0x48>)
 8001e7c:	f7ff fa94 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e80:	2101      	movs	r1, #1
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <FND_one+0x48>)
 8001e84:	f7ff fa90 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <FND_one+0x4c>)
 8001e8e:	f7ff fa8b 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <FND_two>:

void FND_two(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea8:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <FND_two+0x48>)
 8001eaa:	f7ff fa6f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	480e      	ldr	r0, [pc, #56]	; (8001eec <FND_two+0x4c>)
 8001eb2:	f7ff fa6b 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <FND_two+0x4c>)
 8001eba:	f7ff fa75 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec2:	480a      	ldr	r0, [pc, #40]	; (8001eec <FND_two+0x4c>)
 8001ec4:	f7ff fa62 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <FND_two+0x48>)
 8001ecc:	f7ff fa5e 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <FND_two+0x48>)
 8001ed4:	f7ff fa68 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <FND_two+0x4c>)
 8001ede:	f7ff fa55 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020400 	.word	0x40020400

08001ef0 <FND_three>:
void FND_three(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <FND_three+0x48>)
 8001efa:	f7ff fa47 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	480e      	ldr	r0, [pc, #56]	; (8001f3c <FND_three+0x4c>)
 8001f02:	f7ff fa43 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <FND_three+0x4c>)
 8001f0a:	f7ff fa3f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f12:	480a      	ldr	r0, [pc, #40]	; (8001f3c <FND_three+0x4c>)
 8001f14:	f7ff fa3a 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <FND_three+0x48>)
 8001f1c:	f7ff fa44 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f20:	2101      	movs	r1, #1
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <FND_three+0x48>)
 8001f24:	f7ff fa40 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <FND_three+0x4c>)
 8001f2e:	f7ff fa2d 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020400 	.word	0x40020400

08001f40 <FND_four>:

void FND_four(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f48:	480f      	ldr	r0, [pc, #60]	; (8001f88 <FND_four+0x48>)
 8001f4a:	f7ff fa2d 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	480e      	ldr	r0, [pc, #56]	; (8001f8c <FND_four+0x4c>)
 8001f52:	f7ff fa1b 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	480c      	ldr	r0, [pc, #48]	; (8001f8c <FND_four+0x4c>)
 8001f5a:	f7ff fa17 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f62:	480a      	ldr	r0, [pc, #40]	; (8001f8c <FND_four+0x4c>)
 8001f64:	f7ff fa20 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4807      	ldr	r0, [pc, #28]	; (8001f88 <FND_four+0x48>)
 8001f6c:	f7ff fa1c 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f70:	2101      	movs	r1, #1
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <FND_four+0x48>)
 8001f74:	f7ff fa0a 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <FND_four+0x4c>)
 8001f7e:	f7ff fa05 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020400 	.word	0x40020400

08001f90 <FND_five>:

void FND_five(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f98:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <FND_five+0x48>)
 8001f9a:	f7ff f9f7 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	480e      	ldr	r0, [pc, #56]	; (8001fdc <FND_five+0x4c>)
 8001fa2:	f7ff fa01 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001fa6:	2140      	movs	r1, #64	; 0x40
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <FND_five+0x4c>)
 8001faa:	f7ff f9ef 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb2:	480a      	ldr	r0, [pc, #40]	; (8001fdc <FND_five+0x4c>)
 8001fb4:	f7ff f9ea 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <FND_five+0x48>)
 8001fbc:	f7ff f9f4 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <FND_five+0x48>)
 8001fc4:	f7ff f9e2 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <FND_five+0x4c>)
 8001fce:	f7ff f9dd 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020800 	.word	0x40020800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <FND_six>:

void FND_six(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe8:	480f      	ldr	r0, [pc, #60]	; (8002028 <FND_six+0x48>)
 8001fea:	f7ff f9cf 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	480e      	ldr	r0, [pc, #56]	; (800202c <FND_six+0x4c>)
 8001ff2:	f7ff f9d9 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <FND_six+0x4c>)
 8001ffa:	f7ff f9c7 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002002:	480a      	ldr	r0, [pc, #40]	; (800202c <FND_six+0x4c>)
 8002004:	f7ff f9c2 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002008:	2102      	movs	r1, #2
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <FND_six+0x48>)
 800200c:	f7ff f9be 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002010:	2101      	movs	r1, #1
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <FND_six+0x48>)
 8002014:	f7ff f9ba 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <FND_six+0x4c>)
 800201e:	f7ff f9b5 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40020800 	.word	0x40020800
 800202c:	40020400 	.word	0x40020400

08002030 <FND_seven>:

void FND_seven(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8002034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <FND_seven+0x48>)
 800203a:	f7ff f9a7 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	480e      	ldr	r0, [pc, #56]	; (800207c <FND_seven+0x4c>)
 8002042:	f7ff f9a3 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <FND_seven+0x4c>)
 800204a:	f7ff f99f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800204e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002052:	480a      	ldr	r0, [pc, #40]	; (800207c <FND_seven+0x4c>)
 8002054:	f7ff f9a8 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002058:	2102      	movs	r1, #2
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <FND_seven+0x48>)
 800205c:	f7ff f9a4 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002060:	2101      	movs	r1, #1
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <FND_seven+0x48>)
 8002064:	f7ff f9a0 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <FND_seven+0x4c>)
 800206e:	f7ff f99b 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020800 	.word	0x40020800
 800207c:	40020400 	.word	0x40020400

08002080 <FND_eight>:

void FND_eight(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8002084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <FND_eight+0x48>)
 800208a:	f7ff f97f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <FND_eight+0x4c>)
 8002092:	f7ff f97b 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <FND_eight+0x4c>)
 800209a:	f7ff f977 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800209e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a2:	480a      	ldr	r0, [pc, #40]	; (80020cc <FND_eight+0x4c>)
 80020a4:	f7ff f972 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80020a8:	2102      	movs	r1, #2
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <FND_eight+0x48>)
 80020ac:	f7ff f96e 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80020b0:	2101      	movs	r1, #1
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <FND_eight+0x48>)
 80020b4:	f7ff f96a 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <FND_eight+0x4c>)
 80020be:	f7ff f965 	bl	800138c <LL_GPIO_SetOutputPin>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020400 	.word	0x40020400

080020d0 <FND_nine>:
void FND_nine(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80020d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d8:	480f      	ldr	r0, [pc, #60]	; (8002118 <FND_nine+0x48>)
 80020da:	f7ff f957 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	480e      	ldr	r0, [pc, #56]	; (800211c <FND_nine+0x4c>)
 80020e2:	f7ff f953 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80020e6:	2140      	movs	r1, #64	; 0x40
 80020e8:	480c      	ldr	r0, [pc, #48]	; (800211c <FND_nine+0x4c>)
 80020ea:	f7ff f94f 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80020ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f2:	480a      	ldr	r0, [pc, #40]	; (800211c <FND_nine+0x4c>)
 80020f4:	f7ff f94a 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80020f8:	2102      	movs	r1, #2
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <FND_nine+0x48>)
 80020fc:	f7ff f954 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002100:	2101      	movs	r1, #1
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <FND_nine+0x48>)
 8002104:	f7ff f942 	bl	800138c <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <FND_nine+0x4c>)
 800210e:	f7ff f93d 	bl	800138c <LL_GPIO_SetOutputPin>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40020800 	.word	0x40020800
 800211c:	40020400 	.word	0x40020400

08002120 <turn_off>:

void turn_off(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8002124:	2104      	movs	r1, #4
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <turn_off+0x2c>)
 8002128:	f7ff f93e 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 800212c:	2120      	movs	r1, #32
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <turn_off+0x30>)
 8002130:	f7ff f93a 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8002134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002138:	4804      	ldr	r0, [pc, #16]	; (800214c <turn_off+0x2c>)
 800213a:	f7ff f935 	bl	80013a8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800213e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002142:	4802      	ldr	r0, [pc, #8]	; (800214c <turn_off+0x2c>)
 8002144:	f7ff f930 	bl	80013a8 <LL_GPIO_ResetOutputPin>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020800 	.word	0x40020800
 8002150:	40020400 	.word	0x40020400

08002154 <InitUartQueue>:

UARTQUEUE LiDARQueue;
UARTQUEUE ViewerQueue;

void InitUartQueue(pUARTQUEUE pQueue)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    pQueue->data = pQueue->head = pQueue->tail = 0;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	805a      	strh	r2, [r3, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	885a      	ldrh	r2, [r3, #2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	801a      	strh	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	809a      	strh	r2, [r3, #4]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <PutDataToUartQueue>:

void PutDataToUartQueue(UART_HandleTypeDef *huart, uint8_t data)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <PutDataToUartQueue+0x5c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <PutDataToUartQueue+0x1a>
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <PutDataToUartQueue+0x60>)
 8002198:	e000      	b.n	800219c <PutDataToUartQueue+0x1c>
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <PutDataToUartQueue+0x64>)
 800219c:	60fb      	str	r3, [r7, #12]
    // if (pQueue->data == QUEUE_BUFFER_LENGTH)
    //     GetDataFromUartQueue(huart);
    pQueue->Buffer[pQueue->head++] = data;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	b291      	uxth	r1, r2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	8011      	strh	r1, [r2, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	719a      	strb	r2, [r3, #6]
    if (pQueue->head == QUEUE_BUFFER_LENGTH)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021bc:	d102      	bne.n	80021c4 <PutDataToUartQueue+0x44>
        pQueue->head = 0;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
    pQueue->data++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	889b      	ldrh	r3, [r3, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	809a      	strh	r2, [r3, #4]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40005000 	.word	0x40005000
 80021e0:	20000478 	.word	0x20000478
 80021e4:	20000088 	.word	0x20000088

080021e8 <GetDataFromUartQueue>:

uint8_t GetDataFromUartQueue(UART_HandleTypeDef *huart)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
    uint8_t ret;

    // UART_HandleTypeDef *dst = (huart->Instance == USART5 ? &hMonitor : &hViewer);
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <GetDataFromUartQueue+0x60>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <GetDataFromUartQueue+0x16>
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <GetDataFromUartQueue+0x64>)
 80021fc:	e000      	b.n	8002200 <GetDataFromUartQueue+0x18>
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <GetDataFromUartQueue+0x68>)
 8002200:	60fb      	str	r3, [r7, #12]
    // if (HAL_UART_Transmit(dst, pQueue->Buffer + pQueue->tail, 1, 3000) != HAL_OK)
    // {
    //     Error_Handler(__FILE__, __LINE__);
    // }
    ret = pQueue->Buffer[pQueue->tail];
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	885b      	ldrh	r3, [r3, #2]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	799b      	ldrb	r3, [r3, #6]
 800220e:	72fb      	strb	r3, [r7, #11]
    pQueue->tail++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	885b      	ldrh	r3, [r3, #2]
 8002214:	3301      	adds	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	805a      	strh	r2, [r3, #2]
    if (pQueue->tail == QUEUE_BUFFER_LENGTH)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	885b      	ldrh	r3, [r3, #2]
 8002220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002224:	d102      	bne.n	800222c <GetDataFromUartQueue+0x44>
        pQueue->tail = 0;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	805a      	strh	r2, [r3, #2]
    pQueue->data--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	809a      	strh	r2, [r3, #4]
    return ret;
 8002238:	7afb      	ldrb	r3, [r7, #11]
    HAL_Delay(1);
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40005000 	.word	0x40005000
 800224c:	20000478 	.word	0x20000478
 8002250:	20000088 	.word	0x20000088

08002254 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <LL_EXTI_EnableIT_0_31+0x20>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4904      	ldr	r1, [pc, #16]	; (8002274 <LL_EXTI_EnableIT_0_31+0x20>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40013c00 	.word	0x40013c00

08002278 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <LL_EXTI_DisableIT_0_31+0x24>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	43db      	mvns	r3, r3
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <LL_EXTI_DisableIT_0_31+0x24>)
 800228a:	4013      	ands	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40013c00 	.word	0x40013c00

080022a0 <Info_status>:
uint8_t LiDAR_RX_BUFF[256] = {0};
uint8_t LiDAR_RX_Cnt = 0;
uint8_t Test_Start_Flag = 0;

void Info_status(void)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
    uint8_t checksum = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	71fb      	strb	r3, [r7, #7]
    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe fe60 	bl	8000f70 <LiDAR_Protocol_Tx>
    Delay_ms(500);
 80022b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022b4:	f7fe fa70 	bl	8000798 <Delay_ms>
    while (LiDARQueue.data > 0)
 80022b8:	e00d      	b.n	80022d6 <Info_status+0x36>
    {
        INFO_RX_BUFF[INFO_RX_Cnt++] = GetDataFromUartQueue(&hLiDAR);
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <Info_status+0xbc>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	b2d1      	uxtb	r1, r2
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <Info_status+0xbc>)
 80022c4:	7011      	strb	r1, [r2, #0]
 80022c6:	461c      	mov	r4, r3
 80022c8:	4825      	ldr	r0, [pc, #148]	; (8002360 <Info_status+0xc0>)
 80022ca:	f7ff ff8d 	bl	80021e8 <GetDataFromUartQueue>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <Info_status+0xc4>)
 80022d4:	551a      	strb	r2, [r3, r4]
    while (LiDARQueue.data > 0)
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <Info_status+0xc8>)
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <Info_status+0x1a>
    }
    if (INFO_RX_BUFF[0] != 0xFA)
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <Info_status+0xc4>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2bfa      	cmp	r3, #250	; 0xfa
 80022e4:	d008      	beq.n	80022f8 <Info_status+0x58>
    {
        INFO_RX_Cnt = 0;
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <Info_status+0xbc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
        memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 80022ec:	220d      	movs	r2, #13
 80022ee:	2100      	movs	r1, #0
 80022f0:	481c      	ldr	r0, [pc, #112]	; (8002364 <Info_status+0xc4>)
 80022f2:	f005 fb49 	bl	8007988 <memset>
        {
            INFO_RX_Cnt = 0;
            memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
        }
    }
}
 80022f6:	e02c      	b.n	8002352 <Info_status+0xb2>
        checksum = INFO_RX_BUFF[0];
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <Info_status+0xc4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	71fb      	strb	r3, [r7, #7]
        for (uint8_t i = 1; i < INFO_RX_Cnt - 1; i++)
 80022fe:	2301      	movs	r3, #1
 8002300:	71bb      	strb	r3, [r7, #6]
 8002302:	e008      	b.n	8002316 <Info_status+0x76>
            checksum ^= INFO_RX_BUFF[i];
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <Info_status+0xc4>)
 8002308:	5cd2      	ldrb	r2, [r2, r3]
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4053      	eors	r3, r2
 800230e:	71fb      	strb	r3, [r7, #7]
        for (uint8_t i = 1; i < INFO_RX_Cnt - 1; i++)
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	3301      	adds	r3, #1
 8002314:	71bb      	strb	r3, [r7, #6]
 8002316:	79ba      	ldrb	r2, [r7, #6]
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <Info_status+0xbc>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	3b01      	subs	r3, #1
 800231e:	429a      	cmp	r2, r3
 8002320:	dbf0      	blt.n	8002304 <Info_status+0x64>
        if (INFO_RX_BUFF[12] == checksum)
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <Info_status+0xc4>)
 8002324:	7b1b      	ldrb	r3, [r3, #12]
 8002326:	79fa      	ldrb	r2, [r7, #7]
 8002328:	429a      	cmp	r2, r3
 800232a:	d10a      	bne.n	8002342 <Info_status+0xa2>
            LiDAR_Model = INFO_RX_BUFF[11];
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <Info_status+0xc4>)
 800232e:	7ada      	ldrb	r2, [r3, #11]
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <Info_status+0xcc>)
 8002332:	701a      	strb	r2, [r3, #0]
            INFO_RX_Cnt = 0;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <Info_status+0xbc>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
            g_Status = kStatus_Detect1;
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <Info_status+0xd0>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
}
 8002340:	e007      	b.n	8002352 <Info_status+0xb2>
            INFO_RX_Cnt = 0;
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <Info_status+0xbc>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
            memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 8002348:	220d      	movs	r2, #13
 800234a:	2100      	movs	r1, #0
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <Info_status+0xc4>)
 800234e:	f005 fb1b 	bl	8007988 <memset>
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	bf00      	nop
 800235c:	20000875 	.word	0x20000875
 8002360:	20000a64 	.word	0x20000a64
 8002364:	20000868 	.word	0x20000868
 8002368:	20000088 	.word	0x20000088
 800236c:	20000876 	.word	0x20000876
 8002370:	20000084 	.word	0x20000084

08002374 <Detect1_status>:

void Detect1_status(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
    uint8_t detect_connect_chk = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	71fb      	strb	r3, [r7, #7]
    detect_connect_chk = HAL_GPIO_ReadPin(Detect_SIG_1_GPIO_Port, Detect_SIG_1_Pin);
 800237e:	2110      	movs	r1, #16
 8002380:	481c      	ldr	r0, [pc, #112]	; (80023f4 <Detect1_status+0x80>)
 8002382:	f002 f969 	bl	8004658 <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]

    if (detect_connect_chk)
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <Detect1_status+0x4c>
    {
        Detect1_Result = 0;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <Detect1_status+0x84>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e01e      	b.n	80023d6 <Detect1_status+0x62>
    }
    else
    {
        while (Detect_Check_Count < 20 && Detect1_Result != 0x01U)
        {
            LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT1);
 8002398:	2002      	movs	r0, #2
 800239a:	f7fe fde9 	bl	8000f70 <LiDAR_Protocol_Tx>
            Delay_ms(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe f9fa 	bl	8000798 <Delay_ms>
            Detect1_Result = HAL_GPIO_ReadPin(Detect_SIG_1_GPIO_Port, Detect_SIG_1_Pin);
 80023a4:	2110      	movs	r1, #16
 80023a6:	4813      	ldr	r0, [pc, #76]	; (80023f4 <Detect1_status+0x80>)
 80023a8:	f002 f956 	bl	8004658 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <Detect1_status+0x84>)
 80023b2:	701a      	strb	r2, [r3, #0]

            Detect_Check_Count++;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <Detect1_status+0x88>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <Detect1_status+0x88>)
 80023be:	701a      	strb	r2, [r3, #0]
        while (Detect_Check_Count < 20 && Detect1_Result != 0x01U)
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <Detect1_status+0x88>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b13      	cmp	r3, #19
 80023c6:	d803      	bhi.n	80023d0 <Detect1_status+0x5c>
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <Detect1_status+0x84>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d1e3      	bne.n	8002398 <Detect1_status+0x24>
        }
        Detect_Check_Count = 0;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <Detect1_status+0x88>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
    }

    if (LiDAR_Model == 0x04) // R300
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <Detect1_status+0x8c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d103      	bne.n	80023e6 <Detect1_status+0x72>
    {
        g_Status = kStatus_Detect3;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <Detect1_status+0x90>)
 80023e0:	2203      	movs	r2, #3
 80023e2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_Status = kStatus_Detect2;
    }
}
 80023e4:	e002      	b.n	80023ec <Detect1_status+0x78>
        g_Status = kStatus_Detect2;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <Detect1_status+0x90>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40020000 	.word	0x40020000
 80023f8:	20000877 	.word	0x20000877
 80023fc:	2000087a 	.word	0x2000087a
 8002400:	20000876 	.word	0x20000876
 8002404:	20000084 	.word	0x20000084

08002408 <Detect2_status>:

void Detect2_status(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
    uint8_t detect_connect_chk = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	71fb      	strb	r3, [r7, #7]
    detect_connect_chk = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 8002412:	2120      	movs	r1, #32
 8002414:	4818      	ldr	r0, [pc, #96]	; (8002478 <Detect2_status+0x70>)
 8002416:	f002 f91f 	bl	8004658 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]

    if (detect_connect_chk)
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d017      	beq.n	8002454 <Detect2_status+0x4c>
    {
        Detect2_Result = 0;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <Detect2_status+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e01e      	b.n	800246a <Detect2_status+0x62>
    }
    else
    {
        while (Detect_Check_Count < 20 && Detect2_Result != 0x01U)
        {
            LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT2);
 800242c:	2003      	movs	r0, #3
 800242e:	f7fe fd9f 	bl	8000f70 <LiDAR_Protocol_Tx>
            Delay_ms(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f7fe f9b0 	bl	8000798 <Delay_ms>
            Detect2_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 8002438:	2120      	movs	r1, #32
 800243a:	480f      	ldr	r0, [pc, #60]	; (8002478 <Detect2_status+0x70>)
 800243c:	f002 f90c 	bl	8004658 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <Detect2_status+0x74>)
 8002446:	701a      	strb	r2, [r3, #0]

            Detect_Check_Count++;
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <Detect2_status+0x78>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <Detect2_status+0x78>)
 8002452:	701a      	strb	r2, [r3, #0]
        while (Detect_Check_Count < 20 && Detect2_Result != 0x01U)
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <Detect2_status+0x78>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b13      	cmp	r3, #19
 800245a:	d803      	bhi.n	8002464 <Detect2_status+0x5c>
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <Detect2_status+0x74>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d1e3      	bne.n	800242c <Detect2_status+0x24>
        }
        Detect_Check_Count = 0;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <Detect2_status+0x78>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
    }
    g_Status = kStatus_Detect3;
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <Detect2_status+0x7c>)
 800246c:	2203      	movs	r2, #3
 800246e:	701a      	strb	r2, [r3, #0]
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40020000 	.word	0x40020000
 800247c:	20000878 	.word	0x20000878
 8002480:	2000087a 	.word	0x2000087a
 8002484:	20000084 	.word	0x20000084

08002488 <Detect3_status>:

void Detect3_status(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
    uint8_t detect_connect_chk = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	71bb      	strb	r3, [r7, #6]
    detect_connect_chk = HAL_GPIO_ReadPin(Detect_SIG_3_GPIO_Port, Detect_SIG_3_Pin);
 8002492:	2140      	movs	r1, #64	; 0x40
 8002494:	4829      	ldr	r0, [pc, #164]	; (800253c <Detect3_status+0xb4>)
 8002496:	f002 f8df 	bl	8004658 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	71bb      	strb	r3, [r7, #6]

    if (detect_connect_chk)
 800249e:	79bb      	ldrb	r3, [r7, #6]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d024      	beq.n	80024ee <Detect3_status+0x66>
    {
        Detect3_Result = 0;
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <Detect3_status+0xb8>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e02b      	b.n	8002504 <Detect3_status+0x7c>
    else
    {

        while (Detect_Check_Count < 20 && Detect3_Result != 0x01U)
        {
            LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT3);
 80024ac:	2004      	movs	r0, #4
 80024ae:	f7fe fd5f 	bl	8000f70 <LiDAR_Protocol_Tx>
            Delay_ms(5);
 80024b2:	2005      	movs	r0, #5
 80024b4:	f7fe f970 	bl	8000798 <Delay_ms>
            if (LiDAR_Model == 0x04) // R300
 80024b8:	4b22      	ldr	r3, [pc, #136]	; (8002544 <Detect3_status+0xbc>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d108      	bne.n	80024d2 <Detect3_status+0x4a>
            {
                Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 80024c0:	2120      	movs	r1, #32
 80024c2:	481e      	ldr	r0, [pc, #120]	; (800253c <Detect3_status+0xb4>)
 80024c4:	f002 f8c8 	bl	8004658 <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <Detect3_status+0xb8>)
 80024ce:	701a      	strb	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <Detect3_status+0x5a>
            }
            else
            {
                Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_3_GPIO_Port, Detect_SIG_3_Pin);
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	4819      	ldr	r0, [pc, #100]	; (800253c <Detect3_status+0xb4>)
 80024d6:	f002 f8bf 	bl	8004658 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <Detect3_status+0xb8>)
 80024e0:	701a      	strb	r2, [r3, #0]
            }

            Detect_Check_Count++;
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <Detect3_status+0xc0>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <Detect3_status+0xc0>)
 80024ec:	701a      	strb	r2, [r3, #0]
        while (Detect_Check_Count < 20 && Detect3_Result != 0x01U)
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <Detect3_status+0xc0>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b13      	cmp	r3, #19
 80024f4:	d803      	bhi.n	80024fe <Detect3_status+0x76>
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <Detect3_status+0xb8>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d1d6      	bne.n	80024ac <Detect3_status+0x24>
        }

        Detect_Check_Count = 0;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <Detect3_status+0xc0>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
    }
    for (uint8_t i = 0; i < 4; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	e00a      	b.n	8002520 <Detect3_status+0x98>
    {
        HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800250a:	2102      	movs	r1, #2
 800250c:	480b      	ldr	r0, [pc, #44]	; (800253c <Detect3_status+0xb4>)
 800250e:	f002 f8bb 	bl	8004688 <HAL_GPIO_TogglePin>
        Delay_ms(500);
 8002512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002516:	f7fe f93f 	bl	8000798 <Delay_ms>
    for (uint8_t i = 0; i < 4; i++)
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	3301      	adds	r3, #1
 800251e:	71fb      	strb	r3, [r7, #7]
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d9f1      	bls.n	800250a <Detect3_status+0x82>
    }
    g_Status = kStatus_Idle;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <Detect3_status+0xc4>)
 8002528:	2204      	movs	r2, #4
 800252a:	701a      	strb	r2, [r3, #0]
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 800252c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002530:	f7ff fe90 	bl	8002254 <LL_EXTI_EnableIT_0_31>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40020000 	.word	0x40020000
 8002540:	20000879 	.word	0x20000879
 8002544:	20000876 	.word	0x20000876
 8002548:	2000087a 	.word	0x2000087a
 800254c:	20000084 	.word	0x20000084

08002550 <Idle_status>:

void Idle_status(void)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b099      	sub	sp, #100	; 0x64
 8002554:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&hViewer, UART_IT_RXNE);
 8002556:	4bb2      	ldr	r3, [pc, #712]	; (8002820 <Idle_status+0x2d0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4bb0      	ldr	r3, [pc, #704]	; (8002820 <Idle_status+0x2d0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	60da      	str	r2, [r3, #12]

    uint8_t checksum = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 800256c:	4aad      	ldr	r2, [pc, #692]	; (8002824 <Idle_status+0x2d4>)
 800256e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002572:	ca07      	ldmia	r2, {r0, r1, r2}
 8002574:	c303      	stmia	r3!, {r0, r1}
 8002576:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 8002578:	4aab      	ldr	r2, [pc, #684]	; (8002828 <Idle_status+0x2d8>)
 800257a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800257e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002580:	c303      	stmia	r3!, {r0, r1}
 8002582:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 8002584:	4aa9      	ldr	r2, [pc, #676]	; (800282c <Idle_status+0x2dc>)
 8002586:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800258a:	ca07      	ldmia	r2, {r0, r1, r2}
 800258c:	c303      	stmia	r3!, {r0, r1}
 800258e:	701a      	strb	r2, [r3, #0]
    uint8_t START_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x24};
 8002590:	4aa7      	ldr	r2, [pc, #668]	; (8002830 <Idle_status+0x2e0>)
 8002592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002596:	ca07      	ldmia	r2, {r0, r1, r2}
 8002598:	c303      	stmia	r3!, {r0, r1}
 800259a:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT1_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x27};
 800259c:	4aa5      	ldr	r2, [pc, #660]	; (8002834 <Idle_status+0x2e4>)
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a4:	c303      	stmia	r3!, {r0, r1}
 80025a6:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT2_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x26};
 80025a8:	4aa3      	ldr	r2, [pc, #652]	; (8002838 <Idle_status+0x2e8>)
 80025aa:	f107 0318 	add.w	r3, r7, #24
 80025ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80025b0:	c303      	stmia	r3!, {r0, r1}
 80025b2:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT3_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x21};
 80025b4:	4aa1      	ldr	r2, [pc, #644]	; (800283c <Idle_status+0x2ec>)
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80025bc:	c303      	stmia	r3!, {r0, r1}
 80025be:	701a      	strb	r2, [r3, #0]
    uint8_t RESET_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x08, 0x00, 0x00, 0x00, 0xD2};
 80025c0:	4a9f      	ldr	r2, [pc, #636]	; (8002840 <Idle_status+0x2f0>)
 80025c2:	463b      	mov	r3, r7
 80025c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80025c6:	c303      	stmia	r3!, {r0, r1}
 80025c8:	701a      	strb	r2, [r3, #0]

    LiDAR_Cur_Check();
 80025ca:	f7fe f833 	bl	8000634 <LiDAR_Cur_Check>

    while (ViewerQueue.data > 0)
 80025ce:	e00d      	b.n	80025ec <Idle_status+0x9c>
    {
        VIEWER_RX_BUFF[VIEWER_RX_Cnt++] = GetDataFromUartQueue(&hViewer);
 80025d0:	4b9c      	ldr	r3, [pc, #624]	; (8002844 <Idle_status+0x2f4>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	b2d1      	uxtb	r1, r2
 80025d8:	4a9a      	ldr	r2, [pc, #616]	; (8002844 <Idle_status+0x2f4>)
 80025da:	7011      	strb	r1, [r2, #0]
 80025dc:	461c      	mov	r4, r3
 80025de:	4890      	ldr	r0, [pc, #576]	; (8002820 <Idle_status+0x2d0>)
 80025e0:	f7ff fe02 	bl	80021e8 <GetDataFromUartQueue>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b97      	ldr	r3, [pc, #604]	; (8002848 <Idle_status+0x2f8>)
 80025ea:	551a      	strb	r2, [r3, r4]
    while (ViewerQueue.data > 0)
 80025ec:	4b97      	ldr	r3, [pc, #604]	; (800284c <Idle_status+0x2fc>)
 80025ee:	889b      	ldrh	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ed      	bne.n	80025d0 <Idle_status+0x80>
    }

    if (VIEWER_RX_BUFF[0] != 0xFA)
 80025f4:	4b94      	ldr	r3, [pc, #592]	; (8002848 <Idle_status+0x2f8>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2bfa      	cmp	r3, #250	; 0xfa
 80025fa:	d008      	beq.n	800260e <Idle_status+0xbe>
    {
        VIEWER_RX_Cnt = 0;
 80025fc:	4b91      	ldr	r3, [pc, #580]	; (8002844 <Idle_status+0x2f4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002602:	2209      	movs	r2, #9
 8002604:	2100      	movs	r1, #0
 8002606:	4890      	ldr	r0, [pc, #576]	; (8002848 <Idle_status+0x2f8>)
 8002608:	f005 f9be 	bl	8007988 <memset>
        {
            VIEWER_RX_Cnt = 0;
            memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
        }
    }
}
 800260c:	e103      	b.n	8002816 <Idle_status+0x2c6>
        checksum = VIEWER_RX_BUFF[0];
 800260e:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <Idle_status+0x2f8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        for (uint8_t i = 1; i < VIEWER_RX_Cnt - 1; i++)
 8002616:	2301      	movs	r3, #1
 8002618:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800261c:	e00d      	b.n	800263a <Idle_status+0xea>
            checksum ^= VIEWER_RX_BUFF[i];
 800261e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002622:	4a89      	ldr	r2, [pc, #548]	; (8002848 <Idle_status+0x2f8>)
 8002624:	5cd2      	ldrb	r2, [r2, r3]
 8002626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800262a:	4053      	eors	r3, r2
 800262c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        for (uint8_t i = 1; i < VIEWER_RX_Cnt - 1; i++)
 8002630:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002634:	3301      	adds	r3, #1
 8002636:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800263a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800263e:	4b81      	ldr	r3, [pc, #516]	; (8002844 <Idle_status+0x2f4>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	3b01      	subs	r3, #1
 8002644:	429a      	cmp	r2, r3
 8002646:	dbea      	blt.n	800261e <Idle_status+0xce>
        if (VIEWER_RX_BUFF[8] == checksum)
 8002648:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <Idle_status+0x2f8>)
 800264a:	7a1b      	ldrb	r3, [r3, #8]
 800264c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 80d8 	bne.w	8002806 <Idle_status+0x2b6>
            if (memcmp(&CONNECT_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC Connect
 8002656:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800265a:	2209      	movs	r2, #9
 800265c:	497a      	ldr	r1, [pc, #488]	; (8002848 <Idle_status+0x2f8>)
 800265e:	4618      	mov	r0, r3
 8002660:	f005 f982 	bl	8007968 <memcmp>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d117      	bne.n	800269a <Idle_status+0x14a>
                GUI_Protocol_Tx(GUI_COMMAND_CONNECT, 1);
 800266a:	2101      	movs	r1, #1
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fcff 	bl	8001070 <GUI_Protocol_Tx>
                connect = 1;
 8002672:	4b77      	ldr	r3, [pc, #476]	; (8002850 <Idle_status+0x300>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
                if (Mode_data == 0)
 8002678:	4b76      	ldr	r3, [pc, #472]	; (8002854 <Idle_status+0x304>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d103      	bne.n	8002688 <Idle_status+0x138>
                    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15);
 8002680:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002684:	f7ff fdf8 	bl	8002278 <LL_EXTI_DisableIT_0_31>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002688:	2209      	movs	r2, #9
 800268a:	2100      	movs	r1, #0
 800268c:	486e      	ldr	r0, [pc, #440]	; (8002848 <Idle_status+0x2f8>)
 800268e:	f005 f97b 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 8002692:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <Idle_status+0x2f4>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e0b1      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&INFO_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Info request
 800269a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269e:	2209      	movs	r2, #9
 80026a0:	4969      	ldr	r1, [pc, #420]	; (8002848 <Idle_status+0x2f8>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f005 f960 	bl	8007968 <memcmp>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <Idle_status+0x17c>
                HAL_UART_Transmit(&hViewer, INFO_RX_BUFF, sizeof(INFO_RX_BUFF), 100);
 80026ae:	2364      	movs	r3, #100	; 0x64
 80026b0:	220d      	movs	r2, #13
 80026b2:	4969      	ldr	r1, [pc, #420]	; (8002858 <Idle_status+0x308>)
 80026b4:	485a      	ldr	r0, [pc, #360]	; (8002820 <Idle_status+0x2d0>)
 80026b6:	f003 feda 	bl	800646e <HAL_UART_Transmit>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80026ba:	2209      	movs	r2, #9
 80026bc:	2100      	movs	r1, #0
 80026be:	4862      	ldr	r0, [pc, #392]	; (8002848 <Idle_status+0x2f8>)
 80026c0:	f005 f962 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 80026c4:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <Idle_status+0x2f4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e098      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&DETECT1_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 80026cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d0:	2209      	movs	r2, #9
 80026d2:	495d      	ldr	r1, [pc, #372]	; (8002848 <Idle_status+0x2f8>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f005 f947 	bl	8007968 <memcmp>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10e      	bne.n	80026fe <Idle_status+0x1ae>
                GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT1, Detect1_Result);
 80026e0:	4b5e      	ldr	r3, [pc, #376]	; (800285c <Idle_status+0x30c>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7fe fdd2 	bl	8001290 <GUI_Protocol_Detect_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80026ec:	2209      	movs	r2, #9
 80026ee:	2100      	movs	r1, #0
 80026f0:	4855      	ldr	r0, [pc, #340]	; (8002848 <Idle_status+0x2f8>)
 80026f2:	f005 f949 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <Idle_status+0x2f4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e07f      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&DETECT2_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 80026fe:	f107 0318 	add.w	r3, r7, #24
 8002702:	2209      	movs	r2, #9
 8002704:	4950      	ldr	r1, [pc, #320]	; (8002848 <Idle_status+0x2f8>)
 8002706:	4618      	mov	r0, r3
 8002708:	f005 f92e 	bl	8007968 <memcmp>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <Idle_status+0x1e0>
                GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT2, Detect2_Result);
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <Idle_status+0x310>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	2003      	movs	r0, #3
 800271a:	f7fe fdb9 	bl	8001290 <GUI_Protocol_Detect_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 800271e:	2209      	movs	r2, #9
 8002720:	2100      	movs	r1, #0
 8002722:	4849      	ldr	r0, [pc, #292]	; (8002848 <Idle_status+0x2f8>)
 8002724:	f005 f930 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 8002728:	4b46      	ldr	r3, [pc, #280]	; (8002844 <Idle_status+0x2f4>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e066      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&DETECT3_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	2209      	movs	r2, #9
 8002736:	4944      	ldr	r1, [pc, #272]	; (8002848 <Idle_status+0x2f8>)
 8002738:	4618      	mov	r0, r3
 800273a:	f005 f915 	bl	8007968 <memcmp>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10e      	bne.n	8002762 <Idle_status+0x212>
                GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT3, Detect3_Result);
 8002744:	4b47      	ldr	r3, [pc, #284]	; (8002864 <Idle_status+0x314>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	2004      	movs	r0, #4
 800274c:	f7fe fda0 	bl	8001290 <GUI_Protocol_Detect_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002750:	2209      	movs	r2, #9
 8002752:	2100      	movs	r1, #0
 8002754:	483c      	ldr	r0, [pc, #240]	; (8002848 <Idle_status+0x2f8>)
 8002756:	f005 f917 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 800275a:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <Idle_status+0x2f4>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e04d      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&MODE_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 8002762:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002766:	2209      	movs	r2, #9
 8002768:	4937      	ldr	r1, [pc, #220]	; (8002848 <Idle_status+0x2f8>)
 800276a:	4618      	mov	r0, r3
 800276c:	f005 f8fc 	bl	8007968 <memcmp>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <Idle_status+0x242>
                GUI_Protocol_Mode_Tx(Mode_data);
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <Idle_status+0x304>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fd00 	bl	8001180 <GUI_Protocol_Mode_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002780:	2209      	movs	r2, #9
 8002782:	2100      	movs	r1, #0
 8002784:	4830      	ldr	r0, [pc, #192]	; (8002848 <Idle_status+0x2f8>)
 8002786:	f005 f8ff 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 800278a:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <Idle_status+0x2f4>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e035      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&START_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 8002792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002796:	2209      	movs	r2, #9
 8002798:	492b      	ldr	r1, [pc, #172]	; (8002848 <Idle_status+0x2f8>)
 800279a:	4618      	mov	r0, r3
 800279c:	f005 f8e4 	bl	8007968 <memcmp>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <Idle_status+0x26e>
                g_Status = kStatus_Test;
 80027a6:	4b30      	ldr	r3, [pc, #192]	; (8002868 <Idle_status+0x318>)
 80027a8:	2205      	movs	r2, #5
 80027aa:	701a      	strb	r2, [r3, #0]
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80027ac:	2209      	movs	r2, #9
 80027ae:	2100      	movs	r1, #0
 80027b0:	4825      	ldr	r0, [pc, #148]	; (8002848 <Idle_status+0x2f8>)
 80027b2:	f005 f8e9 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <Idle_status+0x2f4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e01f      	b.n	80027fe <Idle_status+0x2ae>
            else if (memcmp(&RESET_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 80027be:	463b      	mov	r3, r7
 80027c0:	2209      	movs	r2, #9
 80027c2:	4921      	ldr	r1, [pc, #132]	; (8002848 <Idle_status+0x2f8>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f005 f8cf 	bl	8007968 <memcmp>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d116      	bne.n	80027fe <Idle_status+0x2ae>
                GUI_Protocol_Tx(GUI_COMMAND_RESET, 1);
 80027d0:	2101      	movs	r1, #1
 80027d2:	2008      	movs	r0, #8
 80027d4:	f7fe fc4c 	bl	8001070 <GUI_Protocol_Tx>
                g_Status = kStatus_Info;
 80027d8:	4b23      	ldr	r3, [pc, #140]	; (8002868 <Idle_status+0x318>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
                connect = 0;
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <Idle_status+0x300>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
                memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 80027e4:	220d      	movs	r2, #13
 80027e6:	2100      	movs	r1, #0
 80027e8:	481b      	ldr	r0, [pc, #108]	; (8002858 <Idle_status+0x308>)
 80027ea:	f005 f8cd 	bl	8007988 <memset>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80027ee:	2209      	movs	r2, #9
 80027f0:	2100      	movs	r1, #0
 80027f2:	4815      	ldr	r0, [pc, #84]	; (8002848 <Idle_status+0x2f8>)
 80027f4:	f005 f8c8 	bl	8007988 <memset>
                VIEWER_RX_Cnt = 0;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <Idle_status+0x2f4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
            VIEWER_RX_Cnt = 0;
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <Idle_status+0x2f4>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
}
 8002804:	e007      	b.n	8002816 <Idle_status+0x2c6>
            VIEWER_RX_Cnt = 0;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <Idle_status+0x2f4>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
            memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 800280c:	2209      	movs	r2, #9
 800280e:	2100      	movs	r1, #0
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <Idle_status+0x2f8>)
 8002812:	f005 f8b9 	bl	8007988 <memset>
}
 8002816:	bf00      	nop
 8002818:	3764      	adds	r7, #100	; 0x64
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	20000a20 	.word	0x20000a20
 8002824:	080079f0 	.word	0x080079f0
 8002828:	080079fc 	.word	0x080079fc
 800282c:	08007a08 	.word	0x08007a08
 8002830:	08007a14 	.word	0x08007a14
 8002834:	08007a20 	.word	0x08007a20
 8002838:	08007a2c 	.word	0x08007a2c
 800283c:	08007a38 	.word	0x08007a38
 8002840:	08007a44 	.word	0x08007a44
 8002844:	20000885 	.word	0x20000885
 8002848:	2000087c 	.word	0x2000087c
 800284c:	20000478 	.word	0x20000478
 8002850:	20000866 	.word	0x20000866
 8002854:	2000098b 	.word	0x2000098b
 8002858:	20000868 	.word	0x20000868
 800285c:	20000877 	.word	0x20000877
 8002860:	20000878 	.word	0x20000878
 8002864:	20000879 	.word	0x20000879
 8002868:	20000084 	.word	0x20000084

0800286c <Test_status>:

void Test_status(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0
    uint8_t ETH_BUFF[6] = {' ', 'E', 't', 'h', 'e', 'r'};
 8002872:	4aac      	ldr	r2, [pc, #688]	; (8002b24 <Test_status+0x2b8>)
 8002874:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800287c:	6018      	str	r0, [r3, #0]
 800287e:	3304      	adds	r3, #4
 8002880:	8019      	strh	r1, [r3, #0]
    uint8_t APD_BUFF[6] = {' ', 'A', 'P', 'D', ' ', 'B'};
 8002882:	4aa9      	ldr	r2, [pc, #676]	; (8002b28 <Test_status+0x2bc>)
 8002884:	f107 0320 	add.w	r3, r7, #32
 8002888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800288c:	6018      	str	r0, [r3, #0]
 800288e:	3304      	adds	r3, #4
 8002890:	8019      	strh	r1, [r3, #0]
    uint8_t MOT_BUFF[6] = {' ', 'M', 'o', 't', 'o', 'r'};
 8002892:	4aa6      	ldr	r2, [pc, #664]	; (8002b2c <Test_status+0x2c0>)
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800289c:	6018      	str	r0, [r3, #0]
 800289e:	3304      	adds	r3, #4
 80028a0:	8019      	strh	r1, [r3, #0]
    uint8_t ENC_BUFF[6] = {' ', 'E', 'n', 'c', 'o', 'd'};
 80028a2:	4aa3      	ldr	r2, [pc, #652]	; (8002b30 <Test_status+0x2c4>)
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ac:	6018      	str	r0, [r3, #0]
 80028ae:	3304      	adds	r3, #4
 80028b0:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_INIT_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'I'};
 80028b2:	4aa0      	ldr	r2, [pc, #640]	; (8002b34 <Test_status+0x2c8>)
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028bc:	6018      	str	r0, [r3, #0]
 80028be:	3304      	adds	r3, #4
 80028c0:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_CAL_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'C'};
 80028c2:	4a9d      	ldr	r2, [pc, #628]	; (8002b38 <Test_status+0x2cc>)
 80028c4:	463b      	mov	r3, r7
 80028c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ca:	6018      	str	r0, [r3, #0]
 80028cc:	3304      	adds	r3, #4
 80028ce:	8019      	strh	r1, [r3, #0]

    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15);
 80028d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028d4:	f7ff fcd0 	bl	8002278 <LL_EXTI_DisableIT_0_31>
    HAL_TIM_Base_Start_IT(&htim2);
 80028d8:	4898      	ldr	r0, [pc, #608]	; (8002b3c <Test_status+0x2d0>)
 80028da:	f002 fcf1 	bl	80052c0 <HAL_TIM_Base_Start_IT>

    if (Test_Start_Flag == 0)
 80028de:	4b98      	ldr	r3, [pc, #608]	; (8002b40 <Test_status+0x2d4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 819e 	bne.w	8002c24 <Test_status+0x3b8>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f7fe fb41 	bl	8000f70 <LiDAR_Protocol_Tx>
    }
    while (LiDARQueue.data > 0)
 80028ee:	e199      	b.n	8002c24 <Test_status+0x3b8>
    {
        Test_Start_Flag = 1;
 80028f0:	4b93      	ldr	r3, [pc, #588]	; (8002b40 <Test_status+0x2d4>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
        uint8_t data = GetDataFromUartQueue(&hLiDAR);
 80028f6:	4893      	ldr	r0, [pc, #588]	; (8002b44 <Test_status+0x2d8>)
 80028f8:	f7ff fc76 	bl	80021e8 <GetDataFromUartQueue>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        // if (data != '\n') // non carriage return
        if (data != ']' && data != '\n')
 8002902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002906:	2b5d      	cmp	r3, #93	; 0x5d
 8002908:	d00f      	beq.n	800292a <Test_status+0xbe>
 800290a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800290e:	2b0a      	cmp	r3, #10
 8002910:	d00b      	beq.n	800292a <Test_status+0xbe>
        {
            LiDAR_RX_BUFF[LiDAR_RX_Cnt++] = data;
 8002912:	4b8d      	ldr	r3, [pc, #564]	; (8002b48 <Test_status+0x2dc>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	b2d1      	uxtb	r1, r2
 800291a:	4a8b      	ldr	r2, [pc, #556]	; (8002b48 <Test_status+0x2dc>)
 800291c:	7011      	strb	r1, [r2, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4a8a      	ldr	r2, [pc, #552]	; (8002b4c <Test_status+0x2e0>)
 8002922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002926:	5453      	strb	r3, [r2, r1]
 8002928:	e17c      	b.n	8002c24 <Test_status+0x3b8>
        }
        else if (data == ']') // input carriage return
 800292a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800292e:	2b5d      	cmp	r3, #93	; 0x5d
 8002930:	f040 816b 	bne.w	8002c0a <Test_status+0x39e>
        {
            if (LiDAR_RX_BUFF[LiDAR_RX_Cnt - 2] == 'o' && LiDAR_RX_BUFF[LiDAR_RX_Cnt - 1] == 'k')
 8002934:	4b84      	ldr	r3, [pc, #528]	; (8002b48 <Test_status+0x2dc>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3b02      	subs	r3, #2
 800293a:	4a84      	ldr	r2, [pc, #528]	; (8002b4c <Test_status+0x2e0>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	2b6f      	cmp	r3, #111	; 0x6f
 8002940:	f040 80a0 	bne.w	8002a84 <Test_status+0x218>
 8002944:	4b80      	ldr	r3, [pc, #512]	; (8002b48 <Test_status+0x2dc>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <Test_status+0x2e0>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	2b6b      	cmp	r3, #107	; 0x6b
 8002950:	f040 8098 	bne.w	8002a84 <Test_status+0x218>
            {
                if (memcmp(ETH_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002958:	2206      	movs	r2, #6
 800295a:	497c      	ldr	r1, [pc, #496]	; (8002b4c <Test_status+0x2e0>)
 800295c:	4618      	mov	r0, r3
 800295e:	f005 f803 	bl	8007968 <memcmp>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <Test_status+0x106>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ETHERNET, 0x00);
 8002968:	2100      	movs	r1, #0
 800296a:	2002      	movs	r0, #2
 800296c:	f7fe fb80 	bl	8001070 <GUI_Protocol_Tx>
 8002970:	e07e      	b.n	8002a70 <Test_status+0x204>
                }
                else if (memcmp(APD_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002972:	f107 0320 	add.w	r3, r7, #32
 8002976:	2206      	movs	r2, #6
 8002978:	4974      	ldr	r1, [pc, #464]	; (8002b4c <Test_status+0x2e0>)
 800297a:	4618      	mov	r0, r3
 800297c:	f004 fff4 	bl	8007968 <memcmp>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <Test_status+0x124>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_APD_BIAS, 0x00);
 8002986:	2100      	movs	r1, #0
 8002988:	2003      	movs	r0, #3
 800298a:	f7fe fb71 	bl	8001070 <GUI_Protocol_Tx>
 800298e:	e06f      	b.n	8002a70 <Test_status+0x204>
                }
                else if (memcmp(MOT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002990:	f107 0318 	add.w	r3, r7, #24
 8002994:	2206      	movs	r2, #6
 8002996:	496d      	ldr	r1, [pc, #436]	; (8002b4c <Test_status+0x2e0>)
 8002998:	4618      	mov	r0, r3
 800299a:	f004 ffe5 	bl	8007968 <memcmp>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <Test_status+0x142>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_MOT_SPEED, 0x00);
 80029a4:	2100      	movs	r1, #0
 80029a6:	2004      	movs	r0, #4
 80029a8:	f7fe fb62 	bl	8001070 <GUI_Protocol_Tx>
 80029ac:	e060      	b.n	8002a70 <Test_status+0x204>
                }
                else if (memcmp(ENC_BUFF, LiDAR_RX_BUFF, 6) == 0)
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	2206      	movs	r2, #6
 80029b4:	4965      	ldr	r1, [pc, #404]	; (8002b4c <Test_status+0x2e0>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 ffd6 	bl	8007968 <memcmp>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <Test_status+0x160>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ENC_CHECK, 0x00);
 80029c2:	2100      	movs	r1, #0
 80029c4:	2005      	movs	r0, #5
 80029c6:	f7fe fb53 	bl	8001070 <GUI_Protocol_Tx>
 80029ca:	e051      	b.n	8002a70 <Test_status+0x204>
                }
                else if (memcmp(TDC_INIT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 80029cc:	f107 0308 	add.w	r3, r7, #8
 80029d0:	2206      	movs	r2, #6
 80029d2:	495e      	ldr	r1, [pc, #376]	; (8002b4c <Test_status+0x2e0>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f004 ffc7 	bl	8007968 <memcmp>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <Test_status+0x17e>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_INIT, 0x00);
 80029e0:	2100      	movs	r1, #0
 80029e2:	2006      	movs	r0, #6
 80029e4:	f7fe fb44 	bl	8001070 <GUI_Protocol_Tx>
 80029e8:	e042      	b.n	8002a70 <Test_status+0x204>
                }
                else if (memcmp(TDC_CAL_BUFF, LiDAR_RX_BUFF, 6) == 0)
 80029ea:	463b      	mov	r3, r7
 80029ec:	2206      	movs	r2, #6
 80029ee:	4957      	ldr	r1, [pc, #348]	; (8002b4c <Test_status+0x2e0>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 ffb9 	bl	8007968 <memcmp>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d139      	bne.n	8002a70 <Test_status+0x204>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_CAL, 0x00);
 80029fc:	2100      	movs	r1, #0
 80029fe:	2007      	movs	r0, #7
 8002a00:	f7fe fb36 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002a04:	4b52      	ldr	r3, [pc, #328]	; (8002b50 <Test_status+0x2e4>)
 8002a06:	2206      	movs	r2, #6
 8002a08:	701a      	strb	r2, [r3, #0]

                    if (LiDAR_Model == 0x04)
 8002a0a:	4b52      	ldr	r3, [pc, #328]	; (8002b54 <Test_status+0x2e8>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d113      	bne.n	8002a3a <Test_status+0x1ce>
                    {
                        if (Detect1_Result == 0)
 8002a12:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <Test_status+0x2ec>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <Test_status+0x1b6>
                        {
                            g_Result = kResult_Err_2;
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <Test_status+0x2f0>)
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e026      	b.n	8002a70 <Test_status+0x204>
                        }
                        else if (Detect3_Result == 0)
 8002a22:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <Test_status+0x2f4>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <Test_status+0x1c6>
                        {
                            g_Result = kResult_Err_4;
 8002a2a:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <Test_status+0x2f0>)
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e01e      	b.n	8002a70 <Test_status+0x204>
                        }
                        else
                        {
                            g_Result = kResult_Pass;
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <Test_status+0x2f0>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e01a      	b.n	8002a70 <Test_status+0x204>
                        }
                    }

                    else
                    {
                        if (Detect1_Result == 0)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <Test_status+0x2ec>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <Test_status+0x1de>
                        {
                            g_Result = kResult_Err_2;
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <Test_status+0x2f0>)
 8002a44:	2203      	movs	r2, #3
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	e012      	b.n	8002a70 <Test_status+0x204>
                        }
                        else if (Detect2_Result == 0)
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <Test_status+0x2f8>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <Test_status+0x1ee>
                        {
                            g_Result = kResult_Err_3;
 8002a52:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <Test_status+0x2f0>)
 8002a54:	2204      	movs	r2, #4
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e00a      	b.n	8002a70 <Test_status+0x204>
                        }
                        else if (Detect3_Result == 0)
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <Test_status+0x2f4>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <Test_status+0x1fe>
                        {
                            g_Result = kResult_Err_4;
 8002a62:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <Test_status+0x2f0>)
 8002a64:	2205      	movs	r2, #5
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e002      	b.n	8002a70 <Test_status+0x204>
                        }
                        else
                        {
                            g_Result = kResult_Pass;
 8002a6a:	4b3c      	ldr	r3, [pc, #240]	; (8002b5c <Test_status+0x2f0>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
                    }
                }
                else
                {
                };
                memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a74:	2100      	movs	r1, #0
 8002a76:	4835      	ldr	r0, [pc, #212]	; (8002b4c <Test_status+0x2e0>)
 8002a78:	f004 ff86 	bl	8007988 <memset>
                LiDAR_RX_Cnt = 0;
 8002a7c:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <Test_status+0x2dc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e0cf      	b.n	8002c24 <Test_status+0x3b8>
            }
            else if (LiDAR_RX_BUFF[LiDAR_RX_Cnt - 2] == 'i' && LiDAR_RX_BUFF[LiDAR_RX_Cnt - 1] == 'l')
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <Test_status+0x2dc>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	3b02      	subs	r3, #2
 8002a8a:	4a30      	ldr	r2, [pc, #192]	; (8002b4c <Test_status+0x2e0>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	2b69      	cmp	r3, #105	; 0x69
 8002a90:	f040 80b1 	bne.w	8002bf6 <Test_status+0x38a>
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <Test_status+0x2dc>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <Test_status+0x2e0>)
 8002a9c:	5cd3      	ldrb	r3, [r2, r3]
 8002a9e:	2b6c      	cmp	r3, #108	; 0x6c
 8002aa0:	f040 80a9 	bne.w	8002bf6 <Test_status+0x38a>
            {
                if (memcmp(ETH_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aa8:	2206      	movs	r2, #6
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <Test_status+0x2e0>)
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 ff5b 	bl	8007968 <memcmp>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <Test_status+0x262>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ETHERNET, 0x01);
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2002      	movs	r0, #2
 8002abc:	f7fe fad8 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <Test_status+0x2e4>)
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_5;
 8002ac6:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <Test_status+0x2f0>)
 8002ac8:	2206      	movs	r2, #6
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	e089      	b.n	8002be2 <Test_status+0x376>
                }
                else if (memcmp(APD_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	2206      	movs	r2, #6
 8002ad4:	491d      	ldr	r1, [pc, #116]	; (8002b4c <Test_status+0x2e0>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 ff46 	bl	8007968 <memcmp>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10a      	bne.n	8002af8 <Test_status+0x28c>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_APD_BIAS, 0x01);
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f7fe fac3 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <Test_status+0x2e4>)
 8002aec:	2206      	movs	r2, #6
 8002aee:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_6;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <Test_status+0x2f0>)
 8002af2:	2207      	movs	r2, #7
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e074      	b.n	8002be2 <Test_status+0x376>
                }
                else if (memcmp(MOT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002af8:	f107 0318 	add.w	r3, r7, #24
 8002afc:	2206      	movs	r2, #6
 8002afe:	4913      	ldr	r1, [pc, #76]	; (8002b4c <Test_status+0x2e0>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 ff31 	bl	8007968 <memcmp>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d12d      	bne.n	8002b68 <Test_status+0x2fc>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_MOT_SPEED, 0x01);
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2004      	movs	r0, #4
 8002b10:	f7fe faae 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <Test_status+0x2e4>)
 8002b16:	2206      	movs	r2, #6
 8002b18:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_7;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <Test_status+0x2f0>)
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e05f      	b.n	8002be2 <Test_status+0x376>
 8002b22:	bf00      	nop
 8002b24:	08007a50 	.word	0x08007a50
 8002b28:	08007a58 	.word	0x08007a58
 8002b2c:	08007a60 	.word	0x08007a60
 8002b30:	08007a68 	.word	0x08007a68
 8002b34:	08007a70 	.word	0x08007a70
 8002b38:	08007a78 	.word	0x08007a78
 8002b3c:	20000990 	.word	0x20000990
 8002b40:	20000989 	.word	0x20000989
 8002b44:	20000a64 	.word	0x20000a64
 8002b48:	20000988 	.word	0x20000988
 8002b4c:	20000888 	.word	0x20000888
 8002b50:	20000084 	.word	0x20000084
 8002b54:	20000876 	.word	0x20000876
 8002b58:	20000877 	.word	0x20000877
 8002b5c:	20000087 	.word	0x20000087
 8002b60:	20000879 	.word	0x20000879
 8002b64:	20000878 	.word	0x20000878
                }
                else if (memcmp(ENC_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	2206      	movs	r2, #6
 8002b6e:	4935      	ldr	r1, [pc, #212]	; (8002c44 <Test_status+0x3d8>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 fef9 	bl	8007968 <memcmp>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <Test_status+0x326>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ENC_CHECK, 0x01);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2005      	movs	r0, #5
 8002b80:	f7fe fa76 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002b84:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <Test_status+0x3dc>)
 8002b86:	2206      	movs	r2, #6
 8002b88:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_8;
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <Test_status+0x3e0>)
 8002b8c:	2209      	movs	r2, #9
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e027      	b.n	8002be2 <Test_status+0x376>
                }
                else if (memcmp(TDC_INIT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002b92:	f107 0308 	add.w	r3, r7, #8
 8002b96:	2206      	movs	r2, #6
 8002b98:	492a      	ldr	r1, [pc, #168]	; (8002c44 <Test_status+0x3d8>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fee4 	bl	8007968 <memcmp>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <Test_status+0x350>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_INIT, 0x01);
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	2006      	movs	r0, #6
 8002baa:	f7fe fa61 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <Test_status+0x3dc>)
 8002bb0:	2206      	movs	r2, #6
 8002bb2:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_9;
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <Test_status+0x3e0>)
 8002bb6:	220a      	movs	r2, #10
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e012      	b.n	8002be2 <Test_status+0x376>
                }
                else if (memcmp(TDC_CAL_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	2206      	movs	r2, #6
 8002bc0:	4920      	ldr	r1, [pc, #128]	; (8002c44 <Test_status+0x3d8>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fed0 	bl	8007968 <memcmp>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <Test_status+0x376>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_CAL, 0x01);
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2007      	movs	r0, #7
 8002bd2:	f7fe fa4d 	bl	8001070 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <Test_status+0x3dc>)
 8002bd8:	2206      	movs	r2, #6
 8002bda:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_10;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <Test_status+0x3e0>)
 8002bde:	220b      	movs	r2, #11
 8002be0:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                };
                memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002be6:	2100      	movs	r1, #0
 8002be8:	4816      	ldr	r0, [pc, #88]	; (8002c44 <Test_status+0x3d8>)
 8002bea:	f004 fecd 	bl	8007988 <memset>
                LiDAR_RX_Cnt = 0;
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <Test_status+0x3e4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e016      	b.n	8002c24 <Test_status+0x3b8>
            }
            else
            {
                memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4811      	ldr	r0, [pc, #68]	; (8002c44 <Test_status+0x3d8>)
 8002bfe:	f004 fec3 	bl	8007988 <memset>
                LiDAR_RX_Cnt = 0;
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <Test_status+0x3e4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
 8002c08:	e00c      	b.n	8002c24 <Test_status+0x3b8>
            }
        }
        else if (data == 0x0A) // LF
 8002c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d108      	bne.n	8002c24 <Test_status+0x3b8>
        {
            memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c16:	2100      	movs	r1, #0
 8002c18:	480a      	ldr	r0, [pc, #40]	; (8002c44 <Test_status+0x3d8>)
 8002c1a:	f004 feb5 	bl	8007988 <memset>
            LiDAR_RX_Cnt = 0;
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <Test_status+0x3e4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    while (LiDARQueue.data > 0)
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <Test_status+0x3e8>)
 8002c26:	889b      	ldrh	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f ae61 	bne.w	80028f0 <Test_status+0x84>
        }
    }
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 8002c2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c32:	f7ff fb0f 	bl	8002254 <LL_EXTI_EnableIT_0_31>
    HAL_TIM_Base_Stop_IT(&htim2);
 8002c36:	4808      	ldr	r0, [pc, #32]	; (8002c58 <Test_status+0x3ec>)
 8002c38:	f002 fbb2 	bl	80053a0 <HAL_TIM_Base_Stop_IT>
}
 8002c3c:	bf00      	nop
 8002c3e:	3730      	adds	r7, #48	; 0x30
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000888 	.word	0x20000888
 8002c48:	20000084 	.word	0x20000084
 8002c4c:	20000087 	.word	0x20000087
 8002c50:	20000988 	.word	0x20000988
 8002c54:	20000088 	.word	0x20000088
 8002c58:	20000990 	.word	0x20000990

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6153      	str	r3, [r2, #20]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <NMI_Handler+0x4>

08002cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x4>

08002d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler+0x4>

08002d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d44:	f000 fd20 	bl	8003788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 8002d50:	f000 f8e8 	bl	8002f24 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7ff ffa9 	bl	8002cac <LL_EXTI_IsActiveFlag_0_31>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7ff ffb9 	bl	8002cd8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <TIM2_IRQHandler+0x10>)
 8002d72:	f002 fcd5 	bl	8005720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000990 	.word	0x20000990

08002d80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (Mode_data == 0) // jig mode
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <EXTI15_10_IRQHandler+0x68>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <EXTI15_10_IRQHandler+0x14>
  {
    g_Status = kStatus_Test;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <EXTI15_10_IRQHandler+0x6c>)
 8002d8e:	2205      	movs	r2, #5
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e01b      	b.n	8002dcc <EXTI15_10_IRQHandler+0x4c>
  }
  else // tx mode
  {
    if (tx_start_flag == 0)
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <EXTI15_10_IRQHandler+0x70>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <EXTI15_10_IRQHandler+0x36>
    {
      tx_start_flag = 1;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <EXTI15_10_IRQHandler+0x70>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
      __HAL_UART_DISABLE_IT(&hViewer, UART_IT_RXNE);
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <EXTI15_10_IRQHandler+0x74>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <EXTI15_10_IRQHandler+0x74>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0220 	bic.w	r2, r2, #32
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e00a      	b.n	8002dcc <EXTI15_10_IRQHandler+0x4c>
    }
    else
    {
      tx_start_flag = 0;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <EXTI15_10_IRQHandler+0x70>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(&hViewer, UART_IT_RXNE);
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <EXTI15_10_IRQHandler+0x74>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <EXTI15_10_IRQHandler+0x74>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	60da      	str	r2, [r3, #12]
    }
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002dcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dd0:	f7ff ff6c 	bl	8002cac <LL_EXTI_IsActiveFlag_0_31>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <EXTI15_10_IRQHandler+0x62>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002dda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dde:	f7ff ff7b 	bl	8002cd8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000098b 	.word	0x2000098b
 8002dec:	20000084 	.word	0x20000084
 8002df0:	2000098a 	.word	0x2000098a
 8002df4:	20000a20 	.word	0x20000a20

08002df8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  if (g_Status == kStatus_Idle)
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <UART5_IRQHandler+0x54>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d11a      	bne.n	8002e3e <UART5_IRQHandler+0x46>
  {
    if ((__HAL_UART_GET_FLAG(&hViewer, UART_FLAG_RXNE) != RESET))
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <UART5_IRQHandler+0x58>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d107      	bne.n	8002e26 <UART5_IRQHandler+0x2e>
    {
      PutDataToUartQueue(&hViewer, (uint8_t)(hViewer.Instance->DR & (uint8_t)0x00FF));
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <UART5_IRQHandler+0x58>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	480b      	ldr	r0, [pc, #44]	; (8002e50 <UART5_IRQHandler+0x58>)
 8002e22:	f7ff f9ad 	bl	8002180 <PutDataToUartQueue>
    }
    __HAL_UART_CLEAR_PEFLAG(&hViewer); /* clear event flag */
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <UART5_IRQHandler+0x58>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <UART5_IRQHandler+0x58>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
    return;
 8002e3c:	e002      	b.n	8002e44 <UART5_IRQHandler+0x4c>
  }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002e3e:	4804      	ldr	r0, [pc, #16]	; (8002e50 <UART5_IRQHandler+0x58>)
 8002e40:	f003 fba8 	bl	8006594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000084 	.word	0x20000084
 8002e50:	20000a20 	.word	0x20000a20

08002e54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&hLiDAR, UART_FLAG_RXNE) != RESET))
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <USART6_IRQHandler+0x44>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d107      	bne.n	8002e78 <USART6_IRQHandler+0x24>
  {
    PutDataToUartQueue(&hLiDAR, (uint8_t)(hLiDAR.Instance->DR & (uint8_t)0x00FF));
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <USART6_IRQHandler+0x44>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	4809      	ldr	r0, [pc, #36]	; (8002e98 <USART6_IRQHandler+0x44>)
 8002e74:	f7ff f984 	bl	8002180 <PutDataToUartQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&hLiDAR); /* clear event flag */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <USART6_IRQHandler+0x44>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <USART6_IRQHandler+0x44>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
  return;
 8002e8e:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000a64 	.word	0x20000a64

08002e9c <LL_GPIO_SetOutputPin>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	619a      	str	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_GPIO_ResetOutputPin>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	619a      	str	r2, [r3, #24]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <LL_EXTI_EnableIT_0_31>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40013c00 	.word	0x40013c00

08002efc <LL_EXTI_DisableIT_0_31>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40013c00 	.word	0x40013c00

08002f24 <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4816      	ldr	r0, [pc, #88]	; (8002f84 <switch_check+0x60>)
 8002f2c:	f001 fb94 	bl	8004658 <HAL_GPIO_ReadPin>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <switch_check+0x3c>
    {
        Mode_data = 0x00U;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <switch_check+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f40:	4810      	ldr	r0, [pc, #64]	; (8002f84 <switch_check+0x60>)
 8002f42:	f7ff ffab 	bl	8002e9c <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	4810      	ldr	r0, [pc, #64]	; (8002f8c <switch_check+0x68>)
 8002f4a:	f7ff ffb5 	bl	8002eb8 <LL_GPIO_ResetOutputPin>
        if (connect)
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <switch_check+0x6c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d014      	beq.n	8002f80 <switch_check+0x5c>
        {
            LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15); // Viewer start button enable only
 8002f56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f5a:	f7ff ffcf 	bl	8002efc <LL_EXTI_DisableIT_0_31>
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
        LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
    }
 8002f5e:	e00f      	b.n	8002f80 <switch_check+0x5c>
        Mode_data = 0x01U;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <switch_check+0x64>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f6a:	4806      	ldr	r0, [pc, #24]	; (8002f84 <switch_check+0x60>)
 8002f6c:	f7ff ffa4 	bl	8002eb8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8002f70:	2180      	movs	r1, #128	; 0x80
 8002f72:	4806      	ldr	r0, [pc, #24]	; (8002f8c <switch_check+0x68>)
 8002f74:	f7ff ff92 	bl	8002e9c <LL_GPIO_SetOutputPin>
        LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 8002f78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f7c:	f7ff ffac 	bl	8002ed8 <LL_EXTI_EnableIT_0_31>
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40020400 	.word	0x40020400
 8002f88:	2000098b 	.word	0x2000098b
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	20000866 	.word	0x20000866

08002f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <SystemInit+0x20>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <SystemInit+0x20>)
 8002fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <LL_GPIO_SetOutputPin>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	619a      	str	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_GPIO_ResetOutputPin>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	041a      	lsls	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffa:	f107 0308 	add.w	r3, r7, #8
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003008:	463b      	mov	r3, r7
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003010:	4b1e      	ldr	r3, [pc, #120]	; (800308c <MX_TIM2_Init+0x98>)
 8003012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <MX_TIM2_Init+0x98>)
 800301a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800301e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <MX_TIM2_Init+0x98>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <MX_TIM2_Init+0x98>)
 8003028:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800302c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <MX_TIM2_Init+0x98>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <MX_TIM2_Init+0x98>)
 8003036:	2200      	movs	r2, #0
 8003038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800303a:	4814      	ldr	r0, [pc, #80]	; (800308c <MX_TIM2_Init+0x98>)
 800303c:	f002 f8f0 	bl	8005220 <HAL_TIM_Base_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003046:	f7fd ff8d 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800304a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	4619      	mov	r1, r3
 8003056:	480d      	ldr	r0, [pc, #52]	; (800308c <MX_TIM2_Init+0x98>)
 8003058:	f002 fd2c 	bl	8005ab4 <HAL_TIM_ConfigClockSource>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003062:	f7fd ff7f 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800306e:	463b      	mov	r3, r7
 8003070:	4619      	mov	r1, r3
 8003072:	4806      	ldr	r0, [pc, #24]	; (800308c <MX_TIM2_Init+0x98>)
 8003074:	f003 f91e 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800307e:	f7fd ff71 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000990 	.word	0x20000990

08003090 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	; 0x38
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a4:	f107 0320 	add.w	r3, r7, #32
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ae:	1d3b      	adds	r3, r7, #4
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	611a      	str	r2, [r3, #16]
 80030bc:	615a      	str	r2, [r3, #20]
 80030be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030c2:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <MX_TIM3_Init+0xe8>)
 80030c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030c8:	222c      	movs	r2, #44	; 0x2c
 80030ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030e6:	4823      	ldr	r0, [pc, #140]	; (8003174 <MX_TIM3_Init+0xe4>)
 80030e8:	f002 f89a 	bl	8005220 <HAL_TIM_Base_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80030f2:	f7fd ff37 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003100:	4619      	mov	r1, r3
 8003102:	481c      	ldr	r0, [pc, #112]	; (8003174 <MX_TIM3_Init+0xe4>)
 8003104:	f002 fcd6 	bl	8005ab4 <HAL_TIM_ConfigClockSource>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800310e:	f7fd ff29 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003112:	4818      	ldr	r0, [pc, #96]	; (8003174 <MX_TIM3_Init+0xe4>)
 8003114:	f002 f973 	bl	80053fe <HAL_TIM_PWM_Init>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800311e:	f7fd ff21 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800312a:	f107 0320 	add.w	r3, r7, #32
 800312e:	4619      	mov	r1, r3
 8003130:	4810      	ldr	r0, [pc, #64]	; (8003174 <MX_TIM3_Init+0xe4>)
 8003132:	f003 f8bf 	bl	80062b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800313c:	f7fd ff12 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003140:	2360      	movs	r3, #96	; 0x60
 8003142:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8003144:	23f9      	movs	r3, #249	; 0xf9
 8003146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	2208      	movs	r2, #8
 8003154:	4619      	mov	r1, r3
 8003156:	4807      	ldr	r0, [pc, #28]	; (8003174 <MX_TIM3_Init+0xe4>)
 8003158:	f002 fbea 	bl	8005930 <HAL_TIM_PWM_ConfigChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003162:	f7fd feff 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003166:	4803      	ldr	r0, [pc, #12]	; (8003174 <MX_TIM3_Init+0xe4>)
 8003168:	f000 f864 	bl	8003234 <HAL_TIM_MspPostInit>

}
 800316c:	bf00      	nop
 800316e:	3738      	adds	r7, #56	; 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200009d8 	.word	0x200009d8
 8003178:	40000400 	.word	0x40000400

0800317c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d12c      	bne.n	80031f8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	4b21      	ldr	r3, [pc, #132]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a20      	ldr	r2, [pc, #128]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a19      	ldr	r2, [pc, #100]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031d6:	2304      	movs	r3, #4
 80031d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e6:	2301      	movs	r3, #1
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	480e      	ldr	r0, [pc, #56]	; (800322c <HAL_TIM_Base_MspInit+0xb0>)
 80031f2:	f001 f89d 	bl	8004330 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80031f6:	e012      	b.n	800321e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_TIM_Base_MspInit+0xb4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10d      	bne.n	800321e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_TIM_Base_MspInit+0xac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40020400 	.word	0x40020400
 8003230:	40000400 	.word	0x40000400

08003234 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_TIM_MspPostInit+0x68>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d11e      	bne.n	8003294 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003276:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003284:	2302      	movs	r3, #2
 8003286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	4619      	mov	r1, r3
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <HAL_TIM_MspPostInit+0x70>)
 8003290:	f001 f84e 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003294:	bf00      	nop
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40000400 	.word	0x40000400
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020800 	.word	0x40020800

080032a8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	f040 80de 	bne.w	8003478 <HAL_TIM_PeriodElapsedCallback+0x1d0>
  {
    switch (loading_count)
 80032bc:	4b71      	ldr	r3, [pc, #452]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b0b      	cmp	r3, #11
 80032c4:	f200 80d9 	bhi.w	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	08003301 	.word	0x08003301
 80032d4:	08003323 	.word	0x08003323
 80032d8:	0800333b 	.word	0x0800333b
 80032dc:	08003355 	.word	0x08003355
 80032e0:	08003377 	.word	0x08003377
 80032e4:	0800339b 	.word	0x0800339b
 80032e8:	080033c1 	.word	0x080033c1
 80032ec:	080033db 	.word	0x080033db
 80032f0:	080033f3 	.word	0x080033f3
 80032f4:	0800340d 	.word	0x0800340d
 80032f8:	08003433 	.word	0x08003433
 80032fc:	08003457 	.word	0x08003457
    {
    case 0:
      LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8003300:	2104      	movs	r1, #4
 8003302:	4861      	ldr	r0, [pc, #388]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003304:	f7ff fe58 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8003308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800330c:	485e      	ldr	r0, [pc, #376]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800330e:	f7ff fe61 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8003312:	2101      	movs	r1, #1
 8003314:	485c      	ldr	r0, [pc, #368]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003316:	f7ff fe4f 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 1;
 800331a:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
      break;
 8003320:	e0ab      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 1:
      LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8003322:	2101      	movs	r1, #1
 8003324:	4858      	ldr	r0, [pc, #352]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003326:	f7ff fe55 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800332a:	2102      	movs	r1, #2
 800332c:	4856      	ldr	r0, [pc, #344]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800332e:	f7ff fe43 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 2;
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]
      break;
 8003338:	e09f      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 2:
      LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800333a:	2102      	movs	r1, #2
 800333c:	4852      	ldr	r0, [pc, #328]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800333e:	f7ff fe49 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8003342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003346:	4851      	ldr	r0, [pc, #324]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003348:	f7ff fe36 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 3;
 800334c:	4b4d      	ldr	r3, [pc, #308]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800334e:	2203      	movs	r2, #3
 8003350:	701a      	strb	r2, [r3, #0]
      break;
 8003352:	e092      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 3:
      LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8003354:	2104      	movs	r1, #4
 8003356:	484c      	ldr	r0, [pc, #304]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003358:	f7ff fe3c 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 800335c:	2120      	movs	r1, #32
 800335e:	484b      	ldr	r0, [pc, #300]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003360:	f7ff fe2a 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8003364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003368:	4848      	ldr	r0, [pc, #288]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800336a:	f7ff fe25 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 4;
 800336e:	4b45      	ldr	r3, [pc, #276]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003370:	2204      	movs	r2, #4
 8003372:	701a      	strb	r2, [r3, #0]
      break;
 8003374:	e081      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 4:
      LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8003376:	2120      	movs	r1, #32
 8003378:	4844      	ldr	r0, [pc, #272]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800337a:	f7ff fe2b 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 800337e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003382:	4841      	ldr	r0, [pc, #260]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003384:	f7ff fe18 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8003388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338c:	483f      	ldr	r0, [pc, #252]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800338e:	f7ff fe13 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 5;
 8003392:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003394:	2205      	movs	r2, #5
 8003396:	701a      	strb	r2, [r3, #0]
      break;
 8003398:	e06f      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 5:
      LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 800339a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800339e:	483a      	ldr	r0, [pc, #232]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033a0:	f7ff fe18 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80033a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033a8:	4837      	ldr	r0, [pc, #220]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033aa:	f7ff fe05 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80033ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b2:	4836      	ldr	r0, [pc, #216]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033b4:	f7ff fe00 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 6;
 80033b8:	4b32      	ldr	r3, [pc, #200]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033ba:	2206      	movs	r2, #6
 80033bc:	701a      	strb	r2, [r3, #0]
      break;
 80033be:	e05c      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 6:
      LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80033c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033c4:	4831      	ldr	r0, [pc, #196]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033c6:	f7ff fe05 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	482f      	ldr	r0, [pc, #188]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033ce:	f7ff fdf3 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 7;
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	701a      	strb	r2, [r3, #0]
      break;
 80033d8:	e04f      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 7:
      LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	482b      	ldr	r0, [pc, #172]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033de:	f7ff fdf9 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	4829      	ldr	r0, [pc, #164]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033e6:	f7ff fde7 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 8;
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033ec:	2208      	movs	r2, #8
 80033ee:	701a      	strb	r2, [r3, #0]
      break;
 80033f0:	e043      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 8:
      LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	4825      	ldr	r0, [pc, #148]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033f6:	f7ff fded 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80033fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033fe:	4822      	ldr	r0, [pc, #136]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003400:	f7ff fdda 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 9;
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003406:	2209      	movs	r2, #9
 8003408:	701a      	strb	r2, [r3, #0]
      break;
 800340a:	e036      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 9:
      LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800340c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003410:	481d      	ldr	r0, [pc, #116]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003412:	f7ff fddf 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8003416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800341a:	481b      	ldr	r0, [pc, #108]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800341c:	f7ff fdcc 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8003420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003424:	4818      	ldr	r0, [pc, #96]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003426:	f7ff fdc7 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 10;
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800342c:	220a      	movs	r2, #10
 800342e:	701a      	strb	r2, [r3, #0]
      break;
 8003430:	e023      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 10:
      LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8003432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003436:	4814      	ldr	r0, [pc, #80]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003438:	f7ff fdcc 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 800343c:	2120      	movs	r1, #32
 800343e:	4813      	ldr	r0, [pc, #76]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003440:	f7ff fdba 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8003444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003448:	480f      	ldr	r0, [pc, #60]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800344a:	f7ff fdb5 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 11;
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003450:	220b      	movs	r2, #11
 8003452:	701a      	strb	r2, [r3, #0]
      break;
 8003454:	e011      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 11:
      LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8003456:	2120      	movs	r1, #32
 8003458:	480c      	ldr	r0, [pc, #48]	; (800348c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800345a:	f7ff fdbb 	bl	8002fd4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 800345e:	2104      	movs	r1, #4
 8003460:	4809      	ldr	r0, [pc, #36]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003462:	f7ff fda9 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8003466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800346a:	4807      	ldr	r0, [pc, #28]	; (8003488 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800346c:	f7ff fda4 	bl	8002fb8 <LL_GPIO_SetOutputPin>
      loading_count = 0;
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
      break;
 8003476:	e000      	b.n	800347a <HAL_TIM_PeriodElapsedCallback+0x1d2>
    }
  }
 8003478:	bf00      	nop
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	2000098c 	.word	0x2000098c
 8003488:	40020800 	.word	0x40020800
 800348c:	40020400 	.word	0x40020400

08003490 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <MX_UART5_Init+0x4c>)
 8003496:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <MX_UART5_Init+0x50>)
 8003498:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <MX_UART5_Init+0x4c>)
 800349c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <MX_UART5_Init+0x4c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <MX_UART5_Init+0x4c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <MX_UART5_Init+0x4c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <MX_UART5_Init+0x4c>)
 80034b6:	220c      	movs	r2, #12
 80034b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <MX_UART5_Init+0x4c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <MX_UART5_Init+0x4c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <MX_UART5_Init+0x4c>)
 80034c8:	f002 ff84 	bl	80063d4 <HAL_UART_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80034d2:	f7fd fd47 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000a20 	.word	0x20000a20
 80034e0:	40005000 	.word	0x40005000

080034e4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034e8:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <MX_USART6_UART_Init+0x50>)
 80034ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 80034f0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80034f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 800350a:	220c      	movs	r2, #12
 800350c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350e:	4b08      	ldr	r3, [pc, #32]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 8003510:	2200      	movs	r2, #0
 8003512:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 8003516:	2200      	movs	r2, #0
 8003518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800351a:	4805      	ldr	r0, [pc, #20]	; (8003530 <MX_USART6_UART_Init+0x4c>)
 800351c:	f002 ff5a 	bl	80063d4 <HAL_UART_Init>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003526:	f7fd fd1d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000a64 	.word	0x20000a64
 8003534:	40011400 	.word	0x40011400

08003538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a49      	ldr	r2, [pc, #292]	; (800367c <HAL_UART_MspInit+0x144>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d153      	bne.n	8003602 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	4b48      	ldr	r3, [pc, #288]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b45      	ldr	r3, [pc, #276]	; (8003680 <HAL_UART_MspInit+0x148>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	4b41      	ldr	r3, [pc, #260]	; (8003680 <HAL_UART_MspInit+0x148>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a40      	ldr	r2, [pc, #256]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a39      	ldr	r2, [pc, #228]	; (8003680 <HAL_UART_MspInit+0x148>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b37      	ldr	r3, [pc, #220]	; (8003680 <HAL_UART_MspInit+0x148>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80035ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035c0:	2308      	movs	r3, #8
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c4:	f107 031c 	add.w	r3, r7, #28
 80035c8:	4619      	mov	r1, r3
 80035ca:	482e      	ldr	r0, [pc, #184]	; (8003684 <HAL_UART_MspInit+0x14c>)
 80035cc:	f000 feb0 	bl	8004330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035d0:	2304      	movs	r3, #4
 80035d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80035e0:	2308      	movs	r3, #8
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	4619      	mov	r1, r3
 80035ea:	4827      	ldr	r0, [pc, #156]	; (8003688 <HAL_UART_MspInit+0x150>)
 80035ec:	f000 fea0 	bl	8004330 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	2035      	movs	r0, #53	; 0x35
 80035f6:	f000 fdd2 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035fa:	2035      	movs	r0, #53	; 0x35
 80035fc:	f000 fdeb 	bl	80041d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003600:	e038      	b.n	8003674 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART6)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <HAL_UART_MspInit+0x154>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d133      	bne.n	8003674 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003616:	f043 0320 	orr.w	r3, r3, #32
 800361a:	6453      	str	r3, [r2, #68]	; 0x44
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_UART_MspInit+0x148>)
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <HAL_UART_MspInit+0x148>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_UART_MspInit+0x148>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6313      	str	r3, [r2, #48]	; 0x30
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_UART_MspInit+0x148>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003644:	23c0      	movs	r3, #192	; 0xc0
 8003646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003650:	2303      	movs	r3, #3
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003654:	2308      	movs	r3, #8
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003658:	f107 031c 	add.w	r3, r7, #28
 800365c:	4619      	mov	r1, r3
 800365e:	4809      	ldr	r0, [pc, #36]	; (8003684 <HAL_UART_MspInit+0x14c>)
 8003660:	f000 fe66 	bl	8004330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003664:	2200      	movs	r2, #0
 8003666:	2100      	movs	r1, #0
 8003668:	2047      	movs	r0, #71	; 0x47
 800366a:	f000 fd98 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800366e:	2047      	movs	r0, #71	; 0x47
 8003670:	f000 fdb1 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 8003674:	bf00      	nop
 8003676:	3730      	adds	r7, #48	; 0x30
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40005000 	.word	0x40005000
 8003680:	40023800 	.word	0x40023800
 8003684:	40020800 	.word	0x40020800
 8003688:	40020c00 	.word	0x40020c00
 800368c:	40011400 	.word	0x40011400

08003690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003694:	480d      	ldr	r0, [pc, #52]	; (80036cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003696:	490e      	ldr	r1, [pc, #56]	; (80036d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003698:	4a0e      	ldr	r2, [pc, #56]	; (80036d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800369e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036aa:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036ac:	4c0b      	ldr	r4, [pc, #44]	; (80036dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ba:	f7ff fc6b 	bl	8002f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036be:	f004 f92f 	bl	8007920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c2:	f7fd fb25 	bl	8000d10 <main>
  bx  lr    
 80036c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80036d4:	08007aa8 	.word	0x08007aa8
  ldr r2, =_sbss
 80036d8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80036dc:	20000aac 	.word	0x20000aac

080036e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e0:	e7fe      	b.n	80036e0 <ADC_IRQHandler>
	...

080036e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e8:	4b0e      	ldr	r3, [pc, #56]	; (8003724 <HAL_Init+0x40>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0d      	ldr	r2, [pc, #52]	; (8003724 <HAL_Init+0x40>)
 80036ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <HAL_Init+0x40>)
 80036fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_Init+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a07      	ldr	r2, [pc, #28]	; (8003724 <HAL_Init+0x40>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800370c:	2003      	movs	r0, #3
 800370e:	f000 fd3b 	bl	8004188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003712:	200f      	movs	r0, #15
 8003714:	f000 f808 	bl	8003728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003718:	f7ff faa0 	bl	8002c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023c00 	.word	0x40023c00

08003728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_InitTick+0x54>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_InitTick+0x58>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800373e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fd53 	bl	80041f2 <HAL_SYSTICK_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00e      	b.n	8003774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b0f      	cmp	r3, #15
 800375a:	d80a      	bhi.n	8003772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800375c:	2200      	movs	r2, #0
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f000 fd1b 	bl	800419e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003768:	4a06      	ldr	r2, [pc, #24]	; (8003784 <HAL_InitTick+0x5c>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000008 	.word	0x20000008
 8003780:	20000010 	.word	0x20000010
 8003784:	2000000c 	.word	0x2000000c

08003788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_IncTick+0x20>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_IncTick+0x24>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4413      	add	r3, r2
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_IncTick+0x24>)
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000010 	.word	0x20000010
 80037ac:	20000aa8 	.word	0x20000aa8

080037b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return uwTick;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_GetTick+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000aa8 	.word	0x20000aa8

080037c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e033      	b.n	8003846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fc fee0 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d118      	bne.n	8003838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800380e:	f023 0302 	bic.w	r3, r3, #2
 8003812:	f043 0202 	orr.w	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fae8 	bl	8003df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
 8003836:	e001      	b.n	800383c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_ADC_Start+0x1a>
 8003866:	2302      	movs	r3, #2
 8003868:	e0b2      	b.n	80039d0 <HAL_ADC_Start+0x180>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d018      	beq.n	80038b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <HAL_ADC_Start+0x18c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <HAL_ADC_Start+0x190>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9a      	lsrs	r2, r3, #18
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038a4:	e002      	b.n	80038ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f9      	bne.n	80038a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d17a      	bne.n	80039b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d106      	bne.n	800390e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f023 0206 	bic.w	r2, r3, #6
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
 800390c:	e002      	b.n	8003914 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391c:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <HAL_ADC_Start+0x194>)
 800391e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003928:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2b00      	cmp	r3, #0
 8003934:	d12a      	bne.n	800398c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_ADC_Start+0x198>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d015      	beq.n	800396c <HAL_ADC_Start+0x11c>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a29      	ldr	r2, [pc, #164]	; (80039ec <HAL_ADC_Start+0x19c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d105      	bne.n	8003956 <HAL_ADC_Start+0x106>
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <HAL_ADC_Start+0x194>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <HAL_ADC_Start+0x1a0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d136      	bne.n	80039ce <HAL_ADC_Start+0x17e>
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <HAL_ADC_Start+0x194>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d130      	bne.n	80039ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d129      	bne.n	80039ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	e020      	b.n	80039ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <HAL_ADC_Start+0x198>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d11b      	bne.n	80039ce <HAL_ADC_Start+0x17e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d114      	bne.n	80039ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	e00b      	b.n	80039ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	20000008 	.word	0x20000008
 80039e0:	431bde83 	.word	0x431bde83
 80039e4:	40012300 	.word	0x40012300
 80039e8:	40012000 	.word	0x40012000
 80039ec:	40012100 	.word	0x40012100
 80039f0:	40012200 	.word	0x40012200

080039f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_Stop+0x16>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e021      	b.n	8003a4e <HAL_ADC_Stop+0x5a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d109      	bne.n	8003a44 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a76:	d113      	bne.n	8003aa0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a86:	d10b      	bne.n	8003aa0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e063      	b.n	8003b68 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003aa0:	f7ff fe86 	bl	80037b0 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003aa6:	e021      	b.n	8003aec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d01d      	beq.n	8003aec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_ADC_PollForConversion+0x6c>
 8003ab6:	f7ff fe7b 	bl	80037b0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d212      	bcs.n	8003aec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d00b      	beq.n	8003aec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e03d      	b.n	8003b68 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d1d6      	bne.n	8003aa8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0212 	mvn.w	r2, #18
 8003b02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d123      	bne.n	8003b66 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11f      	bne.n	8003b66 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d111      	bne.n	8003b66 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0201 	orr.w	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x1c>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e113      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x244>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d925      	bls.n	8003c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68d9      	ldr	r1, [r3, #12]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b1e      	subs	r3, #30
 8003bce:	2207      	movs	r2, #7
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	400a      	ands	r2, r1
 8003bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68d9      	ldr	r1, [r3, #12]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4403      	add	r3, r0
 8003bf6:	3b1e      	subs	r3, #30
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	e022      	b.n	8003c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	4613      	mov	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	2207      	movs	r2, #7
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	400a      	ands	r2, r1
 8003c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4403      	add	r3, r0
 8003c40:	409a      	lsls	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d824      	bhi.n	8003c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	3b05      	subs	r3, #5
 8003c64:	221f      	movs	r2, #31
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	400a      	ands	r2, r1
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4618      	mov	r0, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b05      	subs	r3, #5
 8003c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
 8003c9a:	e04c      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d824      	bhi.n	8003cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b23      	subs	r3, #35	; 0x23
 8003cb6:	221f      	movs	r2, #31
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b23      	subs	r3, #35	; 0x23
 8003ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
 8003cec:	e023      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b41      	subs	r3, #65	; 0x41
 8003d00:	221f      	movs	r2, #31
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	3b41      	subs	r3, #65	; 0x41
 8003d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <HAL_ADC_ConfigChannel+0x250>)
 8003d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a28      	ldr	r2, [pc, #160]	; (8003de0 <HAL_ADC_ConfigChannel+0x254>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d10f      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d8>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d10b      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <HAL_ADC_ConfigChannel+0x254>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d12b      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x23a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x1f4>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b11      	cmp	r3, #17
 8003d7e:	d122      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <HAL_ADC_ConfigChannel+0x258>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003da2:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_ADC_ConfigChannel+0x25c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a11      	ldr	r2, [pc, #68]	; (8003dec <HAL_ADC_ConfigChannel+0x260>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	0c9a      	lsrs	r2, r3, #18
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003db8:	e002      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f9      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40012300 	.word	0x40012300
 8003de0:	40012000 	.word	0x40012000
 8003de4:	10000012 	.word	0x10000012
 8003de8:	20000008 	.word	0x20000008
 8003dec:	431bde83 	.word	0x431bde83

08003df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df8:	4b79      	ldr	r3, [pc, #484]	; (8003fe0 <ADC_Init+0x1f0>)
 8003dfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	021a      	lsls	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6899      	ldr	r1, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <ADC_Init+0x1f4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6899      	ldr	r1, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	e00f      	b.n	8003eee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0202 	bic.w	r2, r2, #2
 8003efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6899      	ldr	r1, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	7e1b      	ldrb	r3, [r3, #24]
 8003f08:	005a      	lsls	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	3b01      	subs	r3, #1
 8003f48:	035a      	lsls	r2, r3, #13
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	e007      	b.n	8003f64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	051a      	lsls	r2, r3, #20
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fa6:	025a      	lsls	r2, r3, #9
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	029a      	lsls	r2, r3, #10
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	40012300 	.word	0x40012300
 8003fe4:	0f000001 	.word	0x0f000001

08003fe8 <__NVIC_SetPriorityGrouping>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_GetPriorityGrouping>:
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__NVIC_GetPriorityGrouping+0x18>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0307 	and.w	r3, r3, #7
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_EnableIRQ>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	db0b      	blt.n	8004076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <__NVIC_EnableIRQ+0x38>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2001      	movs	r0, #1
 800406e:	fa00 f202 	lsl.w	r2, r0, r2
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3b01      	subs	r3, #1
 8004150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004154:	d301      	bcc.n	800415a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <SysTick_Config+0x40>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004162:	210f      	movs	r1, #15
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	f7ff ff8e 	bl	8004088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SysTick_Config+0x40>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <SysTick_Config+0x40>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	e000e010 	.word	0xe000e010

08004188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff29 	bl	8003fe8 <__NVIC_SetPriorityGrouping>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041b0:	f7ff ff3e 	bl	8004030 <__NVIC_GetPriorityGrouping>
 80041b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff8e 	bl	80040dc <NVIC_EncodePriority>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff5d 	bl	8004088 <__NVIC_SetPriority>
}
 80041ce:	bf00      	nop
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4603      	mov	r3, r0
 80041de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff31 	bl	800404c <__NVIC_EnableIRQ>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffa2 	bl	8004144 <SysTick_Config>
 8004200:	4603      	mov	r3, r0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004216:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff faca 	bl	80037b0 <HAL_GetTick>
 800421c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d008      	beq.n	800423c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e052      	b.n	80042e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0216 	bic.w	r2, r2, #22
 800424a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <HAL_DMA_Abort+0x62>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0208 	bic.w	r2, r2, #8
 800427a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428c:	e013      	b.n	80042b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800428e:	f7ff fa8f 	bl	80037b0 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b05      	cmp	r3, #5
 800429a:	d90c      	bls.n	80042b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e015      	b.n	80042e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e4      	bne.n	800428e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	223f      	movs	r2, #63	; 0x3f
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d004      	beq.n	8004308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e00c      	b.n	8004322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2205      	movs	r2, #5
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e165      	b.n	8004618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800434c:	2201      	movs	r2, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	f040 8154 	bne.w	8004612 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d005      	beq.n	8004382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800437e:	2b02      	cmp	r3, #2
 8004380:	d130      	bne.n	80043e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	2203      	movs	r2, #3
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043b8:	2201      	movs	r2, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 0201 	and.w	r2, r3, #1
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4313      	orrs	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 0303 	and.w	r3, r3, #3
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d017      	beq.n	8004420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	2203      	movs	r2, #3
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4313      	orrs	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d123      	bne.n	8004474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	08da      	lsrs	r2, r3, #3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3208      	adds	r2, #8
 8004434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	220f      	movs	r2, #15
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	08da      	lsrs	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3208      	adds	r2, #8
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0203 	and.w	r2, r3, #3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80ae 	beq.w	8004612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b5d      	ldr	r3, [pc, #372]	; (8004630 <HAL_GPIO_Init+0x300>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	4a5c      	ldr	r2, [pc, #368]	; (8004630 <HAL_GPIO_Init+0x300>)
 80044c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c4:	6453      	str	r3, [r2, #68]	; 0x44
 80044c6:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_GPIO_Init+0x300>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044d2:	4a58      	ldr	r2, [pc, #352]	; (8004634 <HAL_GPIO_Init+0x304>)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	3302      	adds	r3, #2
 80044da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	220f      	movs	r2, #15
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4f      	ldr	r2, [pc, #316]	; (8004638 <HAL_GPIO_Init+0x308>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d025      	beq.n	800454a <HAL_GPIO_Init+0x21a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4e      	ldr	r2, [pc, #312]	; (800463c <HAL_GPIO_Init+0x30c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01f      	beq.n	8004546 <HAL_GPIO_Init+0x216>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4d      	ldr	r2, [pc, #308]	; (8004640 <HAL_GPIO_Init+0x310>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d019      	beq.n	8004542 <HAL_GPIO_Init+0x212>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_GPIO_Init+0x314>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_GPIO_Init+0x20e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_GPIO_Init+0x318>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00d      	beq.n	800453a <HAL_GPIO_Init+0x20a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4a      	ldr	r2, [pc, #296]	; (800464c <HAL_GPIO_Init+0x31c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <HAL_GPIO_Init+0x206>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a49      	ldr	r2, [pc, #292]	; (8004650 <HAL_GPIO_Init+0x320>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_GPIO_Init+0x202>
 800452e:	2306      	movs	r3, #6
 8004530:	e00c      	b.n	800454c <HAL_GPIO_Init+0x21c>
 8004532:	2307      	movs	r3, #7
 8004534:	e00a      	b.n	800454c <HAL_GPIO_Init+0x21c>
 8004536:	2305      	movs	r3, #5
 8004538:	e008      	b.n	800454c <HAL_GPIO_Init+0x21c>
 800453a:	2304      	movs	r3, #4
 800453c:	e006      	b.n	800454c <HAL_GPIO_Init+0x21c>
 800453e:	2303      	movs	r3, #3
 8004540:	e004      	b.n	800454c <HAL_GPIO_Init+0x21c>
 8004542:	2302      	movs	r3, #2
 8004544:	e002      	b.n	800454c <HAL_GPIO_Init+0x21c>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_GPIO_Init+0x21c>
 800454a:	2300      	movs	r3, #0
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	f002 0203 	and.w	r2, r2, #3
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	4093      	lsls	r3, r2
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800455c:	4935      	ldr	r1, [pc, #212]	; (8004634 <HAL_GPIO_Init+0x304>)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456a:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <HAL_GPIO_Init+0x324>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800458e:	4a31      	ldr	r2, [pc, #196]	; (8004654 <HAL_GPIO_Init+0x324>)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004594:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <HAL_GPIO_Init+0x324>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b8:	4a26      	ldr	r2, [pc, #152]	; (8004654 <HAL_GPIO_Init+0x324>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045be:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_GPIO_Init+0x324>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_GPIO_Init+0x324>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_GPIO_Init+0x324>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <HAL_GPIO_Init+0x324>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3301      	adds	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b0f      	cmp	r3, #15
 800461c:	f67f ae96 	bls.w	800434c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	40013800 	.word	0x40013800
 8004638:	40020000 	.word	0x40020000
 800463c:	40020400 	.word	0x40020400
 8004640:	40020800 	.word	0x40020800
 8004644:	40020c00 	.word	0x40020c00
 8004648:	40021000 	.word	0x40021000
 800464c:	40021400 	.word	0x40021400
 8004650:	40021800 	.word	0x40021800
 8004654:	40013c00 	.word	0x40013c00

08004658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	e001      	b.n	800467a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4013      	ands	r3, r2
 80046a0:	041a      	lsls	r2, r3, #16
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	43d9      	mvns	r1, r3
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	400b      	ands	r3, r1
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	619a      	str	r2, [r3, #24]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_PWREx_EnableOverDrive+0x90>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_PWREx_EnableOverDrive+0x90>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
 80046d6:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_PWREx_EnableOverDrive+0x90>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <HAL_PWREx_EnableOverDrive+0x94>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e8:	f7ff f862 	bl	80037b0 <HAL_GetTick>
 80046ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ee:	e009      	b.n	8004704 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046f0:	f7ff f85e 	bl	80037b0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046fe:	d901      	bls.n	8004704 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e01f      	b.n	8004744 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <HAL_PWREx_EnableOverDrive+0x98>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d1ee      	bne.n	80046f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004718:	f7ff f84a 	bl	80037b0 <HAL_GetTick>
 800471c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800471e:	e009      	b.n	8004734 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004720:	f7ff f846 	bl	80037b0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472e:	d901      	bls.n	8004734 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e007      	b.n	8004744 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <HAL_PWREx_EnableOverDrive+0x98>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004740:	d1ee      	bne.n	8004720 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	420e0040 	.word	0x420e0040
 8004754:	40007000 	.word	0x40007000
 8004758:	420e0044 	.word	0x420e0044

0800475c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0cc      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004770:	4b68      	ldr	r3, [pc, #416]	; (8004914 <HAL_RCC_ClockConfig+0x1b8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d90c      	bls.n	8004798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477e:	4b65      	ldr	r3, [pc, #404]	; (8004914 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b63      	ldr	r3, [pc, #396]	; (8004914 <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0b8      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4a58      	ldr	r2, [pc, #352]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c8:	4b53      	ldr	r3, [pc, #332]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a52      	ldr	r2, [pc, #328]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d4:	4b50      	ldr	r3, [pc, #320]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	494d      	ldr	r1, [pc, #308]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d044      	beq.n	800487c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b47      	ldr	r3, [pc, #284]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d119      	bne.n	800483a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07f      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d003      	beq.n	800481a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004816:	2b03      	cmp	r3, #3
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e06f      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e067      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483a:	4b37      	ldr	r3, [pc, #220]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4934      	ldr	r1, [pc, #208]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800484c:	f7fe ffb0 	bl	80037b0 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7fe ffac 	bl	80037b0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e04f      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 020c 	and.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d1eb      	bne.n	8004854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <HAL_RCC_ClockConfig+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d20c      	bcs.n	80048a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e032      	b.n	800490a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4916      	ldr	r1, [pc, #88]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	490e      	ldr	r1, [pc, #56]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048e2:	f000 f855 	bl	8004990 <HAL_RCC_GetSysClockFreq>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	490a      	ldr	r1, [pc, #40]	; (800491c <HAL_RCC_ClockConfig+0x1c0>)
 80048f4:	5ccb      	ldrb	r3, [r1, r3]
 80048f6:	fa22 f303 	lsr.w	r3, r2, r3
 80048fa:	4a09      	ldr	r2, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe ff10 	bl	8003728 <HAL_InitTick>

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40023c00 	.word	0x40023c00
 8004918:	40023800 	.word	0x40023800
 800491c:	08007a80 	.word	0x08007a80
 8004920:	20000008 	.word	0x20000008
 8004924:	2000000c 	.word	0x2000000c

08004928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_RCC_GetHCLKFreq+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000008 	.word	0x20000008

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004944:	f7ff fff0 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08007a90 	.word	0x08007a90

08004968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800496c:	f7ff ffdc 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0b5b      	lsrs	r3, r3, #13
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCC_GetPCLK2Freq+0x24>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	08007a90 	.word	0x08007a90

08004990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004994:	b0a6      	sub	sp, #152	; 0x98
 8004996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b6:	4bc8      	ldr	r3, [pc, #800]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	f200 817e 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x330>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004cc1 	.word	0x08004cc1
 80049d4:	08004cc1 	.word	0x08004cc1
 80049d8:	08004cc1 	.word	0x08004cc1
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	08004cc1 	.word	0x08004cc1
 80049e4:	08004cc1 	.word	0x08004cc1
 80049e8:	08004cc1 	.word	0x08004cc1
 80049ec:	08004a11 	.word	0x08004a11
 80049f0:	08004cc1 	.word	0x08004cc1
 80049f4:	08004cc1 	.word	0x08004cc1
 80049f8:	08004cc1 	.word	0x08004cc1
 80049fc:	08004b7b 	.word	0x08004b7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4bb6      	ldr	r3, [pc, #728]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004a06:	e15f      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a08:	4bb5      	ldr	r3, [pc, #724]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004a0e:	e15b      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4bb1      	ldr	r3, [pc, #708]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1c:	4bae      	ldr	r3, [pc, #696]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d031      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a28:	4bab      	ldr	r3, [pc, #684]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	2200      	movs	r2, #0
 8004a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a40:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a46:	462a      	mov	r2, r5
 8004a48:	fb03 f202 	mul.w	r2, r3, r2
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4621      	mov	r1, r4
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	4aa2      	ldr	r2, [pc, #648]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a58:	4621      	mov	r1, r4
 8004a5a:	fba1 1202 	umull	r1, r2, r1, r2
 8004a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a60:	460a      	mov	r2, r1
 8004a62:	67ba      	str	r2, [r7, #120]	; 0x78
 8004a64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a66:	4413      	add	r3, r2
 8004a68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6e:	2200      	movs	r2, #0
 8004a70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a78:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004a7c:	f7fb fbc2 	bl	8000204 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a8a:	e064      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8c:	4b92      	ldr	r3, [pc, #584]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	2200      	movs	r2, #0
 8004a94:	653b      	str	r3, [r7, #80]	; 0x50
 8004a96:	657a      	str	r2, [r7, #84]	; 0x54
 8004a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	462b      	mov	r3, r5
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	0159      	lsls	r1, r3, #5
 8004ab6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aba:	0150      	lsls	r0, r2, #5
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	1a51      	subs	r1, r2, r1
 8004ac4:	6139      	str	r1, [r7, #16]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	eb63 0301 	sbc.w	r3, r3, r1
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ada:	4659      	mov	r1, fp
 8004adc:	018b      	lsls	r3, r1, #6
 8004ade:	4651      	mov	r1, sl
 8004ae0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	018a      	lsls	r2, r1, #6
 8004ae8:	4651      	mov	r1, sl
 8004aea:	ebb2 0801 	subs.w	r8, r2, r1
 8004aee:	4659      	mov	r1, fp
 8004af0:	eb63 0901 	sbc.w	r9, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b08:	4690      	mov	r8, r2
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	eb18 0303 	adds.w	r3, r8, r3
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	462b      	mov	r3, r5
 8004b16:	eb49 0303 	adc.w	r3, r9, r3
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b28:	4629      	mov	r1, r5
 8004b2a:	028b      	lsls	r3, r1, #10
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b32:	4621      	mov	r1, r4
 8004b34:	028a      	lsls	r2, r1, #10
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3e:	2200      	movs	r2, #0
 8004b40:	643b      	str	r3, [r7, #64]	; 0x40
 8004b42:	647a      	str	r2, [r7, #68]	; 0x44
 8004b44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b48:	f7fb fb5c 	bl	8000204 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b56:	4b60      	ldr	r3, [pc, #384]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	3301      	adds	r3, #1
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004b68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b78:	e0a6      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b86:	4b54      	ldr	r3, [pc, #336]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02a      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4b4e      	ldr	r3, [pc, #312]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004ba8:	fb03 f201 	mul.w	r2, r3, r1
 8004bac:	2300      	movs	r3, #0
 8004bae:	fb00 f303 	mul.w	r3, r0, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8004bba:	677a      	str	r2, [r7, #116]	; 0x74
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	673a      	str	r2, [r7, #112]	; 0x70
 8004bc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bc2:	4413      	add	r3, r2
 8004bc4:	677b      	str	r3, [r7, #116]	; 0x74
 8004bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bca:	2200      	movs	r2, #0
 8004bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bce:	637a      	str	r2, [r7, #52]	; 0x34
 8004bd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004bd8:	f7fb fb14 	bl	8000204 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004be6:	e05b      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be8:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	2200      	movs	r2, #0
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	f04f 0000 	mov.w	r0, #0
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	0159      	lsls	r1, r3, #5
 8004c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c16:	0150      	lsls	r0, r2, #5
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004c40:	eb63 050b 	sbc.w	r5, r3, fp
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	00eb      	lsls	r3, r5, #3
 8004c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c52:	00e2      	lsls	r2, r4, #3
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	4643      	mov	r3, r8
 8004c5a:	18e3      	adds	r3, r4, r3
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	464b      	mov	r3, r9
 8004c60:	eb45 0303 	adc.w	r3, r5, r3
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c72:	4629      	mov	r1, r5
 8004c74:	028b      	lsls	r3, r1, #10
 8004c76:	4621      	mov	r1, r4
 8004c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	028a      	lsls	r2, r1, #10
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c88:	2200      	movs	r2, #0
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	61fa      	str	r2, [r7, #28]
 8004c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c92:	f7fb fab7 	bl	8000204 <__aeabi_uldivmod>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ca0:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	0f1b      	lsrs	r3, r3, #28
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x34c>)
 8004cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3798      	adds	r7, #152	; 0x98
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	016e3600 	.word	0x016e3600

08004ce4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e28d      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8083 	beq.w	8004e0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d04:	4b94      	ldr	r3, [pc, #592]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d019      	beq.n	8004d44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d10:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d106      	bne.n	8004d2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d1c:	4b8e      	ldr	r3, [pc, #568]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d28:	d00c      	beq.n	8004d44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2a:	4b8b      	ldr	r3, [pc, #556]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d112      	bne.n	8004d5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d36:	4b88      	ldr	r3, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	4b84      	ldr	r3, [pc, #528]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d05b      	beq.n	8004e08 <HAL_RCC_OscConfig+0x124>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d157      	bne.n	8004e08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e25a      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x90>
 8004d66:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a7b      	ldr	r2, [pc, #492]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e01d      	b.n	8004db0 <HAL_RCC_OscConfig+0xcc>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0xb4>
 8004d7e:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a75      	ldr	r2, [pc, #468]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	4b73      	ldr	r3, [pc, #460]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a72      	ldr	r2, [pc, #456]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0xcc>
 8004d98:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a6e      	ldr	r2, [pc, #440]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	4b6c      	ldr	r3, [pc, #432]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a6b      	ldr	r2, [pc, #428]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d013      	beq.n	8004de0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fe fcfa 	bl	80037b0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc0:	f7fe fcf6 	bl	80037b0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	; 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e21f      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b61      	ldr	r3, [pc, #388]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xdc>
 8004dde:	e014      	b.n	8004e0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe fce6 	bl	80037b0 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de8:	f7fe fce2 	bl	80037b0 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b64      	cmp	r3, #100	; 0x64
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e20b      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfa:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x104>
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06f      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e16:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d017      	beq.n	8004e52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e22:	4b4d      	ldr	r3, [pc, #308]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3a:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d11c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e46:	4b44      	ldr	r3, [pc, #272]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e52:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_RCC_OscConfig+0x186>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e1d3      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4937      	ldr	r1, [pc, #220]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7e:	e03a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d020      	beq.n	8004eca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e88:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <HAL_RCC_OscConfig+0x278>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fe fc8f 	bl	80037b0 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e96:	f7fe fc8b 	bl	80037b0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e1b4      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4925      	ldr	r1, [pc, #148]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
 8004ec8:	e015      	b.n	8004ef6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <HAL_RCC_OscConfig+0x278>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7fe fc6e 	bl	80037b0 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7fe fc6a 	bl	80037b0 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e193      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d036      	beq.n	8004f70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fe fc4e 	bl	80037b0 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f18:	f7fe fc4a 	bl	80037b0 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e173      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_OscConfig+0x274>)
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x234>
 8004f36:	e01b      	b.n	8004f70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3e:	f7fe fc37 	bl	80037b0 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f44:	e00e      	b.n	8004f64 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f46:	f7fe fc33 	bl	80037b0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d907      	bls.n	8004f64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e15c      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	42470000 	.word	0x42470000
 8004f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	4b8a      	ldr	r3, [pc, #552]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1ea      	bne.n	8004f46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8097 	beq.w	80050ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f82:	4b83      	ldr	r3, [pc, #524]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10f      	bne.n	8004fae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	4b7f      	ldr	r3, [pc, #508]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	4a7e      	ldr	r2, [pc, #504]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9e:	4b7c      	ldr	r3, [pc, #496]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	60bb      	str	r3, [r7, #8]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fae:	4b79      	ldr	r3, [pc, #484]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d118      	bne.n	8004fec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fba:	4b76      	ldr	r3, [pc, #472]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a75      	ldr	r2, [pc, #468]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 8004fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc6:	f7fe fbf3 	bl	80037b0 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fce:	f7fe fbef 	bl	80037b0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e118      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe0:	4b6c      	ldr	r3, [pc, #432]	; (8005194 <HAL_RCC_OscConfig+0x4b0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x31e>
 8004ff4:	4b66      	ldr	r3, [pc, #408]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	4a65      	ldr	r2, [pc, #404]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8005000:	e01c      	b.n	800503c <HAL_RCC_OscConfig+0x358>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b05      	cmp	r3, #5
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x340>
 800500a:	4b61      	ldr	r3, [pc, #388]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4a60      	ldr	r2, [pc, #384]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005010:	f043 0304 	orr.w	r3, r3, #4
 8005014:	6713      	str	r3, [r2, #112]	; 0x70
 8005016:	4b5e      	ldr	r3, [pc, #376]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a5d      	ldr	r2, [pc, #372]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0x358>
 8005024:	4b5a      	ldr	r3, [pc, #360]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	4a59      	ldr	r2, [pc, #356]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	6713      	str	r3, [r2, #112]	; 0x70
 8005030:	4b57      	ldr	r3, [pc, #348]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	4a56      	ldr	r2, [pc, #344]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005036:	f023 0304 	bic.w	r3, r3, #4
 800503a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fe fbb4 	bl	80037b0 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504a:	e00a      	b.n	8005062 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800504c:	f7fe fbb0 	bl	80037b0 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e0d7      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005062:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0ee      	beq.n	800504c <HAL_RCC_OscConfig+0x368>
 800506e:	e014      	b.n	800509a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fe fb9e 	bl	80037b0 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005076:	e00a      	b.n	800508e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fe fb9a 	bl	80037b0 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0c1      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800508e:	4b40      	ldr	r3, [pc, #256]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1ee      	bne.n	8005078 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d105      	bne.n	80050ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a0:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	4a3a      	ldr	r2, [pc, #232]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 80050a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80ad 	beq.w	8005210 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b6:	4b36      	ldr	r3, [pc, #216]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d060      	beq.n	8005184 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d145      	bne.n	8005156 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ca:	4b33      	ldr	r3, [pc, #204]	; (8005198 <HAL_RCC_OscConfig+0x4b4>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fe fb6e 	bl	80037b0 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fe fb6a 	bl	80037b0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e093      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	4b29      	ldr	r3, [pc, #164]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	085b      	lsrs	r3, r3, #1
 800510e:	3b01      	subs	r3, #1
 8005110:	041b      	lsls	r3, r3, #16
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	061b      	lsls	r3, r3, #24
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	071b      	lsls	r3, r3, #28
 8005122:	491b      	ldr	r1, [pc, #108]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <HAL_RCC_OscConfig+0x4b4>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fe fb3f 	bl	80037b0 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005136:	f7fe fb3b 	bl	80037b0 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e064      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x452>
 8005154:	e05c      	b.n	8005210 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <HAL_RCC_OscConfig+0x4b4>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fe fb28 	bl	80037b0 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005164:	f7fe fb24 	bl	80037b0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e04d      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <HAL_RCC_OscConfig+0x4ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x480>
 8005182:	e045      	b.n	8005210 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e040      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
 8005190:	40023800 	.word	0x40023800
 8005194:	40007000 	.word	0x40007000
 8005198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800519c:	4b1f      	ldr	r3, [pc, #124]	; (800521c <HAL_RCC_OscConfig+0x538>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d030      	beq.n	800520c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d129      	bne.n	800520c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d122      	bne.n	800520c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d119      	bne.n	800520c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	3b01      	subs	r3, #1
 80051e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d10f      	bne.n	800520c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800

08005220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e041      	b.n	80052b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fd ff98 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fd18 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d001      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e04e      	b.n	8005376 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a23      	ldr	r2, [pc, #140]	; (8005384 <HAL_TIM_Base_Start_IT+0xc4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d022      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d01d      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <HAL_TIM_Base_Start_IT+0xc8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <HAL_TIM_Base_Start_IT+0xcc>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <HAL_TIM_Base_Start_IT+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_TIM_Base_Start_IT+0xd4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_TIM_Base_Start_IT+0xd8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_TIM_Base_Start_IT+0x80>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a18      	ldr	r2, [pc, #96]	; (800539c <HAL_TIM_Base_Start_IT+0xdc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d111      	bne.n	8005364 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b06      	cmp	r3, #6
 8005350:	d010      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005362:	e007      	b.n	8005374 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40010400 	.word	0x40010400
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	f241 1311 	movw	r3, #4369	; 0x1111
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <HAL_TIM_Base_Stop_IT+0x48>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	f240 4344 	movw	r3, #1092	; 0x444
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_Base_Stop_IT+0x48>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e041      	b.n	8005494 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f839 	bl	800549c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f000 fc29 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <HAL_TIM_PWM_Start+0x24>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	e022      	b.n	800551a <HAL_TIM_PWM_Start+0x6a>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d109      	bne.n	80054ee <HAL_TIM_PWM_Start+0x3e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	e015      	b.n	800551a <HAL_TIM_PWM_Start+0x6a>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start+0x58>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e008      	b.n	800551a <HAL_TIM_PWM_Start+0x6a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07c      	b.n	800561c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0x82>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	e013      	b.n	800555a <HAL_TIM_PWM_Start+0xaa>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0x92>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	e00b      	b.n	800555a <HAL_TIM_PWM_Start+0xaa>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0xa2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	e003      	b.n	800555a <HAL_TIM_PWM_Start+0xaa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fe80 	bl	8006268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2d      	ldr	r2, [pc, #180]	; (8005624 <HAL_TIM_PWM_Start+0x174>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_PWM_Start+0xcc>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <HAL_TIM_PWM_Start+0x178>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_TIM_PWM_Start+0xd0>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_TIM_PWM_Start+0xd2>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a22      	ldr	r2, [pc, #136]	; (8005624 <HAL_TIM_PWM_Start+0x174>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d01d      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1f      	ldr	r2, [pc, #124]	; (800562c <HAL_TIM_PWM_Start+0x17c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_TIM_PWM_Start+0x180>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <HAL_TIM_PWM_Start+0x184>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a16      	ldr	r2, [pc, #88]	; (8005628 <HAL_TIM_PWM_Start+0x178>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_TIM_PWM_Start+0x188>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x136>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_TIM_PWM_Start+0x18c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d010      	beq.n	800561a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005608:	e007      	b.n	800561a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00
 8005638:	40014000 	.word	0x40014000
 800563c:	40001800 	.word	0x40001800

08005640 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fe08 	bl	8006268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a2e      	ldr	r2, [pc, #184]	; (8005718 <HAL_TIM_PWM_Stop+0xd8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <HAL_TIM_PWM_Stop+0x2c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a2d      	ldr	r2, [pc, #180]	; (800571c <HAL_TIM_PWM_Stop+0xdc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d101      	bne.n	8005670 <HAL_TIM_PWM_Stop+0x30>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_TIM_PWM_Stop+0x32>
 8005670:	2300      	movs	r3, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d017      	beq.n	80056a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_TIM_PWM_Stop+0x66>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	f240 4344 	movw	r3, #1092	; 0x444
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_TIM_PWM_Stop+0x66>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10f      	bne.n	80056d6 <HAL_TIM_PWM_Stop+0x96>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	f240 4344 	movw	r3, #1092	; 0x444
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_PWM_Stop+0x96>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Stop+0xa6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	e013      	b.n	800570e <HAL_TIM_PWM_Stop+0xce>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Stop+0xb6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f4:	e00b      	b.n	800570e <HAL_TIM_PWM_Stop+0xce>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Stop+0xc6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005704:	e003      	b.n	800570e <HAL_TIM_PWM_Stop+0xce>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b02      	cmp	r3, #2
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0202 	mvn.w	r2, #2
 800574c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa77 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa69 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa7a 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	2b04      	cmp	r3, #4
 8005788:	d122      	bne.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b04      	cmp	r3, #4
 8005796:	d11b      	bne.n	80057d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0204 	mvn.w	r2, #4
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa4d 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa3f 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fa50 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0208 	mvn.w	r2, #8
 80057f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2204      	movs	r2, #4
 80057fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa23 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa15 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa26 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b10      	cmp	r3, #16
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b10      	cmp	r3, #16
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0210 	mvn.w	r2, #16
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2208      	movs	r2, #8
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9f9 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9eb 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9fc 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0201 	mvn.w	r2, #1
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fd02 	bl	80032a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b80      	cmp	r3, #128	; 0x80
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fd78 	bl	80063c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d10e      	bne.n	80058fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d107      	bne.n	80058fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9c1 	bl	8005c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b20      	cmp	r3, #32
 8005908:	d10e      	bne.n	8005928 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b20      	cmp	r3, #32
 8005916:	d107      	bne.n	8005928 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0220 	mvn.w	r2, #32
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fd42 	bl	80063ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e0ae      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b0c      	cmp	r3, #12
 800595a:	f200 809f 	bhi.w	8005a9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	08005999 	.word	0x08005999
 8005968:	08005a9d 	.word	0x08005a9d
 800596c:	08005a9d 	.word	0x08005a9d
 8005970:	08005a9d 	.word	0x08005a9d
 8005974:	080059d9 	.word	0x080059d9
 8005978:	08005a9d 	.word	0x08005a9d
 800597c:	08005a9d 	.word	0x08005a9d
 8005980:	08005a9d 	.word	0x08005a9d
 8005984:	08005a1b 	.word	0x08005a1b
 8005988:	08005a9d 	.word	0x08005a9d
 800598c:	08005a9d 	.word	0x08005a9d
 8005990:	08005a9d 	.word	0x08005a9d
 8005994:	08005a5b 	.word	0x08005a5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fa18 	bl	8005dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0208 	orr.w	r2, r2, #8
 80059b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0204 	bic.w	r2, r2, #4
 80059c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6999      	ldr	r1, [r3, #24]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	619a      	str	r2, [r3, #24]
      break;
 80059d6:	e064      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fa68 	bl	8005eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6999      	ldr	r1, [r3, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	021a      	lsls	r2, r3, #8
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	619a      	str	r2, [r3, #24]
      break;
 8005a18:	e043      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fabd 	bl	8005fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0208 	orr.w	r2, r2, #8
 8005a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0204 	bic.w	r2, r2, #4
 8005a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69d9      	ldr	r1, [r3, #28]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	61da      	str	r2, [r3, #28]
      break;
 8005a58:	e023      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fb11 	bl	8006088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69d9      	ldr	r1, [r3, #28]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	021a      	lsls	r2, r3, #8
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	61da      	str	r2, [r3, #28]
      break;
 8005a9a:	e002      	b.n	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIM_ConfigClockSource+0x1c>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e0b4      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x186>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b08:	d03e      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xd4>
 8005b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0e:	f200 8087 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b16:	f000 8086 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x172>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d87f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b70      	cmp	r3, #112	; 0x70
 8005b22:	d01a      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xa6>
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d87b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b60      	cmp	r3, #96	; 0x60
 8005b2a:	d050      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x11a>
 8005b2c:	2b60      	cmp	r3, #96	; 0x60
 8005b2e:	d877      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b50      	cmp	r3, #80	; 0x50
 8005b32:	d03c      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0xfa>
 8005b34:	2b50      	cmp	r3, #80	; 0x50
 8005b36:	d873      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d058      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x13a>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d86f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b30      	cmp	r3, #48	; 0x30
 8005b42:	d064      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15a>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d86b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d060      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15a>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d867      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05c      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d05a      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	e062      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f000 fb5d 	bl	8006228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e04f      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f000 fb46 	bl	8006228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005baa:	609a      	str	r2, [r3, #8]
      break;
 8005bac:	e03c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 faba 	bl	8006134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2150      	movs	r1, #80	; 0x50
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fb13 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e02c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 fad9 	bl	8006192 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2160      	movs	r1, #96	; 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fb03 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005bec:	e01c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 fa9a 	bl	8006134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2140      	movs	r1, #64	; 0x40
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 faf3 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e00c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 faea 	bl	80061f2 <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e003      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e000      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a40      	ldr	r2, [pc, #256]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3d      	ldr	r2, [pc, #244]	; (8005dac <TIM_Base_SetConfig+0x118>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3c      	ldr	r2, [pc, #240]	; (8005db0 <TIM_Base_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3b      	ldr	r2, [pc, #236]	; (8005db4 <TIM_Base_SetConfig+0x120>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3a      	ldr	r2, [pc, #232]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d108      	bne.n	8005ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2f      	ldr	r2, [pc, #188]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d02b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d027      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <TIM_Base_SetConfig+0x118>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d023      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <TIM_Base_SetConfig+0x11c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01f      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2a      	ldr	r2, [pc, #168]	; (8005db4 <TIM_Base_SetConfig+0x120>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d017      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <TIM_Base_SetConfig+0x128>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <TIM_Base_SetConfig+0x138>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d108      	bne.n	8005d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40010400 	.word	0x40010400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800
 8005dc8:	40001800 	.word	0x40001800
 8005dcc:	40001c00 	.word	0x40001c00
 8005dd0:	40002000 	.word	0x40002000

08005dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 0302 	bic.w	r3, r3, #2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a20      	ldr	r2, [pc, #128]	; (8005eac <TIM_OC1_SetConfig+0xd8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC1_SetConfig+0x64>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a1f      	ldr	r2, [pc, #124]	; (8005eb0 <TIM_OC1_SetConfig+0xdc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10c      	bne.n	8005e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0308 	bic.w	r3, r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <TIM_OC1_SetConfig+0xd8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC1_SetConfig+0x8e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <TIM_OC1_SetConfig+0xdc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d111      	bne.n	8005e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40010400 	.word	0x40010400

08005eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f023 0210 	bic.w	r2, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0320 	bic.w	r3, r3, #32
 8005efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <TIM_OC2_SetConfig+0xe4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d003      	beq.n	8005f1c <TIM_OC2_SetConfig+0x68>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <TIM_OC2_SetConfig+0xe8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10d      	bne.n	8005f38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_OC2_SetConfig+0xe4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_OC2_SetConfig+0x94>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC2_SetConfig+0xe8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d113      	bne.n	8005f70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <TIM_OC3_SetConfig+0xe0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_OC3_SetConfig+0x66>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <TIM_OC3_SetConfig+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d10d      	bne.n	8006022 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800600c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a16      	ldr	r2, [pc, #88]	; (8006080 <TIM_OC3_SetConfig+0xe0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_OC3_SetConfig+0x92>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a15      	ldr	r2, [pc, #84]	; (8006084 <TIM_OC3_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d113      	bne.n	800605a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	621a      	str	r2, [r3, #32]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400

08006088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <TIM_OC4_SetConfig+0xa4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC4_SetConfig+0x68>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a11      	ldr	r2, [pc, #68]	; (8006130 <TIM_OC4_SetConfig+0xa8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d109      	bne.n	8006104 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	019b      	lsls	r3, r3, #6
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40010000 	.word	0x40010000
 8006130:	40010400 	.word	0x40010400

08006134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 030a 	bic.w	r3, r3, #10
 8006170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006192:	b480      	push	{r7}
 8006194:	b087      	sub	sp, #28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0210 	bic.w	r2, r3, #16
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	031b      	lsls	r3, r3, #12
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	f043 0307 	orr.w	r3, r3, #7
 8006214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	609a      	str	r2, [r3, #8]
}
 800621c:	bf00      	nop
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	021a      	lsls	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	431a      	orrs	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4313      	orrs	r3, r2
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	609a      	str	r2, [r3, #8]
}
 800625c:	bf00      	nop
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2201      	movs	r2, #1
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	43db      	mvns	r3, r3
 800628a:	401a      	ands	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1a      	ldr	r2, [r3, #32]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e05a      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a21      	ldr	r2, [pc, #132]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d022      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d01d      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d018      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d013      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a17      	ldr	r2, [pc, #92]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40010000 	.word	0x40010000
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800
 800639c:	40000c00 	.word	0x40000c00
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40014000 	.word	0x40014000
 80063a8:	40001800 	.word	0x40001800

080063ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e03f      	b.n	8006466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fd f89c 	bl	8003538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2224      	movs	r2, #36	; 0x24
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fd7b 	bl	8006f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800642c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800643c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800644c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b08a      	sub	sp, #40	; 0x28
 8006472:	af02      	add	r7, sp, #8
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b20      	cmp	r3, #32
 800648c:	d17c      	bne.n	8006588 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_UART_Transmit+0x2c>
 8006494:	88fb      	ldrh	r3, [r7, #6]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e075      	b.n	800658a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_UART_Transmit+0x3e>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e06e      	b.n	800658a <HAL_UART_Transmit+0x11c>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2221      	movs	r2, #33	; 0x21
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064c2:	f7fd f975 	bl	80037b0 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	88fa      	ldrh	r2, [r7, #6]
 80064d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064dc:	d108      	bne.n	80064f0 <HAL_UART_Transmit+0x82>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	e003      	b.n	80064f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006500:	e02a      	b.n	8006558 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 faf9 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e036      	b.n	800658a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006530:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	3302      	adds	r3, #2
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e007      	b.n	800654a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1cf      	bne.n	8006502 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2200      	movs	r2, #0
 800656a:	2140      	movs	r1, #64	; 0x40
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 fac9 	bl	8006b04 <UART_WaitOnFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e006      	b.n	800658a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e000      	b.n	800658a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006588:	2302      	movs	r3, #2
  }
}
 800658a:	4618      	mov	r0, r3
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b0ba      	sub	sp, #232	; 0xe8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <HAL_UART_IRQHandler+0x66>
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fbd3 	bl	8006d9e <UART_Receive_IT>
      return;
 80065f8:	e256      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80de 	beq.w	80067c0 <HAL_UART_IRQHandler+0x22c>
 8006604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80d1 	beq.w	80067c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_UART_IRQHandler+0xae>
 800662a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_UART_IRQHandler+0xd2>
 800664e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_UART_IRQHandler+0xf6>
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f043 0204 	orr.w	r2, r3, #4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d011      	beq.n	80066ba <HAL_UART_IRQHandler+0x126>
 8006696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0208 	orr.w	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 81ed 	beq.w	8006a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_UART_IRQHandler+0x14e>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fb5e 	bl	8006d9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	bf0c      	ite	eq
 80066f0:	2301      	moveq	r3, #1
 80066f2:	2300      	movne	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <HAL_UART_IRQHandler+0x17a>
 8006706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d04f      	beq.n	80067ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa66 	bl	8006be0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d141      	bne.n	80067a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800673c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3314      	adds	r3, #20
 800674a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800674e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800675a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1d9      	bne.n	8006722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	2b00      	cmp	r3, #0
 8006774:	d013      	beq.n	800679e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	4a7d      	ldr	r2, [pc, #500]	; (8006970 <HAL_UART_IRQHandler+0x3dc>)
 800677c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd fdb1 	bl	80042ea <HAL_DMA_Abort_IT>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	e00e      	b.n	80067bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f99a 	bl	8006ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e00a      	b.n	80067bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f996 	bl	8006ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e006      	b.n	80067bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f992 	bl	8006ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067ba:	e170      	b.n	8006a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	bf00      	nop
    return;
 80067be:	e16e      	b.n	8006a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f040 814a 	bne.w	8006a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8143 	beq.w	8006a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 813c 	beq.w	8006a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067e6:	2300      	movs	r3, #0
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	f040 80b4 	bne.w	8006974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8140 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800682a:	429a      	cmp	r2, r3
 800682c:	f080 8139 	bcs.w	8006aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006842:	f000 8088 	beq.w	8006956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800685c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800687e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800688a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1d9      	bne.n	8006846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3314      	adds	r3, #20
 8006898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e1      	bne.n	8006892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e3      	bne.n	80068ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006938:	65ba      	str	r2, [r7, #88]	; 0x58
 800693a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800693e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e3      	bne.n	8006914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	4618      	mov	r0, r3
 8006952:	f7fd fc5a 	bl	800420a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800695e:	b29b      	uxth	r3, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8c0 	bl	8006aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800696c:	e099      	b.n	8006aa2 <HAL_UART_IRQHandler+0x50e>
 800696e:	bf00      	nop
 8006970:	08006ca7 	.word	0x08006ca7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800697c:	b29b      	uxth	r3, r3
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 808b 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8086 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069be:	647a      	str	r2, [r7, #68]	; 0x44
 80069c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e3      	bne.n	800699a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	623b      	str	r3, [r7, #32]
   return(result);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069f6:	633a      	str	r2, [r7, #48]	; 0x30
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e3      	bne.n	80069d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a3c:	61fa      	str	r2, [r7, #28]
 8006a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e3      	bne.n	8006a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f848 	bl	8006aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a5c:	e023      	b.n	8006aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <HAL_UART_IRQHandler+0x4ea>
 8006a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f929 	bl	8006cce <UART_Transmit_IT>
    return;
 8006a7c:	e014      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00e      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x514>
 8006a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f969 	bl	8006d6e <UART_EndTransmit_IT>
    return;
 8006a9c:	e004      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	37e8      	adds	r7, #232	; 0xe8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b090      	sub	sp, #64	; 0x40
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b14:	e050      	b.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d04c      	beq.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b24:	f7fc fe44 	bl	80037b0 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d241      	bcs.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b54:	637a      	str	r2, [r7, #52]	; 0x34
 8006b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e5      	bne.n	8006b34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	613b      	str	r3, [r7, #16]
   return(result);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3314      	adds	r3, #20
 8006b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b88:	623a      	str	r2, [r7, #32]
 8006b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	69f9      	ldr	r1, [r7, #28]
 8006b8e:	6a3a      	ldr	r2, [r7, #32]
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e5      	bne.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e00f      	b.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	bf0c      	ite	eq
 8006bc8:	2301      	moveq	r3, #1
 8006bca:	2300      	movne	r3, #0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	461a      	mov	r2, r3
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d09f      	beq.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3740      	adds	r7, #64	; 0x40
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b095      	sub	sp, #84	; 0x54
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c08:	643a      	str	r2, [r7, #64]	; 0x40
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e5      	bne.n	8006be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3314      	adds	r3, #20
 8006c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	e853 3f00 	ldrex	r3, [r3]
 8006c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c44:	e841 2300 	strex	r3, r2, [r1]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e5      	bne.n	8006c1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d119      	bne.n	8006c8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f023 0310 	bic.w	r3, r3, #16
 8006c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	330c      	adds	r3, #12
 8006c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c78:	61ba      	str	r2, [r7, #24]
 8006c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6979      	ldr	r1, [r7, #20]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	613b      	str	r3, [r7, #16]
   return(result);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e5      	bne.n	8006c58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c9a:	bf00      	nop
 8006c9c:	3754      	adds	r7, #84	; 0x54
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7ff ff09 	bl	8006ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b21      	cmp	r3, #33	; 0x21
 8006ce0:	d13e      	bne.n	8006d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	d114      	bne.n	8006d16 <UART_Transmit_IT+0x48>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d110      	bne.n	8006d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	621a      	str	r2, [r3, #32]
 8006d14:	e008      	b.n	8006d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	1c59      	adds	r1, r3, #1
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6211      	str	r1, [r2, #32]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4619      	mov	r1, r3
 8006d36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10f      	bne.n	8006d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fe8e 	bl	8006ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b08c      	sub	sp, #48	; 0x30
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b22      	cmp	r3, #34	; 0x22
 8006db0:	f040 80ab 	bne.w	8006f0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbc:	d117      	bne.n	8006dee <UART_Receive_IT+0x50>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d113      	bne.n	8006dee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	1c9a      	adds	r2, r3, #2
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
 8006dec:	e026      	b.n	8006e3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e00:	d007      	beq.n	8006e12 <UART_Receive_IT+0x74>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <UART_Receive_IT+0x82>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e008      	b.n	8006e32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d15a      	bne.n	8006f06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0220 	bic.w	r2, r2, #32
 8006e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0201 	bic.w	r2, r2, #1
 8006e7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d135      	bne.n	8006efc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb6:	623a      	str	r2, [r7, #32]
 8006eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	69f9      	ldr	r1, [r7, #28]
 8006ebc:	6a3a      	ldr	r2, [r7, #32]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d10a      	bne.n	8006eee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fdf9 	bl	8006aec <HAL_UARTEx_RxEventCallback>
 8006efa:	e002      	b.n	8006f02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fde1 	bl	8006ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e002      	b.n	8006f0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3730      	adds	r7, #48	; 0x30
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f18:	b0c0      	sub	sp, #256	; 0x100
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f30:	68d9      	ldr	r1, [r3, #12]
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	ea40 0301 	orr.w	r3, r0, r1
 8006f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f6c:	f021 010c 	bic.w	r1, r1, #12
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8e:	6999      	ldr	r1, [r3, #24]
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	ea40 0301 	orr.w	r3, r0, r1
 8006f9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b8f      	ldr	r3, [pc, #572]	; (80071e0 <UART_SetConfig+0x2cc>)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d005      	beq.n	8006fb4 <UART_SetConfig+0xa0>
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b8d      	ldr	r3, [pc, #564]	; (80071e4 <UART_SetConfig+0x2d0>)
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d104      	bne.n	8006fbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fb4:	f7fd fcd8 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 8006fb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006fbc:	e003      	b.n	8006fc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fbe:	f7fd fcbf 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8006fc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd0:	f040 810c 	bne.w	80071ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006fe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	462b      	mov	r3, r5
 8006fea:	1891      	adds	r1, r2, r2
 8006fec:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fee:	415b      	adcs	r3, r3
 8006ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	eb12 0801 	adds.w	r8, r2, r1
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	eb43 0901 	adc.w	r9, r3, r1
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800700e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007016:	4690      	mov	r8, r2
 8007018:	4699      	mov	r9, r3
 800701a:	4623      	mov	r3, r4
 800701c:	eb18 0303 	adds.w	r3, r8, r3
 8007020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007024:	462b      	mov	r3, r5
 8007026:	eb49 0303 	adc.w	r3, r9, r3
 800702a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800702e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800703a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800703e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007042:	460b      	mov	r3, r1
 8007044:	18db      	adds	r3, r3, r3
 8007046:	653b      	str	r3, [r7, #80]	; 0x50
 8007048:	4613      	mov	r3, r2
 800704a:	eb42 0303 	adc.w	r3, r2, r3
 800704e:	657b      	str	r3, [r7, #84]	; 0x54
 8007050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007058:	f7f9 f8d4 	bl	8000204 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <UART_SetConfig+0x2d4>)
 8007062:	fba3 2302 	umull	r2, r3, r3, r2
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	011c      	lsls	r4, r3, #4
 800706a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007074:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	1891      	adds	r1, r2, r2
 8007082:	64b9      	str	r1, [r7, #72]	; 0x48
 8007084:	415b      	adcs	r3, r3
 8007086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800708c:	4641      	mov	r1, r8
 800708e:	eb12 0a01 	adds.w	sl, r2, r1
 8007092:	4649      	mov	r1, r9
 8007094:	eb43 0b01 	adc.w	fp, r3, r1
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ac:	4692      	mov	sl, r2
 80070ae:	469b      	mov	fp, r3
 80070b0:	4643      	mov	r3, r8
 80070b2:	eb1a 0303 	adds.w	r3, sl, r3
 80070b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ba:	464b      	mov	r3, r9
 80070bc:	eb4b 0303 	adc.w	r3, fp, r3
 80070c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070d8:	460b      	mov	r3, r1
 80070da:	18db      	adds	r3, r3, r3
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
 80070de:	4613      	mov	r3, r2
 80070e0:	eb42 0303 	adc.w	r3, r2, r3
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
 80070e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070ee:	f7f9 f889 	bl	8000204 <__aeabi_uldivmod>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	4b3b      	ldr	r3, [pc, #236]	; (80071e8 <UART_SetConfig+0x2d4>)
 80070fa:	fba3 2301 	umull	r2, r3, r3, r1
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	2264      	movs	r2, #100	; 0x64
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	1acb      	subs	r3, r1, r3
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800710e:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <UART_SetConfig+0x2d4>)
 8007110:	fba3 2302 	umull	r2, r3, r3, r2
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800711c:	441c      	add	r4, r3
 800711e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007128:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800712c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	1891      	adds	r1, r2, r2
 8007136:	63b9      	str	r1, [r7, #56]	; 0x38
 8007138:	415b      	adcs	r3, r3
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007140:	4641      	mov	r1, r8
 8007142:	1851      	adds	r1, r2, r1
 8007144:	6339      	str	r1, [r7, #48]	; 0x30
 8007146:	4649      	mov	r1, r9
 8007148:	414b      	adcs	r3, r1
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007158:	4659      	mov	r1, fp
 800715a:	00cb      	lsls	r3, r1, #3
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007162:	4651      	mov	r1, sl
 8007164:	00ca      	lsls	r2, r1, #3
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	4603      	mov	r3, r0
 800716c:	4642      	mov	r2, r8
 800716e:	189b      	adds	r3, r3, r2
 8007170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800718c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007194:	460b      	mov	r3, r1
 8007196:	18db      	adds	r3, r3, r3
 8007198:	62bb      	str	r3, [r7, #40]	; 0x28
 800719a:	4613      	mov	r3, r2
 800719c:	eb42 0303 	adc.w	r3, r2, r3
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071aa:	f7f9 f82b 	bl	8000204 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <UART_SetConfig+0x2d4>)
 80071b4:	fba3 1302 	umull	r1, r3, r3, r2
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	2164      	movs	r1, #100	; 0x64
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	3332      	adds	r3, #50	; 0x32
 80071c6:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <UART_SetConfig+0x2d4>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f003 0207 	and.w	r2, r3, #7
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4422      	add	r2, r4
 80071da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071dc:	e105      	b.n	80073ea <UART_SetConfig+0x4d6>
 80071de:	bf00      	nop
 80071e0:	40011000 	.word	0x40011000
 80071e4:	40011400 	.word	0x40011400
 80071e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	1891      	adds	r1, r2, r2
 8007204:	6239      	str	r1, [r7, #32]
 8007206:	415b      	adcs	r3, r3
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800720e:	4641      	mov	r1, r8
 8007210:	1854      	adds	r4, r2, r1
 8007212:	4649      	mov	r1, r9
 8007214:	eb43 0501 	adc.w	r5, r3, r1
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	00eb      	lsls	r3, r5, #3
 8007222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007226:	00e2      	lsls	r2, r4, #3
 8007228:	4614      	mov	r4, r2
 800722a:	461d      	mov	r5, r3
 800722c:	4643      	mov	r3, r8
 800722e:	18e3      	adds	r3, r4, r3
 8007230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007234:	464b      	mov	r3, r9
 8007236:	eb45 0303 	adc.w	r3, r5, r3
 800723a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800724a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800725a:	4629      	mov	r1, r5
 800725c:	008b      	lsls	r3, r1, #2
 800725e:	4621      	mov	r1, r4
 8007260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007264:	4621      	mov	r1, r4
 8007266:	008a      	lsls	r2, r1, #2
 8007268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800726c:	f7f8 ffca 	bl	8000204 <__aeabi_uldivmod>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4b60      	ldr	r3, [pc, #384]	; (80073f8 <UART_SetConfig+0x4e4>)
 8007276:	fba3 2302 	umull	r2, r3, r3, r2
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	011c      	lsls	r4, r3, #4
 800727e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007282:	2200      	movs	r2, #0
 8007284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800728c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	1891      	adds	r1, r2, r2
 8007296:	61b9      	str	r1, [r7, #24]
 8007298:	415b      	adcs	r3, r3
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a0:	4641      	mov	r1, r8
 80072a2:	1851      	adds	r1, r2, r1
 80072a4:	6139      	str	r1, [r7, #16]
 80072a6:	4649      	mov	r1, r9
 80072a8:	414b      	adcs	r3, r1
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072b8:	4659      	mov	r1, fp
 80072ba:	00cb      	lsls	r3, r1, #3
 80072bc:	4651      	mov	r1, sl
 80072be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072c2:	4651      	mov	r1, sl
 80072c4:	00ca      	lsls	r2, r1, #3
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	4642      	mov	r2, r8
 80072ce:	189b      	adds	r3, r3, r2
 80072d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072d4:	464b      	mov	r3, r9
 80072d6:	460a      	mov	r2, r1
 80072d8:	eb42 0303 	adc.w	r3, r2, r3
 80072dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80072ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072f8:	4649      	mov	r1, r9
 80072fa:	008b      	lsls	r3, r1, #2
 80072fc:	4641      	mov	r1, r8
 80072fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007302:	4641      	mov	r1, r8
 8007304:	008a      	lsls	r2, r1, #2
 8007306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800730a:	f7f8 ff7b 	bl	8000204 <__aeabi_uldivmod>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <UART_SetConfig+0x4e4>)
 8007314:	fba3 1302 	umull	r1, r3, r3, r2
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	2164      	movs	r1, #100	; 0x64
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	3332      	adds	r3, #50	; 0x32
 8007326:	4a34      	ldr	r2, [pc, #208]	; (80073f8 <UART_SetConfig+0x4e4>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	095b      	lsrs	r3, r3, #5
 800732e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007332:	441c      	add	r4, r3
 8007334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007338:	2200      	movs	r2, #0
 800733a:	673b      	str	r3, [r7, #112]	; 0x70
 800733c:	677a      	str	r2, [r7, #116]	; 0x74
 800733e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007342:	4642      	mov	r2, r8
 8007344:	464b      	mov	r3, r9
 8007346:	1891      	adds	r1, r2, r2
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	415b      	adcs	r3, r3
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007352:	4641      	mov	r1, r8
 8007354:	1851      	adds	r1, r2, r1
 8007356:	6039      	str	r1, [r7, #0]
 8007358:	4649      	mov	r1, r9
 800735a:	414b      	adcs	r3, r1
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800736a:	4659      	mov	r1, fp
 800736c:	00cb      	lsls	r3, r1, #3
 800736e:	4651      	mov	r1, sl
 8007370:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007374:	4651      	mov	r1, sl
 8007376:	00ca      	lsls	r2, r1, #3
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	4603      	mov	r3, r0
 800737e:	4642      	mov	r2, r8
 8007380:	189b      	adds	r3, r3, r2
 8007382:	66bb      	str	r3, [r7, #104]	; 0x68
 8007384:	464b      	mov	r3, r9
 8007386:	460a      	mov	r2, r1
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	663b      	str	r3, [r7, #96]	; 0x60
 8007398:	667a      	str	r2, [r7, #100]	; 0x64
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073a6:	4649      	mov	r1, r9
 80073a8:	008b      	lsls	r3, r1, #2
 80073aa:	4641      	mov	r1, r8
 80073ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073b0:	4641      	mov	r1, r8
 80073b2:	008a      	lsls	r2, r1, #2
 80073b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073b8:	f7f8 ff24 	bl	8000204 <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <UART_SetConfig+0x4e4>)
 80073c2:	fba3 1302 	umull	r1, r3, r3, r2
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	2164      	movs	r1, #100	; 0x64
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	3332      	adds	r3, #50	; 0x32
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <UART_SetConfig+0x4e4>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4422      	add	r2, r4
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	bf00      	nop
 80073ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073f0:	46bd      	mov	sp, r7
 80073f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f6:	bf00      	nop
 80073f8:	51eb851f 	.word	0x51eb851f

080073fc <LL_EXTI_EnableIT_0_31>:
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <LL_EXTI_EnableIT_0_31+0x20>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	4904      	ldr	r1, [pc, #16]	; (800741c <LL_EXTI_EnableIT_0_31+0x20>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4313      	orrs	r3, r2
 800740e:	600b      	str	r3, [r1, #0]
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	40013c00 	.word	0x40013c00

08007420 <LL_EXTI_DisableIT_0_31>:
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <LL_EXTI_DisableIT_0_31+0x24>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	43db      	mvns	r3, r3
 8007430:	4904      	ldr	r1, [pc, #16]	; (8007444 <LL_EXTI_DisableIT_0_31+0x24>)
 8007432:	4013      	ands	r3, r2
 8007434:	600b      	str	r3, [r1, #0]
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	40013c00 	.word	0x40013c00

08007448 <LL_EXTI_EnableEvent_0_31>:
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	4904      	ldr	r1, [pc, #16]	; (8007468 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4313      	orrs	r3, r2
 800745a:	604b      	str	r3, [r1, #4]
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	40013c00 	.word	0x40013c00

0800746c <LL_EXTI_DisableEvent_0_31>:
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	43db      	mvns	r3, r3
 800747c:	4904      	ldr	r1, [pc, #16]	; (8007490 <LL_EXTI_DisableEvent_0_31+0x24>)
 800747e:	4013      	ands	r3, r2
 8007480:	604b      	str	r3, [r1, #4]
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40013c00 	.word	0x40013c00

08007494 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	4904      	ldr	r1, [pc, #16]	; (80074b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	608b      	str	r3, [r1, #8]
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	40013c00 	.word	0x40013c00

080074b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	43db      	mvns	r3, r3
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	608b      	str	r3, [r1, #8]
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40013c00 	.word	0x40013c00

080074e0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60cb      	str	r3, [r1, #12]
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	40013c00 	.word	0x40013c00

08007504 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	43db      	mvns	r3, r3
 8007514:	4904      	ldr	r1, [pc, #16]	; (8007528 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007516:	4013      	ands	r3, r2
 8007518:	60cb      	str	r3, [r1, #12]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40013c00 	.word	0x40013c00

0800752c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	791b      	ldrb	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d065      	beq.n	800760c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d06c      	beq.n	8007622 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	795b      	ldrb	r3, [r3, #5]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d01c      	beq.n	800758a <LL_EXTI_Init+0x5e>
 8007550:	2b02      	cmp	r3, #2
 8007552:	dc25      	bgt.n	80075a0 <LL_EXTI_Init+0x74>
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <LL_EXTI_Init+0x32>
 8007558:	2b01      	cmp	r3, #1
 800755a:	d00b      	beq.n	8007574 <LL_EXTI_Init+0x48>
 800755c:	e020      	b.n	80075a0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ff82 	bl	800746c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff45 	bl	80073fc <LL_EXTI_EnableIT_0_31>
          break;
 8007572:	e018      	b.n	80075a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ff51 	bl	8007420 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff ff60 	bl	8007448 <LL_EXTI_EnableEvent_0_31>
          break;
 8007588:	e00d      	b.n	80075a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff ff34 	bl	80073fc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff ff55 	bl	8007448 <LL_EXTI_EnableEvent_0_31>
          break;
 800759e:	e002      	b.n	80075a6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
          break;
 80075a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	799b      	ldrb	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d039      	beq.n	8007622 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	799b      	ldrb	r3, [r3, #6]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d01c      	beq.n	80075f0 <LL_EXTI_Init+0xc4>
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	dc25      	bgt.n	8007606 <LL_EXTI_Init+0xda>
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d002      	beq.n	80075c4 <LL_EXTI_Init+0x98>
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d00b      	beq.n	80075da <LL_EXTI_Init+0xae>
 80075c2:	e020      	b.n	8007606 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff ff9b 	bl	8007504 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff ff5e 	bl	8007494 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80075d8:	e024      	b.n	8007624 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff ff6a 	bl	80074b8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff ff79 	bl	80074e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80075ee:	e019      	b.n	8007624 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff ff4d 	bl	8007494 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ff6e 	bl	80074e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007604:	e00e      	b.n	8007624 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	73fb      	strb	r3, [r7, #15]
            break;
 800760a:	e00b      	b.n	8007624 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff ff05 	bl	8007420 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff ff26 	bl	800746c <LL_EXTI_DisableEvent_0_31>
 8007620:	e000      	b.n	8007624 <LL_EXTI_Init+0xf8>
      }
 8007622:	bf00      	nop
  }
  return status;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <LL_GPIO_SetPinMode>:
{
 800762e:	b480      	push	{r7}
 8007630:	b089      	sub	sp, #36	; 0x24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	fa93 f3a3 	rbit	r3, r3
 8007648:	613b      	str	r3, [r7, #16]
  return result;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	fab3 f383 	clz	r3, r3
 8007650:	b2db      	uxtb	r3, r3
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	2103      	movs	r1, #3
 8007656:	fa01 f303 	lsl.w	r3, r1, r3
 800765a:	43db      	mvns	r3, r3
 800765c:	401a      	ands	r2, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	fa93 f3a3 	rbit	r3, r3
 8007668:	61bb      	str	r3, [r7, #24]
  return result;
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	fab3 f383 	clz	r3, r3
 8007670:	b2db      	uxtb	r3, r3
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	fa01 f303 	lsl.w	r3, r1, r3
 800767a:	431a      	orrs	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]
}
 8007680:	bf00      	nop
 8007682:	3724      	adds	r7, #36	; 0x24
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <LL_GPIO_SetPinOutputType>:
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	43db      	mvns	r3, r3
 80076a0:	401a      	ands	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	605a      	str	r2, [r3, #4]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <LL_GPIO_SetPinSpeed>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	; 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	fa93 f3a3 	rbit	r3, r3
 80076d6:	613b      	str	r3, [r7, #16]
  return result;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	fab3 f383 	clz	r3, r3
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	2103      	movs	r1, #3
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	43db      	mvns	r3, r3
 80076ea:	401a      	ands	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	fa93 f3a3 	rbit	r3, r3
 80076f6:	61bb      	str	r3, [r7, #24]
  return result;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	fab3 f383 	clz	r3, r3
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	fa01 f303 	lsl.w	r3, r1, r3
 8007708:	431a      	orrs	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	609a      	str	r2, [r3, #8]
}
 800770e:	bf00      	nop
 8007710:	3724      	adds	r7, #36	; 0x24
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <LL_GPIO_SetPinPull>:
{
 800771a:	b480      	push	{r7}
 800771c:	b089      	sub	sp, #36	; 0x24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	fa93 f3a3 	rbit	r3, r3
 8007734:	613b      	str	r3, [r7, #16]
  return result;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	fab3 f383 	clz	r3, r3
 800773c:	b2db      	uxtb	r3, r3
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	2103      	movs	r1, #3
 8007742:	fa01 f303 	lsl.w	r3, r1, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	401a      	ands	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	fa93 f3a3 	rbit	r3, r3
 8007754:	61bb      	str	r3, [r7, #24]
  return result;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	fab3 f383 	clz	r3, r3
 800775c:	b2db      	uxtb	r3, r3
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	fa01 f303 	lsl.w	r3, r1, r3
 8007766:	431a      	orrs	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	60da      	str	r2, [r3, #12]
}
 800776c:	bf00      	nop
 800776e:	3724      	adds	r7, #36	; 0x24
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <LL_GPIO_SetAFPin_0_7>:
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	; 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a1a      	ldr	r2, [r3, #32]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fa93 f3a3 	rbit	r3, r3
 8007792:	613b      	str	r3, [r7, #16]
  return result;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	fab3 f383 	clz	r3, r3
 800779a:	b2db      	uxtb	r3, r3
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	210f      	movs	r1, #15
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	43db      	mvns	r3, r3
 80077a6:	401a      	ands	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	fa93 f3a3 	rbit	r3, r3
 80077b2:	61bb      	str	r3, [r7, #24]
  return result;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	fab3 f383 	clz	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	431a      	orrs	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	3724      	adds	r7, #36	; 0x24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <LL_GPIO_SetAFPin_8_15>:
{
 80077d6:	b480      	push	{r7}
 80077d8:	b089      	sub	sp, #36	; 0x24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	fa93 f3a3 	rbit	r3, r3
 80077f2:	613b      	str	r3, [r7, #16]
  return result;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	fab3 f383 	clz	r3, r3
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	210f      	movs	r1, #15
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	43db      	mvns	r3, r3
 8007806:	401a      	ands	r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	fa93 f3a3 	rbit	r3, r3
 8007814:	61bb      	str	r3, [r7, #24]
  return result;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	fab3 f383 	clz	r3, r3
 800781c:	b2db      	uxtb	r3, r3
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800782c:	bf00      	nop
 800782e:	3724      	adds	r7, #36	; 0x24
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007846:	2300      	movs	r3, #0
 8007848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	fa93 f3a3 	rbit	r3, r3
 8007856:	613b      	str	r3, [r7, #16]
  return result;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	fab3 f383 	clz	r3, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007862:	e050      	b.n	8007906 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	2101      	movs	r1, #1
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	fa01 f303 	lsl.w	r3, r1, r3
 8007870:	4013      	ands	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d042      	beq.n	8007900 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d003      	beq.n	800788a <LL_GPIO_Init+0x52>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d10d      	bne.n	80078a6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	461a      	mov	r2, r3
 8007890:	69b9      	ldr	r1, [r7, #24]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ff12 	bl	80076bc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	461a      	mov	r2, r3
 800789e:	69b9      	ldr	r1, [r7, #24]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff fef3 	bl	800768c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	461a      	mov	r2, r3
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ff33 	bl	800771a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d11a      	bne.n	80078f2 <LL_GPIO_Init+0xba>
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	fa93 f3a3 	rbit	r3, r3
 80078c6:	60bb      	str	r3, [r7, #8]
  return result;
 80078c8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80078ca:	fab3 f383 	clz	r3, r3
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b07      	cmp	r3, #7
 80078d2:	d807      	bhi.n	80078e4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	461a      	mov	r2, r3
 80078da:	69b9      	ldr	r1, [r7, #24]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff4b 	bl	8007778 <LL_GPIO_SetAFPin_0_7>
 80078e2:	e006      	b.n	80078f2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	461a      	mov	r2, r3
 80078ea:	69b9      	ldr	r1, [r7, #24]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ff72 	bl	80077d6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	461a      	mov	r2, r3
 80078f8:	69b9      	ldr	r1, [r7, #24]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fe97 	bl	800762e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	3301      	adds	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1a7      	bne.n	8007864 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <__libc_init_array>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4d0d      	ldr	r5, [pc, #52]	; (8007958 <__libc_init_array+0x38>)
 8007924:	4c0d      	ldr	r4, [pc, #52]	; (800795c <__libc_init_array+0x3c>)
 8007926:	1b64      	subs	r4, r4, r5
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	2600      	movs	r6, #0
 800792c:	42a6      	cmp	r6, r4
 800792e:	d109      	bne.n	8007944 <__libc_init_array+0x24>
 8007930:	4d0b      	ldr	r5, [pc, #44]	; (8007960 <__libc_init_array+0x40>)
 8007932:	4c0c      	ldr	r4, [pc, #48]	; (8007964 <__libc_init_array+0x44>)
 8007934:	f000 f830 	bl	8007998 <_init>
 8007938:	1b64      	subs	r4, r4, r5
 800793a:	10a4      	asrs	r4, r4, #2
 800793c:	2600      	movs	r6, #0
 800793e:	42a6      	cmp	r6, r4
 8007940:	d105      	bne.n	800794e <__libc_init_array+0x2e>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f855 3b04 	ldr.w	r3, [r5], #4
 8007948:	4798      	blx	r3
 800794a:	3601      	adds	r6, #1
 800794c:	e7ee      	b.n	800792c <__libc_init_array+0xc>
 800794e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007952:	4798      	blx	r3
 8007954:	3601      	adds	r6, #1
 8007956:	e7f2      	b.n	800793e <__libc_init_array+0x1e>
 8007958:	08007aa0 	.word	0x08007aa0
 800795c:	08007aa0 	.word	0x08007aa0
 8007960:	08007aa0 	.word	0x08007aa0
 8007964:	08007aa4 	.word	0x08007aa4

08007968 <memcmp>:
 8007968:	b510      	push	{r4, lr}
 800796a:	3901      	subs	r1, #1
 800796c:	4402      	add	r2, r0
 800796e:	4290      	cmp	r0, r2
 8007970:	d101      	bne.n	8007976 <memcmp+0xe>
 8007972:	2000      	movs	r0, #0
 8007974:	e005      	b.n	8007982 <memcmp+0x1a>
 8007976:	7803      	ldrb	r3, [r0, #0]
 8007978:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800797c:	42a3      	cmp	r3, r4
 800797e:	d001      	beq.n	8007984 <memcmp+0x1c>
 8007980:	1b18      	subs	r0, r3, r4
 8007982:	bd10      	pop	{r4, pc}
 8007984:	3001      	adds	r0, #1
 8007986:	e7f2      	b.n	800796e <memcmp+0x6>

08007988 <memset>:
 8007988:	4402      	add	r2, r0
 800798a:	4603      	mov	r3, r0
 800798c:	4293      	cmp	r3, r2
 800798e:	d100      	bne.n	8007992 <memset+0xa>
 8007990:	4770      	bx	lr
 8007992:	f803 1b01 	strb.w	r1, [r3], #1
 8007996:	e7f9      	b.n	800798c <memset+0x4>

08007998 <_init>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	bf00      	nop
 800799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799e:	bc08      	pop	{r3}
 80079a0:	469e      	mov	lr, r3
 80079a2:	4770      	bx	lr

080079a4 <_fini>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr
