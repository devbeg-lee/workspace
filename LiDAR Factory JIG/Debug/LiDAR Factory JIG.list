
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800682c  0800682c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800682c  0800682c  0001682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006834  08006834  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800683c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000010  0800684c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800684c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e24  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c5  00000000  00000000  00034e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00038630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  00039a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029232  00000000  00000000  0003ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e9d  00000000  00000000  00063e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef4e2  00000000  00000000  0007dd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d1f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  0016d24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800676c 	.word	0x0800676c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	0800676c 	.word	0x0800676c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x98>)
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ADC1_Init+0x98>)
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_ADC1_Init+0x98>)
 800056a:	f002 fb7b 	bl	8002c64 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fce8 	bl	8000f48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000580:	2304      	movs	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0x98>)
 800058a:	f002 fd4d 	bl	8003028 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fcd8 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000038 	.word	0x20000038
 80005a4:	40012000 	.word	0x40012000
 80005a8:	0f000001 	.word	0x0f000001

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if (adcHandle->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d127      	bne.n	800061e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_MspInit+0x84>)
 800061a:	f003 f84b 	bl	80036b4 <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <LiDAR_Cur_Check>:
  }
}

/* USER CODE BEGIN 1 */
void LiDAR_Cur_Check(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 800063a:	f002 fb57 	bl	8002cec <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000642:	f002 fc58 	bl	8002ef6 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000648:	f002 fce0 	bl	800300c <HAL_ADC_GetValue>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000652:	801a      	strh	r2, [r3, #0]
  total_adc_val += adc_val;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
  cnt++;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000672:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000676:	f002 fc0b 	bl	8002e90 <HAL_ADC_Stop>

  Delay_ms(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f88c 	bl	8000798 <Delay_ms>
  if (cnt == ADC_AVG_BUFFER_SIZE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d120      	bne.n	80006cc <LiDAR_Cur_Check+0x98>
  {
    avg_adc_val = total_adc_val / ADC_AVG_BUFFER_SIZE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <LiDAR_Cur_Check+0xac>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069a:	801a      	strh	r2, [r3, #0]
    load_current = avg_adc_val / ADC_OFFSET;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006aa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006e8 <LiDAR_Cur_Check+0xb4>
 80006ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <LiDAR_Cur_Check+0xb8>)
 80006be:	801a      	strh	r2, [r3, #0]
    total_adc_val = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    cnt = 0;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  }
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000038 	.word	0x20000038
 80006d4:	2000002e 	.word	0x2000002e
 80006d8:	20000030 	.word	0x20000030
 80006dc:	20000034 	.word	0x20000034
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	20000036 	.word	0x20000036
 80006e8:	4022cbfb 	.word	0x4022cbfb
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Delay_us+0x40>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006fe:	f003 fad5 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <Delay_us+0x44>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Delay_us+0x40>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f8      	bcc.n	8000716 <Delay_us+0x26>
    	;
  }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0001000 	.word	0xe0001000
 8000734:	431bde83 	.word	0x431bde83

08000738 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <DWT_Delay_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <DWT_Delay_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <DWT_Delay_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <DWT_Delay_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <DWT_Delay_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <DWT_Delay_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile("NOP");
 8000772:	bf00      	nop
  __ASM volatile("NOP");
 8000774:	bf00      	nop
  __ASM volatile("NOP");
 8000776:	bf00      	nop

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <DWT_Delay_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <DWT_Delay_Init+0x4c>
  {
    return 0; /*clock cycle counter started*/
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /*clock cycle counter not started*/
 8000784:	2301      	movs	r3, #1
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa0 	bl	80006f0 <Delay_us>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3302      	adds	r3, #2
 80008de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	43db      	mvns	r3, r3
 80008e8:	ea02 0103 	and.w	r1, r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	fa03 f202 	lsl.w	r2, r3, r2
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	430a      	orrs	r2, r1
 8000912:	3302      	adds	r3, #2
 8000914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013800 	.word	0x40013800

08000928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa93 f3a3 	rbit	r3, r3
 8000942:	613b      	str	r3, [r7, #16]
  return result;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61bb      	str	r3, [r7, #24]
  return result;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	431a      	orrs	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000986:	b480      	push	{r7}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	613b      	str	r3, [r7, #16]
  return result;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa93 f3a3 	rbit	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
  return result;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff ffd5 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	f7ff ffd2 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffcf 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff ffcc 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff ffc9 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a72:	f642 4107 	movw	r1, #11271	; 0x2c07
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000a78:	f7ff ffb4 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	4880      	ldr	r0, [pc, #512]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000a80:	f7ff ffb0 	bl	80009e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 8000a84:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000a88:	487e      	ldr	r0, [pc, #504]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000a8a:	f7ff ffab 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a8e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000a92:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000aaa:	f005 f951 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000aae:	2382      	movs	r3, #130	; 0x82
 8000ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486e      	ldr	r0, [pc, #440]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000ac8:	f005 f942 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000acc:	f240 630c 	movw	r3, #1548	; 0x60c
 8000ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000aec:	f005 f930 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 8000af0:	f641 1370 	movw	r3, #6512	; 0x1970
 8000af4:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	485f      	ldr	r0, [pc, #380]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000b04:	f005 f924 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4855      	ldr	r0, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000b26:	f005 f913 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b4a:	f005 f901 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b6a:	f005 f8f1 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b82:	f005 f8e5 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000b86:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000b8a:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000ba2:	f005 f8d5 	bl	8005d50 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000bba:	f005 f8c9 	bl	8005d50 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000bbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe82 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000bc8:	492f      	ldr	r1, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x254>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe7e 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 ff2d 	bl	8005a44 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 ff1f 	bl	8005a44 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c0c:	f7ff febb 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c18:	f7ff feb5 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c22:	f7ff fe81 	bl	8000928 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c2e:	f7ff fe7b 	bl	8000928 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c32:	f7ff fdc1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe11 	bl	8000864 <NVIC_EncodePriority>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fde2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f7ff fdc1 	bl	80007d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c52:	f7ff fdb1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe01 	bl	8000864 <NVIC_EncodePriority>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4619      	mov	r1, r3
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff fdd2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f7ff fdb1 	bl	80007d4 <__NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	f0000003 	.word	0xf0000003

08000c8c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	330c      	adds	r3, #12
 8000c98:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	e853 3f00 	ldrex	r3, [r3]
 8000ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	330c      	adds	r3, #12
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	61ba      	str	r2, [r7, #24]
 8000cb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cb4:	6979      	ldr	r1, [r7, #20]
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	e841 2300 	strex	r3, r2, [r1]
 8000cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1e7      	bne.n	8000c94 <LL_USART_EnableIT_RXNE+0x8>
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_GPIO_SetOutputPin>:
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	619a      	str	r2, [r3, #24]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <LL_GPIO_ResetOutputPin>:
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	041a      	lsls	r2, r3, #16
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	619a      	str	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <Delay_us>:
  {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <Delay_us+0x40>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	60fb      	str	r3, [r7, #12]
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000d1a:	f002 ffc7 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <Delay_us+0x44>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	fb02 f303 	mul.w	r3, r2, r3
 8000d2e:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000d30:	bf00      	nop
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <Delay_us+0x40>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	1ad2      	subs	r2, r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3f8      	bcc.n	8000d32 <Delay_us+0x26>
  }
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e0001000 	.word	0xe0001000
 8000d50:	431bde83 	.word	0x431bde83

08000d54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f001 ff12 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f882 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff fe68 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d64:	f7ff fbd0 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000d68:	f001 fdc8 	bl	80028fc <MX_UART5_Init>
  MX_TIM3_Init();
 8000d6c:	f001 fc08 	bl	8002580 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000d70:	f001 fe3c 	bl	80029ec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000d74:	f7ff fce0 	bl	8000738 <DWT_Delay_Init>
  LL_USART_EnableIT_RXNE(UART5);
 8000d78:	4831      	ldr	r0, [pc, #196]	; (8000e40 <main+0xec>)
 8000d7a:	f7ff ff87 	bl	8000c8c <LL_USART_EnableIT_RXNE>
  // LL_USART_Enable(USART6);
  switch_check();
 8000d7e:	f001 fbc3 	bl	8002508 <switch_check>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (Mode_data == 0) // Factory JIG
 8000d82:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <main+0xf0>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d114      	bne.n	8000db4 <main+0x60>
    {
      switch (g_Status)
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <main+0xf4>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d00c      	beq.n	8000dae <main+0x5a>
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	dc51      	bgt.n	8000e3c <main+0xe8>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <main+0x4e>
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d003      	beq.n	8000da8 <main+0x54>
      case kStatus_Result:
        result();
        break;

      default:
        break;
 8000da0:	e04c      	b.n	8000e3c <main+0xe8>
        Idle_status();
 8000da2:	f001 f98f 	bl	80020c4 <Idle_status>
        break;
 8000da6:	e04a      	b.n	8000e3e <main+0xea>
        Test_status();
 8000da8:	f001 fa8a 	bl	80022c0 <Test_status>
        break;
 8000dac:	e047      	b.n	8000e3e <main+0xea>
        result();
 8000dae:	f000 fbb1 	bl	8001514 <result>
        break;
 8000db2:	e044      	b.n	8000e3e <main+0xea>
      }
    }
    else // LD Tx
    {
      HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000db4:	2102      	movs	r1, #2
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <main+0xf8>)
 8000db8:	f002 fe28 	bl	8003a0c <HAL_GPIO_TogglePin>
      if (tx_start_flag == 1)
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <main+0xfc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d1de      	bne.n	8000d82 <main+0x2e>
      {
        if (stop_feedback == 0)
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <main+0x100>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d129      	bne.n	8000e20 <main+0xcc>
        {
          LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	4821      	ldr	r0, [pc, #132]	; (8000e58 <main+0x104>)
 8000dd2:	f7ff ff7e 	bl	8000cd2 <LL_GPIO_SetOutputPin>
          stop_feedback = HAL_GPIO_ReadPin(FB_STOP1_SIG_GPIO_Port, FB_STOP1_SIG_Pin);
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	481f      	ldr	r0, [pc, #124]	; (8000e58 <main+0x104>)
 8000ddc:	f002 fdfe 	bl	80039dc <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <main+0x100>)
 8000de6:	701a      	strb	r2, [r3, #0]
          LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dec:	481a      	ldr	r0, [pc, #104]	; (8000e58 <main+0x104>)
 8000dee:	f7ff ff7e 	bl	8000cee <LL_GPIO_ResetOutputPin>
          feedback_ng_cnt++;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <main+0x108>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <main+0x108>)
 8000dfc:	701a      	strb	r2, [r3, #0]
          if (feedback_ng_cnt >= 5)
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <main+0x108>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d908      	bls.n	8000e18 <main+0xc4>
          {
            g_Result = kResult_Err_11;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <main+0x10c>)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	701a      	strb	r2, [r3, #0]
            stop_feedback = 1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <main+0x100>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
            feedback_ng_cnt = 0;
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <main+0x108>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
          }
          Delay_us(20);
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f7ff ff77 	bl	8000d0c <Delay_us>
 8000e1e:	e7b0      	b.n	8000d82 <main+0x2e>
        }
        else
        {
          LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <main+0x104>)
 8000e26:	f7ff ff54 	bl	8000cd2 <LL_GPIO_SetOutputPin>
          LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	480a      	ldr	r0, [pc, #40]	; (8000e58 <main+0x104>)
 8000e30:	f7ff ff5d 	bl	8000cee <LL_GPIO_ResetOutputPin>
          Delay_us(20);
 8000e34:	2014      	movs	r0, #20
 8000e36:	f7ff ff69 	bl	8000d0c <Delay_us>
 8000e3a:	e7a2      	b.n	8000d82 <main+0x2e>
        break;
 8000e3c:	bf00      	nop
    if (Mode_data == 0) // Factory JIG
 8000e3e:	e7a0      	b.n	8000d82 <main+0x2e>
 8000e40:	40005000 	.word	0x40005000
 8000e44:	20000096 	.word	0x20000096
 8000e48:	20000080 	.word	0x20000080
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	20000095 	.word	0x20000095
 8000e54:	20000081 	.word	0x20000081
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	20000082 	.word	0x20000082
 8000e60:	20000083 	.word	0x20000083

08000e64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2234      	movs	r2, #52	; 0x34
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f005 fc72 	bl	800675c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <SystemClock_Config+0xdc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <SystemClock_Config+0xdc>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <SystemClock_Config+0xdc>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <SystemClock_Config+0xe0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a25      	ldr	r2, [pc, #148]	; (8000f44 <SystemClock_Config+0xe0>)
 8000eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <SystemClock_Config+0xe0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ed8:	23b4      	movs	r3, #180	; 0xb4
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f003 f8bb 	bl	8004068 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef8:	f000 f826 	bl	8000f48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000efc:	f002 fda0 	bl	8003a40 <HAL_PWREx_EnableOverDrive>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f06:	f000 f81f 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2105      	movs	r1, #5
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fdd9 	bl	8003ae0 <HAL_RCC_ClockConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f34:	f000 f808 	bl	8000f48 <Error_Handler>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3750      	adds	r7, #80	; 0x50
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>

08000f52 <LL_USART_IsActiveFlag_TXE>:
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	2b80      	cmp	r3, #128	; 0x80
 8000f64:	bf0c      	ite	eq
 8000f66:	2301      	moveq	r3, #1
 8000f68:	2300      	movne	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	605a      	str	r2, [r3, #4]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d85d      	bhi.n	800107a <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000fbe:	7cfb      	ldrb	r3, [r7, #19]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	74fa      	strb	r2, [r7, #19]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	443b      	add	r3, r7
 8000fc8:	22fa      	movs	r2, #250	; 0xfa
 8000fca:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	74fa      	strb	r2, [r7, #19]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	443b      	add	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	74fa      	strb	r2, [r7, #19]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	443b      	add	r3, r7
 8000fe8:	22d0      	movs	r2, #208	; 0xd0
 8000fea:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	74fa      	strb	r2, [r7, #19]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	443b      	add	r3, r7
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000ffe:	7cfb      	ldrb	r3, [r7, #19]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	74fa      	strb	r2, [r7, #19]
 8001004:	3318      	adds	r3, #24
 8001006:	443b      	add	r3, r7
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	74fa      	strb	r2, [r7, #19]
 8001014:	3318      	adds	r3, #24
 8001016:	443b      	add	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 800101e:	7cfb      	ldrb	r3, [r7, #19]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	74fa      	strb	r2, [r7, #19]
 8001024:	3318      	adds	r3, #24
 8001026:	443b      	add	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 800102e:	7cfb      	ldrb	r3, [r7, #19]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	74fa      	strb	r2, [r7, #19]
 8001034:	3318      	adds	r3, #24
 8001036:	443b      	add	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 800103e:	7a3b      	ldrb	r3, [r7, #8]
 8001040:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001042:	2301      	movs	r3, #1
 8001044:	82bb      	strh	r3, [r7, #20]
 8001046:	e00a      	b.n	800105e <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8001048:	8abb      	ldrh	r3, [r7, #20]
 800104a:	3318      	adds	r3, #24
 800104c:	443b      	add	r3, r7
 800104e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	4053      	eors	r3, r2
 8001056:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001058:	8abb      	ldrh	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	82bb      	strh	r3, [r7, #20]
 800105e:	7cfb      	ldrb	r3, [r7, #19]
 8001060:	b29b      	uxth	r3, r3
 8001062:	8aba      	ldrh	r2, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	d3ef      	bcc.n	8001048 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8001068:	7cfb      	ldrb	r3, [r7, #19]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	74fa      	strb	r2, [r7, #19]
 800106e:	3318      	adds	r3, #24
 8001070:	443b      	add	r3, r7
 8001072:	7dfa      	ldrb	r2, [r7, #23]
 8001074:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001078:	e000      	b.n	800107c <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 800107a:	bf00      	nop
    }
    UART_Transmit(USART6, senddata, sizeof(senddata));
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2209      	movs	r2, #9
 8001082:	4619      	mov	r1, r3
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <LiDAR_Protocol_Tx+0xfc>)
 8001086:	f000 f977 	bl	8001378 <UART_Transmit>
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40011400 	.word	0x40011400

08001098 <GUI_Protocol_Tx>:

void GUI_Protocol_Tx(uint8_t parameter, uint8_t data)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	747b      	strb	r3, [r7, #17]
    uint8_t senddata[9] = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <GUI_Protocol_Tx+0x3c>
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f2c0 80c1 	blt.w	800124c <GUI_Protocol_Tx+0x1b4>
 80010ca:	3b02      	subs	r3, #2
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	f200 80bd 	bhi.w	800124c <GUI_Protocol_Tx+0x1b4>
 80010d2:	e05d      	b.n	8001190 <GUI_Protocol_Tx+0xf8>
    {
    case GUI_COMMAND_CONNECT:

        senddata[cnt++] = PROTOCOL_HEADER;
 80010d4:	7c7b      	ldrb	r3, [r7, #17]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	747a      	strb	r2, [r7, #17]
 80010da:	3318      	adds	r3, #24
 80010dc:	443b      	add	r3, r7
 80010de:	22fa      	movs	r2, #250	; 0xfa
 80010e0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 80010e4:	7c7b      	ldrb	r3, [r7, #17]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	747a      	strb	r2, [r7, #17]
 80010ea:	3318      	adds	r3, #24
 80010ec:	443b      	add	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80010f4:	7c7b      	ldrb	r3, [r7, #17]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	747a      	strb	r2, [r7, #17]
 80010fa:	3318      	adds	r3, #24
 80010fc:	443b      	add	r3, r7
 80010fe:	22d0      	movs	r2, #208	; 0xd0
 8001100:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 8001104:	7c7b      	ldrb	r3, [r7, #17]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	747a      	strb	r2, [r7, #17]
 800110a:	3318      	adds	r3, #24
 800110c:	443b      	add	r3, r7
 800110e:	22f0      	movs	r2, #240	; 0xf0
 8001110:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8001114:	7c7b      	ldrb	r3, [r7, #17]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	747a      	strb	r2, [r7, #17]
 800111a:	3318      	adds	r3, #24
 800111c:	443b      	add	r3, r7
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001124:	7c7b      	ldrb	r3, [r7, #17]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	747a      	strb	r2, [r7, #17]
 800112a:	3318      	adds	r3, #24
 800112c:	443b      	add	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001134:	7c7b      	ldrb	r3, [r7, #17]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	747a      	strb	r2, [r7, #17]
 800113a:	3318      	adds	r3, #24
 800113c:	443b      	add	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data;
 8001144:	7c7b      	ldrb	r3, [r7, #17]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	747a      	strb	r2, [r7, #17]
 800114a:	3318      	adds	r3, #24
 800114c:	443b      	add	r3, r7
 800114e:	79ba      	ldrb	r2, [r7, #6]
 8001150:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001154:	7a3b      	ldrb	r3, [r7, #8]
 8001156:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001158:	2301      	movs	r3, #1
 800115a:	82bb      	strh	r3, [r7, #20]
 800115c:	e00a      	b.n	8001174 <GUI_Protocol_Tx+0xdc>
        {
            checksum ^= senddata[i];
 800115e:	8abb      	ldrh	r3, [r7, #20]
 8001160:	3318      	adds	r3, #24
 8001162:	443b      	add	r3, r7
 8001164:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	4053      	eors	r3, r2
 800116c:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800116e:	8abb      	ldrh	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	82bb      	strh	r3, [r7, #20]
 8001174:	7c7b      	ldrb	r3, [r7, #17]
 8001176:	b29b      	uxth	r3, r3
 8001178:	8aba      	ldrh	r2, [r7, #20]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3ef      	bcc.n	800115e <GUI_Protocol_Tx+0xc6>
        }
        senddata[cnt++] = checksum;
 800117e:	7c7b      	ldrb	r3, [r7, #17]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	747a      	strb	r2, [r7, #17]
 8001184:	3318      	adds	r3, #24
 8001186:	443b      	add	r3, r7
 8001188:	7dfa      	ldrb	r2, [r7, #23]
 800118a:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 800118e:	e05e      	b.n	800124e <GUI_Protocol_Tx+0x1b6>
    case GUI_COMMAND_MOT_SPEED:
    case GUI_COMMAND_ENC_CHECK:
    case GUI_COMMAND_TDC_INIT:
    case GUI_COMMAND_TDC_CAL:

        senddata[cnt++] = PROTOCOL_HEADER;
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	747a      	strb	r2, [r7, #17]
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	22fa      	movs	r2, #250	; 0xfa
 800119c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	747a      	strb	r2, [r7, #17]
 80011a6:	3318      	adds	r3, #24
 80011a8:	443b      	add	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	747a      	strb	r2, [r7, #17]
 80011b6:	3318      	adds	r3, #24
 80011b8:	443b      	add	r3, r7
 80011ba:	22d0      	movs	r2, #208	; 0xd0
 80011bc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 80011c0:	7c7b      	ldrb	r3, [r7, #17]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	747a      	strb	r2, [r7, #17]
 80011c6:	3318      	adds	r3, #24
 80011c8:	443b      	add	r3, r7
 80011ca:	22f0      	movs	r2, #240	; 0xf0
 80011cc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	747a      	strb	r2, [r7, #17]
 80011d6:	3318      	adds	r3, #24
 80011d8:	443b      	add	r3, r7
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	747a      	strb	r2, [r7, #17]
 80011e6:	3318      	adds	r3, #24
 80011e8:	443b      	add	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x01U;
 80011f0:	7c7b      	ldrb	r3, [r7, #17]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	747a      	strb	r2, [r7, #17]
 80011f6:	3318      	adds	r3, #24
 80011f8:	443b      	add	r3, r7
 80011fa:	2201      	movs	r2, #1
 80011fc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data; // 0x00 : OK, 0x01 : FAIL
 8001200:	7c7b      	ldrb	r3, [r7, #17]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	747a      	strb	r2, [r7, #17]
 8001206:	3318      	adds	r3, #24
 8001208:	443b      	add	r3, r7
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001210:	7a3b      	ldrb	r3, [r7, #8]
 8001212:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001214:	2301      	movs	r3, #1
 8001216:	827b      	strh	r3, [r7, #18]
 8001218:	e00a      	b.n	8001230 <GUI_Protocol_Tx+0x198>
        {
            checksum ^= senddata[i];
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	3318      	adds	r3, #24
 800121e:	443b      	add	r3, r7
 8001220:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	4053      	eors	r3, r2
 8001228:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800122a:	8a7b      	ldrh	r3, [r7, #18]
 800122c:	3301      	adds	r3, #1
 800122e:	827b      	strh	r3, [r7, #18]
 8001230:	7c7b      	ldrb	r3, [r7, #17]
 8001232:	b29b      	uxth	r3, r3
 8001234:	8a7a      	ldrh	r2, [r7, #18]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3ef      	bcc.n	800121a <GUI_Protocol_Tx+0x182>
        }
        senddata[cnt++] = checksum;
 800123a:	7c7b      	ldrb	r3, [r7, #17]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	747a      	strb	r2, [r7, #17]
 8001240:	3318      	adds	r3, #24
 8001242:	443b      	add	r3, r7
 8001244:	7dfa      	ldrb	r2, [r7, #23]
 8001246:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 800124a:	e000      	b.n	800124e <GUI_Protocol_Tx+0x1b6>
    default:
        break;
 800124c:	bf00      	nop
    }
    UART_Transmit(UART5, senddata, sizeof(senddata));
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2209      	movs	r2, #9
 8001254:	4619      	mov	r1, r3
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <GUI_Protocol_Tx+0x1cc>)
 8001258:	f000 f88e 	bl	8001378 <UART_Transmit>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40005000 	.word	0x40005000

08001268 <GUI_Protocol_Mode_Tx>:

void GUI_Protocol_Mode_Tx(uint8_t data)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8001276:	2300      	movs	r3, #0
 8001278:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[10] = {0};
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	809a      	strh	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 8001288:	7cfb      	ldrb	r3, [r7, #19]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	74fa      	strb	r2, [r7, #19]
 800128e:	3318      	adds	r3, #24
 8001290:	443b      	add	r3, r7
 8001292:	22fa      	movs	r2, #250	; 0xfa
 8001294:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	74fa      	strb	r2, [r7, #19]
 800129e:	3318      	adds	r3, #24
 80012a0:	443b      	add	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 80012a8:	7cfb      	ldrb	r3, [r7, #19]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	74fa      	strb	r2, [r7, #19]
 80012ae:	3318      	adds	r3, #24
 80012b0:	443b      	add	r3, r7
 80012b2:	22d0      	movs	r2, #208	; 0xd0
 80012b4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_MODE;
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	74fa      	strb	r2, [r7, #19]
 80012be:	3318      	adds	r3, #24
 80012c0:	443b      	add	r3, r7
 80012c2:	22f0      	movs	r2, #240	; 0xf0
 80012c4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_COMMAND_MODE;
 80012c8:	7cfb      	ldrb	r3, [r7, #19]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	74fa      	strb	r2, [r7, #19]
 80012ce:	3318      	adds	r3, #24
 80012d0:	443b      	add	r3, r7
 80012d2:	2201      	movs	r2, #1
 80012d4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	74fa      	strb	r2, [r7, #19]
 80012de:	3318      	adds	r3, #24
 80012e0:	443b      	add	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	74fa      	strb	r2, [r7, #19]
 80012ee:	3318      	adds	r3, #24
 80012f0:	443b      	add	r3, r7
 80012f2:	2201      	movs	r2, #1
 80012f4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : Factory JIG MODE, 0x01 : Tx MODE
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	74fa      	strb	r2, [r7, #19]
 80012fe:	3318      	adds	r3, #24
 8001300:	443b      	add	r3, r7
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = load_current;
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <GUI_Protocol_Mode_Tx+0x108>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	b29a      	uxth	r2, r3
 800130e:	7cfb      	ldrb	r3, [r7, #19]
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	74f9      	strb	r1, [r7, #19]
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	3318      	adds	r3, #24
 8001318:	443b      	add	r3, r7
 800131a:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 800131e:	7a3b      	ldrb	r3, [r7, #8]
 8001320:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001322:	2301      	movs	r3, #1
 8001324:	82bb      	strh	r3, [r7, #20]
 8001326:	e00a      	b.n	800133e <GUI_Protocol_Mode_Tx+0xd6>
    {
        checksum ^= senddata[i];
 8001328:	8abb      	ldrh	r3, [r7, #20]
 800132a:	3318      	adds	r3, #24
 800132c:	443b      	add	r3, r7
 800132e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4053      	eors	r3, r2
 8001336:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001338:	8abb      	ldrh	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	82bb      	strh	r3, [r7, #20]
 800133e:	7cfb      	ldrb	r3, [r7, #19]
 8001340:	b29b      	uxth	r3, r3
 8001342:	8aba      	ldrh	r2, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3ef      	bcc.n	8001328 <GUI_Protocol_Mode_Tx+0xc0>
    }
    senddata[cnt++] = checksum;
 8001348:	7cfb      	ldrb	r3, [r7, #19]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	74fa      	strb	r2, [r7, #19]
 800134e:	3318      	adds	r3, #24
 8001350:	443b      	add	r3, r7
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	f803 2c10 	strb.w	r2, [r3, #-16]

    UART_Transmit(UART5, senddata, sizeof(senddata));
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	220a      	movs	r2, #10
 800135e:	4619      	mov	r1, r3
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <GUI_Protocol_Mode_Tx+0x10c>)
 8001362:	f000 f809 	bl	8001378 <UART_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000002c 	.word	0x2000002c
 8001374:	40005000 	.word	0x40005000

08001378 <UART_Transmit>:

void UART_Transmit(USART_TypeDef *USARTx, uint8_t *data, uint16_t length)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	4613      	mov	r3, r2
 8001384:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < length; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	82fb      	strh	r3, [r7, #22]
 800138a:	e011      	b.n	80013b0 <UART_Transmit+0x38>
    {
        LL_USART_TransmitData8(USARTx, data[i]);
 800138c:	8afb      	ldrh	r3, [r7, #22]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff fdee 	bl	8000f78 <LL_USART_TransmitData8>
        while (!LL_USART_IsActiveFlag_TXE(USARTx))
 800139c:	bf00      	nop
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fdd7 	bl	8000f52 <LL_USART_IsActiveFlag_TXE>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f9      	beq.n	800139e <UART_Transmit+0x26>
    for (uint16_t i = 0; i < length; i++)
 80013aa:	8afb      	ldrh	r3, [r7, #22]
 80013ac:	3301      	adds	r3, #1
 80013ae:	82fb      	strh	r3, [r7, #22]
 80013b0:	8afa      	ldrh	r2, [r7, #22]
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3e9      	bcc.n	800138c <UART_Transmit+0x14>
            ;
    }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <LL_GPIO_SetOutputPin>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_GPIO_ResetOutputPin>:
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <fail_sound>:

extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;

void fail_sound(uint8_t i)
{
 80013fc:	b490      	push	{r4, r7}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <fail_sound+0x16>
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d130      	bne.n	8001474 <fail_sound+0x78>
    {
        unsigned int fail_sound[] = {C5, C5, C5, C5};
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <fail_sound+0x8c>)
 8001414:	f107 0408 	add.w	r4, r7, #8
 8001418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800141a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <fail_sound+0x90>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	3318      	adds	r3, #24
 800142a:	443b      	add	r3, r7
 800142c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <fail_sound+0x94>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fbb1 f2f2 	udiv	r2, r1, r2
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <fail_sound+0x90>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	3318      	adds	r3, #24
 8001446:	443b      	add	r3, r7
 8001448:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800144c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <fail_sound+0x94>)
 8001452:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <fail_sound+0x90>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	3318      	adds	r3, #24
 8001460:	443b      	add	r3, r7
 8001462:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001466:	fbb2 f2f3 	udiv	r2, r2, r3
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <fail_sound+0x94>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 8001472:	e004      	b.n	800147e <fail_sound+0x82>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <fail_sound+0x94>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bc90      	pop	{r4, r7}
 8001486:	4770      	bx	lr
 8001488:	08006784 	.word	0x08006784
 800148c:	20000000 	.word	0x20000000
 8001490:	20000098 	.word	0x20000098

08001494 <pass_sound>:

void pass_sound(uint8_t i)
{
 8001494:	b490      	push	{r4, r7}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C4, E4, G4, C5};
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <pass_sound+0x74>)
 80014a0:	f107 0408 	add.w	r4, r7, #8
 80014a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <pass_sound+0x78>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	3318      	adds	r3, #24
 80014b6:	443b      	add	r3, r7
 80014b8:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <pass_sound+0x7c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <pass_sound+0x78>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	3318      	adds	r3, #24
 80014d2:	443b      	add	r3, r7
 80014d4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <pass_sound+0x7c>)
 80014de:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / pass_sound[i] / 2);
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <pass_sound+0x78>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	3318      	adds	r3, #24
 80014ec:	443b      	add	r3, r7
 80014ee:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <pass_sound+0x7c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0852      	lsrs	r2, r2, #1
 80014fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bc90      	pop	{r4, r7}
 8001506:	4770      	bx	lr
 8001508:	08006794 	.word	0x08006794
 800150c:	20000000 	.word	0x20000000
 8001510:	20000098 	.word	0x20000098

08001514 <result>:

void result(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800151a:	2108      	movs	r1, #8
 800151c:	48ba      	ldr	r0, [pc, #744]	; (8001808 <result+0x2f4>)
 800151e:	f003 f8e9 	bl	80046f4 <HAL_TIM_PWM_Start>

    switch (g_Result)
 8001522:	4bba      	ldr	r3, [pc, #744]	; (800180c <result+0x2f8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b0d      	cmp	r3, #13
 800152a:	f200 82d0 	bhi.w	8001ace <result+0x5ba>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <result+0x20>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800156d 	.word	0x0800156d
 8001538:	08001593 	.word	0x08001593
 800153c:	080015f5 	.word	0x080015f5
 8001540:	0800165b 	.word	0x0800165b
 8001544:	080016c1 	.word	0x080016c1
 8001548:	08001727 	.word	0x08001727
 800154c:	0800178d 	.word	0x0800178d
 8001550:	080017f3 	.word	0x080017f3
 8001554:	0800186b 	.word	0x0800186b
 8001558:	080018d1 	.word	0x080018d1
 800155c:	08001937 	.word	0x08001937
 8001560:	0800199d 	.word	0x0800199d
 8001564:	08001a03 	.word	0x08001a03
 8001568:	08001a69 	.word	0x08001a69
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 800156c:	2104      	movs	r1, #4
 800156e:	48a8      	ldr	r0, [pc, #672]	; (8001810 <result+0x2fc>)
 8001570:	f7ff ff35 	bl	80013de <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001574:	2120      	movs	r1, #32
 8001576:	48a7      	ldr	r0, [pc, #668]	; (8001814 <result+0x300>)
 8001578:	f7ff ff31 	bl	80013de <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 800157c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001580:	48a3      	ldr	r0, [pc, #652]	; (8001810 <result+0x2fc>)
 8001582:	f7ff ff2c 	bl	80013de <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	48a1      	ldr	r0, [pc, #644]	; (8001810 <result+0x2fc>)
 800158c:	f7ff ff27 	bl	80013de <LL_GPIO_ResetOutputPin>
        break;
 8001590:	e29e      	b.n	8001ad0 <result+0x5bc>

    case kResult_Pass:
        for (uint8_t j = 0; j <= 3; j++)
 8001592:	2300      	movs	r3, #0
 8001594:	77fb      	strb	r3, [r7, #31]
 8001596:	e029      	b.n	80015ec <result+0xd8>
        {
            pass_sound(j);
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff7a 	bl	8001494 <pass_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80015a0:	2301      	movs	r3, #1
 80015a2:	77bb      	strb	r3, [r7, #30]
 80015a4:	e01c      	b.n	80015e0 <result+0xcc>
            {
                FND_1();
 80015a6:	f000 faa5 	bl	8001af4 <FND_1>
                FND_P();
 80015aa:	f000 fb0b 	bl	8001bc4 <FND_P>
                Delay_ms(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff f8f2 	bl	8000798 <Delay_ms>
                FND_2();
 80015b4:	f000 fab8 	bl	8001b28 <FND_2>
                FND_A();
 80015b8:	f000 fb2c 	bl	8001c14 <FND_A>
                Delay_ms(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff f8eb 	bl	8000798 <Delay_ms>
                FND_3();
 80015c2:	f000 facb 	bl	8001b5c <FND_3>
                FND_S();
 80015c6:	f000 fb4d 	bl	8001c64 <FND_S>
                Delay_ms(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff f8e4 	bl	8000798 <Delay_ms>
                FND_4();
 80015d0:	f000 fade 	bl	8001b90 <FND_4>
                Delay_ms(1);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff f8df 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80015da:	7fbb      	ldrb	r3, [r7, #30]
 80015dc:	3301      	adds	r3, #1
 80015de:	77bb      	strb	r3, [r7, #30]
 80015e0:	7fbb      	ldrb	r3, [r7, #30]
 80015e2:	2bfa      	cmp	r3, #250	; 0xfa
 80015e4:	d9df      	bls.n	80015a6 <result+0x92>
        for (uint8_t j = 0; j <= 3; j++)
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	3301      	adds	r3, #1
 80015ea:	77fb      	strb	r3, [r7, #31]
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d9d2      	bls.n	8001598 <result+0x84>
            }
        }
        break;
 80015f2:	e26d      	b.n	8001ad0 <result+0x5bc>

    case kResult_Err_1: // UART Fail
        for (uint8_t j = 0; j <= 3; j++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	777b      	strb	r3, [r7, #29]
 80015f8:	e02b      	b.n	8001652 <result+0x13e>
        {
            fail_sound(j);
 80015fa:	7f7b      	ldrb	r3, [r7, #29]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fefd 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001602:	2301      	movs	r3, #1
 8001604:	773b      	strb	r3, [r7, #28]
 8001606:	e01e      	b.n	8001646 <result+0x132>
            {
                FND_1();
 8001608:	f000 fa74 	bl	8001af4 <FND_1>
                FND_E();
 800160c:	f000 fb52 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff f8c1 	bl	8000798 <Delay_ms>
                FND_2();
 8001616:	f000 fa87 	bl	8001b28 <FND_2>
                FND_r();
 800161a:	f000 fb73 	bl	8001d04 <FND_r>
                Delay_ms(1);
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff f8ba 	bl	8000798 <Delay_ms>
                FND_3();
 8001624:	f000 fa9a 	bl	8001b5c <FND_3>
                FND_zero();
 8001628:	f000 fb94 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff f8b3 	bl	8000798 <Delay_ms>
                FND_4();
 8001632:	f000 faad 	bl	8001b90 <FND_4>
                FND_one();
 8001636:	f000 fbb5 	bl	8001da4 <FND_one>
                Delay_ms(1);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff f8ac 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001640:	7f3b      	ldrb	r3, [r7, #28]
 8001642:	3301      	adds	r3, #1
 8001644:	773b      	strb	r3, [r7, #28]
 8001646:	7f3b      	ldrb	r3, [r7, #28]
 8001648:	2bfa      	cmp	r3, #250	; 0xfa
 800164a:	d9dd      	bls.n	8001608 <result+0xf4>
        for (uint8_t j = 0; j <= 3; j++)
 800164c:	7f7b      	ldrb	r3, [r7, #29]
 800164e:	3301      	adds	r3, #1
 8001650:	777b      	strb	r3, [r7, #29]
 8001652:	7f7b      	ldrb	r3, [r7, #29]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d9d0      	bls.n	80015fa <result+0xe6>
            }
        }
        break;
 8001658:	e23a      	b.n	8001ad0 <result+0x5bc>

    case kResult_Err_2: // Ethernet chip Fail
        for (uint8_t j = 0; j <= 3; j++)
 800165a:	2300      	movs	r3, #0
 800165c:	76fb      	strb	r3, [r7, #27]
 800165e:	e02b      	b.n	80016b8 <result+0x1a4>
        {
            fail_sound(j);
 8001660:	7efb      	ldrb	r3, [r7, #27]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff feca 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001668:	2301      	movs	r3, #1
 800166a:	76bb      	strb	r3, [r7, #26]
 800166c:	e01e      	b.n	80016ac <result+0x198>
            {
                FND_1();
 800166e:	f000 fa41 	bl	8001af4 <FND_1>
                FND_E();
 8001672:	f000 fb1f 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff f88e 	bl	8000798 <Delay_ms>
                FND_2();
 800167c:	f000 fa54 	bl	8001b28 <FND_2>
                FND_r();
 8001680:	f000 fb40 	bl	8001d04 <FND_r>
                Delay_ms(1);
 8001684:	2001      	movs	r0, #1
 8001686:	f7ff f887 	bl	8000798 <Delay_ms>
                FND_3();
 800168a:	f000 fa67 	bl	8001b5c <FND_3>
                FND_zero();
 800168e:	f000 fb61 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff f880 	bl	8000798 <Delay_ms>
                FND_4();
 8001698:	f000 fa7a 	bl	8001b90 <FND_4>
                FND_two();
 800169c:	f000 fbaa 	bl	8001df4 <FND_two>
                Delay_ms(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff f879 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80016a6:	7ebb      	ldrb	r3, [r7, #26]
 80016a8:	3301      	adds	r3, #1
 80016aa:	76bb      	strb	r3, [r7, #26]
 80016ac:	7ebb      	ldrb	r3, [r7, #26]
 80016ae:	2bfa      	cmp	r3, #250	; 0xfa
 80016b0:	d9dd      	bls.n	800166e <result+0x15a>
        for (uint8_t j = 0; j <= 3; j++)
 80016b2:	7efb      	ldrb	r3, [r7, #27]
 80016b4:	3301      	adds	r3, #1
 80016b6:	76fb      	strb	r3, [r7, #27]
 80016b8:	7efb      	ldrb	r3, [r7, #27]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d9d0      	bls.n	8001660 <result+0x14c>
            }
        }
        break;
 80016be:	e207      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_3: // APD BIAS Control Fail
        for (uint8_t j = 0; j <= 3; j++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	767b      	strb	r3, [r7, #25]
 80016c4:	e02b      	b.n	800171e <result+0x20a>
        {
            fail_sound(j);
 80016c6:	7e7b      	ldrb	r3, [r7, #25]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fe97 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80016ce:	2301      	movs	r3, #1
 80016d0:	763b      	strb	r3, [r7, #24]
 80016d2:	e01e      	b.n	8001712 <result+0x1fe>
            {
                FND_1();
 80016d4:	f000 fa0e 	bl	8001af4 <FND_1>
                FND_E();
 80016d8:	f000 faec 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff f85b 	bl	8000798 <Delay_ms>
                FND_2();
 80016e2:	f000 fa21 	bl	8001b28 <FND_2>
                FND_r();
 80016e6:	f000 fb0d 	bl	8001d04 <FND_r>
                Delay_ms(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff f854 	bl	8000798 <Delay_ms>
                FND_3();
 80016f0:	f000 fa34 	bl	8001b5c <FND_3>
                FND_zero();
 80016f4:	f000 fb2e 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff f84d 	bl	8000798 <Delay_ms>
                FND_4();
 80016fe:	f000 fa47 	bl	8001b90 <FND_4>
                FND_three();
 8001702:	f000 fb9f 	bl	8001e44 <FND_three>
                Delay_ms(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff f846 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800170c:	7e3b      	ldrb	r3, [r7, #24]
 800170e:	3301      	adds	r3, #1
 8001710:	763b      	strb	r3, [r7, #24]
 8001712:	7e3b      	ldrb	r3, [r7, #24]
 8001714:	2bfa      	cmp	r3, #250	; 0xfa
 8001716:	d9dd      	bls.n	80016d4 <result+0x1c0>
        for (uint8_t j = 0; j <= 3; j++)
 8001718:	7e7b      	ldrb	r3, [r7, #25]
 800171a:	3301      	adds	r3, #1
 800171c:	767b      	strb	r3, [r7, #25]
 800171e:	7e7b      	ldrb	r3, [r7, #25]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d9d0      	bls.n	80016c6 <result+0x1b2>
            }
        }
        break;
 8001724:	e1d4      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_4: // Motor Speed Cailbration Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
 800172a:	e02b      	b.n	8001784 <result+0x270>
        {
            fail_sound(j);
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe64 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001734:	2301      	movs	r3, #1
 8001736:	75bb      	strb	r3, [r7, #22]
 8001738:	e01e      	b.n	8001778 <result+0x264>
            {
                FND_1();
 800173a:	f000 f9db 	bl	8001af4 <FND_1>
                FND_E();
 800173e:	f000 fab9 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff f828 	bl	8000798 <Delay_ms>
                FND_2();
 8001748:	f000 f9ee 	bl	8001b28 <FND_2>
                FND_r();
 800174c:	f000 fada 	bl	8001d04 <FND_r>
                Delay_ms(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f7ff f821 	bl	8000798 <Delay_ms>
                FND_3();
 8001756:	f000 fa01 	bl	8001b5c <FND_3>
                FND_zero();
 800175a:	f000 fafb 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff f81a 	bl	8000798 <Delay_ms>
                FND_4();
 8001764:	f000 fa14 	bl	8001b90 <FND_4>
                FND_four();
 8001768:	f000 fb94 	bl	8001e94 <FND_four>
                Delay_ms(1);
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff f813 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001772:	7dbb      	ldrb	r3, [r7, #22]
 8001774:	3301      	adds	r3, #1
 8001776:	75bb      	strb	r3, [r7, #22]
 8001778:	7dbb      	ldrb	r3, [r7, #22]
 800177a:	2bfa      	cmp	r3, #250	; 0xfa
 800177c:	d9dd      	bls.n	800173a <result+0x226>
        for (uint8_t j = 0; j <= 3; j++)
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	3301      	adds	r3, #1
 8001782:	75fb      	strb	r3, [r7, #23]
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d9d0      	bls.n	800172c <result+0x218>
            }
        }
        break;
 800178a:	e1a1      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_5: // Encoder Check Start Point Slit Fail
        for (uint8_t j = 0; j <= 3; j++)
 800178c:	2300      	movs	r3, #0
 800178e:	757b      	strb	r3, [r7, #21]
 8001790:	e02b      	b.n	80017ea <result+0x2d6>
        {
            fail_sound(j);
 8001792:	7d7b      	ldrb	r3, [r7, #21]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe31 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 800179a:	2301      	movs	r3, #1
 800179c:	753b      	strb	r3, [r7, #20]
 800179e:	e01e      	b.n	80017de <result+0x2ca>
            {
                FND_1();
 80017a0:	f000 f9a8 	bl	8001af4 <FND_1>
                FND_E();
 80017a4:	f000 fa86 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7fe fff5 	bl	8000798 <Delay_ms>
                FND_2();
 80017ae:	f000 f9bb 	bl	8001b28 <FND_2>
                FND_r();
 80017b2:	f000 faa7 	bl	8001d04 <FND_r>
                Delay_ms(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7fe ffee 	bl	8000798 <Delay_ms>
                FND_3();
 80017bc:	f000 f9ce 	bl	8001b5c <FND_3>
                FND_zero();
 80017c0:	f000 fac8 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7fe ffe7 	bl	8000798 <Delay_ms>
                FND_4();
 80017ca:	f000 f9e1 	bl	8001b90 <FND_4>
                FND_five();
 80017ce:	f000 fb89 	bl	8001ee4 <FND_five>
                Delay_ms(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7fe ffe0 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80017d8:	7d3b      	ldrb	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	753b      	strb	r3, [r7, #20]
 80017de:	7d3b      	ldrb	r3, [r7, #20]
 80017e0:	2bfa      	cmp	r3, #250	; 0xfa
 80017e2:	d9dd      	bls.n	80017a0 <result+0x28c>
        for (uint8_t j = 0; j <= 3; j++)
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	3301      	adds	r3, #1
 80017e8:	757b      	strb	r3, [r7, #21]
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d9d0      	bls.n	8001792 <result+0x27e>
            }
        }
        break;
 80017f0:	e16e      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_6: // TDC Init Fail
        for (uint8_t j = 0; j <= 3; j++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	74fb      	strb	r3, [r7, #19]
 80017f6:	e034      	b.n	8001862 <result+0x34e>
        {
            fail_sound(j);
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fdfe 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001800:	2301      	movs	r3, #1
 8001802:	74bb      	strb	r3, [r7, #18]
 8001804:	e027      	b.n	8001856 <result+0x342>
 8001806:	bf00      	nop
 8001808:	20000098 	.word	0x20000098
 800180c:	20000083 	.word	0x20000083
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400
            {
                FND_1();
 8001818:	f000 f96c 	bl	8001af4 <FND_1>
                FND_E();
 800181c:	f000 fa4a 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001820:	2001      	movs	r0, #1
 8001822:	f7fe ffb9 	bl	8000798 <Delay_ms>
                FND_2();
 8001826:	f000 f97f 	bl	8001b28 <FND_2>
                FND_r();
 800182a:	f000 fa6b 	bl	8001d04 <FND_r>
                Delay_ms(1);
 800182e:	2001      	movs	r0, #1
 8001830:	f7fe ffb2 	bl	8000798 <Delay_ms>
                FND_3();
 8001834:	f000 f992 	bl	8001b5c <FND_3>
                FND_zero();
 8001838:	f000 fa8c 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 800183c:	2001      	movs	r0, #1
 800183e:	f7fe ffab 	bl	8000798 <Delay_ms>
                FND_4();
 8001842:	f000 f9a5 	bl	8001b90 <FND_4>
                FND_six();
 8001846:	f000 fb75 	bl	8001f34 <FND_six>
                Delay_ms(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f7fe ffa4 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	3301      	adds	r3, #1
 8001854:	74bb      	strb	r3, [r7, #18]
 8001856:	7cbb      	ldrb	r3, [r7, #18]
 8001858:	2bfa      	cmp	r3, #250	; 0xfa
 800185a:	d9dd      	bls.n	8001818 <result+0x304>
        for (uint8_t j = 0; j <= 3; j++)
 800185c:	7cfb      	ldrb	r3, [r7, #19]
 800185e:	3301      	adds	r3, #1
 8001860:	74fb      	strb	r3, [r7, #19]
 8001862:	7cfb      	ldrb	r3, [r7, #19]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d9c7      	bls.n	80017f8 <result+0x2e4>
            }
        }
        break;
 8001868:	e132      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_7: // TDC Calibration Fail
        for (uint8_t j = 0; j <= 3; j++)
 800186a:	2300      	movs	r3, #0
 800186c:	747b      	strb	r3, [r7, #17]
 800186e:	e02b      	b.n	80018c8 <result+0x3b4>
        {
            fail_sound(j);
 8001870:	7c7b      	ldrb	r3, [r7, #17]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fdc2 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001878:	2301      	movs	r3, #1
 800187a:	743b      	strb	r3, [r7, #16]
 800187c:	e01e      	b.n	80018bc <result+0x3a8>
            {
                FND_1();
 800187e:	f000 f939 	bl	8001af4 <FND_1>
                FND_E();
 8001882:	f000 fa17 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f7fe ff86 	bl	8000798 <Delay_ms>
                FND_2();
 800188c:	f000 f94c 	bl	8001b28 <FND_2>
                FND_r();
 8001890:	f000 fa38 	bl	8001d04 <FND_r>
                Delay_ms(1);
 8001894:	2001      	movs	r0, #1
 8001896:	f7fe ff7f 	bl	8000798 <Delay_ms>
                FND_3();
 800189a:	f000 f95f 	bl	8001b5c <FND_3>
                FND_zero();
 800189e:	f000 fa59 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7fe ff78 	bl	8000798 <Delay_ms>
                FND_4();
 80018a8:	f000 f972 	bl	8001b90 <FND_4>
                FND_seven();
 80018ac:	f000 fb6a 	bl	8001f84 <FND_seven>
                Delay_ms(1);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7fe ff71 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80018b6:	7c3b      	ldrb	r3, [r7, #16]
 80018b8:	3301      	adds	r3, #1
 80018ba:	743b      	strb	r3, [r7, #16]
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	2bfa      	cmp	r3, #250	; 0xfa
 80018c0:	d9dd      	bls.n	800187e <result+0x36a>
        for (uint8_t j = 0; j <= 3; j++)
 80018c2:	7c7b      	ldrb	r3, [r7, #17]
 80018c4:	3301      	adds	r3, #1
 80018c6:	747b      	strb	r3, [r7, #17]
 80018c8:	7c7b      	ldrb	r3, [r7, #17]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d9d0      	bls.n	8001870 <result+0x35c>
            }
        }
        break;
 80018ce:	e0ff      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_8: // Detect 1 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e02b      	b.n	800192e <result+0x41a>
        {
            fail_sound(j);
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd8f 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80018de:	2301      	movs	r3, #1
 80018e0:	73bb      	strb	r3, [r7, #14]
 80018e2:	e01e      	b.n	8001922 <result+0x40e>
            {
                FND_1();
 80018e4:	f000 f906 	bl	8001af4 <FND_1>
                FND_E();
 80018e8:	f000 f9e4 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7fe ff53 	bl	8000798 <Delay_ms>
                FND_2();
 80018f2:	f000 f919 	bl	8001b28 <FND_2>
                FND_r();
 80018f6:	f000 fa05 	bl	8001d04 <FND_r>
                Delay_ms(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7fe ff4c 	bl	8000798 <Delay_ms>
                FND_3();
 8001900:	f000 f92c 	bl	8001b5c <FND_3>
                FND_zero();
 8001904:	f000 fa26 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 8001908:	2001      	movs	r0, #1
 800190a:	f7fe ff45 	bl	8000798 <Delay_ms>
                FND_4();
 800190e:	f000 f93f 	bl	8001b90 <FND_4>
                FND_eight();
 8001912:	f000 fb5f 	bl	8001fd4 <FND_eight>
                Delay_ms(1);
 8001916:	2001      	movs	r0, #1
 8001918:	f7fe ff3e 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	3301      	adds	r3, #1
 8001920:	73bb      	strb	r3, [r7, #14]
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	2bfa      	cmp	r3, #250	; 0xfa
 8001926:	d9dd      	bls.n	80018e4 <result+0x3d0>
        for (uint8_t j = 0; j <= 3; j++)
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	3301      	adds	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d9d0      	bls.n	80018d6 <result+0x3c2>
            }
        }
        break;
 8001934:	e0cc      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_9: // Detect 2 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001936:	2300      	movs	r3, #0
 8001938:	737b      	strb	r3, [r7, #13]
 800193a:	e02b      	b.n	8001994 <result+0x480>
        {
            fail_sound(j);
 800193c:	7b7b      	ldrb	r3, [r7, #13]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fd5c 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001944:	2301      	movs	r3, #1
 8001946:	733b      	strb	r3, [r7, #12]
 8001948:	e01e      	b.n	8001988 <result+0x474>
            {
                FND_1();
 800194a:	f000 f8d3 	bl	8001af4 <FND_1>
                FND_E();
 800194e:	f000 f9b1 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f7fe ff20 	bl	8000798 <Delay_ms>
                FND_2();
 8001958:	f000 f8e6 	bl	8001b28 <FND_2>
                FND_r();
 800195c:	f000 f9d2 	bl	8001d04 <FND_r>
                Delay_ms(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f7fe ff19 	bl	8000798 <Delay_ms>
                FND_3();
 8001966:	f000 f8f9 	bl	8001b5c <FND_3>
                FND_zero();
 800196a:	f000 f9f3 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f7fe ff12 	bl	8000798 <Delay_ms>
                FND_4();
 8001974:	f000 f90c 	bl	8001b90 <FND_4>
                FND_nine();
 8001978:	f000 fb54 	bl	8002024 <FND_nine>
                Delay_ms(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f7fe ff0b 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001982:	7b3b      	ldrb	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	733b      	strb	r3, [r7, #12]
 8001988:	7b3b      	ldrb	r3, [r7, #12]
 800198a:	2bfa      	cmp	r3, #250	; 0xfa
 800198c:	d9dd      	bls.n	800194a <result+0x436>
        for (uint8_t j = 0; j <= 3; j++)
 800198e:	7b7b      	ldrb	r3, [r7, #13]
 8001990:	3301      	adds	r3, #1
 8001992:	737b      	strb	r3, [r7, #13]
 8001994:	7b7b      	ldrb	r3, [r7, #13]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d9d0      	bls.n	800193c <result+0x428>
            }
        }
        break;
 800199a:	e099      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_10: // Detect 3 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 800199c:	2300      	movs	r3, #0
 800199e:	72fb      	strb	r3, [r7, #11]
 80019a0:	e02b      	b.n	80019fa <result+0x4e6>
        {
            fail_sound(j);
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fd29 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80019aa:	2301      	movs	r3, #1
 80019ac:	72bb      	strb	r3, [r7, #10]
 80019ae:	e01e      	b.n	80019ee <result+0x4da>
            {
                FND_1();
 80019b0:	f000 f8a0 	bl	8001af4 <FND_1>
                FND_E();
 80019b4:	f000 f97e 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7fe feed 	bl	8000798 <Delay_ms>
                FND_2();
 80019be:	f000 f8b3 	bl	8001b28 <FND_2>
                FND_r();
 80019c2:	f000 f99f 	bl	8001d04 <FND_r>
                Delay_ms(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7fe fee6 	bl	8000798 <Delay_ms>
                FND_3();
 80019cc:	f000 f8c6 	bl	8001b5c <FND_3>
                FND_one();
 80019d0:	f000 f9e8 	bl	8001da4 <FND_one>
                Delay_ms(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7fe fedf 	bl	8000798 <Delay_ms>
                FND_4();
 80019da:	f000 f8d9 	bl	8001b90 <FND_4>
                FND_zero();
 80019de:	f000 f9b9 	bl	8001d54 <FND_zero>
                Delay_ms(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7fe fed8 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	3301      	adds	r3, #1
 80019ec:	72bb      	strb	r3, [r7, #10]
 80019ee:	7abb      	ldrb	r3, [r7, #10]
 80019f0:	2bfa      	cmp	r3, #250	; 0xfa
 80019f2:	d9dd      	bls.n	80019b0 <result+0x49c>
        for (uint8_t j = 0; j <= 3; j++)
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	3301      	adds	r3, #1
 80019f8:	72fb      	strb	r3, [r7, #11]
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d9d0      	bls.n	80019a2 <result+0x48e>
            }
        }
        break;
 8001a00:	e066      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_11: // LD Tx feedback Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	727b      	strb	r3, [r7, #9]
 8001a06:	e02b      	b.n	8001a60 <result+0x54c>
        {
            fail_sound(j);
 8001a08:	7a7b      	ldrb	r3, [r7, #9]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fcf6 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001a10:	2301      	movs	r3, #1
 8001a12:	723b      	strb	r3, [r7, #8]
 8001a14:	e01e      	b.n	8001a54 <result+0x540>
            {
                FND_1();
 8001a16:	f000 f86d 	bl	8001af4 <FND_1>
                FND_E();
 8001a1a:	f000 f94b 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7fe feba 	bl	8000798 <Delay_ms>
                FND_2();
 8001a24:	f000 f880 	bl	8001b28 <FND_2>
                FND_r();
 8001a28:	f000 f96c 	bl	8001d04 <FND_r>
                Delay_ms(1);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7fe feb3 	bl	8000798 <Delay_ms>
                FND_3();
 8001a32:	f000 f893 	bl	8001b5c <FND_3>
                FND_one();
 8001a36:	f000 f9b5 	bl	8001da4 <FND_one>
                Delay_ms(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7fe feac 	bl	8000798 <Delay_ms>
                FND_4();
 8001a40:	f000 f8a6 	bl	8001b90 <FND_4>
                FND_one();
 8001a44:	f000 f9ae 	bl	8001da4 <FND_one>
                Delay_ms(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7fe fea5 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001a4e:	7a3b      	ldrb	r3, [r7, #8]
 8001a50:	3301      	adds	r3, #1
 8001a52:	723b      	strb	r3, [r7, #8]
 8001a54:	7a3b      	ldrb	r3, [r7, #8]
 8001a56:	2bfa      	cmp	r3, #250	; 0xfa
 8001a58:	d9dd      	bls.n	8001a16 <result+0x502>
        for (uint8_t j = 0; j <= 3; j++)
 8001a5a:	7a7b      	ldrb	r3, [r7, #9]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	727b      	strb	r3, [r7, #9]
 8001a60:	7a7b      	ldrb	r3, [r7, #9]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d9d0      	bls.n	8001a08 <result+0x4f4>
            }
        }
        break;
 8001a66:	e033      	b.n	8001ad0 <result+0x5bc>
    case kResult_Err_12: //여분
        for (uint8_t j = 0; j <= 3; j++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	e02b      	b.n	8001ac6 <result+0x5b2>
        {
            fail_sound(j);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fcc3 	bl	80013fc <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001a76:	2301      	movs	r3, #1
 8001a78:	71bb      	strb	r3, [r7, #6]
 8001a7a:	e01e      	b.n	8001aba <result+0x5a6>
            {
                FND_1();
 8001a7c:	f000 f83a 	bl	8001af4 <FND_1>
                FND_E();
 8001a80:	f000 f918 	bl	8001cb4 <FND_E>
                Delay_ms(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7fe fe87 	bl	8000798 <Delay_ms>
                FND_2();
 8001a8a:	f000 f84d 	bl	8001b28 <FND_2>
                FND_r();
 8001a8e:	f000 f939 	bl	8001d04 <FND_r>
                Delay_ms(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7fe fe80 	bl	8000798 <Delay_ms>
                FND_3();
 8001a98:	f000 f860 	bl	8001b5c <FND_3>
                FND_one();
 8001a9c:	f000 f982 	bl	8001da4 <FND_one>
                Delay_ms(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7fe fe79 	bl	8000798 <Delay_ms>
                FND_4();
 8001aa6:	f000 f873 	bl	8001b90 <FND_4>
                FND_two();
 8001aaa:	f000 f9a3 	bl	8001df4 <FND_two>
                Delay_ms(1);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7fe fe72 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	71bb      	strb	r3, [r7, #6]
 8001aba:	79bb      	ldrb	r3, [r7, #6]
 8001abc:	2bfa      	cmp	r3, #250	; 0xfa
 8001abe:	d9dd      	bls.n	8001a7c <result+0x568>
        for (uint8_t j = 0; j <= 3; j++)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d9d0      	bls.n	8001a6e <result+0x55a>
            }
        }
        break;
 8001acc:	e000      	b.n	8001ad0 <result+0x5bc>

    default:
        break;
 8001ace:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <result+0x5d8>)
 8001ad4:	f002 fed6 	bl	8004884 <HAL_TIM_PWM_Stop>
    g_Result = kResult_None;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <result+0x5dc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
    turn_off();
 8001ade:	f000 fac9 	bl	8002074 <turn_off>
}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000098 	.word	0x20000098
 8001af0:	20000083 	.word	0x20000083

08001af4 <FND_1>:

void FND_1(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001af8:	2104      	movs	r1, #4
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <FND_1+0x2c>)
 8001afc:	f7ff fc61 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001b00:	2120      	movs	r1, #32
 8001b02:	4808      	ldr	r0, [pc, #32]	; (8001b24 <FND_1+0x30>)
 8001b04:	f7ff fc6b 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <FND_1+0x2c>)
 8001b0e:	f7ff fc66 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b16:	4802      	ldr	r0, [pc, #8]	; (8001b20 <FND_1+0x2c>)
 8001b18:	f7ff fc61 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020400 	.word	0x40020400

08001b28 <FND_2>:
void FND_2(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <FND_2+0x2c>)
 8001b30:	f7ff fc55 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001b34:	2120      	movs	r1, #32
 8001b36:	4808      	ldr	r0, [pc, #32]	; (8001b58 <FND_2+0x30>)
 8001b38:	f7ff fc43 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <FND_2+0x2c>)
 8001b42:	f7ff fc4c 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4a:	4802      	ldr	r0, [pc, #8]	; (8001b54 <FND_2+0x2c>)
 8001b4c:	f7ff fc47 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020400 	.word	0x40020400

08001b5c <FND_3>:
void FND_3(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001b60:	2104      	movs	r1, #4
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <FND_3+0x2c>)
 8001b64:	f7ff fc3b 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001b68:	2120      	movs	r1, #32
 8001b6a:	4808      	ldr	r0, [pc, #32]	; (8001b8c <FND_3+0x30>)
 8001b6c:	f7ff fc37 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <FND_3+0x2c>)
 8001b76:	f7ff fc24 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7e:	4802      	ldr	r0, [pc, #8]	; (8001b88 <FND_3+0x2c>)
 8001b80:	f7ff fc2d 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40020800 	.word	0x40020800
 8001b8c:	40020400 	.word	0x40020400

08001b90 <FND_4>:
void FND_4(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001b94:	2104      	movs	r1, #4
 8001b96:	4809      	ldr	r0, [pc, #36]	; (8001bbc <FND_4+0x2c>)
 8001b98:	f7ff fc21 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <FND_4+0x30>)
 8001ba0:	f7ff fc1d 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <FND_4+0x2c>)
 8001baa:	f7ff fc18 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb2:	4802      	ldr	r0, [pc, #8]	; (8001bbc <FND_4+0x2c>)
 8001bb4:	f7ff fc05 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <FND_P>:

void FND_P(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bcc:	480f      	ldr	r0, [pc, #60]	; (8001c0c <FND_P+0x48>)
 8001bce:	f7ff fbf8 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <FND_P+0x4c>)
 8001bd6:	f7ff fbf4 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <FND_P+0x4c>)
 8001bde:	f7ff fbfe 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <FND_P+0x4c>)
 8001be8:	f7ff fbf9 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001bec:	2102      	movs	r1, #2
 8001bee:	4807      	ldr	r0, [pc, #28]	; (8001c0c <FND_P+0x48>)
 8001bf0:	f7ff fbe7 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <FND_P+0x48>)
 8001bf8:	f7ff fbe3 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <FND_P+0x4c>)
 8001c02:	f7ff fbde 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020400 	.word	0x40020400

08001c14 <FND_A>:

void FND_A(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1c:	480f      	ldr	r0, [pc, #60]	; (8001c5c <FND_A+0x48>)
 8001c1e:	f7ff fbd0 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	480e      	ldr	r0, [pc, #56]	; (8001c60 <FND_A+0x4c>)
 8001c26:	f7ff fbcc 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <FND_A+0x4c>)
 8001c2e:	f7ff fbc8 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c36:	480a      	ldr	r0, [pc, #40]	; (8001c60 <FND_A+0x4c>)
 8001c38:	f7ff fbd1 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <FND_A+0x48>)
 8001c40:	f7ff fbbf 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001c44:	2101      	movs	r1, #1
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <FND_A+0x48>)
 8001c48:	f7ff fbbb 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <FND_A+0x4c>)
 8001c52:	f7ff fbb6 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40020400 	.word	0x40020400

08001c64 <FND_S>:

void FND_S(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <FND_S+0x48>)
 8001c6e:	f7ff fba8 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <FND_S+0x4c>)
 8001c76:	f7ff fbb2 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c7a:	2140      	movs	r1, #64	; 0x40
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <FND_S+0x4c>)
 8001c7e:	f7ff fba0 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c86:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <FND_S+0x4c>)
 8001c88:	f7ff fb9b 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <FND_S+0x48>)
 8001c90:	f7ff fba5 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001c94:	2101      	movs	r1, #1
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <FND_S+0x48>)
 8001c98:	f7ff fb93 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca0:	4803      	ldr	r0, [pc, #12]	; (8001cb0 <FND_S+0x4c>)
 8001ca2:	f7ff fb8e 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020800 	.word	0x40020800
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <FND_E>:

void FND_E(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <FND_E+0x48>)
 8001cbe:	f7ff fb80 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <FND_E+0x4c>)
 8001cc6:	f7ff fb8a 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <FND_E+0x4c>)
 8001cce:	f7ff fb86 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd6:	480a      	ldr	r0, [pc, #40]	; (8001d00 <FND_E+0x4c>)
 8001cd8:	f7ff fb73 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <FND_E+0x48>)
 8001ce0:	f7ff fb6f 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <FND_E+0x48>)
 8001ce8:	f7ff fb6b 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <FND_E+0x4c>)
 8001cf2:	f7ff fb66 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020400 	.word	0x40020400

08001d04 <FND_r>:

void FND_r(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0c:	480f      	ldr	r0, [pc, #60]	; (8001d4c <FND_r+0x48>)
 8001d0e:	f7ff fb66 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	480e      	ldr	r0, [pc, #56]	; (8001d50 <FND_r+0x4c>)
 8001d16:	f7ff fb62 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d1a:	2140      	movs	r1, #64	; 0x40
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <FND_r+0x4c>)
 8001d1e:	f7ff fb5e 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d26:	480a      	ldr	r0, [pc, #40]	; (8001d50 <FND_r+0x4c>)
 8001d28:	f7ff fb59 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <FND_r+0x48>)
 8001d30:	f7ff fb47 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d34:	2101      	movs	r1, #1
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <FND_r+0x48>)
 8001d38:	f7ff fb51 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <FND_r+0x4c>)
 8001d42:	f7ff fb3e 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020400 	.word	0x40020400

08001d54 <FND_zero>:

void FND_zero(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5c:	480f      	ldr	r0, [pc, #60]	; (8001d9c <FND_zero+0x48>)
 8001d5e:	f7ff fb30 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	480e      	ldr	r0, [pc, #56]	; (8001da0 <FND_zero+0x4c>)
 8001d66:	f7ff fb2c 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <FND_zero+0x4c>)
 8001d6e:	f7ff fb28 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d76:	480a      	ldr	r0, [pc, #40]	; (8001da0 <FND_zero+0x4c>)
 8001d78:	f7ff fb23 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <FND_zero+0x48>)
 8001d80:	f7ff fb1f 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d84:	2101      	movs	r1, #1
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <FND_zero+0x48>)
 8001d88:	f7ff fb1b 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <FND_zero+0x4c>)
 8001d92:	f7ff fb24 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020400 	.word	0x40020400

08001da4 <FND_one>:

void FND_one(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dac:	480f      	ldr	r0, [pc, #60]	; (8001dec <FND_one+0x48>)
 8001dae:	f7ff fb16 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <FND_one+0x4c>)
 8001db6:	f7ff fb04 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <FND_one+0x4c>)
 8001dbe:	f7ff fb00 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001dc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <FND_one+0x4c>)
 8001dc8:	f7ff fb09 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <FND_one+0x48>)
 8001dd0:	f7ff fb05 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <FND_one+0x48>)
 8001dd8:	f7ff fb01 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <FND_one+0x4c>)
 8001de2:	f7ff fafc 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020400 	.word	0x40020400

08001df4 <FND_two>:

void FND_two(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfc:	480f      	ldr	r0, [pc, #60]	; (8001e3c <FND_two+0x48>)
 8001dfe:	f7ff fae0 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	480e      	ldr	r0, [pc, #56]	; (8001e40 <FND_two+0x4c>)
 8001e06:	f7ff fadc 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e0a:	2140      	movs	r1, #64	; 0x40
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <FND_two+0x4c>)
 8001e0e:	f7ff fae6 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e16:	480a      	ldr	r0, [pc, #40]	; (8001e40 <FND_two+0x4c>)
 8001e18:	f7ff fad3 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <FND_two+0x48>)
 8001e20:	f7ff facf 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e24:	2101      	movs	r1, #1
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <FND_two+0x48>)
 8001e28:	f7ff fad9 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <FND_two+0x4c>)
 8001e32:	f7ff fac6 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020400 	.word	0x40020400

08001e44 <FND_three>:
void FND_three(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <FND_three+0x48>)
 8001e4e:	f7ff fab8 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	480e      	ldr	r0, [pc, #56]	; (8001e90 <FND_three+0x4c>)
 8001e56:	f7ff fab4 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e5a:	2140      	movs	r1, #64	; 0x40
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <FND_three+0x4c>)
 8001e5e:	f7ff fab0 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <FND_three+0x4c>)
 8001e68:	f7ff faab 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <FND_three+0x48>)
 8001e70:	f7ff fab5 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e74:	2101      	movs	r1, #1
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <FND_three+0x48>)
 8001e78:	f7ff fab1 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <FND_three+0x4c>)
 8001e82:	f7ff fa9e 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020400 	.word	0x40020400

08001e94 <FND_four>:

void FND_four(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9c:	480f      	ldr	r0, [pc, #60]	; (8001edc <FND_four+0x48>)
 8001e9e:	f7ff fa9e 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	480e      	ldr	r0, [pc, #56]	; (8001ee0 <FND_four+0x4c>)
 8001ea6:	f7ff fa8c 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001eaa:	2140      	movs	r1, #64	; 0x40
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <FND_four+0x4c>)
 8001eae:	f7ff fa88 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb6:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <FND_four+0x4c>)
 8001eb8:	f7ff fa91 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	4807      	ldr	r0, [pc, #28]	; (8001edc <FND_four+0x48>)
 8001ec0:	f7ff fa8d 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <FND_four+0x48>)
 8001ec8:	f7ff fa7b 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed0:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <FND_four+0x4c>)
 8001ed2:	f7ff fa76 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <FND_five>:

void FND_five(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eec:	480f      	ldr	r0, [pc, #60]	; (8001f2c <FND_five+0x48>)
 8001eee:	f7ff fa68 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	480e      	ldr	r0, [pc, #56]	; (8001f30 <FND_five+0x4c>)
 8001ef6:	f7ff fa72 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001efa:	2140      	movs	r1, #64	; 0x40
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <FND_five+0x4c>)
 8001efe:	f7ff fa60 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f06:	480a      	ldr	r0, [pc, #40]	; (8001f30 <FND_five+0x4c>)
 8001f08:	f7ff fa5b 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <FND_five+0x48>)
 8001f10:	f7ff fa65 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f14:	2101      	movs	r1, #1
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <FND_five+0x48>)
 8001f18:	f7ff fa53 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <FND_five+0x4c>)
 8001f22:	f7ff fa4e 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020400 	.word	0x40020400

08001f34 <FND_six>:

void FND_six(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3c:	480f      	ldr	r0, [pc, #60]	; (8001f7c <FND_six+0x48>)
 8001f3e:	f7ff fa40 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	480e      	ldr	r0, [pc, #56]	; (8001f80 <FND_six+0x4c>)
 8001f46:	f7ff fa4a 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <FND_six+0x4c>)
 8001f4e:	f7ff fa38 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f56:	480a      	ldr	r0, [pc, #40]	; (8001f80 <FND_six+0x4c>)
 8001f58:	f7ff fa33 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <FND_six+0x48>)
 8001f60:	f7ff fa2f 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f64:	2101      	movs	r1, #1
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <FND_six+0x48>)
 8001f68:	f7ff fa2b 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <FND_six+0x4c>)
 8001f72:	f7ff fa26 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020400 	.word	0x40020400

08001f84 <FND_seven>:

void FND_seven(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8c:	480f      	ldr	r0, [pc, #60]	; (8001fcc <FND_seven+0x48>)
 8001f8e:	f7ff fa18 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <FND_seven+0x4c>)
 8001f96:	f7ff fa14 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <FND_seven+0x4c>)
 8001f9e:	f7ff fa10 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa6:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <FND_seven+0x4c>)
 8001fa8:	f7ff fa19 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001fac:	2102      	movs	r1, #2
 8001fae:	4807      	ldr	r0, [pc, #28]	; (8001fcc <FND_seven+0x48>)
 8001fb0:	f7ff fa15 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <FND_seven+0x48>)
 8001fb8:	f7ff fa11 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <FND_seven+0x4c>)
 8001fc2:	f7ff fa0c 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <FND_eight>:

void FND_eight(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	480f      	ldr	r0, [pc, #60]	; (800201c <FND_eight+0x48>)
 8001fde:	f7ff f9f0 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <FND_eight+0x4c>)
 8001fe6:	f7ff f9ec 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <FND_eight+0x4c>)
 8001fee:	f7ff f9e8 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff6:	480a      	ldr	r0, [pc, #40]	; (8002020 <FND_eight+0x4c>)
 8001ff8:	f7ff f9e3 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	4807      	ldr	r0, [pc, #28]	; (800201c <FND_eight+0x48>)
 8002000:	f7ff f9df 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002004:	2101      	movs	r1, #1
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <FND_eight+0x48>)
 8002008:	f7ff f9db 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800200c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <FND_eight+0x4c>)
 8002012:	f7ff f9d6 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40020800 	.word	0x40020800
 8002020:	40020400 	.word	0x40020400

08002024 <FND_nine>:
void FND_nine(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8002028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800202c:	480f      	ldr	r0, [pc, #60]	; (800206c <FND_nine+0x48>)
 800202e:	f7ff f9c8 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <FND_nine+0x4c>)
 8002036:	f7ff f9c4 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800203a:	2140      	movs	r1, #64	; 0x40
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <FND_nine+0x4c>)
 800203e:	f7ff f9c0 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8002042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002046:	480a      	ldr	r0, [pc, #40]	; (8002070 <FND_nine+0x4c>)
 8002048:	f7ff f9bb 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 800204c:	2102      	movs	r1, #2
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <FND_nine+0x48>)
 8002050:	f7ff f9c5 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002054:	2101      	movs	r1, #1
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <FND_nine+0x48>)
 8002058:	f7ff f9b3 	bl	80013c2 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 800205c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <FND_nine+0x4c>)
 8002062:	f7ff f9ae 	bl	80013c2 <LL_GPIO_SetOutputPin>
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020800 	.word	0x40020800
 8002070:	40020400 	.word	0x40020400

08002074 <turn_off>:

void turn_off(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8002078:	2104      	movs	r1, #4
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <turn_off+0x2c>)
 800207c:	f7ff f9af 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8002080:	2120      	movs	r1, #32
 8002082:	4808      	ldr	r0, [pc, #32]	; (80020a4 <turn_off+0x30>)
 8002084:	f7ff f9ab 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4804      	ldr	r0, [pc, #16]	; (80020a0 <turn_off+0x2c>)
 800208e:	f7ff f9a6 	bl	80013de <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8002092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002096:	4802      	ldr	r0, [pc, #8]	; (80020a0 <turn_off+0x2c>)
 8002098:	f7ff f9a1 	bl	80013de <LL_GPIO_ResetOutputPin>
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020400 	.word	0x40020400

080020a8 <LL_USART_ReceiveData8>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	b2db      	uxtb	r3, r3
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <Idle_status>:
uint8_t INFO_RX_BUFF[13] = {
    0x00,
};

void Idle_status(void)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b093      	sub	sp, #76	; 0x4c
 80020c8:	af00      	add	r7, sp, #0

    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 80020ca:	4a6f      	ldr	r2, [pc, #444]	; (8002288 <Idle_status+0x1c4>)
 80020cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d2:	c303      	stmia	r3!, {r0, r1}
 80020d4:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 80020d6:	4a6d      	ldr	r2, [pc, #436]	; (800228c <Idle_status+0x1c8>)
 80020d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020de:	c303      	stmia	r3!, {r0, r1}
 80020e0:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 80020e2:	4a6b      	ldr	r2, [pc, #428]	; (8002290 <Idle_status+0x1cc>)
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ea:	c303      	stmia	r3!, {r0, r1}
 80020ec:	701a      	strb	r2, [r3, #0]
    uint8_t START_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x24};
 80020ee:	4a69      	ldr	r2, [pc, #420]	; (8002294 <Idle_status+0x1d0>)
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f6:	c303      	stmia	r3!, {r0, r1}
 80020f8:	701a      	strb	r2, [r3, #0]

    uint8_t checksum = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};
 8002100:	4b65      	ldr	r3, [pc, #404]	; (8002298 <Idle_status+0x1d4>)
 8002102:	1d3c      	adds	r4, r7, #4
 8002104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002106:	c407      	stmia	r4!, {r0, r1, r2}
 8002108:	7023      	strb	r3, [r4, #0]

    LiDAR_Cur_Check();
 800210a:	f7fe fa93 	bl	8000634 <LiDAR_Cur_Check>

    if (rx_flag)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <Idle_status+0x1d8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 808c 	beq.w	8002230 <Idle_status+0x16c>
    {
        if (memcmp(&CONNECT_BUFF, &rx_data, RX_BUFFER_SIZE) == 0) // PC Connect
 8002118:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800211c:	2209      	movs	r2, #9
 800211e:	4960      	ldr	r1, [pc, #384]	; (80022a0 <Idle_status+0x1dc>)
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fb0b 	bl	800673c <memcmp>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <Idle_status+0x7e>
        {
            GUI_Protocol_Tx(GUI_COMMAND_CONNECT, 0);
 800212c:	2100      	movs	r1, #0
 800212e:	2000      	movs	r0, #0
 8002130:	f7fe ffb2 	bl	8001098 <GUI_Protocol_Tx>
            connect = 1;
 8002134:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <Idle_status+0x1e0>)
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
            HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // Viewer start button enable only
 800213a:	2028      	movs	r0, #40	; 0x28
 800213c:	f001 fa9f 	bl	800367e <HAL_NVIC_DisableIRQ>
 8002140:	e072      	b.n	8002228 <Idle_status+0x164>
        }
        else if (memcmp(&INFO_BUFF, &rx_data, RX_BUFFER_SIZE) == 0) // PC -> JIG Info request
 8002142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002146:	2209      	movs	r2, #9
 8002148:	4955      	ldr	r1, [pc, #340]	; (80022a0 <Idle_status+0x1dc>)
 800214a:	4618      	mov	r0, r3
 800214c:	f004 faf6 	bl	800673c <memcmp>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d14b      	bne.n	80021ee <Idle_status+0x12a>
        {
            // UART_Transmit(UART5, temp_INFO_DATA, 13);

            if (INFO_RX_Flag == 0)
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <Idle_status+0x1e4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d141      	bne.n	80021e2 <Idle_status+0x11e>
            {
                LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe ff1a 	bl	8000f98 <LiDAR_Protocol_Tx>
                for (uint8_t i = 0; i <= 12; i++)
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800216a:	e00d      	b.n	8002188 <Idle_status+0xc4>
                {
                    INFO_RX_BUFF[i] = LL_USART_ReceiveData8(USART6);
 800216c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002170:	484e      	ldr	r0, [pc, #312]	; (80022ac <Idle_status+0x1e8>)
 8002172:	f7ff ff99 	bl	80020a8 <LL_USART_ReceiveData8>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <Idle_status+0x1ec>)
 800217c:	551a      	strb	r2, [r3, r4]
                for (uint8_t i = 0; i <= 12; i++)
 800217e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002182:	3301      	adds	r3, #1
 8002184:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002188:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d9ed      	bls.n	800216c <Idle_status+0xa8>
                }

                checksum = INFO_RX_BUFF[0];
 8002190:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <Idle_status+0x1ec>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                for (uint16_t i = 1U; i < 12; i++)
 8002198:	2301      	movs	r3, #1
 800219a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800219e:	e00d      	b.n	80021bc <Idle_status+0xf8>
                {
                    checksum ^= INFO_RX_BUFF[i];
 80021a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021a4:	4a42      	ldr	r2, [pc, #264]	; (80022b0 <Idle_status+0x1ec>)
 80021a6:	5cd2      	ldrb	r2, [r2, r3]
 80021a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021ac:	4053      	eors	r3, r2
 80021ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                for (uint16_t i = 1U; i < 12; i++)
 80021b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021b6:	3301      	adds	r3, #1
 80021b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80021bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021c0:	2b0b      	cmp	r3, #11
 80021c2:	d9ed      	bls.n	80021a0 <Idle_status+0xdc>
                }

                if (checksum == INFO_RX_BUFF[12])
 80021c4:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <Idle_status+0x1ec>)
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d12b      	bne.n	8002228 <Idle_status+0x164>
                {
                    INFO_RX_Flag = 1;
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <Idle_status+0x1e4>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
                    UART_Transmit(UART5, INFO_RX_BUFF, 13);
 80021d6:	220d      	movs	r2, #13
 80021d8:	4935      	ldr	r1, [pc, #212]	; (80022b0 <Idle_status+0x1ec>)
 80021da:	4836      	ldr	r0, [pc, #216]	; (80022b4 <Idle_status+0x1f0>)
 80021dc:	f7ff f8cc 	bl	8001378 <UART_Transmit>
 80021e0:	e022      	b.n	8002228 <Idle_status+0x164>
                }
            }
            else
            {
                UART_Transmit(UART5, INFO_RX_BUFF, 13);
 80021e2:	220d      	movs	r2, #13
 80021e4:	4932      	ldr	r1, [pc, #200]	; (80022b0 <Idle_status+0x1ec>)
 80021e6:	4833      	ldr	r0, [pc, #204]	; (80022b4 <Idle_status+0x1f0>)
 80021e8:	f7ff f8c6 	bl	8001378 <UART_Transmit>
 80021ec:	e01c      	b.n	8002228 <Idle_status+0x164>
            }
        }
        else if (memcmp(&MODE_BUFF, &rx_data, RX_BUFFER_SIZE) == 0)
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	2209      	movs	r2, #9
 80021f4:	492a      	ldr	r1, [pc, #168]	; (80022a0 <Idle_status+0x1dc>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 faa0 	bl	800673c <memcmp>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <Idle_status+0x14a>
        {
            GUI_Protocol_Mode_Tx(Mode_data);
 8002202:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <Idle_status+0x1f4>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f82e 	bl	8001268 <GUI_Protocol_Mode_Tx>
 800220c:	e00c      	b.n	8002228 <Idle_status+0x164>
        }
        else if (memcmp(&START_BUFF, &rx_data, RX_BUFFER_SIZE) == 0)
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	2209      	movs	r2, #9
 8002214:	4922      	ldr	r1, [pc, #136]	; (80022a0 <Idle_status+0x1dc>)
 8002216:	4618      	mov	r0, r3
 8002218:	f004 fa90 	bl	800673c <memcmp>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <Idle_status+0x164>
        {
            g_Status = kStatus_Test;
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <Idle_status+0x1f8>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
        }
        else
        {
        }
        rx_flag = 0;
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <Idle_status+0x1d8>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
        else
        {
        }
        Delay_ms(500);
    }
}
 800222e:	e027      	b.n	8002280 <Idle_status+0x1bc>
        if (INFO_RX_Flag == 0)
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <Idle_status+0x1e4>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11f      	bne.n	8002278 <Idle_status+0x1b4>
            LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 8002238:	2000      	movs	r0, #0
 800223a:	f7fe fead 	bl	8000f98 <LiDAR_Protocol_Tx>
            for (uint8_t i = 0; i <= 12; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002244:	e00d      	b.n	8002262 <Idle_status+0x19e>
                INFO_RX_BUFF[i] = LL_USART_ReceiveData8(USART6);
 8002246:	f897 4043 	ldrb.w	r4, [r7, #67]	; 0x43
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <Idle_status+0x1e8>)
 800224c:	f7ff ff2c 	bl	80020a8 <LL_USART_ReceiveData8>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <Idle_status+0x1ec>)
 8002256:	551a      	strb	r2, [r3, r4]
            for (uint8_t i = 0; i <= 12; i++)
 8002258:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800225c:	3301      	adds	r3, #1
 800225e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002262:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d9ed      	bls.n	8002246 <Idle_status+0x182>
            if (INFO_RX_BUFF[0] != 0x00)
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <Idle_status+0x1ec>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <Idle_status+0x1b4>
                INFO_RX_Flag = 1;
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <Idle_status+0x1e4>)
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
        Delay_ms(500);
 8002278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800227c:	f7fe fa8c 	bl	8000798 <Delay_ms>
}
 8002280:	bf00      	nop
 8002282:	374c      	adds	r7, #76	; 0x4c
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	080067a4 	.word	0x080067a4
 800228c:	080067b0 	.word	0x080067b0
 8002290:	080067bc 	.word	0x080067bc
 8002294:	080067c8 	.word	0x080067c8
 8002298:	080067d4 	.word	0x080067d4
 800229c:	200000e9 	.word	0x200000e9
 80022a0:	200000e0 	.word	0x200000e0
 80022a4:	20000084 	.word	0x20000084
 80022a8:	20000085 	.word	0x20000085
 80022ac:	40011400 	.word	0x40011400
 80022b0:	20000088 	.word	0x20000088
 80022b4:	40005000 	.word	0x40005000
 80022b8:	20000096 	.word	0x20000096
 80022bc:	20000080 	.word	0x20000080

080022c0 <Test_status>:

void Test_status(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	; 0x30
 80022c4:	af00      	add	r7, sp, #0
    uint8_t ETH_BUFF[6] = {' ', 'E', 't', 'h', 'e', 'r'};
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <Test_status+0x7c>)
 80022c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d0:	6018      	str	r0, [r3, #0]
 80022d2:	3304      	adds	r3, #4
 80022d4:	8019      	strh	r1, [r3, #0]
    uint8_t APD_BUFF[6] = {' ', 'A', 'P', 'D', ' ', 'B'};
 80022d6:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <Test_status+0x80>)
 80022d8:	f107 0320 	add.w	r3, r7, #32
 80022dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e0:	6018      	str	r0, [r3, #0]
 80022e2:	3304      	adds	r3, #4
 80022e4:	8019      	strh	r1, [r3, #0]
    uint8_t MOT_BUFF[6] = {' ', 'M', 'o', 't', 'o', 'r'};
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <Test_status+0x84>)
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f0:	6018      	str	r0, [r3, #0]
 80022f2:	3304      	adds	r3, #4
 80022f4:	8019      	strh	r1, [r3, #0]
    uint8_t ENC_BUFF[6] = {' ', 'E', 'n', 'c', 'o', 'd'};
 80022f6:	4a14      	ldr	r2, [pc, #80]	; (8002348 <Test_status+0x88>)
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002300:	6018      	str	r0, [r3, #0]
 8002302:	3304      	adds	r3, #4
 8002304:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_INIT_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'I'};
 8002306:	4a11      	ldr	r2, [pc, #68]	; (800234c <Test_status+0x8c>)
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002310:	6018      	str	r0, [r3, #0]
 8002312:	3304      	adds	r3, #4
 8002314:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_CAL_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'C'};
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <Test_status+0x90>)
 8002318:	463b      	mov	r3, r7
 800231a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800231e:	6018      	str	r0, [r3, #0]
 8002320:	3304      	adds	r3, #4
 8002322:	8019      	strh	r1, [r3, #0]

    LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 8002324:	2001      	movs	r0, #1
 8002326:	f7fe fe37 	bl	8000f98 <LiDAR_Protocol_Tx>
    Delay_ms(500);
 800232a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800232e:	f7fe fa33 	bl	8000798 <Delay_ms>
}
 8002332:	bf00      	nop
 8002334:	3730      	adds	r7, #48	; 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	080067e4 	.word	0x080067e4
 8002340:	080067ec 	.word	0x080067ec
 8002344:	080067f4 	.word	0x080067f4
 8002348:	080067fc 	.word	0x080067fc
 800234c:	08006804 	.word	0x08006804
 8002350:	0800680c 	.word	0x0800680c

08002354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_MspInit+0x4c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_MspInit+0x4c>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_MspInit+0x4c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_MspInit+0x4c>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <HAL_MspInit+0x4c>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_MspInit+0x4c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800

080023a4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4013      	ands	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	bf0c      	ite	eq
 80023ba:	2301      	moveq	r3, #1
 80023bc:	2300      	movne	r3, #0
 80023be:	b2db      	uxtb	r3, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <LL_EXTI_ClearFlag_0_31+0x1c>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6153      	str	r3, [r2, #20]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40013c00 	.word	0x40013c00

080023f0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <NMI_Handler+0x4>

080023f6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <MemManage_Handler+0x4>

08002402 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <BusFault_Handler+0x4>

08002408 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <UsageFault_Handler+0x4>

0800240e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243c:	f000 fbf2 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 8002448:	f000 f85e 	bl	8002508 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800244c:	2001      	movs	r0, #1
 800244e:	f7ff ffa9 	bl	80023a4 <LL_EXTI_IsActiveFlag_0_31>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff ffb9 	bl	80023d0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (Mode_data == 0) // jig mode
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <EXTI15_10_IRQHandler+0x4c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <EXTI15_10_IRQHandler+0x1a>
  {
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8002470:	2035      	movs	r0, #53	; 0x35
 8002472:	f001 f904 	bl	800367e <HAL_NVIC_DisableIRQ>
    // g_Status = kStatus_Test;
    LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 8002476:	2001      	movs	r0, #1
 8002478:	f7fe fd8e 	bl	8000f98 <LiDAR_Protocol_Tx>
 800247c:	e00a      	b.n	8002494 <EXTI15_10_IRQHandler+0x30>
  }
  else // tx mode
  {
    if (tx_start_flag == 0)
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <EXTI15_10_IRQHandler+0x50>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <EXTI15_10_IRQHandler+0x2a>
    {
      tx_start_flag = 1;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <EXTI15_10_IRQHandler+0x50>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e002      	b.n	8002494 <EXTI15_10_IRQHandler+0x30>
    }
    else
    {
      tx_start_flag = 0;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <EXTI15_10_IRQHandler+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002494:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002498:	f7ff ff84 	bl	80023a4 <LL_EXTI_IsActiveFlag_0_31>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80024a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024a6:	f7ff ff93 	bl	80023d0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000096 	.word	0x20000096
 80024b4:	20000095 	.word	0x20000095

080024b8 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  UART5_Rx_Callback(UART5); // PC <-> JIG
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <UART5_IRQHandler+0x10>)
 80024be:	f000 fb07 	bl	8002ad0 <UART5_Rx_Callback>
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40005000 	.word	0x40005000

080024cc <LL_GPIO_SetOutputPin>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	619a      	str	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_GPIO_ResetOutputPin>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 800250c:	2101      	movs	r1, #1
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <switch_check+0x48>)
 8002510:	f001 fa64 	bl	80039dc <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <switch_check+0x2c>
    {
        Mode_data = 0x00U;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <switch_check+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002524:	480a      	ldr	r0, [pc, #40]	; (8002550 <switch_check+0x48>)
 8002526:	f7ff ffd1 	bl	80024cc <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	480a      	ldr	r0, [pc, #40]	; (8002558 <switch_check+0x50>)
 800252e:	f7ff ffdb 	bl	80024e8 <LL_GPIO_ResetOutputPin>
    {
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
    }
 8002532:	e00b      	b.n	800254c <switch_check+0x44>
        Mode_data = 0x01U;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <switch_check+0x4c>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800253a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800253e:	4804      	ldr	r0, [pc, #16]	; (8002550 <switch_check+0x48>)
 8002540:	f7ff ffd2 	bl	80024e8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	4804      	ldr	r0, [pc, #16]	; (8002558 <switch_check+0x50>)
 8002548:	f7ff ffc0 	bl	80024cc <LL_GPIO_SetOutputPin>
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40020400 	.word	0x40020400
 8002554:	20000096 	.word	0x20000096
 8002558:	40020000 	.word	0x40020000

0800255c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <SystemInit+0x20>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <SystemInit+0x20>)
 8002568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800256c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	f107 0320 	add.w	r3, r7, #32
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	615a      	str	r2, [r3, #20]
 80025ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025b2:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <MX_TIM3_Init+0xe8>)
 80025b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025b8:	222c      	movs	r2, #44	; 0x2c
 80025ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025d6:	4823      	ldr	r0, [pc, #140]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025d8:	f001 ffe4 	bl	80045a4 <HAL_TIM_Base_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025e2:	f7fe fcb1 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f0:	4619      	mov	r1, r3
 80025f2:	481c      	ldr	r0, [pc, #112]	; (8002664 <MX_TIM3_Init+0xe4>)
 80025f4:	f002 fa78 	bl	8004ae8 <HAL_TIM_ConfigClockSource>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80025fe:	f7fe fca3 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002602:	4818      	ldr	r0, [pc, #96]	; (8002664 <MX_TIM3_Init+0xe4>)
 8002604:	f002 f81d 	bl	8004642 <HAL_TIM_PWM_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800260e:	f7fe fc9b 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261a:	f107 0320 	add.w	r3, r7, #32
 800261e:	4619      	mov	r1, r3
 8002620:	4810      	ldr	r0, [pc, #64]	; (8002664 <MX_TIM3_Init+0xe4>)
 8002622:	f002 fe39 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800262c:	f7fe fc8c 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002630:	2360      	movs	r3, #96	; 0x60
 8002632:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 8002634:	23f9      	movs	r3, #249	; 0xf9
 8002636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2208      	movs	r2, #8
 8002644:	4619      	mov	r1, r3
 8002646:	4807      	ldr	r0, [pc, #28]	; (8002664 <MX_TIM3_Init+0xe4>)
 8002648:	f002 f98c 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002652:	f7fe fc79 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002656:	4803      	ldr	r0, [pc, #12]	; (8002664 <MX_TIM3_Init+0xe4>)
 8002658:	f000 f82a 	bl	80026b0 <HAL_TIM_MspPostInit>

}
 800265c:	bf00      	nop
 800265e:	3738      	adds	r7, #56	; 0x38
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000098 	.word	0x20000098
 8002668:	40000400 	.word	0x40000400

0800266c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_TIM_Base_MspInit+0x3c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10d      	bne.n	800269a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_TIM_Base_MspInit+0x40>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <HAL_TIM_Base_MspInit+0x40>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_TIM_Base_MspInit+0x40>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIM_MspPostInit+0x68>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d11e      	bne.n	8002710 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_MspPostInit+0x6c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002700:	2302      	movs	r3, #2
 8002702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4619      	mov	r1, r3
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_TIM_MspPostInit+0x70>)
 800270c:	f000 ffd2 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40000400 	.word	0x40000400
 800271c:	40023800 	.word	0x40023800
 8002720:	40020800 	.word	0x40020800

08002724 <__NVIC_GetPriorityGrouping>:
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_USART_Enable>:
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60da      	str	r2, [r3, #12]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_USART_ConfigAsyncMode>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	615a      	str	r2, [r3, #20]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_USART_ReceiveData8>:
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	b2db      	uxtb	r3, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_AHB1_GRP1_EnableClock>:
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40023800 	.word	0x40023800

080028cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d8:	4907      	ldr	r1, [pc, #28]	; (80028f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4013      	ands	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40023800 	.word	0x40023800

080028fc <MX_UART5_Init>:

UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002902:	f107 031c 	add.w	r3, r7, #28
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8002926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800292a:	f7ff ffcf 	bl	80028cc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800292e:	2004      	movs	r0, #4
 8002930:	f7ff ffb4 	bl	800289c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002934:	2008      	movs	r0, #8
 8002936:	f7ff ffb1 	bl	800289c <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800293a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002940:	2302      	movs	r3, #2
 8002942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002950:	2308      	movs	r3, #8
 8002952:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4619      	mov	r1, r3
 8002958:	4821      	ldr	r0, [pc, #132]	; (80029e0 <MX_UART5_Init+0xe4>)
 800295a:	f003 f9f9 	bl	8005d50 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800295e:	2304      	movs	r3, #4
 8002960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002962:	2302      	movs	r3, #2
 8002964:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002972:	2308      	movs	r3, #8
 8002974:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	4619      	mov	r1, r3
 800297a:	481a      	ldr	r0, [pc, #104]	; (80029e4 <MX_UART5_Init+0xe8>)
 800297c:	f003 f9e8 	bl	8005d50 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002980:	f7ff fed0 	bl	8002724 <__NVIC_GetPriorityGrouping>
 8002984:	4603      	mov	r3, r0
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff20 	bl	80027d0 <NVIC_EncodePriority>
 8002990:	4603      	mov	r3, r0
 8002992:	4619      	mov	r1, r3
 8002994:	2035      	movs	r0, #53	; 0x35
 8002996:	f7ff fef1 	bl	800277c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800299a:	2035      	movs	r0, #53	; 0x35
 800299c:	f7ff fed0 	bl	8002740 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 921600;
 80029a0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80029a4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80029b2:	230c      	movs	r3, #12
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	4808      	ldr	r0, [pc, #32]	; (80029e8 <MX_UART5_Init+0xec>)
 80029c6:	f003 fe15 	bl	80065f4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <MX_UART5_Init+0xec>)
 80029cc:	f7ff ff43 	bl	8002856 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_UART5_Init+0xec>)
 80029d2:	f7ff ff30 	bl	8002836 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	3738      	adds	r7, #56	; 0x38
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40005000 	.word	0x40005000

080029ec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <MX_USART6_UART_Init+0x50>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 80029f8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80029fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_USART6_UART_Init+0x4c>)
 8002a24:	f002 fcb4 	bl	8005390 <HAL_UART_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a2e:	f7fe fa8b 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200000ec 	.word	0x200000ec
 8002a3c:	40011400 	.word	0x40011400

08002a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_UART_MspInit+0x84>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12b      	bne.n	8002aba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a6c:	f043 0320 	orr.w	r3, r3, #32
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_UART_MspInit+0x88>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a9a:	23c0      	movs	r3, #192	; 0xc0
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002aaa:	2308      	movs	r3, #8
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <HAL_UART_MspInit+0x8c>)
 8002ab6:	f000 fdfd 	bl	80036b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40011400 	.word	0x40011400
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020800 	.word	0x40020800

08002ad0 <UART5_Rx_Callback>:
  }
}

/* USER CODE BEGIN 1 */
void UART5_Rx_Callback(USART_TypeDef *USARTx) // PC Interrupt
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if (rx_flag == 0)
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <UART5_Rx_Callback+0x4c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d119      	bne.n	8002b14 <UART5_Rx_Callback+0x44>
  {
    rx_data[i] = LL_USART_ReceiveData8(UART5);
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <UART5_Rx_Callback+0x50>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	480f      	ldr	r0, [pc, #60]	; (8002b24 <UART5_Rx_Callback+0x54>)
 8002ae8:	f7ff fecb 	bl	8002882 <LL_USART_ReceiveData8>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <UART5_Rx_Callback+0x58>)
 8002af2:	551a      	strb	r2, [r3, r4]
    i++;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <UART5_Rx_Callback+0x50>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <UART5_Rx_Callback+0x50>)
 8002afe:	701a      	strb	r2, [r3, #0]
    if (i >= RX_BUFFER_SIZE)
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <UART5_Rx_Callback+0x50>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d905      	bls.n	8002b14 <UART5_Rx_Callback+0x44>
    {
      i = 0;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <UART5_Rx_Callback+0x50>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
      rx_flag = 1;
 8002b0e:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <UART5_Rx_Callback+0x4c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}
 8002b1c:	200000e9 	.word	0x200000e9
 8002b20:	200000ea 	.word	0x200000ea
 8002b24:	40005000 	.word	0x40005000
 8002b28:	200000e0 	.word	0x200000e0

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b56:	f7ff fd01 	bl	800255c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f003 fdcb 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe f8f9 	bl	8000d54 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002b70:	0800683c 	.word	0x0800683c
  ldr r2, =_sbss
 8002b74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002b78:	20000134 	.word	0x20000134

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 fd41 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	200f      	movs	r0, #15
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fbce 	bl	8002354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fd59 	bl	800369a <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 fd21 	bl	8003646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	2000000c 	.word	0x2000000c
 8002c20:	20000008 	.word	0x20000008

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	20000130 	.word	0x20000130

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000130 	.word	0x20000130

08002c64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e033      	b.n	8002ce2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd fc92 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002caa:	f023 0302 	bic.w	r3, r3, #2
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fae8 	bl	800328c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cd2:	e001      	b.n	8002cd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Start+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0b2      	b.n	8002e6c <HAL_ADC_Start+0x180>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d018      	beq.n	8002d4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d2c:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <HAL_ADC_Start+0x18c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_ADC_Start+0x190>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	0c9a      	lsrs	r2, r3, #18
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d40:	e002      	b.n	8002d48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f9      	bne.n	8002d42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d17a      	bne.n	8002e52 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	d106      	bne.n	8002daa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	f023 0206 	bic.w	r2, r3, #6
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	645a      	str	r2, [r3, #68]	; 0x44
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_ADC_Start+0x194>)
 8002dba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002dc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d12a      	bne.n	8002e28 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <HAL_ADC_Start+0x198>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d015      	beq.n	8002e08 <HAL_ADC_Start+0x11c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_ADC_Start+0x19c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_Start+0x106>
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_ADC_Start+0x194>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <HAL_ADC_Start+0x1a0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d136      	bne.n	8002e6a <HAL_ADC_Start+0x17e>
 8002dfc:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_ADC_Start+0x194>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d130      	bne.n	8002e6a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d129      	bne.n	8002e6a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	e020      	b.n	8002e6a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <HAL_ADC_Start+0x198>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d11b      	bne.n	8002e6a <HAL_ADC_Start+0x17e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d114      	bne.n	8002e6a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e00b      	b.n	8002e6a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f043 0210 	orr.w	r2, r3, #16
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	40012300 	.word	0x40012300
 8002e84:	40012000 	.word	0x40012000
 8002e88:	40012100 	.word	0x40012100
 8002e8c:	40012200 	.word	0x40012200

08002e90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Stop+0x16>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e021      	b.n	8002eea <HAL_ADC_Stop+0x5a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d113      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e063      	b.n	8003004 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002f3c:	f7ff fe86 	bl	8002c4c <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f42:	e021      	b.n	8002f88 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d01d      	beq.n	8002f88 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_ADC_PollForConversion+0x6c>
 8002f52:	f7ff fe7b 	bl	8002c4c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d212      	bcs.n	8002f88 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d00b      	beq.n	8002f88 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e03d      	b.n	8003004 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d1d6      	bne.n	8002f44 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f06f 0212 	mvn.w	r2, #18
 8002f9e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d123      	bne.n	8003002 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d11f      	bne.n	8003002 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d111      	bne.n	8003002 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x1c>
 8003040:	2302      	movs	r3, #2
 8003042:	e113      	b.n	800326c <HAL_ADC_ConfigChannel+0x244>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b09      	cmp	r3, #9
 8003052:	d925      	bls.n	80030a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	3b1e      	subs	r3, #30
 800306a:	2207      	movs	r2, #7
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43da      	mvns	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68d9      	ldr	r1, [r3, #12]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	4618      	mov	r0, r3
 800308c:	4603      	mov	r3, r0
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4403      	add	r3, r0
 8003092:	3b1e      	subs	r3, #30
 8003094:	409a      	lsls	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	e022      	b.n	80030e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6919      	ldr	r1, [r3, #16]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	2207      	movs	r2, #7
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	400a      	ands	r2, r1
 80030c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6919      	ldr	r1, [r3, #16]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4618      	mov	r0, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4403      	add	r3, r0
 80030dc:	409a      	lsls	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d824      	bhi.n	8003138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	3b05      	subs	r3, #5
 8003100:	221f      	movs	r2, #31
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	400a      	ands	r2, r1
 800310e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	3b05      	subs	r3, #5
 800312a:	fa00 f203 	lsl.w	r2, r0, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
 8003136:	e04c      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d824      	bhi.n	800318a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b23      	subs	r3, #35	; 0x23
 8003152:	221f      	movs	r2, #31
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43da      	mvns	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	400a      	ands	r2, r1
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	4618      	mov	r0, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	3b23      	subs	r3, #35	; 0x23
 800317c:	fa00 f203 	lsl.w	r2, r0, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
 8003188:	e023      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b41      	subs	r3, #65	; 0x41
 800319c:	221f      	movs	r2, #31
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	400a      	ands	r2, r1
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4618      	mov	r0, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	3b41      	subs	r3, #65	; 0x41
 80031c6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_ADC_ConfigChannel+0x250>)
 80031d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_ADC_ConfigChannel+0x254>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d10f      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x1d8>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b12      	cmp	r3, #18
 80031e6:	d10b      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1d      	ldr	r2, [pc, #116]	; (800327c <HAL_ADC_ConfigChannel+0x254>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d12b      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x23a>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_ADC_ConfigChannel+0x258>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <HAL_ADC_ConfigChannel+0x1f4>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b11      	cmp	r3, #17
 800321a:	d122      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_ADC_ConfigChannel+0x258>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d111      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_ADC_ConfigChannel+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a11      	ldr	r2, [pc, #68]	; (8003288 <HAL_ADC_ConfigChannel+0x260>)
 8003244:	fba2 2303 	umull	r2, r3, r2, r3
 8003248:	0c9a      	lsrs	r2, r3, #18
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003254:	e002      	b.n	800325c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3b01      	subs	r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f9      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012300 	.word	0x40012300
 800327c:	40012000 	.word	0x40012000
 8003280:	10000012 	.word	0x10000012
 8003284:	20000004 	.word	0x20000004
 8003288:	431bde83 	.word	0x431bde83

0800328c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003294:	4b79      	ldr	r3, [pc, #484]	; (800347c <ADC_Init+0x1f0>)
 8003296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	4a58      	ldr	r2, [pc, #352]	; (8003480 <ADC_Init+0x1f4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6899      	ldr	r1, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	e00f      	b.n	800338a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0202 	bic.w	r2, r2, #2
 8003398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7e1b      	ldrb	r3, [r3, #24]
 80033a4:	005a      	lsls	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	3b01      	subs	r3, #1
 80033e4:	035a      	lsls	r2, r3, #13
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	e007      	b.n	8003400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	3b01      	subs	r3, #1
 800341c:	051a      	lsls	r2, r3, #20
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003442:	025a      	lsls	r2, r3, #9
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	029a      	lsls	r2, r3, #10
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40012300 	.word	0x40012300
 8003480:	0f000001 	.word	0x0f000001

08003484 <__NVIC_SetPriorityGrouping>:
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_DisableIRQ>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db12      	blt.n	8003520 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	490a      	ldr	r1, [pc, #40]	; (800352c <__NVIC_DisableIRQ+0x44>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	3320      	adds	r3, #32
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003514:	f3bf 8f4f 	dsb	sy
}
 8003518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800351a:	f3bf 8f6f 	isb	sy
}
 800351e:	bf00      	nop
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff23 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff38 	bl	80034cc <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff8e 	bl	8003584 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5d 	bl	8003530 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff2b 	bl	80034e8 <__NVIC_DisableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e165      	b.n	800399c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	f040 8154 	bne.w	8003996 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d005      	beq.n	8003706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003702:	2b02      	cmp	r3, #2
 8003704:	d130      	bne.n	8003768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	2203      	movs	r2, #3
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800373c:	2201      	movs	r2, #1
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 0201 	and.w	r2, r3, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b03      	cmp	r3, #3
 8003772:	d017      	beq.n	80037a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d123      	bne.n	80037f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	08da      	lsrs	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3208      	adds	r2, #8
 80037b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	220f      	movs	r2, #15
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	08da      	lsrs	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3208      	adds	r2, #8
 80037f2:	69b9      	ldr	r1, [r7, #24]
 80037f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80ae 	beq.w	8003996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <HAL_GPIO_Init+0x300>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4a5c      	ldr	r2, [pc, #368]	; (80039b4 <HAL_GPIO_Init+0x300>)
 8003844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	4b5a      	ldr	r3, [pc, #360]	; (80039b4 <HAL_GPIO_Init+0x300>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003856:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_GPIO_Init+0x304>)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4f      	ldr	r2, [pc, #316]	; (80039bc <HAL_GPIO_Init+0x308>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d025      	beq.n	80038ce <HAL_GPIO_Init+0x21a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <HAL_GPIO_Init+0x30c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <HAL_GPIO_Init+0x216>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4d      	ldr	r2, [pc, #308]	; (80039c4 <HAL_GPIO_Init+0x310>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_Init+0x212>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4c      	ldr	r2, [pc, #304]	; (80039c8 <HAL_GPIO_Init+0x314>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x20e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4b      	ldr	r2, [pc, #300]	; (80039cc <HAL_GPIO_Init+0x318>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_Init+0x20a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <HAL_GPIO_Init+0x31c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_Init+0x206>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a49      	ldr	r2, [pc, #292]	; (80039d4 <HAL_GPIO_Init+0x320>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_Init+0x202>
 80038b2:	2306      	movs	r3, #6
 80038b4:	e00c      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e00a      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038ba:	2305      	movs	r3, #5
 80038bc:	e008      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038be:	2304      	movs	r3, #4
 80038c0:	e006      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e004      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e002      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038ce:	2300      	movs	r3, #0
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f002 0203 	and.w	r2, r2, #3
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	4093      	lsls	r3, r2
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e0:	4935      	ldr	r1, [pc, #212]	; (80039b8 <HAL_GPIO_Init+0x304>)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ee:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <HAL_GPIO_Init+0x324>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_GPIO_Init+0x324>)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003918:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x324>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_GPIO_Init+0x324>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003942:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <HAL_GPIO_Init+0x324>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003966:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_GPIO_Init+0x324>)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_GPIO_Init+0x324>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003990:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_GPIO_Init+0x324>)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3301      	adds	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	f67f ae96 	bls.w	80036d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40020000 	.word	0x40020000
 80039c0:	40020400 	.word	0x40020400
 80039c4:	40020800 	.word	0x40020800
 80039c8:	40020c00 	.word	0x40020c00
 80039cc:	40021000 	.word	0x40021000
 80039d0:	40021400 	.word	0x40021400
 80039d4:	40021800 	.word	0x40021800
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e001      	b.n	80039fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43d9      	mvns	r1, r3
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4b20      	ldr	r3, [pc, #128]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a1f      	ldr	r2, [pc, #124]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a6c:	f7ff f8ee 	bl	8002c4c <HAL_GetTick>
 8003a70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a72:	e009      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a74:	f7ff f8ea 	bl	8002c4c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a82:	d901      	bls.n	8003a88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e01f      	b.n	8003ac8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d1ee      	bne.n	8003a74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a9c:	f7ff f8d6 	bl	8002c4c <HAL_GetTick>
 8003aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aa2:	e009      	b.n	8003ab8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aa4:	f7ff f8d2 	bl	8002c4c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab2:	d901      	bls.n	8003ab8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e007      	b.n	8003ac8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ac4:	d1ee      	bne.n	8003aa4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	420e0040 	.word	0x420e0040
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	420e0044 	.word	0x420e0044

08003ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0cc      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af4:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d90c      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	494d      	ldr	r1, [pc, #308]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d044      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d119      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e06f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e067      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bbe:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4934      	ldr	r1, [pc, #208]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7ff f83c 	bl	8002c4c <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7ff f838 	bl	8002c4c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e04f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 020c 	and.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1eb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d20c      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e032      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4916      	ldr	r1, [pc, #88]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c66:	f000 f855 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	490a      	ldr	r1, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	5ccb      	ldrb	r3, [r1, r3]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe ff9c 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023c00 	.word	0x40023c00
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08006814 	.word	0x08006814
 8003ca4:	20000004 	.word	0x20000004
 8003ca8:	20000008 	.word	0x20000008

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000004 	.word	0x20000004

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08006824 	.word	0x08006824

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cf0:	f7ff ffdc 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0b5b      	lsrs	r3, r3, #13
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	08006824 	.word	0x08006824

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b0a6      	sub	sp, #152	; 0x98
 8003d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d3a:	4bc8      	ldr	r3, [pc, #800]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	f200 817e 	bhi.w	8004044 <HAL_RCC_GetSysClockFreq+0x330>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08004045 	.word	0x08004045
 8003d58:	08004045 	.word	0x08004045
 8003d5c:	08004045 	.word	0x08004045
 8003d60:	08003d8d 	.word	0x08003d8d
 8003d64:	08004045 	.word	0x08004045
 8003d68:	08004045 	.word	0x08004045
 8003d6c:	08004045 	.word	0x08004045
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08004045 	.word	0x08004045
 8003d78:	08004045 	.word	0x08004045
 8003d7c:	08004045 	.word	0x08004045
 8003d80:	08003eff 	.word	0x08003eff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4bb6      	ldr	r3, [pc, #728]	; (8004060 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003d8a:	e15f      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8c:	4bb5      	ldr	r3, [pc, #724]	; (8004064 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d92:	e15b      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4bb1      	ldr	r3, [pc, #708]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da0:	4bae      	ldr	r3, [pc, #696]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d031      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dac:	4bab      	ldr	r3, [pc, #684]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	2200      	movs	r2, #0
 8003db4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc4:	4ba7      	ldr	r3, [pc, #668]	; (8004064 <HAL_RCC_GetSysClockFreq+0x350>)
 8003dc6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003dca:	462a      	mov	r2, r5
 8003dcc:	fb03 f202 	mul.w	r2, r3, r2
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	4aa2      	ldr	r2, [pc, #648]	; (8004064 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ddc:	4621      	mov	r1, r4
 8003dde:	fba1 1202 	umull	r1, r2, r1, r2
 8003de2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003de4:	460a      	mov	r2, r1
 8003de6:	67ba      	str	r2, [r7, #120]	; 0x78
 8003de8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003dea:	4413      	add	r3, r2
 8003dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df2:	2200      	movs	r2, #0
 8003df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003df6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dfc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003e00:	f7fc fa00 	bl	8000204 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e0e:	e064      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e10:	4b92      	ldr	r3, [pc, #584]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	2200      	movs	r2, #0
 8003e18:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1a:	657a      	str	r2, [r7, #84]	; 0x54
 8003e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e24:	2300      	movs	r3, #0
 8003e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e28:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	462b      	mov	r3, r5
 8003e30:	f04f 0000 	mov.w	r0, #0
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	0159      	lsls	r1, r3, #5
 8003e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e3e:	0150      	lsls	r0, r2, #5
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4621      	mov	r1, r4
 8003e46:	1a51      	subs	r1, r2, r1
 8003e48:	6139      	str	r1, [r7, #16]
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e5e:	4659      	mov	r1, fp
 8003e60:	018b      	lsls	r3, r1, #6
 8003e62:	4651      	mov	r1, sl
 8003e64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e68:	4651      	mov	r1, sl
 8003e6a:	018a      	lsls	r2, r1, #6
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ebb2 0801 	subs.w	r8, r2, r1
 8003e72:	4659      	mov	r1, fp
 8003e74:	eb63 0901 	sbc.w	r9, r3, r1
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e8c:	4690      	mov	r8, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	4623      	mov	r3, r4
 8003e92:	eb18 0303 	adds.w	r3, r8, r3
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	462b      	mov	r3, r5
 8003e9a:	eb49 0303 	adc.w	r3, r9, r3
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eac:	4629      	mov	r1, r5
 8003eae:	028b      	lsls	r3, r1, #10
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	028a      	lsls	r2, r1, #10
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ecc:	f7fc f99a 	bl	8000204 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eda:	4b60      	ldr	r3, [pc, #384]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003eec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003efc:	e0a6      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efe:	4b57      	ldr	r3, [pc, #348]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f0a:	4b54      	ldr	r3, [pc, #336]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d02a      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4b4e      	ldr	r3, [pc, #312]	; (8004064 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f2c:	fb03 f201 	mul.w	r2, r3, r1
 8003f30:	2300      	movs	r3, #0
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f3e:	677a      	str	r2, [r7, #116]	; 0x74
 8003f40:	460a      	mov	r2, r1
 8003f42:	673a      	str	r2, [r7, #112]	; 0x70
 8003f44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f46:	4413      	add	r3, r2
 8003f48:	677b      	str	r3, [r7, #116]	; 0x74
 8003f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f4e:	2200      	movs	r2, #0
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
 8003f52:	637a      	str	r2, [r7, #52]	; 0x34
 8003f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f58:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003f5c:	f7fc f952 	bl	8000204 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4613      	mov	r3, r2
 8003f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f6a:	e05b      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	099b      	lsrs	r3, r3, #6
 8003f72:	2200      	movs	r2, #0
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	2300      	movs	r3, #0
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9a:	0150      	lsls	r0, r2, #5
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8003fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	00eb      	lsls	r3, r5, #3
 8003fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd6:	00e2      	lsls	r2, r4, #3
 8003fd8:	4614      	mov	r4, r2
 8003fda:	461d      	mov	r5, r3
 8003fdc:	4643      	mov	r3, r8
 8003fde:	18e3      	adds	r3, r4, r3
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	eb45 0303 	adc.w	r3, r5, r3
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	028b      	lsls	r3, r1, #10
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004000:	4621      	mov	r1, r4
 8004002:	028a      	lsls	r2, r1, #10
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400c:	2200      	movs	r2, #0
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004016:	f7fc f8f5 	bl	8000204 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4613      	mov	r3, r2
 8004020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <HAL_RCC_GetSysClockFreq+0x348>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	0f1b      	lsrs	r3, r3, #28
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004032:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004042:	e003      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800404a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004050:	4618      	mov	r0, r3
 8004052:	3798      	adds	r7, #152	; 0x98
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	00f42400 	.word	0x00f42400
 8004064:	016e3600 	.word	0x016e3600

08004068 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e28d      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8083 	beq.w	800418e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004088:	4b94      	ldr	r3, [pc, #592]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b04      	cmp	r3, #4
 8004092:	d019      	beq.n	80040c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004094:	4b91      	ldr	r3, [pc, #580]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800409c:	2b08      	cmp	r3, #8
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a0:	4b8e      	ldr	r3, [pc, #568]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ac:	d00c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ae:	4b8b      	ldr	r3, [pc, #556]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d112      	bne.n	80040e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ba:	4b88      	ldr	r3, [pc, #544]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c6:	d10b      	bne.n	80040e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d05b      	beq.n	800418c <HAL_RCC_OscConfig+0x124>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d157      	bne.n	800418c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e25a      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d106      	bne.n	80040f8 <HAL_RCC_OscConfig+0x90>
 80040ea:	4b7c      	ldr	r3, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7b      	ldr	r2, [pc, #492]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e01d      	b.n	8004134 <HAL_RCC_OscConfig+0xcc>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0xb4>
 8004102:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a75      	ldr	r2, [pc, #468]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b73      	ldr	r3, [pc, #460]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a72      	ldr	r2, [pc, #456]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0xcc>
 800411c:	4b6f      	ldr	r3, [pc, #444]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6e      	ldr	r2, [pc, #440]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	4b6c      	ldr	r3, [pc, #432]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a6b      	ldr	r2, [pc, #428]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800412e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fd86 	bl	8002c4c <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe fd82 	bl	8002c4c <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e21f      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0xdc>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fd72 	bl	8002c4c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800416c:	f7fe fd6e 	bl	8002c4c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e20b      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	4b57      	ldr	r3, [pc, #348]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x104>
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d06f      	beq.n	800427a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800419a:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d017      	beq.n	80041d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041a6:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d105      	bne.n	80041be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d11c      	bne.n	8004204 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d6:	4b41      	ldr	r3, [pc, #260]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCC_OscConfig+0x186>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e1d3      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4937      	ldr	r1, [pc, #220]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	e03a      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800420c:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_RCC_OscConfig+0x278>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fe fd1b 	bl	8002c4c <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421a:	f7fe fd17 	bl	8002c4c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e1b4      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4925      	ldr	r1, [pc, #148]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]
 800424c:	e015      	b.n	800427a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_OscConfig+0x278>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fcfa 	bl	8002c4c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425c:	f7fe fcf6 	bl	8002c4c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e193      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d036      	beq.n	80042f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fe fcda 	bl	8002c4c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800429c:	f7fe fcd6 	bl	8002c4c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e173      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 80042b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x234>
 80042ba:	e01b      	b.n	80042f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fe fcc3 	bl	8002c4c <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	e00e      	b.n	80042e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fe fcbf 	bl	8002c4c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d907      	bls.n	80042e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e15c      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
 80042dc:	40023800 	.word	0x40023800
 80042e0:	42470000 	.word	0x42470000
 80042e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e8:	4b8a      	ldr	r3, [pc, #552]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80042ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ea      	bne.n	80042ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8097 	beq.w	8004430 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004306:	4b83      	ldr	r3, [pc, #524]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10f      	bne.n	8004332 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	4b7f      	ldr	r3, [pc, #508]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	4a7e      	ldr	r2, [pc, #504]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004320:	6413      	str	r3, [r2, #64]	; 0x40
 8004322:	4b7c      	ldr	r3, [pc, #496]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004332:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_RCC_OscConfig+0x4b0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433e:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_RCC_OscConfig+0x4b0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a75      	ldr	r2, [pc, #468]	; (8004518 <HAL_RCC_OscConfig+0x4b0>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434a:	f7fe fc7f 	bl	8002c4c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004352:	f7fe fc7b 	bl	8002c4c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e118      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <HAL_RCC_OscConfig+0x4b0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x31e>
 8004378:	4b66      	ldr	r3, [pc, #408]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a65      	ldr	r2, [pc, #404]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	e01c      	b.n	80043c0 <HAL_RCC_OscConfig+0x358>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x340>
 800438e:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a60      	ldr	r2, [pc, #384]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	6713      	str	r3, [r2, #112]	; 0x70
 800439a:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a5d      	ldr	r2, [pc, #372]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0x358>
 80043a8:	4b5a      	ldr	r3, [pc, #360]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	4a59      	ldr	r2, [pc, #356]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	6713      	str	r3, [r2, #112]	; 0x70
 80043b4:	4b57      	ldr	r3, [pc, #348]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4a56      	ldr	r2, [pc, #344]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80043ba:	f023 0304 	bic.w	r3, r3, #4
 80043be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fe fc40 	bl	8002c4c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fe fc3c 	bl	8002c4c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0d7      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	4b4b      	ldr	r3, [pc, #300]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ee      	beq.n	80043d0 <HAL_RCC_OscConfig+0x368>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe fc2a 	bl	8002c4c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fe fc26 	bl	8002c4c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0c1      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004412:	4b40      	ldr	r3, [pc, #256]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1ee      	bne.n	80043fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80ad 	beq.w	8004594 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b08      	cmp	r3, #8
 8004444:	d060      	beq.n	8004508 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d145      	bne.n	80044da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_RCC_OscConfig+0x4b4>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fe fbfa 	bl	8002c4c <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445c:	f7fe fbf6 	bl	8002c4c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e093      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	4b29      	ldr	r3, [pc, #164]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	019b      	lsls	r3, r3, #6
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	3b01      	subs	r3, #1
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	491b      	ldr	r1, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x4b4>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fe fbcb 	bl	8002c4c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fe fbc7 	bl	8002c4c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e064      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x452>
 80044d8:	e05c      	b.n	8004594 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RCC_OscConfig+0x4b4>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fe fbb4 	bl	8002c4c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fe fbb0 	bl	8002c4c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e04d      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x480>
 8004506:	e045      	b.n	8004594 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e040      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
 8004514:	40023800 	.word	0x40023800
 8004518:	40007000 	.word	0x40007000
 800451c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004520:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_RCC_OscConfig+0x538>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d030      	beq.n	8004590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d129      	bne.n	8004590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d122      	bne.n	8004590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004558:	4293      	cmp	r3, r2
 800455a:	d119      	bne.n	8004590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	3b01      	subs	r3, #1
 800456a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d10f      	bne.n	8004590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d107      	bne.n	8004590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e041      	b.n	800463a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fe f84e 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fb48 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e041      	b.n	80046d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f839 	bl	80046e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f000 faf9 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_TIM_PWM_Start+0x24>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e022      	b.n	800475e <HAL_TIM_PWM_Start+0x6a>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d109      	bne.n	8004732 <HAL_TIM_PWM_Start+0x3e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e015      	b.n	800475e <HAL_TIM_PWM_Start+0x6a>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start+0x58>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e008      	b.n	800475e <HAL_TIM_PWM_Start+0x6a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07c      	b.n	8004860 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0x82>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004774:	e013      	b.n	800479e <HAL_TIM_PWM_Start+0xaa>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0x92>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004784:	e00b      	b.n	800479e <HAL_TIM_PWM_Start+0xaa>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xa2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004794:	e003      	b.n	800479e <HAL_TIM_PWM_Start+0xaa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fd50 	bl	800524c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2d      	ldr	r2, [pc, #180]	; (8004868 <HAL_TIM_PWM_Start+0x174>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_PWM_Start+0xcc>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	; (800486c <HAL_TIM_PWM_Start+0x178>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_PWM_Start+0xd0>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_PWM_Start+0xd2>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a22      	ldr	r2, [pc, #136]	; (8004868 <HAL_TIM_PWM_Start+0x174>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d022      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ec:	d01d      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1f      	ldr	r2, [pc, #124]	; (8004870 <HAL_TIM_PWM_Start+0x17c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d018      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <HAL_TIM_PWM_Start+0x180>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1c      	ldr	r2, [pc, #112]	; (8004878 <HAL_TIM_PWM_Start+0x184>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a16      	ldr	r2, [pc, #88]	; (800486c <HAL_TIM_PWM_Start+0x178>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIM_PWM_Start+0x188>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIM_PWM_Start+0x136>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_TIM_PWM_Start+0x18c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d111      	bne.n	800484e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d010      	beq.n	800485e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	e007      	b.n	800485e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40010000 	.word	0x40010000
 800486c:	40010400 	.word	0x40010400
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40014000 	.word	0x40014000
 8004880:	40001800 	.word	0x40001800

08004884 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	6839      	ldr	r1, [r7, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fcd8 	bl	800524c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a2e      	ldr	r2, [pc, #184]	; (800495c <HAL_TIM_PWM_Stop+0xd8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_TIM_PWM_Stop+0x2c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <HAL_TIM_PWM_Stop+0xdc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_TIM_PWM_Stop+0x30>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_PWM_Stop+0x32>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <HAL_TIM_PWM_Stop+0x66>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6a1a      	ldr	r2, [r3, #32]
 80048d0:	f240 4344 	movw	r3, #1092	; 0x444
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_PWM_Stop+0x66>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <HAL_TIM_PWM_Stop+0x96>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	f240 4344 	movw	r3, #1092	; 0x444
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <HAL_TIM_PWM_Stop+0x96>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_TIM_PWM_Stop+0xa6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	e013      	b.n	8004952 <HAL_TIM_PWM_Stop+0xce>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Stop+0xb6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	e00b      	b.n	8004952 <HAL_TIM_PWM_Stop+0xce>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b08      	cmp	r3, #8
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Stop+0xc6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	e003      	b.n	8004952 <HAL_TIM_PWM_Stop+0xce>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40010000 	.word	0x40010000
 8004960:	40010400 	.word	0x40010400

08004964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800497e:	2302      	movs	r3, #2
 8004980:	e0ae      	b.n	8004ae0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	f200 809f 	bhi.w	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049cd 	.word	0x080049cd
 800499c:	08004ad1 	.word	0x08004ad1
 80049a0:	08004ad1 	.word	0x08004ad1
 80049a4:	08004ad1 	.word	0x08004ad1
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004ad1 	.word	0x08004ad1
 80049b0:	08004ad1 	.word	0x08004ad1
 80049b4:	08004ad1 	.word	0x08004ad1
 80049b8:	08004a4f 	.word	0x08004a4f
 80049bc:	08004ad1 	.word	0x08004ad1
 80049c0:	08004ad1 	.word	0x08004ad1
 80049c4:	08004ad1 	.word	0x08004ad1
 80049c8:	08004a8f 	.word	0x08004a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f9f0 	bl	8004db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0208 	orr.w	r2, r2, #8
 80049e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0204 	bic.w	r2, r2, #4
 80049f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6999      	ldr	r1, [r3, #24]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	619a      	str	r2, [r3, #24]
      break;
 8004a0a:	e064      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa40 	bl	8004e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]
      break;
 8004a4c:	e043      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fa95 	bl	8004f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0208 	orr.w	r2, r2, #8
 8004a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0204 	bic.w	r2, r2, #4
 8004a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69d9      	ldr	r1, [r3, #28]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	61da      	str	r2, [r3, #28]
      break;
 8004a8c:	e023      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fae9 	bl	800506c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	021a      	lsls	r2, r3, #8
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	61da      	str	r2, [r3, #28]
      break;
 8004ace:	e002      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_ConfigClockSource+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0b4      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x186>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3c:	d03e      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0xd4>
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	f200 8087 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x172>
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d87f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d01a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xa6>
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d87b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d050      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x11a>
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d877      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b50      	cmp	r3, #80	; 0x50
 8004b66:	d03c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d873      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d058      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x13a>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d86f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d064      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d86b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d060      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d867      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d05a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b8c:	e062      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f000 fb35 	bl	800520c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
      break;
 8004bba:	e04f      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f000 fb1e 	bl	800520c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bde:	609a      	str	r2, [r3, #8]
      break;
 8004be0:	e03c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 fa92 	bl	8005118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2150      	movs	r1, #80	; 0x50
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 faeb 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c00:	e02c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 fab1 	bl	8005176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2160      	movs	r1, #96	; 0x60
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fadb 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c20:	e01c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f000 fa72 	bl	8005118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 facb 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 fac2 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a40      	ldr	r2, [pc, #256]	; (8004d8c <TIM_Base_SetConfig+0x114>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d00f      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3d      	ldr	r2, [pc, #244]	; (8004d90 <TIM_Base_SetConfig+0x118>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3c      	ldr	r2, [pc, #240]	; (8004d94 <TIM_Base_SetConfig+0x11c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a3b      	ldr	r2, [pc, #236]	; (8004d98 <TIM_Base_SetConfig+0x120>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3a      	ldr	r2, [pc, #232]	; (8004d9c <TIM_Base_SetConfig+0x124>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <TIM_Base_SetConfig+0x114>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d02b      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d027      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <TIM_Base_SetConfig+0x118>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d023      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <TIM_Base_SetConfig+0x11c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01f      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <TIM_Base_SetConfig+0x120>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01b      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <TIM_Base_SetConfig+0x124>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d017      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a28      	ldr	r2, [pc, #160]	; (8004da0 <TIM_Base_SetConfig+0x128>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <TIM_Base_SetConfig+0x12c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00f      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <TIM_Base_SetConfig+0x130>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a25      	ldr	r2, [pc, #148]	; (8004dac <TIM_Base_SetConfig+0x134>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <TIM_Base_SetConfig+0x138>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a23      	ldr	r2, [pc, #140]	; (8004db4 <TIM_Base_SetConfig+0x13c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <TIM_Base_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_Base_SetConfig+0xf8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <TIM_Base_SetConfig+0x124>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d103      	bne.n	8004d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	40001800 	.word	0x40001800
 8004db0:	40001c00 	.word	0x40001c00
 8004db4:	40002000 	.word	0x40002000

08004db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 0302 	bic.w	r3, r3, #2
 8004e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <TIM_OC1_SetConfig+0xd8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC1_SetConfig+0x64>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <TIM_OC1_SetConfig+0xdc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d10c      	bne.n	8004e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0308 	bic.w	r3, r3, #8
 8004e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <TIM_OC1_SetConfig+0xd8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC1_SetConfig+0x8e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <TIM_OC1_SetConfig+0xdc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0x68>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC2_SetConfig+0x94>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d113      	bne.n	8004f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010400 	.word	0x40010400

08004f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a21      	ldr	r2, [pc, #132]	; (8005064 <TIM_OC3_SetConfig+0xe0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC3_SetConfig+0x66>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <TIM_OC3_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_OC3_SetConfig+0xe0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC3_SetConfig+0x92>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC3_SetConfig+0xe4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400

0800506c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	031b      	lsls	r3, r3, #12
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <TIM_OC4_SetConfig+0xa4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC4_SetConfig+0x68>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a11      	ldr	r2, [pc, #68]	; (8005114 <TIM_OC4_SetConfig+0xa8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d109      	bne.n	80050e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 030a 	bic.w	r3, r3, #10
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0210 	bic.w	r2, r3, #16
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f043 0307 	orr.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	431a      	orrs	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2201      	movs	r2, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	43db      	mvns	r3, r3
 800526e:	401a      	ands	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e05a      	b.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d01d      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a17      	ldr	r2, [pc, #92]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4313      	orrs	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40010400 	.word	0x40010400
 8005388:	40014000 	.word	0x40014000
 800538c:	40001800 	.word	0x40001800

08005390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e03f      	b.n	8005422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fd fb42 	bl	8002a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2224      	movs	r2, #36	; 0x24
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f829 	bl	800542c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800542c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005430:	b0c0      	sub	sp, #256	; 0x100
 8005432:	af00      	add	r7, sp, #0
 8005434:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	68d9      	ldr	r1, [r3, #12]
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	ea40 0301 	orr.w	r3, r0, r1
 8005454:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	431a      	orrs	r2, r3
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	431a      	orrs	r2, r3
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005484:	f021 010c 	bic.w	r1, r1, #12
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005492:	430b      	orrs	r3, r1
 8005494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	6999      	ldr	r1, [r3, #24]
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	ea40 0301 	orr.w	r3, r0, r1
 80054b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b8f      	ldr	r3, [pc, #572]	; (80056f8 <UART_SetConfig+0x2cc>)
 80054bc:	429a      	cmp	r2, r3
 80054be:	d005      	beq.n	80054cc <UART_SetConfig+0xa0>
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b8d      	ldr	r3, [pc, #564]	; (80056fc <UART_SetConfig+0x2d0>)
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d104      	bne.n	80054d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054cc:	f7fe fc0e 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 80054d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054d4:	e003      	b.n	80054de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054d6:	f7fe fbf5 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80054da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e8:	f040 810c 	bne.w	8005704 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	1891      	adds	r1, r2, r2
 8005504:	65b9      	str	r1, [r7, #88]	; 0x58
 8005506:	415b      	adcs	r3, r3
 8005508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800550a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800550e:	4621      	mov	r1, r4
 8005510:	eb12 0801 	adds.w	r8, r2, r1
 8005514:	4629      	mov	r1, r5
 8005516:	eb43 0901 	adc.w	r9, r3, r1
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552e:	4690      	mov	r8, r2
 8005530:	4699      	mov	r9, r3
 8005532:	4623      	mov	r3, r4
 8005534:	eb18 0303 	adds.w	r3, r8, r3
 8005538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800553c:	462b      	mov	r3, r5
 800553e:	eb49 0303 	adc.w	r3, r9, r3
 8005542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005552:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005556:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800555a:	460b      	mov	r3, r1
 800555c:	18db      	adds	r3, r3, r3
 800555e:	653b      	str	r3, [r7, #80]	; 0x50
 8005560:	4613      	mov	r3, r2
 8005562:	eb42 0303 	adc.w	r3, r2, r3
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
 8005568:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800556c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005570:	f7fa fe48 	bl	8000204 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4b61      	ldr	r3, [pc, #388]	; (8005700 <UART_SetConfig+0x2d4>)
 800557a:	fba3 2302 	umull	r2, r3, r3, r2
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	011c      	lsls	r4, r3, #4
 8005582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800558c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005590:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	1891      	adds	r1, r2, r2
 800559a:	64b9      	str	r1, [r7, #72]	; 0x48
 800559c:	415b      	adcs	r3, r3
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055a4:	4641      	mov	r1, r8
 80055a6:	eb12 0a01 	adds.w	sl, r2, r1
 80055aa:	4649      	mov	r1, r9
 80055ac:	eb43 0b01 	adc.w	fp, r3, r1
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c4:	4692      	mov	sl, r2
 80055c6:	469b      	mov	fp, r3
 80055c8:	4643      	mov	r3, r8
 80055ca:	eb1a 0303 	adds.w	r3, sl, r3
 80055ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055d2:	464b      	mov	r3, r9
 80055d4:	eb4b 0303 	adc.w	r3, fp, r3
 80055d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055f0:	460b      	mov	r3, r1
 80055f2:	18db      	adds	r3, r3, r3
 80055f4:	643b      	str	r3, [r7, #64]	; 0x40
 80055f6:	4613      	mov	r3, r2
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
 80055fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005602:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005606:	f7fa fdfd 	bl	8000204 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4611      	mov	r1, r2
 8005610:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <UART_SetConfig+0x2d4>)
 8005612:	fba3 2301 	umull	r2, r3, r3, r1
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2264      	movs	r2, #100	; 0x64
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	1acb      	subs	r3, r1, r3
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005626:	4b36      	ldr	r3, [pc, #216]	; (8005700 <UART_SetConfig+0x2d4>)
 8005628:	fba3 2302 	umull	r2, r3, r3, r2
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005634:	441c      	add	r4, r3
 8005636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800563a:	2200      	movs	r2, #0
 800563c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005640:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005644:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	1891      	adds	r1, r2, r2
 800564e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005650:	415b      	adcs	r3, r3
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005658:	4641      	mov	r1, r8
 800565a:	1851      	adds	r1, r2, r1
 800565c:	6339      	str	r1, [r7, #48]	; 0x30
 800565e:	4649      	mov	r1, r9
 8005660:	414b      	adcs	r3, r1
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005670:	4659      	mov	r1, fp
 8005672:	00cb      	lsls	r3, r1, #3
 8005674:	4651      	mov	r1, sl
 8005676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567a:	4651      	mov	r1, sl
 800567c:	00ca      	lsls	r2, r1, #3
 800567e:	4610      	mov	r0, r2
 8005680:	4619      	mov	r1, r3
 8005682:	4603      	mov	r3, r0
 8005684:	4642      	mov	r2, r8
 8005686:	189b      	adds	r3, r3, r2
 8005688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800568c:	464b      	mov	r3, r9
 800568e:	460a      	mov	r2, r1
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056ac:	460b      	mov	r3, r1
 80056ae:	18db      	adds	r3, r3, r3
 80056b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b2:	4613      	mov	r3, r2
 80056b4:	eb42 0303 	adc.w	r3, r2, r3
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056c2:	f7fa fd9f 	bl	8000204 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <UART_SetConfig+0x2d4>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	; 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	3332      	adds	r3, #50	; 0x32
 80056de:	4a08      	ldr	r2, [pc, #32]	; (8005700 <UART_SetConfig+0x2d4>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 0207 	and.w	r2, r3, #7
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4422      	add	r2, r4
 80056f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f4:	e105      	b.n	8005902 <UART_SetConfig+0x4d6>
 80056f6:	bf00      	nop
 80056f8:	40011000 	.word	0x40011000
 80056fc:	40011400 	.word	0x40011400
 8005700:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005708:	2200      	movs	r2, #0
 800570a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800570e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005712:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005716:	4642      	mov	r2, r8
 8005718:	464b      	mov	r3, r9
 800571a:	1891      	adds	r1, r2, r2
 800571c:	6239      	str	r1, [r7, #32]
 800571e:	415b      	adcs	r3, r3
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
 8005722:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005726:	4641      	mov	r1, r8
 8005728:	1854      	adds	r4, r2, r1
 800572a:	4649      	mov	r1, r9
 800572c:	eb43 0501 	adc.w	r5, r3, r1
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	00eb      	lsls	r3, r5, #3
 800573a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573e:	00e2      	lsls	r2, r4, #3
 8005740:	4614      	mov	r4, r2
 8005742:	461d      	mov	r5, r3
 8005744:	4643      	mov	r3, r8
 8005746:	18e3      	adds	r3, r4, r3
 8005748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800574c:	464b      	mov	r3, r9
 800574e:	eb45 0303 	adc.w	r3, r5, r3
 8005752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005772:	4629      	mov	r1, r5
 8005774:	008b      	lsls	r3, r1, #2
 8005776:	4621      	mov	r1, r4
 8005778:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577c:	4621      	mov	r1, r4
 800577e:	008a      	lsls	r2, r1, #2
 8005780:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005784:	f7fa fd3e 	bl	8000204 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4b60      	ldr	r3, [pc, #384]	; (8005910 <UART_SetConfig+0x4e4>)
 800578e:	fba3 2302 	umull	r2, r3, r3, r2
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	011c      	lsls	r4, r3, #4
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	61b9      	str	r1, [r7, #24]
 80057b0:	415b      	adcs	r3, r3
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6139      	str	r1, [r7, #16]
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	67bb      	str	r3, [r7, #120]	; 0x78
 8005802:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005810:	4649      	mov	r1, r9
 8005812:	008b      	lsls	r3, r1, #2
 8005814:	4641      	mov	r1, r8
 8005816:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800581a:	4641      	mov	r1, r8
 800581c:	008a      	lsls	r2, r1, #2
 800581e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005822:	f7fa fcef 	bl	8000204 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b39      	ldr	r3, [pc, #228]	; (8005910 <UART_SetConfig+0x4e4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	; 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	3332      	adds	r3, #50	; 0x32
 800583e:	4a34      	ldr	r2, [pc, #208]	; (8005910 <UART_SetConfig+0x4e4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584a:	441c      	add	r4, r3
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005850:	2200      	movs	r2, #0
 8005852:	673b      	str	r3, [r7, #112]	; 0x70
 8005854:	677a      	str	r2, [r7, #116]	; 0x74
 8005856:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800585a:	4642      	mov	r2, r8
 800585c:	464b      	mov	r3, r9
 800585e:	1891      	adds	r1, r2, r2
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	415b      	adcs	r3, r3
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800586a:	4641      	mov	r1, r8
 800586c:	1851      	adds	r1, r2, r1
 800586e:	6039      	str	r1, [r7, #0]
 8005870:	4649      	mov	r1, r9
 8005872:	414b      	adcs	r3, r1
 8005874:	607b      	str	r3, [r7, #4]
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005882:	4659      	mov	r1, fp
 8005884:	00cb      	lsls	r3, r1, #3
 8005886:	4651      	mov	r1, sl
 8005888:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588c:	4651      	mov	r1, sl
 800588e:	00ca      	lsls	r2, r1, #3
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	4603      	mov	r3, r0
 8005896:	4642      	mov	r2, r8
 8005898:	189b      	adds	r3, r3, r2
 800589a:	66bb      	str	r3, [r7, #104]	; 0x68
 800589c:	464b      	mov	r3, r9
 800589e:	460a      	mov	r2, r1
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	663b      	str	r3, [r7, #96]	; 0x60
 80058b0:	667a      	str	r2, [r7, #100]	; 0x64
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058be:	4649      	mov	r1, r9
 80058c0:	008b      	lsls	r3, r1, #2
 80058c2:	4641      	mov	r1, r8
 80058c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c8:	4641      	mov	r1, r8
 80058ca:	008a      	lsls	r2, r1, #2
 80058cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058d0:	f7fa fc98 	bl	8000204 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <UART_SetConfig+0x4e4>)
 80058da:	fba3 1302 	umull	r1, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2164      	movs	r1, #100	; 0x64
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	3332      	adds	r3, #50	; 0x32
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <UART_SetConfig+0x4e4>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	f003 020f 	and.w	r2, r3, #15
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4422      	add	r2, r4
 8005900:	609a      	str	r2, [r3, #8]
}
 8005902:	bf00      	nop
 8005904:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	51eb851f 	.word	0x51eb851f

08005914 <LL_EXTI_EnableIT_0_31>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <LL_EXTI_EnableIT_0_31+0x20>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	4904      	ldr	r1, [pc, #16]	; (8005934 <LL_EXTI_EnableIT_0_31+0x20>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40013c00 	.word	0x40013c00

08005938 <LL_EXTI_DisableIT_0_31>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <LL_EXTI_DisableIT_0_31+0x24>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	43db      	mvns	r3, r3
 8005948:	4904      	ldr	r1, [pc, #16]	; (800595c <LL_EXTI_DisableIT_0_31+0x24>)
 800594a:	4013      	ands	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40013c00 	.word	0x40013c00

08005960 <LL_EXTI_EnableEvent_0_31>:
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <LL_EXTI_EnableEvent_0_31+0x20>)
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	4904      	ldr	r1, [pc, #16]	; (8005980 <LL_EXTI_EnableEvent_0_31+0x20>)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40013c00 	.word	0x40013c00

08005984 <LL_EXTI_DisableEvent_0_31>:
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	43db      	mvns	r3, r3
 8005994:	4904      	ldr	r1, [pc, #16]	; (80059a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005996:	4013      	ands	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40013c00 	.word	0x40013c00

080059ac <LL_EXTI_EnableRisingTrig_0_31>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4313      	orrs	r3, r2
 80059be:	608b      	str	r3, [r1, #8]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40013c00 	.word	0x40013c00

080059d0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	43db      	mvns	r3, r3
 80059e0:	4904      	ldr	r1, [pc, #16]	; (80059f4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40013c00 	.word	0x40013c00

080059f8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	4904      	ldr	r1, [pc, #16]	; (8005a18 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60cb      	str	r3, [r1, #12]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40013c00 	.word	0x40013c00

08005a1c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	4904      	ldr	r1, [pc, #16]	; (8005a40 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60cb      	str	r3, [r1, #12]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40013c00 	.word	0x40013c00

08005a44 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	791b      	ldrb	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d065      	beq.n	8005b24 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d06c      	beq.n	8005b3a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	795b      	ldrb	r3, [r3, #5]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d01c      	beq.n	8005aa2 <LL_EXTI_Init+0x5e>
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	dc25      	bgt.n	8005ab8 <LL_EXTI_Init+0x74>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <LL_EXTI_Init+0x32>
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d00b      	beq.n	8005a8c <LL_EXTI_Init+0x48>
 8005a74:	e020      	b.n	8005ab8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff ff82 	bl	8005984 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff45 	bl	8005914 <LL_EXTI_EnableIT_0_31>
          break;
 8005a8a:	e018      	b.n	8005abe <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ff51 	bl	8005938 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff60 	bl	8005960 <LL_EXTI_EnableEvent_0_31>
          break;
 8005aa0:	e00d      	b.n	8005abe <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff ff34 	bl	8005914 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff55 	bl	8005960 <LL_EXTI_EnableEvent_0_31>
          break;
 8005ab6:	e002      	b.n	8005abe <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
          break;
 8005abc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	799b      	ldrb	r3, [r3, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d039      	beq.n	8005b3a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	799b      	ldrb	r3, [r3, #6]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d01c      	beq.n	8005b08 <LL_EXTI_Init+0xc4>
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	dc25      	bgt.n	8005b1e <LL_EXTI_Init+0xda>
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d002      	beq.n	8005adc <LL_EXTI_Init+0x98>
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d00b      	beq.n	8005af2 <LL_EXTI_Init+0xae>
 8005ada:	e020      	b.n	8005b1e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff9b 	bl	8005a1c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff ff5e 	bl	80059ac <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005af0:	e024      	b.n	8005b3c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff ff6a 	bl	80059d0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff ff79 	bl	80059f8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005b06:	e019      	b.n	8005b3c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ff4d 	bl	80059ac <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff ff6e 	bl	80059f8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005b1c:	e00e      	b.n	8005b3c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
            break;
 8005b22:	e00b      	b.n	8005b3c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff05 	bl	8005938 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ff26 	bl	8005984 <LL_EXTI_DisableEvent_0_31>
 8005b38:	e000      	b.n	8005b3c <LL_EXTI_Init+0xf8>
      }
 8005b3a:	bf00      	nop
  }
  return status;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <LL_GPIO_SetPinMode>:
{
 8005b46:	b480      	push	{r7}
 8005b48:	b089      	sub	sp, #36	; 0x24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	fa93 f3a3 	rbit	r3, r3
 8005b60:	613b      	str	r3, [r7, #16]
  return result;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	fab3 f383 	clz	r3, r3
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2103      	movs	r1, #3
 8005b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	401a      	ands	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	fa93 f3a3 	rbit	r3, r3
 8005b80:	61bb      	str	r3, [r7, #24]
  return result;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	fab3 f383 	clz	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	3724      	adds	r7, #36	; 0x24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_GPIO_SetPinOutputType>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	401a      	ands	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	605a      	str	r2, [r3, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <LL_GPIO_SetPinSpeed>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b089      	sub	sp, #36	; 0x24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	fa93 f3a3 	rbit	r3, r3
 8005bee:	613b      	str	r3, [r7, #16]
  return result;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	2103      	movs	r1, #3
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	fa93 f3a3 	rbit	r3, r3
 8005c0e:	61bb      	str	r3, [r7, #24]
  return result;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	609a      	str	r2, [r3, #8]
}
 8005c26:	bf00      	nop
 8005c28:	3724      	adds	r7, #36	; 0x24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_GPIO_SetPinPull>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	b089      	sub	sp, #36	; 0x24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	fa93 f3a3 	rbit	r3, r3
 8005c4c:	613b      	str	r3, [r7, #16]
  return result;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	fab3 f383 	clz	r3, r3
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	2103      	movs	r1, #3
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	401a      	ands	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa93 f3a3 	rbit	r3, r3
 8005c6c:	61bb      	str	r3, [r7, #24]
  return result;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	fab3 f383 	clz	r3, r3
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	60da      	str	r2, [r3, #12]
}
 8005c84:	bf00      	nop
 8005c86:	3724      	adds	r7, #36	; 0x24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <LL_GPIO_SetAFPin_0_7>:
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	fa93 f3a3 	rbit	r3, r3
 8005caa:	613b      	str	r3, [r7, #16]
  return result;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	fab3 f383 	clz	r3, r3
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	210f      	movs	r1, #15
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	401a      	ands	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	61bb      	str	r3, [r7, #24]
  return result;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	fab3 f383 	clz	r3, r3
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	3724      	adds	r7, #36	; 0x24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_GPIO_SetAFPin_8_15>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b089      	sub	sp, #36	; 0x24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	0a1b      	lsrs	r3, r3, #8
 8005d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fa93 f3a3 	rbit	r3, r3
 8005d0a:	613b      	str	r3, [r7, #16]
  return result;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	fab3 f383 	clz	r3, r3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	210f      	movs	r1, #15
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	401a      	ands	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa93 f3a3 	rbit	r3, r3
 8005d2c:	61bb      	str	r3, [r7, #24]
  return result;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	fab3 f383 	clz	r3, r3
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005d44:	bf00      	nop
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	fa93 f3a3 	rbit	r3, r3
 8005d6e:	613b      	str	r3, [r7, #16]
  return result;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	fab3 f383 	clz	r3, r3
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005d7a:	e050      	b.n	8005e1e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2101      	movs	r1, #1
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fa01 f303 	lsl.w	r3, r1, r3
 8005d88:	4013      	ands	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d042      	beq.n	8005e18 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d003      	beq.n	8005da2 <LL_GPIO_Init+0x52>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d10d      	bne.n	8005dbe <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	461a      	mov	r2, r3
 8005da8:	69b9      	ldr	r1, [r7, #24]
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff ff12 	bl	8005bd4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	461a      	mov	r2, r3
 8005db6:	69b9      	ldr	r1, [r7, #24]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fef3 	bl	8005ba4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff ff33 	bl	8005c32 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d11a      	bne.n	8005e0a <LL_GPIO_Init+0xba>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	fa93 f3a3 	rbit	r3, r3
 8005dde:	60bb      	str	r3, [r7, #8]
  return result;
 8005de0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005de2:	fab3 f383 	clz	r3, r3
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b07      	cmp	r3, #7
 8005dea:	d807      	bhi.n	8005dfc <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	461a      	mov	r2, r3
 8005df2:	69b9      	ldr	r1, [r7, #24]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ff4b 	bl	8005c90 <LL_GPIO_SetAFPin_0_7>
 8005dfa:	e006      	b.n	8005e0a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	461a      	mov	r2, r3
 8005e02:	69b9      	ldr	r1, [r7, #24]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ff72 	bl	8005cee <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	69b9      	ldr	r1, [r7, #24]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fe97 	bl	8005b46 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1a7      	bne.n	8005d7c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005e3c:	4b04      	ldr	r3, [pc, #16]	; (8005e50 <LL_RCC_GetSysClkSource+0x18>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 030c 	and.w	r3, r3, #12
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40023800 	.word	0x40023800

08005e54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e58:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <LL_RCC_GetAHBPrescaler+0x18>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800

08005e8c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800

08005ea8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005eac:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <LL_RCC_PLL_GetMainSource+0x18>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40023800 	.word	0x40023800

08005ec4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <LL_RCC_PLL_GetN+0x18>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	099b      	lsrs	r3, r3, #6
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	40023800 	.word	0x40023800

08005ee0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <LL_RCC_PLL_GetP+0x18>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800

08005efc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <LL_RCC_PLL_GetR+0x18>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800

08005f18 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <LL_RCC_PLL_GetDivider+0x18>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800

08005f34 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005f3c:	f000 f820 	bl	8005f80 <RCC_GetSystemClockFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f85c 	bl	8006008 <RCC_GetHCLKClockFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f86a 	bl	8006034 <RCC_GetPCLK1ClockFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f876 	bl	800605c <RCC_GetPCLK2ClockFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60da      	str	r2, [r3, #12]
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005f8a:	f7ff ff55 	bl	8005e38 <LL_RCC_GetSysClkSource>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d82d      	bhi.n	8005ff0 <RCC_GetSystemClockFreq+0x70>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <RCC_GetSystemClockFreq+0x1c>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fd1 	.word	0x08005fd1
 8005fa0:	08005ff1 	.word	0x08005ff1
 8005fa4:	08005ff1 	.word	0x08005ff1
 8005fa8:	08005ff1 	.word	0x08005ff1
 8005fac:	08005fd7 	.word	0x08005fd7
 8005fb0:	08005ff1 	.word	0x08005ff1
 8005fb4:	08005ff1 	.word	0x08005ff1
 8005fb8:	08005ff1 	.word	0x08005ff1
 8005fbc:	08005fdd 	.word	0x08005fdd
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005fe7 	.word	0x08005fe7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <RCC_GetSystemClockFreq+0x80>)
 8005fd2:	607b      	str	r3, [r7, #4]
      break;
 8005fd4:	e00f      	b.n	8005ff6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <RCC_GetSystemClockFreq+0x84>)
 8005fd8:	607b      	str	r3, [r7, #4]
      break;
 8005fda:	e00c      	b.n	8005ff6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005fdc:	2008      	movs	r0, #8
 8005fde:	f000 f851 	bl	8006084 <RCC_PLL_GetFreqDomain_SYS>
 8005fe2:	6078      	str	r0, [r7, #4]
      break;
 8005fe4:	e007      	b.n	8005ff6 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8005fe6:	200c      	movs	r0, #12
 8005fe8:	f000 f84c 	bl	8006084 <RCC_PLL_GetFreqDomain_SYS>
 8005fec:	6078      	str	r0, [r7, #4]
      break;
 8005fee:	e002      	b.n	8005ff6 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005ff0:	4b03      	ldr	r3, [pc, #12]	; (8006000 <RCC_GetSystemClockFreq+0x80>)
 8005ff2:	607b      	str	r3, [r7, #4]
      break;
 8005ff4:	bf00      	nop
  }

  return frequency;
 8005ff6:	687b      	ldr	r3, [r7, #4]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	00f42400 	.word	0x00f42400
 8006004:	016e3600 	.word	0x016e3600

08006008 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006010:	f7ff ff20 	bl	8005e54 <LL_RCC_GetAHBPrescaler>
 8006014:	4603      	mov	r3, r0
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <RCC_GetHCLKClockFreq+0x28>)
 800601e:	5cd3      	ldrb	r3, [r2, r3]
 8006020:	461a      	mov	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	40d3      	lsrs	r3, r2
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	08006814 	.word	0x08006814

08006034 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800603c:	f7ff ff18 	bl	8005e70 <LL_RCC_GetAPB1Prescaler>
 8006040:	4603      	mov	r3, r0
 8006042:	0a9b      	lsrs	r3, r3, #10
 8006044:	4a04      	ldr	r2, [pc, #16]	; (8006058 <RCC_GetPCLK1ClockFreq+0x24>)
 8006046:	5cd3      	ldrb	r3, [r2, r3]
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	40d3      	lsrs	r3, r2
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	08006824 	.word	0x08006824

0800605c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006064:	f7ff ff12 	bl	8005e8c <LL_RCC_GetAPB2Prescaler>
 8006068:	4603      	mov	r3, r0
 800606a:	0b5b      	lsrs	r3, r3, #13
 800606c:	4a04      	ldr	r2, [pc, #16]	; (8006080 <RCC_GetPCLK2ClockFreq+0x24>)
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	40d3      	lsrs	r3, r2
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	08006824 	.word	0x08006824

08006084 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006098:	f7ff ff06 	bl	8005ea8 <LL_RCC_PLL_GetMainSource>
 800609c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060aa:	d003      	beq.n	80060b4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80060ac:	e005      	b.n	80060ba <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80060b0:	617b      	str	r3, [r7, #20]
      break;
 80060b2:	e005      	b.n	80060c0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80060b6:	617b      	str	r3, [r7, #20]
      break;
 80060b8:	e002      	b.n	80060c0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80060ba:	4b19      	ldr	r3, [pc, #100]	; (8006120 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80060bc:	617b      	str	r3, [r7, #20]
      break;
 80060be:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d114      	bne.n	80060f0 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060c6:	f7ff ff27 	bl	8005f18 <LL_RCC_PLL_GetDivider>
 80060ca:	4602      	mov	r2, r0
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	fbb3 f4f2 	udiv	r4, r3, r2
 80060d2:	f7ff fef7 	bl	8005ec4 <LL_RCC_PLL_GetN>
 80060d6:	4603      	mov	r3, r0
 80060d8:	fb03 f404 	mul.w	r4, r3, r4
 80060dc:	f7ff ff00 	bl	8005ee0 <LL_RCC_PLL_GetP>
 80060e0:	4603      	mov	r3, r0
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	3301      	adds	r3, #1
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e011      	b.n	8006114 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060f0:	f7ff ff12 	bl	8005f18 <LL_RCC_PLL_GetDivider>
 80060f4:	4602      	mov	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	fbb3 f4f2 	udiv	r4, r3, r2
 80060fc:	f7ff fee2 	bl	8005ec4 <LL_RCC_PLL_GetN>
 8006100:	4603      	mov	r3, r0
 8006102:	fb03 f404 	mul.w	r4, r3, r4
 8006106:	f7ff fef9 	bl	8005efc <LL_RCC_PLL_GetR>
 800610a:	4603      	mov	r3, r0
 800610c:	0f1b      	lsrs	r3, r3, #28
 800610e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006112:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006114:	693b      	ldr	r3, [r7, #16]
}
 8006116:	4618      	mov	r0, r3
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	00f42400 	.word	0x00f42400
 8006124:	016e3600 	.word	0x016e3600

08006128 <LL_USART_IsEnabled>:
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_USART_SetStopBitsLength>:
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_USART_SetHWFlowCtrl>:
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	615a      	str	r2, [r3, #20]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <LL_USART_SetBaudRate>:
{
 800619c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a0:	b0c0      	sub	sp, #256	; 0x100
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061a8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80061ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80061b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	f040 810c 	bne.w	80063d8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80061c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061d2:	4622      	mov	r2, r4
 80061d4:	462b      	mov	r3, r5
 80061d6:	1891      	adds	r1, r2, r2
 80061d8:	6639      	str	r1, [r7, #96]	; 0x60
 80061da:	415b      	adcs	r3, r3
 80061dc:	667b      	str	r3, [r7, #100]	; 0x64
 80061de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80061e2:	4621      	mov	r1, r4
 80061e4:	eb12 0801 	adds.w	r8, r2, r1
 80061e8:	4629      	mov	r1, r5
 80061ea:	eb43 0901 	adc.w	r9, r3, r1
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006202:	4690      	mov	r8, r2
 8006204:	4699      	mov	r9, r3
 8006206:	4623      	mov	r3, r4
 8006208:	eb18 0303 	adds.w	r3, r8, r3
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006210:	462b      	mov	r3, r5
 8006212:	eb49 0303 	adc.w	r3, r9, r3
 8006216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800621a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800621e:	2200      	movs	r2, #0
 8006220:	469a      	mov	sl, r3
 8006222:	4693      	mov	fp, r2
 8006224:	eb1a 030a 	adds.w	r3, sl, sl
 8006228:	65bb      	str	r3, [r7, #88]	; 0x58
 800622a:	eb4b 030b 	adc.w	r3, fp, fp
 800622e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006230:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006238:	f7f9 ffe4 	bl	8000204 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4b64      	ldr	r3, [pc, #400]	; (80063d4 <LL_USART_SetBaudRate+0x238>)
 8006242:	fba3 2302 	umull	r2, r3, r3, r2
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	b29b      	uxth	r3, r3
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	b29c      	uxth	r4, r3
 800624e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006252:	2200      	movs	r2, #0
 8006254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006258:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800625c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	1891      	adds	r1, r2, r2
 8006266:	6539      	str	r1, [r7, #80]	; 0x50
 8006268:	415b      	adcs	r3, r3
 800626a:	657b      	str	r3, [r7, #84]	; 0x54
 800626c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006270:	4641      	mov	r1, r8
 8006272:	1851      	adds	r1, r2, r1
 8006274:	64b9      	str	r1, [r7, #72]	; 0x48
 8006276:	4649      	mov	r1, r9
 8006278:	414b      	adcs	r3, r1
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8006288:	4659      	mov	r1, fp
 800628a:	00cb      	lsls	r3, r1, #3
 800628c:	4651      	mov	r1, sl
 800628e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006292:	4651      	mov	r1, sl
 8006294:	00ca      	lsls	r2, r1, #3
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	4603      	mov	r3, r0
 800629c:	4642      	mov	r2, r8
 800629e:	189b      	adds	r3, r3, r2
 80062a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a4:	464b      	mov	r3, r9
 80062a6:	460a      	mov	r2, r1
 80062a8:	eb42 0303 	adc.w	r3, r2, r3
 80062ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ba:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80062be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80062c2:	460b      	mov	r3, r1
 80062c4:	18db      	adds	r3, r3, r3
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
 80062c8:	4613      	mov	r3, r2
 80062ca:	eb42 0303 	adc.w	r3, r2, r3
 80062ce:	647b      	str	r3, [r7, #68]	; 0x44
 80062d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062d4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80062d8:	f7f9 ff94 	bl	8000204 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4611      	mov	r1, r2
 80062e2:	4b3c      	ldr	r3, [pc, #240]	; (80063d4 <LL_USART_SetBaudRate+0x238>)
 80062e4:	fba3 2301 	umull	r2, r3, r3, r1
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	2264      	movs	r2, #100	; 0x64
 80062ec:	fb02 f303 	mul.w	r3, r2, r3
 80062f0:	1acb      	subs	r3, r1, r3
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062f8:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <LL_USART_SetBaudRate+0x238>)
 80062fa:	fba3 2302 	umull	r2, r3, r3, r2
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	b29b      	uxth	r3, r3
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	b29b      	uxth	r3, r3
 8006306:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800630a:	b29b      	uxth	r3, r3
 800630c:	4423      	add	r3, r4
 800630e:	b29c      	uxth	r4, r3
 8006310:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006314:	2200      	movs	r2, #0
 8006316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800631a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800631e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8006322:	4642      	mov	r2, r8
 8006324:	464b      	mov	r3, r9
 8006326:	1891      	adds	r1, r2, r2
 8006328:	63b9      	str	r1, [r7, #56]	; 0x38
 800632a:	415b      	adcs	r3, r3
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006332:	4641      	mov	r1, r8
 8006334:	1851      	adds	r1, r2, r1
 8006336:	6339      	str	r1, [r7, #48]	; 0x30
 8006338:	4649      	mov	r1, r9
 800633a:	414b      	adcs	r3, r1
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800634a:	4659      	mov	r1, fp
 800634c:	00cb      	lsls	r3, r1, #3
 800634e:	4651      	mov	r1, sl
 8006350:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006354:	4651      	mov	r1, sl
 8006356:	00ca      	lsls	r2, r1, #3
 8006358:	4610      	mov	r0, r2
 800635a:	4619      	mov	r1, r3
 800635c:	4603      	mov	r3, r0
 800635e:	4642      	mov	r2, r8
 8006360:	189b      	adds	r3, r3, r2
 8006362:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006366:	464b      	mov	r3, r9
 8006368:	460a      	mov	r2, r1
 800636a:	eb42 0303 	adc.w	r3, r2, r3
 800636e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006372:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006376:	2200      	movs	r2, #0
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800637c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8006380:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006384:	460b      	mov	r3, r1
 8006386:	18db      	adds	r3, r3, r3
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
 800638a:	4613      	mov	r3, r2
 800638c:	eb42 0303 	adc.w	r3, r2, r3
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006396:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800639a:	f7f9 ff33 	bl	8000204 <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <LL_USART_SetBaudRate+0x238>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	; 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	3332      	adds	r3, #50	; 0x32
 80063b6:	4a07      	ldr	r2, [pc, #28]	; (80063d4 <LL_USART_SetBaudRate+0x238>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4423      	add	r3, r4
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d0:	609a      	str	r2, [r3, #8]
}
 80063d2:	e107      	b.n	80065e4 <LL_USART_SetBaudRate+0x448>
 80063d4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80063d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063e2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063e6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80063ea:	4642      	mov	r2, r8
 80063ec:	464b      	mov	r3, r9
 80063ee:	1891      	adds	r1, r2, r2
 80063f0:	6239      	str	r1, [r7, #32]
 80063f2:	415b      	adcs	r3, r3
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
 80063f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063fa:	4641      	mov	r1, r8
 80063fc:	1854      	adds	r4, r2, r1
 80063fe:	4649      	mov	r1, r9
 8006400:	eb43 0501 	adc.w	r5, r3, r1
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	00eb      	lsls	r3, r5, #3
 800640e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006412:	00e2      	lsls	r2, r4, #3
 8006414:	4614      	mov	r4, r2
 8006416:	461d      	mov	r5, r3
 8006418:	4643      	mov	r3, r8
 800641a:	18e3      	adds	r3, r4, r3
 800641c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006420:	464b      	mov	r3, r9
 8006422:	eb45 0303 	adc.w	r3, r5, r3
 8006426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800642a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800642e:	2200      	movs	r2, #0
 8006430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006434:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006444:	4629      	mov	r1, r5
 8006446:	008b      	lsls	r3, r1, #2
 8006448:	4621      	mov	r1, r4
 800644a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644e:	4621      	mov	r1, r4
 8006450:	008a      	lsls	r2, r1, #2
 8006452:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006456:	f7f9 fed5 	bl	8000204 <__aeabi_uldivmod>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4b64      	ldr	r3, [pc, #400]	; (80065f0 <LL_USART_SetBaudRate+0x454>)
 8006460:	fba3 2302 	umull	r2, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	b29b      	uxth	r3, r3
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	b29c      	uxth	r4, r3
 800646c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006470:	2200      	movs	r2, #0
 8006472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800647a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800647e:	4642      	mov	r2, r8
 8006480:	464b      	mov	r3, r9
 8006482:	1891      	adds	r1, r2, r2
 8006484:	61b9      	str	r1, [r7, #24]
 8006486:	415b      	adcs	r3, r3
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800648e:	4641      	mov	r1, r8
 8006490:	1851      	adds	r1, r2, r1
 8006492:	6139      	str	r1, [r7, #16]
 8006494:	4649      	mov	r1, r9
 8006496:	414b      	adcs	r3, r1
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a6:	4659      	mov	r1, fp
 80064a8:	00cb      	lsls	r3, r1, #3
 80064aa:	4651      	mov	r1, sl
 80064ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b0:	4651      	mov	r1, sl
 80064b2:	00ca      	lsls	r2, r1, #3
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	4642      	mov	r2, r8
 80064bc:	189b      	adds	r3, r3, r2
 80064be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064c2:	464b      	mov	r3, r9
 80064c4:	460a      	mov	r2, r1
 80064c6:	eb42 0303 	adc.w	r3, r2, r3
 80064ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064d8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80064e8:	4649      	mov	r1, r9
 80064ea:	008b      	lsls	r3, r1, #2
 80064ec:	4641      	mov	r1, r8
 80064ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f2:	4641      	mov	r1, r8
 80064f4:	008a      	lsls	r2, r1, #2
 80064f6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80064fa:	f7f9 fe83 	bl	8000204 <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4b3b      	ldr	r3, [pc, #236]	; (80065f0 <LL_USART_SetBaudRate+0x454>)
 8006504:	fba3 1302 	umull	r1, r3, r3, r2
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	2164      	movs	r1, #100	; 0x64
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	3332      	adds	r3, #50	; 0x32
 8006516:	4a36      	ldr	r2, [pc, #216]	; (80065f0 <LL_USART_SetBaudRate+0x454>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	b29b      	uxth	r3, r3
 8006520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006524:	b29b      	uxth	r3, r3
 8006526:	4423      	add	r3, r4
 8006528:	b29c      	uxth	r4, r3
 800652a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800652e:	2200      	movs	r2, #0
 8006530:	67bb      	str	r3, [r7, #120]	; 0x78
 8006532:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006538:	4642      	mov	r2, r8
 800653a:	464b      	mov	r3, r9
 800653c:	1891      	adds	r1, r2, r2
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	415b      	adcs	r3, r3
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006548:	4641      	mov	r1, r8
 800654a:	1851      	adds	r1, r2, r1
 800654c:	6039      	str	r1, [r7, #0]
 800654e:	4649      	mov	r1, r9
 8006550:	414b      	adcs	r3, r1
 8006552:	607b      	str	r3, [r7, #4]
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	f04f 0300 	mov.w	r3, #0
 800655c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006560:	4659      	mov	r1, fp
 8006562:	00cb      	lsls	r3, r1, #3
 8006564:	4651      	mov	r1, sl
 8006566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800656a:	4651      	mov	r1, sl
 800656c:	00ca      	lsls	r2, r1, #3
 800656e:	4610      	mov	r0, r2
 8006570:	4619      	mov	r1, r3
 8006572:	4603      	mov	r3, r0
 8006574:	4642      	mov	r2, r8
 8006576:	189b      	adds	r3, r3, r2
 8006578:	673b      	str	r3, [r7, #112]	; 0x70
 800657a:	464b      	mov	r3, r9
 800657c:	460a      	mov	r2, r1
 800657e:	eb42 0303 	adc.w	r3, r2, r3
 8006582:	677b      	str	r3, [r7, #116]	; 0x74
 8006584:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006588:	2200      	movs	r2, #0
 800658a:	66bb      	str	r3, [r7, #104]	; 0x68
 800658c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800659a:	4649      	mov	r1, r9
 800659c:	008b      	lsls	r3, r1, #2
 800659e:	4641      	mov	r1, r8
 80065a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a4:	4641      	mov	r1, r8
 80065a6:	008a      	lsls	r2, r1, #2
 80065a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80065ac:	f7f9 fe2a 	bl	8000204 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <LL_USART_SetBaudRate+0x454>)
 80065b6:	fba3 1302 	umull	r1, r3, r3, r2
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	2164      	movs	r1, #100	; 0x64
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	3332      	adds	r3, #50	; 0x32
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <LL_USART_SetBaudRate+0x454>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	4423      	add	r3, r4
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e2:	609a      	str	r2, [r3, #8]
}
 80065e4:	bf00      	nop
 80065e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065ea:	46bd      	mov	sp, r7
 80065ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f0:	51eb851f 	.word	0x51eb851f

080065f4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff fd8e 	bl	8006128 <LL_USART_IsEnabled>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d15e      	bne.n	80066d0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800661a:	f023 030c 	bic.w	r3, r3, #12
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	6851      	ldr	r1, [r2, #4]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	68d2      	ldr	r2, [r2, #12]
 8006626:	4311      	orrs	r1, r2
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	6912      	ldr	r2, [r2, #16]
 800662c:	4311      	orrs	r1, r2
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	6992      	ldr	r2, [r2, #24]
 8006632:	430a      	orrs	r2, r1
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff fd85 	bl	8006150 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fd92 	bl	8006176 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006652:	f107 0308 	add.w	r3, r7, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fc6c 	bl	8005f34 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a1f      	ldr	r2, [pc, #124]	; (80066dc <LL_USART_Init+0xe8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d102      	bne.n	800666a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e021      	b.n	80066ae <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <LL_USART_Init+0xec>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d102      	bne.n	8006678 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e01a      	b.n	80066ae <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <LL_USART_Init+0xf0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d102      	bne.n	8006686 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e013      	b.n	80066ae <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <LL_USART_Init+0xf4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d102      	bne.n	8006694 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e00c      	b.n	80066ae <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a15      	ldr	r2, [pc, #84]	; (80066ec <LL_USART_Init+0xf8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d102      	bne.n	80066a2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e005      	b.n	80066ae <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <LL_USART_Init+0xfc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d101      	bne.n	80066ae <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00d      	beq.n	80066d0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80066bc:	2300      	movs	r3, #0
 80066be:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69b9      	ldr	r1, [r7, #24]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fd66 	bl	800619c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80066d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40004400 	.word	0x40004400
 80066e4:	40004800 	.word	0x40004800
 80066e8:	40011400 	.word	0x40011400
 80066ec:	40004c00 	.word	0x40004c00
 80066f0:	40005000 	.word	0x40005000

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	; (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	; (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	; (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	; (8006738 <__libc_init_array+0x44>)
 8006708:	f000 f830 	bl	800676c <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	08006834 	.word	0x08006834
 8006730:	08006834 	.word	0x08006834
 8006734:	08006834 	.word	0x08006834
 8006738:	08006838 	.word	0x08006838

0800673c <memcmp>:
 800673c:	b510      	push	{r4, lr}
 800673e:	3901      	subs	r1, #1
 8006740:	4402      	add	r2, r0
 8006742:	4290      	cmp	r0, r2
 8006744:	d101      	bne.n	800674a <memcmp+0xe>
 8006746:	2000      	movs	r0, #0
 8006748:	e005      	b.n	8006756 <memcmp+0x1a>
 800674a:	7803      	ldrb	r3, [r0, #0]
 800674c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006750:	42a3      	cmp	r3, r4
 8006752:	d001      	beq.n	8006758 <memcmp+0x1c>
 8006754:	1b18      	subs	r0, r3, r4
 8006756:	bd10      	pop	{r4, pc}
 8006758:	3001      	adds	r0, #1
 800675a:	e7f2      	b.n	8006742 <memcmp+0x6>

0800675c <memset>:
 800675c:	4402      	add	r2, r0
 800675e:	4603      	mov	r3, r0
 8006760:	4293      	cmp	r3, r2
 8006762:	d100      	bne.n	8006766 <memset+0xa>
 8006764:	4770      	bx	lr
 8006766:	f803 1b01 	strb.w	r1, [r3], #1
 800676a:	e7f9      	b.n	8006760 <memset+0x4>

0800676c <_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr

08006778 <_fini>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr
