
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006db0  08006db0  00016db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000014  08006e90  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08006e90  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015473  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fd  00000000  00000000  000354b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00038cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00039e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028398  00000000  00000000  0003aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d38  00000000  00000000  00063238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed8e0  00000000  00000000  0007cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  0016a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006d98 	.word	0x08006d98

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08006d98 	.word	0x08006d98

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x98>)
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ADC1_Init+0x98>)
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_ADC1_Init+0x98>)
 800056a:	f002 fcbd 	bl	8002ee8 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fd02 	bl	8000f7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000580:	2304      	movs	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0x98>)
 800058a:	f002 fe8f 	bl	80032ac <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fcf2 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	40012000 	.word	0x40012000
 80005a8:	0f000001 	.word	0x0f000001

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d127      	bne.n	800061e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_MspInit+0x84>)
 800061a:	f003 fa19 	bl	8003a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <LiDAR_Cur_Check>:
  }
}

/* USER CODE BEGIN 1 */
void LiDAR_Cur_Check(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 800063a:	f002 fc99 	bl	8002f70 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000642:	f002 fd9a 	bl	800317a <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000648:	f002 fe22 	bl	8003290 <HAL_ADC_GetValue>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000652:	801a      	strh	r2, [r3, #0]
  total_adc_val += adc_val;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
  cnt++;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000672:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000676:	f002 fd4d 	bl	8003114 <HAL_ADC_Stop>

  Delay_ms(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f88c 	bl	8000798 <Delay_ms>
  if (cnt == ADC_AVG_BUFFER_SIZE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d120      	bne.n	80006cc <LiDAR_Cur_Check+0x98>
  {
    avg_adc_val = total_adc_val / ADC_AVG_BUFFER_SIZE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <LiDAR_Cur_Check+0xac>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069a:	801a      	strh	r2, [r3, #0]
    load_current = avg_adc_val / ADC_OFFSET;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006aa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006e8 <LiDAR_Cur_Check+0xb4>
 80006ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <LiDAR_Cur_Check+0xb8>)
 80006be:	801a      	strh	r2, [r3, #0]
    total_adc_val = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    cnt = 0;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  }
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000003c 	.word	0x2000003c
 80006d4:	20000032 	.word	0x20000032
 80006d8:	20000034 	.word	0x20000034
 80006dc:	20000038 	.word	0x20000038
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	2000003a 	.word	0x2000003a
 80006e8:	4022cbfb 	.word	0x4022cbfb
 80006ec:	20000030 	.word	0x20000030

080006f0 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Delay_us+0x40>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006fe:	f003 fc89 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <Delay_us+0x44>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Delay_us+0x40>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f8      	bcc.n	8000716 <Delay_us+0x26>
    	;
  }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0001000 	.word	0xe0001000
 8000734:	431bde83 	.word	0x431bde83

08000738 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <DWT_Delay_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <DWT_Delay_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <DWT_Delay_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <DWT_Delay_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <DWT_Delay_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <DWT_Delay_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile("NOP");
 8000772:	bf00      	nop
  __ASM volatile("NOP");
 8000774:	bf00      	nop
  __ASM volatile("NOP");
 8000776:	bf00      	nop

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <DWT_Delay_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <DWT_Delay_Init+0x4c>
  {
    return 0; /*clock cycle counter started*/
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /*clock cycle counter not started*/
 8000784:	2301      	movs	r3, #1
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa0 	bl	80006f0 <Delay_us>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3302      	adds	r3, #2
 80008de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	43db      	mvns	r3, r3
 80008e8:	ea02 0103 	and.w	r1, r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	fa03 f202 	lsl.w	r2, r3, r2
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	430a      	orrs	r2, r1
 8000912:	3302      	adds	r3, #2
 8000914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013800 	.word	0x40013800

08000928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa93 f3a3 	rbit	r3, r3
 8000942:	613b      	str	r3, [r7, #16]
  return result;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61bb      	str	r3, [r7, #24]
  return result;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	431a      	orrs	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000986:	b480      	push	{r7}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	613b      	str	r3, [r7, #16]
  return result;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa93 f3a3 	rbit	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
  return result;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff ffd5 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	f7ff ffd2 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffcf 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff ffcc 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff ffc9 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a72:	f642 4107 	movw	r1, #11271	; 0x2c07
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000a78:	f7ff ffb4 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	4880      	ldr	r0, [pc, #512]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000a80:	f7ff ffb0 	bl	80009e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 8000a84:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000a88:	487e      	ldr	r0, [pc, #504]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000a8a:	f7ff ffab 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a8e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000a92:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000aaa:	f006 f8c5 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000aae:	2382      	movs	r3, #130	; 0x82
 8000ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486e      	ldr	r0, [pc, #440]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000ac8:	f006 f8b6 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000acc:	f240 630c 	movw	r3, #1548	; 0x60c
 8000ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000aec:	f006 f8a4 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 8000af0:	f641 1370 	movw	r3, #6512	; 0x1970
 8000af4:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	485f      	ldr	r0, [pc, #380]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000b04:	f006 f898 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4855      	ldr	r0, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000b26:	f006 f887 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b4a:	f006 f875 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b6a:	f006 f865 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b82:	f006 f859 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000b86:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000b8a:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000ba2:	f006 f849 	bl	8006c38 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000bba:	f006 f83d 	bl	8006c38 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000bbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe82 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000bc8:	492f      	ldr	r1, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x254>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe7e 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 fea1 	bl	800692c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fe93 	bl	800692c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c0c:	f7ff febb 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c18:	f7ff feb5 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c22:	f7ff fe81 	bl	8000928 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c2e:	f7ff fe7b 	bl	8000928 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c32:	f7ff fdc1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe11 	bl	8000864 <NVIC_EncodePriority>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fde2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f7ff fdc1 	bl	80007d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c52:	f7ff fdb1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe01 	bl	8000864 <NVIC_EncodePriority>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4619      	mov	r1, r3
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff fdd2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f7ff fdb1 	bl	80007d4 <__NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	f0000003 	.word	0xf0000003

08000c8c <LL_GPIO_SetOutputPin>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ResetOutputPin>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <Delay_us>:
  {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <Delay_us+0x40>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cd6:	f003 f99d 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <Delay_us+0x44>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000cec:	bf00      	nop
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <Delay_us+0x40>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3f8      	bcc.n	8000cee <Delay_us+0x26>
  }
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	431bde83 	.word	0x431bde83

08000d10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f002 f876 	bl	8002e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f8be 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fe8a 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d20:	f7ff fbf2 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000d24:	f001 fee2 	bl	8002aec <MX_UART5_Init>
  MX_TIM3_Init();
 8000d28:	f001 fe0e 	bl	8002948 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000d2c:	f001 ff08 	bl	8002b40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000d30:	f7ff fd02 	bl	8000738 <DWT_Delay_Init>

  InitUartQueue(&ViewerQueue);
 8000d34:	484c      	ldr	r0, [pc, #304]	; (8000e68 <main+0x158>)
 8000d36:	f001 fa09 	bl	800214c <InitUartQueue>
  InitUartQueue(&LiDARQueue);
 8000d3a:	484c      	ldr	r0, [pc, #304]	; (8000e6c <main+0x15c>)
 8000d3c:	f001 fa06 	bl	800214c <InitUartQueue>
  if (HAL_UART_Receive_IT(&hViewer, ViewerQueue.Buffer, 1) != HAL_OK)
 8000d40:	2201      	movs	r2, #1
 8000d42:	494b      	ldr	r1, [pc, #300]	; (8000e70 <main+0x160>)
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <main+0x164>)
 8000d46:	f004 fdb6 	bl	80058b6 <HAL_UART_Receive_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <main+0x44>
  {
    Error_Handler();
 8000d50:	f000 f914 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UART_Receive_IT(&hLiDAR, LiDARQueue.Buffer, 1) != HAL_OK)
 8000d54:	2201      	movs	r2, #1
 8000d56:	4948      	ldr	r1, [pc, #288]	; (8000e78 <main+0x168>)
 8000d58:	4848      	ldr	r0, [pc, #288]	; (8000e7c <main+0x16c>)
 8000d5a:	f004 fdac 	bl	80058b6 <HAL_UART_Receive_IT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <main+0x58>
  {
    Error_Handler();
 8000d64:	f000 f90a 	bl	8000f7c <Error_Handler>
  }

  switch_check();
 8000d68:	f001 fda4 	bl	80028b4 <switch_check>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_UART_ENABLE_IT(&huart5, UART_IT_RXNE);
 8000d6c:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <main+0x164>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b40      	ldr	r3, [pc, #256]	; (8000e74 <main+0x164>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0220 	orr.w	r2, r2, #32
 8000d7a:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000d7c:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <main+0x16c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <main+0x16c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0220 	orr.w	r2, r2, #32
 8000d8a:	60da      	str	r2, [r3, #12]

  while (1)
  {
    if (tx_start_flag == 1) // LD Tx On
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <main+0x170>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d13b      	bne.n	8000e0c <main+0xfc>
    {
      if (stop_feedback == 0)
 8000d94:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <main+0x174>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d129      	bne.n	8000df0 <main+0xe0>
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da0:	4839      	ldr	r0, [pc, #228]	; (8000e88 <main+0x178>)
 8000da2:	f7ff ff73 	bl	8000c8c <LL_GPIO_SetOutputPin>
        stop_feedback = HAL_GPIO_ReadPin(FB_STOP1_SIG_GPIO_Port, FB_STOP1_SIG_Pin);
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	4837      	ldr	r0, [pc, #220]	; (8000e88 <main+0x178>)
 8000dac:	f002 ffe4 	bl	8003d78 <HAL_GPIO_ReadPin>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <main+0x174>)
 8000db6:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbc:	4832      	ldr	r0, [pc, #200]	; (8000e88 <main+0x178>)
 8000dbe:	f7ff ff73 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        feedback_ng_cnt++;
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <main+0x17c>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <main+0x17c>)
 8000dcc:	701a      	strb	r2, [r3, #0]
        if (feedback_ng_cnt >= 5)
 8000dce:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <main+0x17c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d908      	bls.n	8000de8 <main+0xd8>
        {
          g_Result = kResult_Err_11;
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <main+0x180>)
 8000dd8:	220c      	movs	r2, #12
 8000dda:	701a      	strb	r2, [r3, #0]
          stop_feedback = 1;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <main+0x174>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
          feedback_ng_cnt = 0;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <main+0x17c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
        }
        Delay_us(20);
 8000de8:	2014      	movs	r0, #20
 8000dea:	f7ff ff6d 	bl	8000cc8 <Delay_us>
 8000dee:	e7cd      	b.n	8000d8c <main+0x7c>
      }
      else
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df4:	4824      	ldr	r0, [pc, #144]	; (8000e88 <main+0x178>)
 8000df6:	f7ff ff49 	bl	8000c8c <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <main+0x178>)
 8000e00:	f7ff ff52 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        Delay_us(20);
 8000e04:	2014      	movs	r0, #20
 8000e06:	f7ff ff5f 	bl	8000cc8 <Delay_us>
 8000e0a:	e7bf      	b.n	8000d8c <main+0x7c>
      }
    }
    else // Etc.
    {
      switch (g_Status)
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <main+0x184>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d825      	bhi.n	8000e62 <main+0x152>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <main+0x10c>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e39 	.word	0x08000e39
 8000e20:	08000e3f 	.word	0x08000e3f
 8000e24:	08000e45 	.word	0x08000e45
 8000e28:	08000e4b 	.word	0x08000e4b
 8000e2c:	08000e51 	.word	0x08000e51
 8000e30:	08000e57 	.word	0x08000e57
 8000e34:	08000e5d 	.word	0x08000e5d
      {
      case kStatus_Info:
        Info_status();
 8000e38:	f001 fa06 	bl	8002248 <Info_status>
        break;
 8000e3c:	e012      	b.n	8000e64 <main+0x154>

      case kStatus_Detect1:
        Detect1_status();
 8000e3e:	f001 fa3f 	bl	80022c0 <Detect1_status>
        break;
 8000e42:	e00f      	b.n	8000e64 <main+0x154>

      case kStatus_Detect2:
        Detect2_status();
 8000e44:	f001 fa7a 	bl	800233c <Detect2_status>
        break;
 8000e48:	e00c      	b.n	8000e64 <main+0x154>

      case kStatus_Detect3:
        Detect3_status();
 8000e4a:	f001 faab 	bl	80023a4 <Detect3_status>
        break;
 8000e4e:	e009      	b.n	8000e64 <main+0x154>

      case kStatus_Idle:
        Idle_status();
 8000e50:	f001 faec 	bl	800242c <Idle_status>
        break;
 8000e54:	e006      	b.n	8000e64 <main+0x154>

      case kStatus_Test:
        Test_status();
 8000e56:	f001 fbfd 	bl	8002654 <Test_status>
        break;
 8000e5a:	e003      	b.n	8000e64 <main+0x154>

      case kStatus_Result:
        result();
 8000e5c:	f000 fbac 	bl	80015b8 <result>
        break;
 8000e60:	e000      	b.n	8000e64 <main+0x154>

      default:
        break;
 8000e62:	bf00      	nop
    if (tx_start_flag == 1) // LD Tx On
 8000e64:	e792      	b.n	8000d8c <main+0x7c>
 8000e66:	bf00      	nop
 8000e68:	2000018c 	.word	0x2000018c
 8000e6c:	20000088 	.word	0x20000088
 8000e70:	2000018f 	.word	0x2000018f
 8000e74:	20000300 	.word	0x20000300
 8000e78:	2000008b 	.word	0x2000008b
 8000e7c:	20000344 	.word	0x20000344
 8000e80:	200002fc 	.word	0x200002fc
 8000e84:	20000085 	.word	0x20000085
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	20000086 	.word	0x20000086
 8000e90:	20000087 	.word	0x20000087
 8000e94:	20000084 	.word	0x20000084

08000e98 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f005 ff6e 	bl	8006d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <SystemClock_Config+0xdc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <SystemClock_Config+0xdc>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <SystemClock_Config+0xdc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <SystemClock_Config+0xe0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <SystemClock_Config+0xe0>)
 8000ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <SystemClock_Config+0xe0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2310      	movs	r3, #16
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	2302      	movs	r3, #2
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f0c:	23b4      	movs	r3, #180	; 0xb4
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fa55 	bl	80043d0 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f2c:	f000 f826 	bl	8000f7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f30:	f002 ff3a 	bl	8003da8 <HAL_PWREx_EnableOverDrive>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f3a:	f000 f81f 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 ff73 	bl	8003e48 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f68:	f000 f808 	bl	8000f7c <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d85d      	bhi.n	800106a <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000fae:	7cfb      	ldrb	r3, [r7, #19]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	74fa      	strb	r2, [r7, #19]
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	443b      	add	r3, r7
 8000fb8:	22fa      	movs	r2, #250	; 0xfa
 8000fba:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000fbe:	7cfb      	ldrb	r3, [r7, #19]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	74fa      	strb	r2, [r7, #19]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	443b      	add	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	74fa      	strb	r2, [r7, #19]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	443b      	add	r3, r7
 8000fd8:	22d0      	movs	r2, #208	; 0xd0
 8000fda:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	74fa      	strb	r2, [r7, #19]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	443b      	add	r3, r7
 8000fe8:	220f      	movs	r2, #15
 8000fea:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	74fa      	strb	r2, [r7, #19]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	443b      	add	r3, r7
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000ffe:	7cfb      	ldrb	r3, [r7, #19]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	74fa      	strb	r2, [r7, #19]
 8001004:	3318      	adds	r3, #24
 8001006:	443b      	add	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	74fa      	strb	r2, [r7, #19]
 8001014:	3318      	adds	r3, #24
 8001016:	443b      	add	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 800101e:	7cfb      	ldrb	r3, [r7, #19]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	74fa      	strb	r2, [r7, #19]
 8001024:	3318      	adds	r3, #24
 8001026:	443b      	add	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 800102e:	7a3b      	ldrb	r3, [r7, #8]
 8001030:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001032:	2301      	movs	r3, #1
 8001034:	82bb      	strh	r3, [r7, #20]
 8001036:	e00a      	b.n	800104e <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8001038:	8abb      	ldrh	r3, [r7, #20]
 800103a:	3318      	adds	r3, #24
 800103c:	443b      	add	r3, r7
 800103e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	4053      	eors	r3, r2
 8001046:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001048:	8abb      	ldrh	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	82bb      	strh	r3, [r7, #20]
 800104e:	7cfb      	ldrb	r3, [r7, #19]
 8001050:	b29b      	uxth	r3, r3
 8001052:	8aba      	ldrh	r2, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3ef      	bcc.n	8001038 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8001058:	7cfb      	ldrb	r3, [r7, #19]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	74fa      	strb	r2, [r7, #19]
 800105e:	3318      	adds	r3, #24
 8001060:	443b      	add	r3, r7
 8001062:	7dfa      	ldrb	r2, [r7, #23]
 8001064:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001068:	e000      	b.n	800106c <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 800106a:	bf00      	nop
    }
    HAL_UART_Transmit(&hLiDAR, senddata, sizeof(senddata), 3000);
 800106c:	f107 0108 	add.w	r1, r7, #8
 8001070:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001074:	2209      	movs	r2, #9
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <LiDAR_Protocol_Tx+0xfc>)
 8001078:	f004 fb8b 	bl	8005792 <HAL_UART_Transmit>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000344 	.word	0x20000344

08001088 <GUI_Protocol_Tx>:

void GUI_Protocol_Tx(uint8_t parameter, uint8_t data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	747b      	strb	r3, [r7, #17]
    uint8_t senddata[9] = {0};
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <GUI_Protocol_Tx+0x3c>
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f2c0 80c1 	blt.w	800123c <GUI_Protocol_Tx+0x1b4>
 80010ba:	3b02      	subs	r3, #2
 80010bc:	2b05      	cmp	r3, #5
 80010be:	f200 80bd 	bhi.w	800123c <GUI_Protocol_Tx+0x1b4>
 80010c2:	e05d      	b.n	8001180 <GUI_Protocol_Tx+0xf8>
    {
    case GUI_COMMAND_CONNECT:

        senddata[cnt++] = PROTOCOL_HEADER;
 80010c4:	7c7b      	ldrb	r3, [r7, #17]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	747a      	strb	r2, [r7, #17]
 80010ca:	3318      	adds	r3, #24
 80010cc:	443b      	add	r3, r7
 80010ce:	22fa      	movs	r2, #250	; 0xfa
 80010d0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 80010d4:	7c7b      	ldrb	r3, [r7, #17]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	747a      	strb	r2, [r7, #17]
 80010da:	3318      	adds	r3, #24
 80010dc:	443b      	add	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80010e4:	7c7b      	ldrb	r3, [r7, #17]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	747a      	strb	r2, [r7, #17]
 80010ea:	3318      	adds	r3, #24
 80010ec:	443b      	add	r3, r7
 80010ee:	22d0      	movs	r2, #208	; 0xd0
 80010f0:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 80010f4:	7c7b      	ldrb	r3, [r7, #17]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	747a      	strb	r2, [r7, #17]
 80010fa:	3318      	adds	r3, #24
 80010fc:	443b      	add	r3, r7
 80010fe:	22f0      	movs	r2, #240	; 0xf0
 8001100:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8001104:	7c7b      	ldrb	r3, [r7, #17]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	747a      	strb	r2, [r7, #17]
 800110a:	3318      	adds	r3, #24
 800110c:	443b      	add	r3, r7
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001114:	7c7b      	ldrb	r3, [r7, #17]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	747a      	strb	r2, [r7, #17]
 800111a:	3318      	adds	r3, #24
 800111c:	443b      	add	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001124:	7c7b      	ldrb	r3, [r7, #17]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	747a      	strb	r2, [r7, #17]
 800112a:	3318      	adds	r3, #24
 800112c:	443b      	add	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data;
 8001134:	7c7b      	ldrb	r3, [r7, #17]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	747a      	strb	r2, [r7, #17]
 800113a:	3318      	adds	r3, #24
 800113c:	443b      	add	r3, r7
 800113e:	79ba      	ldrb	r2, [r7, #6]
 8001140:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001144:	7a3b      	ldrb	r3, [r7, #8]
 8001146:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001148:	2301      	movs	r3, #1
 800114a:	82bb      	strh	r3, [r7, #20]
 800114c:	e00a      	b.n	8001164 <GUI_Protocol_Tx+0xdc>
        {
            checksum ^= senddata[i];
 800114e:	8abb      	ldrh	r3, [r7, #20]
 8001150:	3318      	adds	r3, #24
 8001152:	443b      	add	r3, r7
 8001154:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	4053      	eors	r3, r2
 800115c:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800115e:	8abb      	ldrh	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	82bb      	strh	r3, [r7, #20]
 8001164:	7c7b      	ldrb	r3, [r7, #17]
 8001166:	b29b      	uxth	r3, r3
 8001168:	8aba      	ldrh	r2, [r7, #20]
 800116a:	429a      	cmp	r2, r3
 800116c:	d3ef      	bcc.n	800114e <GUI_Protocol_Tx+0xc6>
        }
        senddata[cnt++] = checksum;
 800116e:	7c7b      	ldrb	r3, [r7, #17]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	747a      	strb	r2, [r7, #17]
 8001174:	3318      	adds	r3, #24
 8001176:	443b      	add	r3, r7
 8001178:	7dfa      	ldrb	r2, [r7, #23]
 800117a:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 800117e:	e05e      	b.n	800123e <GUI_Protocol_Tx+0x1b6>
    case GUI_COMMAND_MOT_SPEED:
    case GUI_COMMAND_ENC_CHECK:
    case GUI_COMMAND_TDC_INIT:
    case GUI_COMMAND_TDC_CAL:

        senddata[cnt++] = PROTOCOL_HEADER;
 8001180:	7c7b      	ldrb	r3, [r7, #17]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	747a      	strb	r2, [r7, #17]
 8001186:	3318      	adds	r3, #24
 8001188:	443b      	add	r3, r7
 800118a:	22fa      	movs	r2, #250	; 0xfa
 800118c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	747a      	strb	r2, [r7, #17]
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	747a      	strb	r2, [r7, #17]
 80011a6:	3318      	adds	r3, #24
 80011a8:	443b      	add	r3, r7
 80011aa:	22d0      	movs	r2, #208	; 0xd0
 80011ac:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 80011b0:	7c7b      	ldrb	r3, [r7, #17]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	747a      	strb	r2, [r7, #17]
 80011b6:	3318      	adds	r3, #24
 80011b8:	443b      	add	r3, r7
 80011ba:	22f0      	movs	r2, #240	; 0xf0
 80011bc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 80011c0:	7c7b      	ldrb	r3, [r7, #17]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	747a      	strb	r2, [r7, #17]
 80011c6:	3318      	adds	r3, #24
 80011c8:	443b      	add	r3, r7
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	747a      	strb	r2, [r7, #17]
 80011d6:	3318      	adds	r3, #24
 80011d8:	443b      	add	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x01U;
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	747a      	strb	r2, [r7, #17]
 80011e6:	3318      	adds	r3, #24
 80011e8:	443b      	add	r3, r7
 80011ea:	2201      	movs	r2, #1
 80011ec:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data; // 0x00 : OK, 0x01 : FAIL
 80011f0:	7c7b      	ldrb	r3, [r7, #17]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	747a      	strb	r2, [r7, #17]
 80011f6:	3318      	adds	r3, #24
 80011f8:	443b      	add	r3, r7
 80011fa:	79ba      	ldrb	r2, [r7, #6]
 80011fc:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001200:	7a3b      	ldrb	r3, [r7, #8]
 8001202:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001204:	2301      	movs	r3, #1
 8001206:	827b      	strh	r3, [r7, #18]
 8001208:	e00a      	b.n	8001220 <GUI_Protocol_Tx+0x198>
        {
            checksum ^= senddata[i];
 800120a:	8a7b      	ldrh	r3, [r7, #18]
 800120c:	3318      	adds	r3, #24
 800120e:	443b      	add	r3, r7
 8001210:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001214:	7dfb      	ldrb	r3, [r7, #23]
 8001216:	4053      	eors	r3, r2
 8001218:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	3301      	adds	r3, #1
 800121e:	827b      	strh	r3, [r7, #18]
 8001220:	7c7b      	ldrb	r3, [r7, #17]
 8001222:	b29b      	uxth	r3, r3
 8001224:	8a7a      	ldrh	r2, [r7, #18]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3ef      	bcc.n	800120a <GUI_Protocol_Tx+0x182>
        }
        senddata[cnt++] = checksum;
 800122a:	7c7b      	ldrb	r3, [r7, #17]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	747a      	strb	r2, [r7, #17]
 8001230:	3318      	adds	r3, #24
 8001232:	443b      	add	r3, r7
 8001234:	7dfa      	ldrb	r2, [r7, #23]
 8001236:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 800123a:	e000      	b.n	800123e <GUI_Protocol_Tx+0x1b6>
    default:
        break;
 800123c:	bf00      	nop
    }
    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 800123e:	f107 0108 	add.w	r1, r7, #8
 8001242:	2364      	movs	r3, #100	; 0x64
 8001244:	2209      	movs	r2, #9
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <GUI_Protocol_Tx+0x1cc>)
 8001248:	f004 faa3 	bl	8005792 <HAL_UART_Transmit>
    //    UART_Transmit(UART5, senddata, sizeof(senddata));
}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000300 	.word	0x20000300

08001258 <GUI_Protocol_Mode_Tx>:

void GUI_Protocol_Mode_Tx(uint8_t data) // ADC Cur 추가
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[10] = {0};
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	809a      	strh	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	74fa      	strb	r2, [r7, #19]
 800127e:	3318      	adds	r3, #24
 8001280:	443b      	add	r3, r7
 8001282:	22fa      	movs	r2, #250	; 0xfa
 8001284:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 8001288:	7cfb      	ldrb	r3, [r7, #19]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	74fa      	strb	r2, [r7, #19]
 800128e:	3318      	adds	r3, #24
 8001290:	443b      	add	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 8001298:	7cfb      	ldrb	r3, [r7, #19]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	74fa      	strb	r2, [r7, #19]
 800129e:	3318      	adds	r3, #24
 80012a0:	443b      	add	r3, r7
 80012a2:	22d0      	movs	r2, #208	; 0xd0
 80012a4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_MODE;
 80012a8:	7cfb      	ldrb	r3, [r7, #19]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	74fa      	strb	r2, [r7, #19]
 80012ae:	3318      	adds	r3, #24
 80012b0:	443b      	add	r3, r7
 80012b2:	22f0      	movs	r2, #240	; 0xf0
 80012b4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_COMMAND_MODE;
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	74fa      	strb	r2, [r7, #19]
 80012be:	3318      	adds	r3, #24
 80012c0:	443b      	add	r3, r7
 80012c2:	2201      	movs	r2, #1
 80012c4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 80012c8:	7cfb      	ldrb	r3, [r7, #19]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	74fa      	strb	r2, [r7, #19]
 80012ce:	3318      	adds	r3, #24
 80012d0:	443b      	add	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 80012d8:	7cfb      	ldrb	r3, [r7, #19]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	74fa      	strb	r2, [r7, #19]
 80012de:	3318      	adds	r3, #24
 80012e0:	443b      	add	r3, r7
 80012e2:	2201      	movs	r2, #1
 80012e4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : Factory JIG MODE, 0x01 : Tx MODE
 80012e8:	7cfb      	ldrb	r3, [r7, #19]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	74fa      	strb	r2, [r7, #19]
 80012ee:	3318      	adds	r3, #24
 80012f0:	443b      	add	r3, r7
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = load_current;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <GUI_Protocol_Mode_Tx+0x108>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	7cfb      	ldrb	r3, [r7, #19]
 8001300:	1c59      	adds	r1, r3, #1
 8001302:	74f9      	strb	r1, [r7, #19]
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	3318      	adds	r3, #24
 8001308:	443b      	add	r3, r7
 800130a:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 800130e:	7a3b      	ldrb	r3, [r7, #8]
 8001310:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001312:	2301      	movs	r3, #1
 8001314:	82bb      	strh	r3, [r7, #20]
 8001316:	e00a      	b.n	800132e <GUI_Protocol_Mode_Tx+0xd6>
    {
        checksum ^= senddata[i];
 8001318:	8abb      	ldrh	r3, [r7, #20]
 800131a:	3318      	adds	r3, #24
 800131c:	443b      	add	r3, r7
 800131e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	4053      	eors	r3, r2
 8001326:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001328:	8abb      	ldrh	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	82bb      	strh	r3, [r7, #20]
 800132e:	7cfb      	ldrb	r3, [r7, #19]
 8001330:	b29b      	uxth	r3, r3
 8001332:	8aba      	ldrh	r2, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3ef      	bcc.n	8001318 <GUI_Protocol_Mode_Tx+0xc0>
    }
    senddata[cnt++] = checksum;
 8001338:	7cfb      	ldrb	r3, [r7, #19]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	74fa      	strb	r2, [r7, #19]
 800133e:	3318      	adds	r3, #24
 8001340:	443b      	add	r3, r7
 8001342:	7dfa      	ldrb	r2, [r7, #23]
 8001344:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001348:	f107 0108 	add.w	r1, r7, #8
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	220a      	movs	r2, #10
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <GUI_Protocol_Mode_Tx+0x10c>)
 8001352:	f004 fa1e 	bl	8005792 <HAL_UART_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000030 	.word	0x20000030
 8001364:	20000300 	.word	0x20000300

08001368 <GUI_Protocol_Detect_Tx>:

void GUI_Protocol_Detect_Tx(uint8_t parameter, uint8_t data)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	711a      	strb	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 800138e:	7cfb      	ldrb	r3, [r7, #19]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	74fa      	strb	r2, [r7, #19]
 8001394:	3318      	adds	r3, #24
 8001396:	443b      	add	r3, r7
 8001398:	22fa      	movs	r2, #250	; 0xfa
 800139a:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 800139e:	7cfb      	ldrb	r3, [r7, #19]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	74fa      	strb	r2, [r7, #19]
 80013a4:	3318      	adds	r3, #24
 80013a6:	443b      	add	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 80013ae:	7cfb      	ldrb	r3, [r7, #19]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	74fa      	strb	r2, [r7, #19]
 80013b4:	3318      	adds	r3, #24
 80013b6:	443b      	add	r3, r7
 80013b8:	22d0      	movs	r2, #208	; 0xd0
 80013ba:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = LIDAR_MODE;
 80013be:	7cfb      	ldrb	r3, [r7, #19]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	74fa      	strb	r2, [r7, #19]
 80013c4:	3318      	adds	r3, #24
 80013c6:	443b      	add	r3, r7
 80013c8:	220f      	movs	r2, #15
 80013ca:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = parameter;
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	74fa      	strb	r2, [r7, #19]
 80013d4:	3318      	adds	r3, #24
 80013d6:	443b      	add	r3, r7
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 80013de:	7cfb      	ldrb	r3, [r7, #19]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	74fa      	strb	r2, [r7, #19]
 80013e4:	3318      	adds	r3, #24
 80013e6:	443b      	add	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	74fa      	strb	r2, [r7, #19]
 80013f4:	3318      	adds	r3, #24
 80013f6:	443b      	add	r3, r7
 80013f8:	2201      	movs	r2, #1
 80013fa:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : FAIL, 0x01 : OK
 80013fe:	7cfb      	ldrb	r3, [r7, #19]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	74fa      	strb	r2, [r7, #19]
 8001404:	3318      	adds	r3, #24
 8001406:	443b      	add	r3, r7
 8001408:	79ba      	ldrb	r2, [r7, #6]
 800140a:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 800140e:	7a3b      	ldrb	r3, [r7, #8]
 8001410:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001412:	2301      	movs	r3, #1
 8001414:	82bb      	strh	r3, [r7, #20]
 8001416:	e00a      	b.n	800142e <GUI_Protocol_Detect_Tx+0xc6>
    {
        checksum ^= senddata[i];
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	3318      	adds	r3, #24
 800141c:	443b      	add	r3, r7
 800141e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	4053      	eors	r3, r2
 8001426:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001428:	8abb      	ldrh	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	82bb      	strh	r3, [r7, #20]
 800142e:	7cfb      	ldrb	r3, [r7, #19]
 8001430:	b29b      	uxth	r3, r3
 8001432:	8aba      	ldrh	r2, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	d3ef      	bcc.n	8001418 <GUI_Protocol_Detect_Tx+0xb0>
    }
    senddata[cnt++] = checksum;
 8001438:	7cfb      	ldrb	r3, [r7, #19]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	74fa      	strb	r2, [r7, #19]
 800143e:	3318      	adds	r3, #24
 8001440:	443b      	add	r3, r7
 8001442:	7dfa      	ldrb	r2, [r7, #23]
 8001444:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001448:	f107 0108 	add.w	r1, r7, #8
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	2209      	movs	r2, #9
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <GUI_Protocol_Detect_Tx+0xf8>)
 8001452:	f004 f99e 	bl	8005792 <HAL_UART_Transmit>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000300 	.word	0x20000300

08001464 <LL_GPIO_SetOutputPin>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_GPIO_ResetOutputPin>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <fail_sound>:

extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;

void fail_sound(uint8_t i)
{
 80014a0:	b490      	push	{r4, r7}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <fail_sound+0x16>
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d130      	bne.n	8001518 <fail_sound+0x78>
    {
        unsigned int fail_sound[] = {C5, C5, C5, C5};
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <fail_sound+0x8c>)
 80014b8:	f107 0408 	add.w	r4, r7, #8
 80014bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <fail_sound+0x90>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	3318      	adds	r3, #24
 80014ce:	443b      	add	r3, r7
 80014d0:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <fail_sound+0x94>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <fail_sound+0x90>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	3318      	adds	r3, #24
 80014ea:	443b      	add	r3, r7
 80014ec:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <fail_sound+0x94>)
 80014f6:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <fail_sound+0x90>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	3318      	adds	r3, #24
 8001504:	443b      	add	r3, r7
 8001506:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800150a:	fbb2 f2f3 	udiv	r2, r2, r3
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <fail_sound+0x94>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0852      	lsrs	r2, r2, #1
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 8001516:	e004      	b.n	8001522 <fail_sound+0x82>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <fail_sound+0x94>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bc90      	pop	{r4, r7}
 800152a:	4770      	bx	lr
 800152c:	08006db0 	.word	0x08006db0
 8001530:	20000000 	.word	0x20000000
 8001534:	200002b4 	.word	0x200002b4

08001538 <pass_sound>:

void pass_sound(uint8_t i)
{
 8001538:	b490      	push	{r4, r7}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C4, E4, G4, C5};
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <pass_sound+0x74>)
 8001544:	f107 0408 	add.w	r4, r7, #8
 8001548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <pass_sound+0x78>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	3318      	adds	r3, #24
 800155a:	443b      	add	r3, r7
 800155c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <pass_sound+0x7c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fbb1 f2f2 	udiv	r2, r1, r2
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <pass_sound+0x78>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	3318      	adds	r3, #24
 8001576:	443b      	add	r3, r7
 8001578:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <pass_sound+0x7c>)
 8001582:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / pass_sound[i] / 2);
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <pass_sound+0x78>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	3318      	adds	r3, #24
 8001590:	443b      	add	r3, r7
 8001592:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001596:	fbb2 f2f3 	udiv	r2, r2, r3
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <pass_sound+0x7c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0852      	lsrs	r2, r2, #1
 80015a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc90      	pop	{r4, r7}
 80015aa:	4770      	bx	lr
 80015ac:	08006dc0 	.word	0x08006dc0
 80015b0:	20000000 	.word	0x20000000
 80015b4:	200002b4 	.word	0x200002b4

080015b8 <result>:

void result(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015be:	2108      	movs	r1, #8
 80015c0:	48ba      	ldr	r0, [pc, #744]	; (80018ac <result+0x2f4>)
 80015c2:	f003 fa4b 	bl	8004a5c <HAL_TIM_PWM_Start>

    switch (g_Result)
 80015c6:	4bba      	ldr	r3, [pc, #744]	; (80018b0 <result+0x2f8>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b0d      	cmp	r3, #13
 80015ce:	f200 82d0 	bhi.w	8001b72 <result+0x5ba>
 80015d2:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <result+0x20>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001611 	.word	0x08001611
 80015dc:	08001637 	.word	0x08001637
 80015e0:	08001699 	.word	0x08001699
 80015e4:	080016ff 	.word	0x080016ff
 80015e8:	08001765 	.word	0x08001765
 80015ec:	080017cb 	.word	0x080017cb
 80015f0:	08001831 	.word	0x08001831
 80015f4:	08001897 	.word	0x08001897
 80015f8:	0800190f 	.word	0x0800190f
 80015fc:	08001975 	.word	0x08001975
 8001600:	080019db 	.word	0x080019db
 8001604:	08001a41 	.word	0x08001a41
 8001608:	08001aa7 	.word	0x08001aa7
 800160c:	08001b0d 	.word	0x08001b0d
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001610:	2104      	movs	r1, #4
 8001612:	48a8      	ldr	r0, [pc, #672]	; (80018b4 <result+0x2fc>)
 8001614:	f7ff ff34 	bl	8001480 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001618:	2120      	movs	r1, #32
 800161a:	48a7      	ldr	r0, [pc, #668]	; (80018b8 <result+0x300>)
 800161c:	f7ff ff30 	bl	8001480 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001624:	48a3      	ldr	r0, [pc, #652]	; (80018b4 <result+0x2fc>)
 8001626:	f7ff ff2b 	bl	8001480 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800162a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162e:	48a1      	ldr	r0, [pc, #644]	; (80018b4 <result+0x2fc>)
 8001630:	f7ff ff26 	bl	8001480 <LL_GPIO_ResetOutputPin>
        break;
 8001634:	e29e      	b.n	8001b74 <result+0x5bc>

    case kResult_Pass:
        for (uint8_t j = 0; j <= 3; j++)
 8001636:	2300      	movs	r3, #0
 8001638:	77fb      	strb	r3, [r7, #31]
 800163a:	e029      	b.n	8001690 <result+0xd8>
        {
            pass_sound(j);
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff7a 	bl	8001538 <pass_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001644:	2301      	movs	r3, #1
 8001646:	77bb      	strb	r3, [r7, #30]
 8001648:	e01c      	b.n	8001684 <result+0xcc>
            {
                FND_1();
 800164a:	f000 faa5 	bl	8001b98 <FND_1>
                FND_P();
 800164e:	f000 fb0b 	bl	8001c68 <FND_P>
                Delay_ms(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff f8a0 	bl	8000798 <Delay_ms>
                FND_2();
 8001658:	f000 fab8 	bl	8001bcc <FND_2>
                FND_A();
 800165c:	f000 fb2c 	bl	8001cb8 <FND_A>
                Delay_ms(1);
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff f899 	bl	8000798 <Delay_ms>
                FND_3();
 8001666:	f000 facb 	bl	8001c00 <FND_3>
                FND_S();
 800166a:	f000 fb4d 	bl	8001d08 <FND_S>
                Delay_ms(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff f892 	bl	8000798 <Delay_ms>
                FND_4();
 8001674:	f000 fade 	bl	8001c34 <FND_4>
                Delay_ms(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff f88d 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800167e:	7fbb      	ldrb	r3, [r7, #30]
 8001680:	3301      	adds	r3, #1
 8001682:	77bb      	strb	r3, [r7, #30]
 8001684:	7fbb      	ldrb	r3, [r7, #30]
 8001686:	2bfa      	cmp	r3, #250	; 0xfa
 8001688:	d9df      	bls.n	800164a <result+0x92>
        for (uint8_t j = 0; j <= 3; j++)
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	3301      	adds	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	7ffb      	ldrb	r3, [r7, #31]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d9d2      	bls.n	800163c <result+0x84>
            }
        }
        break;
 8001696:	e26d      	b.n	8001b74 <result+0x5bc>

    case kResult_Err_1: // UART Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001698:	2300      	movs	r3, #0
 800169a:	777b      	strb	r3, [r7, #29]
 800169c:	e02b      	b.n	80016f6 <result+0x13e>
        {
            fail_sound(j);
 800169e:	7f7b      	ldrb	r3, [r7, #29]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fefd 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80016a6:	2301      	movs	r3, #1
 80016a8:	773b      	strb	r3, [r7, #28]
 80016aa:	e01e      	b.n	80016ea <result+0x132>
            {
                FND_1();
 80016ac:	f000 fa74 	bl	8001b98 <FND_1>
                FND_E();
 80016b0:	f000 fb52 	bl	8001d58 <FND_E>
                Delay_ms(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff f86f 	bl	8000798 <Delay_ms>
                FND_2();
 80016ba:	f000 fa87 	bl	8001bcc <FND_2>
                FND_r();
 80016be:	f000 fb73 	bl	8001da8 <FND_r>
                Delay_ms(1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff f868 	bl	8000798 <Delay_ms>
                FND_3();
 80016c8:	f000 fa9a 	bl	8001c00 <FND_3>
                FND_zero();
 80016cc:	f000 fb94 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff f861 	bl	8000798 <Delay_ms>
                FND_4();
 80016d6:	f000 faad 	bl	8001c34 <FND_4>
                FND_one();
 80016da:	f000 fbb5 	bl	8001e48 <FND_one>
                Delay_ms(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff f85a 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80016e4:	7f3b      	ldrb	r3, [r7, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	773b      	strb	r3, [r7, #28]
 80016ea:	7f3b      	ldrb	r3, [r7, #28]
 80016ec:	2bfa      	cmp	r3, #250	; 0xfa
 80016ee:	d9dd      	bls.n	80016ac <result+0xf4>
        for (uint8_t j = 0; j <= 3; j++)
 80016f0:	7f7b      	ldrb	r3, [r7, #29]
 80016f2:	3301      	adds	r3, #1
 80016f4:	777b      	strb	r3, [r7, #29]
 80016f6:	7f7b      	ldrb	r3, [r7, #29]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d9d0      	bls.n	800169e <result+0xe6>
            }
        }
        break;
 80016fc:	e23a      	b.n	8001b74 <result+0x5bc>

    case kResult_Err_2: // Ethernet chip Fail
        for (uint8_t j = 0; j <= 3; j++)
 80016fe:	2300      	movs	r3, #0
 8001700:	76fb      	strb	r3, [r7, #27]
 8001702:	e02b      	b.n	800175c <result+0x1a4>
        {
            fail_sound(j);
 8001704:	7efb      	ldrb	r3, [r7, #27]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff feca 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 800170c:	2301      	movs	r3, #1
 800170e:	76bb      	strb	r3, [r7, #26]
 8001710:	e01e      	b.n	8001750 <result+0x198>
            {
                FND_1();
 8001712:	f000 fa41 	bl	8001b98 <FND_1>
                FND_E();
 8001716:	f000 fb1f 	bl	8001d58 <FND_E>
                Delay_ms(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff f83c 	bl	8000798 <Delay_ms>
                FND_2();
 8001720:	f000 fa54 	bl	8001bcc <FND_2>
                FND_r();
 8001724:	f000 fb40 	bl	8001da8 <FND_r>
                Delay_ms(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff f835 	bl	8000798 <Delay_ms>
                FND_3();
 800172e:	f000 fa67 	bl	8001c00 <FND_3>
                FND_zero();
 8001732:	f000 fb61 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff f82e 	bl	8000798 <Delay_ms>
                FND_4();
 800173c:	f000 fa7a 	bl	8001c34 <FND_4>
                FND_two();
 8001740:	f000 fbaa 	bl	8001e98 <FND_two>
                Delay_ms(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff f827 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800174a:	7ebb      	ldrb	r3, [r7, #26]
 800174c:	3301      	adds	r3, #1
 800174e:	76bb      	strb	r3, [r7, #26]
 8001750:	7ebb      	ldrb	r3, [r7, #26]
 8001752:	2bfa      	cmp	r3, #250	; 0xfa
 8001754:	d9dd      	bls.n	8001712 <result+0x15a>
        for (uint8_t j = 0; j <= 3; j++)
 8001756:	7efb      	ldrb	r3, [r7, #27]
 8001758:	3301      	adds	r3, #1
 800175a:	76fb      	strb	r3, [r7, #27]
 800175c:	7efb      	ldrb	r3, [r7, #27]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d9d0      	bls.n	8001704 <result+0x14c>
            }
        }
        break;
 8001762:	e207      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_3: // APD BIAS Control Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001764:	2300      	movs	r3, #0
 8001766:	767b      	strb	r3, [r7, #25]
 8001768:	e02b      	b.n	80017c2 <result+0x20a>
        {
            fail_sound(j);
 800176a:	7e7b      	ldrb	r3, [r7, #25]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe97 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001772:	2301      	movs	r3, #1
 8001774:	763b      	strb	r3, [r7, #24]
 8001776:	e01e      	b.n	80017b6 <result+0x1fe>
            {
                FND_1();
 8001778:	f000 fa0e 	bl	8001b98 <FND_1>
                FND_E();
 800177c:	f000 faec 	bl	8001d58 <FND_E>
                Delay_ms(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff f809 	bl	8000798 <Delay_ms>
                FND_2();
 8001786:	f000 fa21 	bl	8001bcc <FND_2>
                FND_r();
 800178a:	f000 fb0d 	bl	8001da8 <FND_r>
                Delay_ms(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff f802 	bl	8000798 <Delay_ms>
                FND_3();
 8001794:	f000 fa34 	bl	8001c00 <FND_3>
                FND_zero();
 8001798:	f000 fb2e 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 800179c:	2001      	movs	r0, #1
 800179e:	f7fe fffb 	bl	8000798 <Delay_ms>
                FND_4();
 80017a2:	f000 fa47 	bl	8001c34 <FND_4>
                FND_three();
 80017a6:	f000 fb9f 	bl	8001ee8 <FND_three>
                Delay_ms(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7fe fff4 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80017b0:	7e3b      	ldrb	r3, [r7, #24]
 80017b2:	3301      	adds	r3, #1
 80017b4:	763b      	strb	r3, [r7, #24]
 80017b6:	7e3b      	ldrb	r3, [r7, #24]
 80017b8:	2bfa      	cmp	r3, #250	; 0xfa
 80017ba:	d9dd      	bls.n	8001778 <result+0x1c0>
        for (uint8_t j = 0; j <= 3; j++)
 80017bc:	7e7b      	ldrb	r3, [r7, #25]
 80017be:	3301      	adds	r3, #1
 80017c0:	767b      	strb	r3, [r7, #25]
 80017c2:	7e7b      	ldrb	r3, [r7, #25]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9d0      	bls.n	800176a <result+0x1b2>
            }
        }
        break;
 80017c8:	e1d4      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_4: // Motor Speed Cailbration Fail
        for (uint8_t j = 0; j <= 3; j++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
 80017ce:	e02b      	b.n	8001828 <result+0x270>
        {
            fail_sound(j);
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fe64 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80017d8:	2301      	movs	r3, #1
 80017da:	75bb      	strb	r3, [r7, #22]
 80017dc:	e01e      	b.n	800181c <result+0x264>
            {
                FND_1();
 80017de:	f000 f9db 	bl	8001b98 <FND_1>
                FND_E();
 80017e2:	f000 fab9 	bl	8001d58 <FND_E>
                Delay_ms(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7fe ffd6 	bl	8000798 <Delay_ms>
                FND_2();
 80017ec:	f000 f9ee 	bl	8001bcc <FND_2>
                FND_r();
 80017f0:	f000 fada 	bl	8001da8 <FND_r>
                Delay_ms(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7fe ffcf 	bl	8000798 <Delay_ms>
                FND_3();
 80017fa:	f000 fa01 	bl	8001c00 <FND_3>
                FND_zero();
 80017fe:	f000 fafb 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 8001802:	2001      	movs	r0, #1
 8001804:	f7fe ffc8 	bl	8000798 <Delay_ms>
                FND_4();
 8001808:	f000 fa14 	bl	8001c34 <FND_4>
                FND_four();
 800180c:	f000 fb94 	bl	8001f38 <FND_four>
                Delay_ms(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f7fe ffc1 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001816:	7dbb      	ldrb	r3, [r7, #22]
 8001818:	3301      	adds	r3, #1
 800181a:	75bb      	strb	r3, [r7, #22]
 800181c:	7dbb      	ldrb	r3, [r7, #22]
 800181e:	2bfa      	cmp	r3, #250	; 0xfa
 8001820:	d9dd      	bls.n	80017de <result+0x226>
        for (uint8_t j = 0; j <= 3; j++)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	3301      	adds	r3, #1
 8001826:	75fb      	strb	r3, [r7, #23]
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d9d0      	bls.n	80017d0 <result+0x218>
            }
        }
        break;
 800182e:	e1a1      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_5: // Encoder Check Start Point Slit Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001830:	2300      	movs	r3, #0
 8001832:	757b      	strb	r3, [r7, #21]
 8001834:	e02b      	b.n	800188e <result+0x2d6>
        {
            fail_sound(j);
 8001836:	7d7b      	ldrb	r3, [r7, #21]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe31 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 800183e:	2301      	movs	r3, #1
 8001840:	753b      	strb	r3, [r7, #20]
 8001842:	e01e      	b.n	8001882 <result+0x2ca>
            {
                FND_1();
 8001844:	f000 f9a8 	bl	8001b98 <FND_1>
                FND_E();
 8001848:	f000 fa86 	bl	8001d58 <FND_E>
                Delay_ms(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f7fe ffa3 	bl	8000798 <Delay_ms>
                FND_2();
 8001852:	f000 f9bb 	bl	8001bcc <FND_2>
                FND_r();
 8001856:	f000 faa7 	bl	8001da8 <FND_r>
                Delay_ms(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f7fe ff9c 	bl	8000798 <Delay_ms>
                FND_3();
 8001860:	f000 f9ce 	bl	8001c00 <FND_3>
                FND_zero();
 8001864:	f000 fac8 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f7fe ff95 	bl	8000798 <Delay_ms>
                FND_4();
 800186e:	f000 f9e1 	bl	8001c34 <FND_4>
                FND_five();
 8001872:	f000 fb89 	bl	8001f88 <FND_five>
                Delay_ms(1);
 8001876:	2001      	movs	r0, #1
 8001878:	f7fe ff8e 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800187c:	7d3b      	ldrb	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	753b      	strb	r3, [r7, #20]
 8001882:	7d3b      	ldrb	r3, [r7, #20]
 8001884:	2bfa      	cmp	r3, #250	; 0xfa
 8001886:	d9dd      	bls.n	8001844 <result+0x28c>
        for (uint8_t j = 0; j <= 3; j++)
 8001888:	7d7b      	ldrb	r3, [r7, #21]
 800188a:	3301      	adds	r3, #1
 800188c:	757b      	strb	r3, [r7, #21]
 800188e:	7d7b      	ldrb	r3, [r7, #21]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d9d0      	bls.n	8001836 <result+0x27e>
            }
        }
        break;
 8001894:	e16e      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_6: // TDC Init Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001896:	2300      	movs	r3, #0
 8001898:	74fb      	strb	r3, [r7, #19]
 800189a:	e034      	b.n	8001906 <result+0x34e>
        {
            fail_sound(j);
 800189c:	7cfb      	ldrb	r3, [r7, #19]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fdfe 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80018a4:	2301      	movs	r3, #1
 80018a6:	74bb      	strb	r3, [r7, #18]
 80018a8:	e027      	b.n	80018fa <result+0x342>
 80018aa:	bf00      	nop
 80018ac:	200002b4 	.word	0x200002b4
 80018b0:	20000087 	.word	0x20000087
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020400 	.word	0x40020400
            {
                FND_1();
 80018bc:	f000 f96c 	bl	8001b98 <FND_1>
                FND_E();
 80018c0:	f000 fa4a 	bl	8001d58 <FND_E>
                Delay_ms(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7fe ff67 	bl	8000798 <Delay_ms>
                FND_2();
 80018ca:	f000 f97f 	bl	8001bcc <FND_2>
                FND_r();
 80018ce:	f000 fa6b 	bl	8001da8 <FND_r>
                Delay_ms(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7fe ff60 	bl	8000798 <Delay_ms>
                FND_3();
 80018d8:	f000 f992 	bl	8001c00 <FND_3>
                FND_zero();
 80018dc:	f000 fa8c 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7fe ff59 	bl	8000798 <Delay_ms>
                FND_4();
 80018e6:	f000 f9a5 	bl	8001c34 <FND_4>
                FND_six();
 80018ea:	f000 fb75 	bl	8001fd8 <FND_six>
                Delay_ms(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7fe ff52 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80018f4:	7cbb      	ldrb	r3, [r7, #18]
 80018f6:	3301      	adds	r3, #1
 80018f8:	74bb      	strb	r3, [r7, #18]
 80018fa:	7cbb      	ldrb	r3, [r7, #18]
 80018fc:	2bfa      	cmp	r3, #250	; 0xfa
 80018fe:	d9dd      	bls.n	80018bc <result+0x304>
        for (uint8_t j = 0; j <= 3; j++)
 8001900:	7cfb      	ldrb	r3, [r7, #19]
 8001902:	3301      	adds	r3, #1
 8001904:	74fb      	strb	r3, [r7, #19]
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d9c7      	bls.n	800189c <result+0x2e4>
            }
        }
        break;
 800190c:	e132      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_7: // TDC Calibration Fail
        for (uint8_t j = 0; j <= 3; j++)
 800190e:	2300      	movs	r3, #0
 8001910:	747b      	strb	r3, [r7, #17]
 8001912:	e02b      	b.n	800196c <result+0x3b4>
        {
            fail_sound(j);
 8001914:	7c7b      	ldrb	r3, [r7, #17]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fdc2 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 800191c:	2301      	movs	r3, #1
 800191e:	743b      	strb	r3, [r7, #16]
 8001920:	e01e      	b.n	8001960 <result+0x3a8>
            {
                FND_1();
 8001922:	f000 f939 	bl	8001b98 <FND_1>
                FND_E();
 8001926:	f000 fa17 	bl	8001d58 <FND_E>
                Delay_ms(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f7fe ff34 	bl	8000798 <Delay_ms>
                FND_2();
 8001930:	f000 f94c 	bl	8001bcc <FND_2>
                FND_r();
 8001934:	f000 fa38 	bl	8001da8 <FND_r>
                Delay_ms(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f7fe ff2d 	bl	8000798 <Delay_ms>
                FND_3();
 800193e:	f000 f95f 	bl	8001c00 <FND_3>
                FND_zero();
 8001942:	f000 fa59 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f7fe ff26 	bl	8000798 <Delay_ms>
                FND_4();
 800194c:	f000 f972 	bl	8001c34 <FND_4>
                FND_seven();
 8001950:	f000 fb6a 	bl	8002028 <FND_seven>
                Delay_ms(1);
 8001954:	2001      	movs	r0, #1
 8001956:	f7fe ff1f 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800195a:	7c3b      	ldrb	r3, [r7, #16]
 800195c:	3301      	adds	r3, #1
 800195e:	743b      	strb	r3, [r7, #16]
 8001960:	7c3b      	ldrb	r3, [r7, #16]
 8001962:	2bfa      	cmp	r3, #250	; 0xfa
 8001964:	d9dd      	bls.n	8001922 <result+0x36a>
        for (uint8_t j = 0; j <= 3; j++)
 8001966:	7c7b      	ldrb	r3, [r7, #17]
 8001968:	3301      	adds	r3, #1
 800196a:	747b      	strb	r3, [r7, #17]
 800196c:	7c7b      	ldrb	r3, [r7, #17]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d9d0      	bls.n	8001914 <result+0x35c>
            }
        }
        break;
 8001972:	e0ff      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_8: // Detect 1 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e02b      	b.n	80019d2 <result+0x41a>
        {
            fail_sound(j);
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fd8f 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001982:	2301      	movs	r3, #1
 8001984:	73bb      	strb	r3, [r7, #14]
 8001986:	e01e      	b.n	80019c6 <result+0x40e>
            {
                FND_1();
 8001988:	f000 f906 	bl	8001b98 <FND_1>
                FND_E();
 800198c:	f000 f9e4 	bl	8001d58 <FND_E>
                Delay_ms(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7fe ff01 	bl	8000798 <Delay_ms>
                FND_2();
 8001996:	f000 f919 	bl	8001bcc <FND_2>
                FND_r();
 800199a:	f000 fa05 	bl	8001da8 <FND_r>
                Delay_ms(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7fe fefa 	bl	8000798 <Delay_ms>
                FND_3();
 80019a4:	f000 f92c 	bl	8001c00 <FND_3>
                FND_zero();
 80019a8:	f000 fa26 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7fe fef3 	bl	8000798 <Delay_ms>
                FND_4();
 80019b2:	f000 f93f 	bl	8001c34 <FND_4>
                FND_eight();
 80019b6:	f000 fb5f 	bl	8002078 <FND_eight>
                Delay_ms(1);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7fe feec 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80019c0:	7bbb      	ldrb	r3, [r7, #14]
 80019c2:	3301      	adds	r3, #1
 80019c4:	73bb      	strb	r3, [r7, #14]
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2bfa      	cmp	r3, #250	; 0xfa
 80019ca:	d9dd      	bls.n	8001988 <result+0x3d0>
        for (uint8_t j = 0; j <= 3; j++)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3301      	adds	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d9d0      	bls.n	800197a <result+0x3c2>
            }
        }
        break;
 80019d8:	e0cc      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_9: // Detect 2 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 80019da:	2300      	movs	r3, #0
 80019dc:	737b      	strb	r3, [r7, #13]
 80019de:	e02b      	b.n	8001a38 <result+0x480>
        {
            fail_sound(j);
 80019e0:	7b7b      	ldrb	r3, [r7, #13]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fd5c 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80019e8:	2301      	movs	r3, #1
 80019ea:	733b      	strb	r3, [r7, #12]
 80019ec:	e01e      	b.n	8001a2c <result+0x474>
            {
                FND_1();
 80019ee:	f000 f8d3 	bl	8001b98 <FND_1>
                FND_E();
 80019f2:	f000 f9b1 	bl	8001d58 <FND_E>
                Delay_ms(1);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7fe fece 	bl	8000798 <Delay_ms>
                FND_2();
 80019fc:	f000 f8e6 	bl	8001bcc <FND_2>
                FND_r();
 8001a00:	f000 f9d2 	bl	8001da8 <FND_r>
                Delay_ms(1);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7fe fec7 	bl	8000798 <Delay_ms>
                FND_3();
 8001a0a:	f000 f8f9 	bl	8001c00 <FND_3>
                FND_zero();
 8001a0e:	f000 f9f3 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7fe fec0 	bl	8000798 <Delay_ms>
                FND_4();
 8001a18:	f000 f90c 	bl	8001c34 <FND_4>
                FND_nine();
 8001a1c:	f000 fb54 	bl	80020c8 <FND_nine>
                Delay_ms(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7fe feb9 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001a26:	7b3b      	ldrb	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	733b      	strb	r3, [r7, #12]
 8001a2c:	7b3b      	ldrb	r3, [r7, #12]
 8001a2e:	2bfa      	cmp	r3, #250	; 0xfa
 8001a30:	d9dd      	bls.n	80019ee <result+0x436>
        for (uint8_t j = 0; j <= 3; j++)
 8001a32:	7b7b      	ldrb	r3, [r7, #13]
 8001a34:	3301      	adds	r3, #1
 8001a36:	737b      	strb	r3, [r7, #13]
 8001a38:	7b7b      	ldrb	r3, [r7, #13]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d9d0      	bls.n	80019e0 <result+0x428>
            }
        }
        break;
 8001a3e:	e099      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_10: // Detect 3 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	72fb      	strb	r3, [r7, #11]
 8001a44:	e02b      	b.n	8001a9e <result+0x4e6>
        {
            fail_sound(j);
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fd29 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	72bb      	strb	r3, [r7, #10]
 8001a52:	e01e      	b.n	8001a92 <result+0x4da>
            {
                FND_1();
 8001a54:	f000 f8a0 	bl	8001b98 <FND_1>
                FND_E();
 8001a58:	f000 f97e 	bl	8001d58 <FND_E>
                Delay_ms(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7fe fe9b 	bl	8000798 <Delay_ms>
                FND_2();
 8001a62:	f000 f8b3 	bl	8001bcc <FND_2>
                FND_r();
 8001a66:	f000 f99f 	bl	8001da8 <FND_r>
                Delay_ms(1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7fe fe94 	bl	8000798 <Delay_ms>
                FND_3();
 8001a70:	f000 f8c6 	bl	8001c00 <FND_3>
                FND_one();
 8001a74:	f000 f9e8 	bl	8001e48 <FND_one>
                Delay_ms(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7fe fe8d 	bl	8000798 <Delay_ms>
                FND_4();
 8001a7e:	f000 f8d9 	bl	8001c34 <FND_4>
                FND_zero();
 8001a82:	f000 f9b9 	bl	8001df8 <FND_zero>
                Delay_ms(1);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7fe fe86 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001a8c:	7abb      	ldrb	r3, [r7, #10]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	72bb      	strb	r3, [r7, #10]
 8001a92:	7abb      	ldrb	r3, [r7, #10]
 8001a94:	2bfa      	cmp	r3, #250	; 0xfa
 8001a96:	d9dd      	bls.n	8001a54 <result+0x49c>
        for (uint8_t j = 0; j <= 3; j++)
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	72fb      	strb	r3, [r7, #11]
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d9d0      	bls.n	8001a46 <result+0x48e>
            }
        }
        break;
 8001aa4:	e066      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_11: // LD Tx feedback Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	727b      	strb	r3, [r7, #9]
 8001aaa:	e02b      	b.n	8001b04 <result+0x54c>
        {
            fail_sound(j);
 8001aac:	7a7b      	ldrb	r3, [r7, #9]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fcf6 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	723b      	strb	r3, [r7, #8]
 8001ab8:	e01e      	b.n	8001af8 <result+0x540>
            {
                FND_1();
 8001aba:	f000 f86d 	bl	8001b98 <FND_1>
                FND_E();
 8001abe:	f000 f94b 	bl	8001d58 <FND_E>
                Delay_ms(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7fe fe68 	bl	8000798 <Delay_ms>
                FND_2();
 8001ac8:	f000 f880 	bl	8001bcc <FND_2>
                FND_r();
 8001acc:	f000 f96c 	bl	8001da8 <FND_r>
                Delay_ms(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7fe fe61 	bl	8000798 <Delay_ms>
                FND_3();
 8001ad6:	f000 f893 	bl	8001c00 <FND_3>
                FND_one();
 8001ada:	f000 f9b5 	bl	8001e48 <FND_one>
                Delay_ms(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7fe fe5a 	bl	8000798 <Delay_ms>
                FND_4();
 8001ae4:	f000 f8a6 	bl	8001c34 <FND_4>
                FND_one();
 8001ae8:	f000 f9ae 	bl	8001e48 <FND_one>
                Delay_ms(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7fe fe53 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001af2:	7a3b      	ldrb	r3, [r7, #8]
 8001af4:	3301      	adds	r3, #1
 8001af6:	723b      	strb	r3, [r7, #8]
 8001af8:	7a3b      	ldrb	r3, [r7, #8]
 8001afa:	2bfa      	cmp	r3, #250	; 0xfa
 8001afc:	d9dd      	bls.n	8001aba <result+0x502>
        for (uint8_t j = 0; j <= 3; j++)
 8001afe:	7a7b      	ldrb	r3, [r7, #9]
 8001b00:	3301      	adds	r3, #1
 8001b02:	727b      	strb	r3, [r7, #9]
 8001b04:	7a7b      	ldrb	r3, [r7, #9]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d9d0      	bls.n	8001aac <result+0x4f4>
            }
        }
        break;
 8001b0a:	e033      	b.n	8001b74 <result+0x5bc>
    case kResult_Err_12: //여분
        for (uint8_t j = 0; j <= 3; j++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	e02b      	b.n	8001b6a <result+0x5b2>
        {
            fail_sound(j);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fcc3 	bl	80014a0 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	71bb      	strb	r3, [r7, #6]
 8001b1e:	e01e      	b.n	8001b5e <result+0x5a6>
            {
                FND_1();
 8001b20:	f000 f83a 	bl	8001b98 <FND_1>
                FND_E();
 8001b24:	f000 f918 	bl	8001d58 <FND_E>
                Delay_ms(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7fe fe35 	bl	8000798 <Delay_ms>
                FND_2();
 8001b2e:	f000 f84d 	bl	8001bcc <FND_2>
                FND_r();
 8001b32:	f000 f939 	bl	8001da8 <FND_r>
                Delay_ms(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7fe fe2e 	bl	8000798 <Delay_ms>
                FND_3();
 8001b3c:	f000 f860 	bl	8001c00 <FND_3>
                FND_one();
 8001b40:	f000 f982 	bl	8001e48 <FND_one>
                Delay_ms(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7fe fe27 	bl	8000798 <Delay_ms>
                FND_4();
 8001b4a:	f000 f873 	bl	8001c34 <FND_4>
                FND_two();
 8001b4e:	f000 f9a3 	bl	8001e98 <FND_two>
                Delay_ms(1);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f7fe fe20 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	71bb      	strb	r3, [r7, #6]
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	2bfa      	cmp	r3, #250	; 0xfa
 8001b62:	d9dd      	bls.n	8001b20 <result+0x568>
        for (uint8_t j = 0; j <= 3; j++)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	3301      	adds	r3, #1
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d9d0      	bls.n	8001b12 <result+0x55a>
            }
        }
        break;
 8001b70:	e000      	b.n	8001b74 <result+0x5bc>

    default:
        break;
 8001b72:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001b74:	2108      	movs	r1, #8
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <result+0x5d8>)
 8001b78:	f003 f838 	bl	8004bec <HAL_TIM_PWM_Stop>
    g_Result = kResult_None;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <result+0x5dc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
    turn_off();
 8001b82:	f000 fac9 	bl	8002118 <turn_off>
}
 8001b86:	bf00      	nop
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200002b4 	.word	0x200002b4
 8001b94:	20000087 	.word	0x20000087

08001b98 <FND_1>:

void FND_1(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <FND_1+0x2c>)
 8001ba0:	f7ff fc60 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001ba4:	2120      	movs	r1, #32
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <FND_1+0x30>)
 8001ba8:	f7ff fc6a 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <FND_1+0x2c>)
 8001bb2:	f7ff fc65 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <FND_1+0x2c>)
 8001bbc:	f7ff fc60 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020400 	.word	0x40020400

08001bcc <FND_2>:
void FND_2(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4809      	ldr	r0, [pc, #36]	; (8001bf8 <FND_2+0x2c>)
 8001bd4:	f7ff fc54 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001bd8:	2120      	movs	r1, #32
 8001bda:	4808      	ldr	r0, [pc, #32]	; (8001bfc <FND_2+0x30>)
 8001bdc:	f7ff fc42 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001be0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <FND_2+0x2c>)
 8001be6:	f7ff fc4b 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bee:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <FND_2+0x2c>)
 8001bf0:	f7ff fc46 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <FND_3>:
void FND_3(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c04:	2104      	movs	r1, #4
 8001c06:	4809      	ldr	r0, [pc, #36]	; (8001c2c <FND_3+0x2c>)
 8001c08:	f7ff fc3a 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <FND_3+0x30>)
 8001c10:	f7ff fc36 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <FND_3+0x2c>)
 8001c1a:	f7ff fc23 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4802      	ldr	r0, [pc, #8]	; (8001c2c <FND_3+0x2c>)
 8001c24:	f7ff fc2c 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020400 	.word	0x40020400

08001c34 <FND_4>:
void FND_4(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <FND_4+0x2c>)
 8001c3c:	f7ff fc20 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c40:	2120      	movs	r1, #32
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <FND_4+0x30>)
 8001c44:	f7ff fc1c 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <FND_4+0x2c>)
 8001c4e:	f7ff fc17 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <FND_4+0x2c>)
 8001c58:	f7ff fc04 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020400 	.word	0x40020400

08001c68 <FND_P>:

void FND_P(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <FND_P+0x48>)
 8001c72:	f7ff fbf7 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <FND_P+0x4c>)
 8001c7a:	f7ff fbf3 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <FND_P+0x4c>)
 8001c82:	f7ff fbfd 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8a:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <FND_P+0x4c>)
 8001c8c:	f7ff fbf8 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c90:	2102      	movs	r1, #2
 8001c92:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <FND_P+0x48>)
 8001c94:	f7ff fbe6 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <FND_P+0x48>)
 8001c9c:	f7ff fbe2 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <FND_P+0x4c>)
 8001ca6:	f7ff fbdd 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <FND_A>:

void FND_A(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc0:	480f      	ldr	r0, [pc, #60]	; (8001d00 <FND_A+0x48>)
 8001cc2:	f7ff fbcf 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <FND_A+0x4c>)
 8001cca:	f7ff fbcb 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <FND_A+0x4c>)
 8001cd2:	f7ff fbc7 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <FND_A+0x4c>)
 8001cdc:	f7ff fbd0 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <FND_A+0x48>)
 8001ce4:	f7ff fbbe 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <FND_A+0x48>)
 8001cec:	f7ff fbba 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <FND_A+0x4c>)
 8001cf6:	f7ff fbb5 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020400 	.word	0x40020400

08001d08 <FND_S>:

void FND_S(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d10:	480f      	ldr	r0, [pc, #60]	; (8001d50 <FND_S+0x48>)
 8001d12:	f7ff fba7 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	480e      	ldr	r0, [pc, #56]	; (8001d54 <FND_S+0x4c>)
 8001d1a:	f7ff fbb1 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d1e:	2140      	movs	r1, #64	; 0x40
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <FND_S+0x4c>)
 8001d22:	f7ff fb9f 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d2a:	480a      	ldr	r0, [pc, #40]	; (8001d54 <FND_S+0x4c>)
 8001d2c:	f7ff fb9a 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d30:	2102      	movs	r1, #2
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <FND_S+0x48>)
 8001d34:	f7ff fba4 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <FND_S+0x48>)
 8001d3c:	f7ff fb92 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <FND_S+0x4c>)
 8001d46:	f7ff fb8d 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020400 	.word	0x40020400

08001d58 <FND_E>:

void FND_E(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d60:	480f      	ldr	r0, [pc, #60]	; (8001da0 <FND_E+0x48>)
 8001d62:	f7ff fb7f 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <FND_E+0x4c>)
 8001d6a:	f7ff fb89 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d6e:	2140      	movs	r1, #64	; 0x40
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <FND_E+0x4c>)
 8001d72:	f7ff fb85 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7a:	480a      	ldr	r0, [pc, #40]	; (8001da4 <FND_E+0x4c>)
 8001d7c:	f7ff fb72 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d80:	2102      	movs	r1, #2
 8001d82:	4807      	ldr	r0, [pc, #28]	; (8001da0 <FND_E+0x48>)
 8001d84:	f7ff fb6e 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <FND_E+0x48>)
 8001d8c:	f7ff fb6a 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <FND_E+0x4c>)
 8001d96:	f7ff fb65 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020400 	.word	0x40020400

08001da8 <FND_r>:

void FND_r(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db0:	480f      	ldr	r0, [pc, #60]	; (8001df0 <FND_r+0x48>)
 8001db2:	f7ff fb65 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	480e      	ldr	r0, [pc, #56]	; (8001df4 <FND_r+0x4c>)
 8001dba:	f7ff fb61 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <FND_r+0x4c>)
 8001dc2:	f7ff fb5d 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <FND_r+0x4c>)
 8001dcc:	f7ff fb58 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <FND_r+0x48>)
 8001dd4:	f7ff fb46 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <FND_r+0x48>)
 8001ddc:	f7ff fb50 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <FND_r+0x4c>)
 8001de6:	f7ff fb3d 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020400 	.word	0x40020400

08001df8 <FND_zero>:

void FND_zero(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <FND_zero+0x48>)
 8001e02:	f7ff fb2f 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	480e      	ldr	r0, [pc, #56]	; (8001e44 <FND_zero+0x4c>)
 8001e0a:	f7ff fb2b 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e0e:	2140      	movs	r1, #64	; 0x40
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <FND_zero+0x4c>)
 8001e12:	f7ff fb27 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1a:	480a      	ldr	r0, [pc, #40]	; (8001e44 <FND_zero+0x4c>)
 8001e1c:	f7ff fb22 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e20:	2102      	movs	r1, #2
 8001e22:	4807      	ldr	r0, [pc, #28]	; (8001e40 <FND_zero+0x48>)
 8001e24:	f7ff fb1e 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <FND_zero+0x48>)
 8001e2c:	f7ff fb1a 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <FND_zero+0x4c>)
 8001e36:	f7ff fb23 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020400 	.word	0x40020400

08001e48 <FND_one>:

void FND_one(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <FND_one+0x48>)
 8001e52:	f7ff fb15 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	480e      	ldr	r0, [pc, #56]	; (8001e94 <FND_one+0x4c>)
 8001e5a:	f7ff fb03 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <FND_one+0x4c>)
 8001e62:	f7ff faff 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <FND_one+0x4c>)
 8001e6c:	f7ff fb08 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e70:	2102      	movs	r1, #2
 8001e72:	4807      	ldr	r0, [pc, #28]	; (8001e90 <FND_one+0x48>)
 8001e74:	f7ff fb04 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <FND_one+0x48>)
 8001e7c:	f7ff fb00 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <FND_one+0x4c>)
 8001e86:	f7ff fafb 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020400 	.word	0x40020400

08001e98 <FND_two>:

void FND_two(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea0:	480f      	ldr	r0, [pc, #60]	; (8001ee0 <FND_two+0x48>)
 8001ea2:	f7ff fadf 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <FND_two+0x4c>)
 8001eaa:	f7ff fadb 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <FND_two+0x4c>)
 8001eb2:	f7ff fae5 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eba:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <FND_two+0x4c>)
 8001ebc:	f7ff fad2 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <FND_two+0x48>)
 8001ec4:	f7ff face 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <FND_two+0x48>)
 8001ecc:	f7ff fad8 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <FND_two+0x4c>)
 8001ed6:	f7ff fac5 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020400 	.word	0x40020400

08001ee8 <FND_three>:
void FND_three(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <FND_three+0x48>)
 8001ef2:	f7ff fab7 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <FND_three+0x4c>)
 8001efa:	f7ff fab3 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001efe:	2140      	movs	r1, #64	; 0x40
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <FND_three+0x4c>)
 8001f02:	f7ff faaf 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0a:	480a      	ldr	r0, [pc, #40]	; (8001f34 <FND_three+0x4c>)
 8001f0c:	f7ff faaa 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f10:	2102      	movs	r1, #2
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <FND_three+0x48>)
 8001f14:	f7ff fab4 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <FND_three+0x48>)
 8001f1c:	f7ff fab0 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f24:	4803      	ldr	r0, [pc, #12]	; (8001f34 <FND_three+0x4c>)
 8001f26:	f7ff fa9d 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020400 	.word	0x40020400

08001f38 <FND_four>:

void FND_four(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f40:	480f      	ldr	r0, [pc, #60]	; (8001f80 <FND_four+0x48>)
 8001f42:	f7ff fa9d 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	480e      	ldr	r0, [pc, #56]	; (8001f84 <FND_four+0x4c>)
 8001f4a:	f7ff fa8b 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <FND_four+0x4c>)
 8001f52:	f7ff fa87 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5a:	480a      	ldr	r0, [pc, #40]	; (8001f84 <FND_four+0x4c>)
 8001f5c:	f7ff fa90 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f60:	2102      	movs	r1, #2
 8001f62:	4807      	ldr	r0, [pc, #28]	; (8001f80 <FND_four+0x48>)
 8001f64:	f7ff fa8c 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <FND_four+0x48>)
 8001f6c:	f7ff fa7a 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <FND_four+0x4c>)
 8001f76:	f7ff fa75 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40020400 	.word	0x40020400

08001f88 <FND_five>:

void FND_five(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <FND_five+0x48>)
 8001f92:	f7ff fa67 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <FND_five+0x4c>)
 8001f9a:	f7ff fa71 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f9e:	2140      	movs	r1, #64	; 0x40
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <FND_five+0x4c>)
 8001fa2:	f7ff fa5f 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001faa:	480a      	ldr	r0, [pc, #40]	; (8001fd4 <FND_five+0x4c>)
 8001fac:	f7ff fa5a 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <FND_five+0x48>)
 8001fb4:	f7ff fa64 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <FND_five+0x48>)
 8001fbc:	f7ff fa52 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <FND_five+0x4c>)
 8001fc6:	f7ff fa4d 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <FND_six>:

void FND_six(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <FND_six+0x48>)
 8001fe2:	f7ff fa3f 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001fe6:	2180      	movs	r1, #128	; 0x80
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <FND_six+0x4c>)
 8001fea:	f7ff fa49 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001fee:	2140      	movs	r1, #64	; 0x40
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <FND_six+0x4c>)
 8001ff2:	f7ff fa37 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffa:	480a      	ldr	r0, [pc, #40]	; (8002024 <FND_six+0x4c>)
 8001ffc:	f7ff fa32 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002000:	2102      	movs	r1, #2
 8002002:	4807      	ldr	r0, [pc, #28]	; (8002020 <FND_six+0x48>)
 8002004:	f7ff fa2e 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002008:	2101      	movs	r1, #1
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <FND_six+0x48>)
 800200c:	f7ff fa2a 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002014:	4803      	ldr	r0, [pc, #12]	; (8002024 <FND_six+0x4c>)
 8002016:	f7ff fa25 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40020800 	.word	0x40020800
 8002024:	40020400 	.word	0x40020400

08002028 <FND_seven>:

void FND_seven(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 800202c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002030:	480f      	ldr	r0, [pc, #60]	; (8002070 <FND_seven+0x48>)
 8002032:	f7ff fa17 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	480e      	ldr	r0, [pc, #56]	; (8002074 <FND_seven+0x4c>)
 800203a:	f7ff fa13 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <FND_seven+0x4c>)
 8002042:	f7ff fa0f 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8002046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204a:	480a      	ldr	r0, [pc, #40]	; (8002074 <FND_seven+0x4c>)
 800204c:	f7ff fa18 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002050:	2102      	movs	r1, #2
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <FND_seven+0x48>)
 8002054:	f7ff fa14 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002058:	2101      	movs	r1, #1
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <FND_seven+0x48>)
 800205c:	f7ff fa10 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <FND_seven+0x4c>)
 8002066:	f7ff fa0b 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020800 	.word	0x40020800
 8002074:	40020400 	.word	0x40020400

08002078 <FND_eight>:

void FND_eight(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 800207c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002080:	480f      	ldr	r0, [pc, #60]	; (80020c0 <FND_eight+0x48>)
 8002082:	f7ff f9ef 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <FND_eight+0x4c>)
 800208a:	f7ff f9eb 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <FND_eight+0x4c>)
 8002092:	f7ff f9e7 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8002096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209a:	480a      	ldr	r0, [pc, #40]	; (80020c4 <FND_eight+0x4c>)
 800209c:	f7ff f9e2 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80020a0:	2102      	movs	r1, #2
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <FND_eight+0x48>)
 80020a4:	f7ff f9de 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80020a8:	2101      	movs	r1, #1
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <FND_eight+0x48>)
 80020ac:	f7ff f9da 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80020b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <FND_eight+0x4c>)
 80020b6:	f7ff f9d5 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020400 	.word	0x40020400

080020c8 <FND_nine>:
void FND_nine(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80020cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020d0:	480f      	ldr	r0, [pc, #60]	; (8002110 <FND_nine+0x48>)
 80020d2:	f7ff f9c7 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	480e      	ldr	r0, [pc, #56]	; (8002114 <FND_nine+0x4c>)
 80020da:	f7ff f9c3 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	480c      	ldr	r0, [pc, #48]	; (8002114 <FND_nine+0x4c>)
 80020e2:	f7ff f9bf 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80020e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ea:	480a      	ldr	r0, [pc, #40]	; (8002114 <FND_nine+0x4c>)
 80020ec:	f7ff f9ba 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80020f0:	2102      	movs	r1, #2
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <FND_nine+0x48>)
 80020f4:	f7ff f9c4 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80020f8:	2101      	movs	r1, #1
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <FND_nine+0x48>)
 80020fc:	f7ff f9b2 	bl	8001464 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <FND_nine+0x4c>)
 8002106:	f7ff f9ad 	bl	8001464 <LL_GPIO_SetOutputPin>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020800 	.word	0x40020800
 8002114:	40020400 	.word	0x40020400

08002118 <turn_off>:

void turn_off(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 800211c:	2104      	movs	r1, #4
 800211e:	4809      	ldr	r0, [pc, #36]	; (8002144 <turn_off+0x2c>)
 8002120:	f7ff f9ae 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8002124:	2120      	movs	r1, #32
 8002126:	4808      	ldr	r0, [pc, #32]	; (8002148 <turn_off+0x30>)
 8002128:	f7ff f9aa 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 800212c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <turn_off+0x2c>)
 8002132:	f7ff f9a5 	bl	8001480 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8002136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213a:	4802      	ldr	r0, [pc, #8]	; (8002144 <turn_off+0x2c>)
 800213c:	f7ff f9a0 	bl	8001480 <LL_GPIO_ResetOutputPin>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020800 	.word	0x40020800
 8002148:	40020400 	.word	0x40020400

0800214c <InitUartQueue>:

UARTQUEUE LiDARQueue;
UARTQUEUE ViewerQueue;

void InitUartQueue(pUARTQUEUE pQueue)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    pQueue->data = pQueue->head = pQueue->tail = 0;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	785a      	ldrb	r2, [r3, #1]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	709a      	strb	r2, [r3, #2]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <PutDataToUartQueue>:

void PutDataToUartQueue(UART_HandleTypeDef *huart, uint8_t data)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <PutDataToUartQueue+0x5c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <PutDataToUartQueue+0x1a>
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <PutDataToUartQueue+0x60>)
 8002190:	e000      	b.n	8002194 <PutDataToUartQueue+0x1c>
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <PutDataToUartQueue+0x64>)
 8002194:	60fb      	str	r3, [r7, #12]
    // if (pQueue->data == QUEUE_BUFFER_LENGTH)
    //     GetDataFromUartQueue(huart);
    pQueue->Buffer[pQueue->head++] = data;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	b2d1      	uxtb	r1, r2
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	7011      	strb	r1, [r2, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	70da      	strb	r2, [r3, #3]
    if (pQueue->head == QUEUE_BUFFER_LENGTH)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2bff      	cmp	r3, #255	; 0xff
 80021b2:	d102      	bne.n	80021ba <PutDataToUartQueue+0x42>
        pQueue->head = 0;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]
    pQueue->data++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	789b      	ldrb	r3, [r3, #2]
 80021be:	3301      	adds	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	709a      	strb	r2, [r3, #2]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40005000 	.word	0x40005000
 80021d8:	2000018c 	.word	0x2000018c
 80021dc:	20000088 	.word	0x20000088

080021e0 <GetDataFromUartQueue>:

uint8_t GetDataFromUartQueue(UART_HandleTypeDef *huart)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    uint8_t ret;

    // UART_HandleTypeDef *dst = (huart->Instance == USART5 ? &hMonitor : &hViewer);
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <GetDataFromUartQueue+0x5c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <GetDataFromUartQueue+0x16>
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <GetDataFromUartQueue+0x60>)
 80021f4:	e000      	b.n	80021f8 <GetDataFromUartQueue+0x18>
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <GetDataFromUartQueue+0x64>)
 80021f8:	60fb      	str	r3, [r7, #12]
    // if (HAL_UART_Transmit(dst, pQueue->Buffer + pQueue->tail, 1, 3000) != HAL_OK)
    // {
    //     Error_Handler(__FILE__, __LINE__);
    // }
    ret = pQueue->Buffer[pQueue->tail];
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	78db      	ldrb	r3, [r3, #3]
 8002206:	72fb      	strb	r3, [r7, #11]
    pQueue->tail++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	3301      	adds	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	705a      	strb	r2, [r3, #1]
    if (pQueue->tail == QUEUE_BUFFER_LENGTH)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	785b      	ldrb	r3, [r3, #1]
 8002218:	2bff      	cmp	r3, #255	; 0xff
 800221a:	d102      	bne.n	8002222 <GetDataFromUartQueue+0x42>
        pQueue->tail = 0;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
    pQueue->data--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	789b      	ldrb	r3, [r3, #2]
 8002226:	3b01      	subs	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	709a      	strb	r2, [r3, #2]
    return ret;
 800222e:	7afb      	ldrb	r3, [r7, #11]
    HAL_Delay(1);
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40005000 	.word	0x40005000
 8002240:	2000018c 	.word	0x2000018c
 8002244:	20000088 	.word	0x20000088

08002248 <Info_status>:
uint8_t Detect_Check_Count = 0;
uint8_t VIEWER_RX_BUFF[9] = {0};
uint8_t VIEWER_RX_Cnt = 0;

void Info_status(void)
{
 8002248:	b598      	push	{r3, r4, r7, lr}
 800224a:	af00      	add	r7, sp, #0
    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe fe9b 	bl	8000f88 <LiDAR_Protocol_Tx>
    Delay_ms(10);
 8002252:	200a      	movs	r0, #10
 8002254:	f7fe faa0 	bl	8000798 <Delay_ms>
    while (LiDARQueue.data > 0)
 8002258:	e00d      	b.n	8002276 <Info_status+0x2e>
    {
        INFO_RX_BUFF[INFO_RX_Cnt++] = GetDataFromUartQueue(&hLiDAR);
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <Info_status+0x5c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	b2d1      	uxtb	r1, r2
 8002262:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <Info_status+0x5c>)
 8002264:	7011      	strb	r1, [r2, #0]
 8002266:	461c      	mov	r4, r3
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <Info_status+0x60>)
 800226a:	f7ff ffb9 	bl	80021e0 <GetDataFromUartQueue>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <Info_status+0x64>)
 8002274:	551a      	strb	r2, [r3, r4]
    while (LiDARQueue.data > 0)
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <Info_status+0x68>)
 8002278:	789b      	ldrb	r3, [r3, #2]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ed      	bne.n	800225a <Info_status+0x12>
    }
    if (INFO_RX_BUFF[0] != 0x00)
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <Info_status+0x64>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <Info_status+0x58>
    {
        // LiDAR_Model = temp_INFO_DATA[10];
        LiDAR_Model = INFO_RX_BUFF[10]; //원래 11
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <Info_status+0x64>)
 8002288:	7a9a      	ldrb	r2, [r3, #10]
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <Info_status+0x6c>)
 800228c:	701a      	strb	r2, [r3, #0]
        INFO_RX_Flag = 1;
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <Info_status+0x70>)
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
        INFO_RX_Cnt = 0;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <Info_status+0x5c>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
        g_Status = kStatus_Detect1;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <Info_status+0x74>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    }
}
 80022a0:	bf00      	nop
 80022a2:	bd98      	pop	{r3, r4, r7, pc}
 80022a4:	2000029d 	.word	0x2000029d
 80022a8:	20000344 	.word	0x20000344
 80022ac:	20000290 	.word	0x20000290
 80022b0:	20000088 	.word	0x20000088
 80022b4:	2000029e 	.word	0x2000029e
 80022b8:	2000028f 	.word	0x2000028f
 80022bc:	20000084 	.word	0x20000084

080022c0 <Detect1_status>:

void Detect1_status(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 10 && Detect1_Result != 0x01U)
 80022c4:	e013      	b.n	80022ee <Detect1_status+0x2e>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT1);
 80022c6:	2002      	movs	r0, #2
 80022c8:	f7fe fe5e 	bl	8000f88 <LiDAR_Protocol_Tx>
        Delay_ms(1);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7fe fa63 	bl	8000798 <Delay_ms>
        Detect1_Result = HAL_GPIO_ReadPin(Detect_SIG_1_GPIO_Port, Detect_SIG_1_Pin);
 80022d2:	2110      	movs	r1, #16
 80022d4:	4813      	ldr	r0, [pc, #76]	; (8002324 <Detect1_status+0x64>)
 80022d6:	f001 fd4f 	bl	8003d78 <HAL_GPIO_ReadPin>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <Detect1_status+0x68>)
 80022e0:	701a      	strb	r2, [r3, #0]

        Detect_Check_Count++;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <Detect1_status+0x6c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <Detect1_status+0x6c>)
 80022ec:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 10 && Detect1_Result != 0x01U)
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <Detect1_status+0x6c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b09      	cmp	r3, #9
 80022f4:	d803      	bhi.n	80022fe <Detect1_status+0x3e>
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <Detect1_status+0x68>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d1e3      	bne.n	80022c6 <Detect1_status+0x6>
    }

    Detect1_Flag = 1;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <Detect1_status+0x70>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
    Detect_Check_Count = 0;
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <Detect1_status+0x6c>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
    if (LiDAR_Model == 0x04) // R300
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <Detect1_status+0x74>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d103      	bne.n	800231a <Detect1_status+0x5a>
    {
        g_Status = kStatus_Detect3;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <Detect1_status+0x78>)
 8002314:	2203      	movs	r2, #3
 8002316:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_Status = kStatus_Detect2;
    }
}
 8002318:	e002      	b.n	8002320 <Detect1_status+0x60>
        g_Status = kStatus_Detect2;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <Detect1_status+0x78>)
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40020000 	.word	0x40020000
 8002328:	2000029f 	.word	0x2000029f
 800232c:	200002a5 	.word	0x200002a5
 8002330:	200002a0 	.word	0x200002a0
 8002334:	2000029e 	.word	0x2000029e
 8002338:	20000084 	.word	0x20000084

0800233c <Detect2_status>:

void Detect2_status(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 10 && Detect2_Result != 0x01U)
 8002340:	e013      	b.n	800236a <Detect2_status+0x2e>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT2);
 8002342:	2003      	movs	r0, #3
 8002344:	f7fe fe20 	bl	8000f88 <LiDAR_Protocol_Tx>
        Delay_ms(1);
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe fa25 	bl	8000798 <Delay_ms>
        Detect2_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 800234e:	2120      	movs	r1, #32
 8002350:	480f      	ldr	r0, [pc, #60]	; (8002390 <Detect2_status+0x54>)
 8002352:	f001 fd11 	bl	8003d78 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <Detect2_status+0x58>)
 800235c:	701a      	strb	r2, [r3, #0]

        Detect_Check_Count++;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <Detect2_status+0x5c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <Detect2_status+0x5c>)
 8002368:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 10 && Detect2_Result != 0x01U)
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <Detect2_status+0x5c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b09      	cmp	r3, #9
 8002370:	d803      	bhi.n	800237a <Detect2_status+0x3e>
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <Detect2_status+0x58>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d1e3      	bne.n	8002342 <Detect2_status+0x6>
    }

    Detect2_Flag = 1;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <Detect2_status+0x60>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    Detect_Check_Count = 0;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <Detect2_status+0x5c>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Detect3;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <Detect2_status+0x64>)
 8002388:	2203      	movs	r2, #3
 800238a:	701a      	strb	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020000 	.word	0x40020000
 8002394:	200002a1 	.word	0x200002a1
 8002398:	200002a5 	.word	0x200002a5
 800239c:	200002a2 	.word	0x200002a2
 80023a0:	20000084 	.word	0x20000084

080023a4 <Detect3_status>:

void Detect3_status(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 10 && Detect3_Result != 0x01U)
 80023a8:	e020      	b.n	80023ec <Detect3_status+0x48>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT3);
 80023aa:	2004      	movs	r0, #4
 80023ac:	f7fe fdec 	bl	8000f88 <LiDAR_Protocol_Tx>
        Delay_ms(5);
 80023b0:	2005      	movs	r0, #5
 80023b2:	f7fe f9f1 	bl	8000798 <Delay_ms>
        if (LiDAR_Model == 0x04) // R300
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <Detect3_status+0x70>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d108      	bne.n	80023d0 <Detect3_status+0x2c>
        {
            Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 80023be:	2120      	movs	r1, #32
 80023c0:	4815      	ldr	r0, [pc, #84]	; (8002418 <Detect3_status+0x74>)
 80023c2:	f001 fcd9 	bl	8003d78 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <Detect3_status+0x78>)
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e007      	b.n	80023e0 <Detect3_status+0x3c>
        }
        else
        {
            Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_3_GPIO_Port, Detect_SIG_3_Pin);
 80023d0:	2140      	movs	r1, #64	; 0x40
 80023d2:	4811      	ldr	r0, [pc, #68]	; (8002418 <Detect3_status+0x74>)
 80023d4:	f001 fcd0 	bl	8003d78 <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <Detect3_status+0x78>)
 80023de:	701a      	strb	r2, [r3, #0]
        }

        Detect_Check_Count++;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <Detect3_status+0x7c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <Detect3_status+0x7c>)
 80023ea:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 10 && Detect3_Result != 0x01U)
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <Detect3_status+0x7c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	d803      	bhi.n	80023fc <Detect3_status+0x58>
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <Detect3_status+0x78>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d1d6      	bne.n	80023aa <Detect3_status+0x6>
    }

    Detect3_Flag = 1;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <Detect3_status+0x80>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
    Detect_Check_Count = 0;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <Detect3_status+0x7c>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Idle;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <Detect3_status+0x84>)
 800240a:	2204      	movs	r2, #4
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000029e 	.word	0x2000029e
 8002418:	40020000 	.word	0x40020000
 800241c:	200002a3 	.word	0x200002a3
 8002420:	200002a5 	.word	0x200002a5
 8002424:	200002a4 	.word	0x200002a4
 8002428:	20000084 	.word	0x20000084

0800242c <Idle_status>:

void Idle_status(void)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b097      	sub	sp, #92	; 0x5c
 8002430:	af00      	add	r7, sp, #0
    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 8002432:	4a76      	ldr	r2, [pc, #472]	; (800260c <Idle_status+0x1e0>)
 8002434:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002438:	ca07      	ldmia	r2, {r0, r1, r2}
 800243a:	c303      	stmia	r3!, {r0, r1}
 800243c:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 800243e:	4a74      	ldr	r2, [pc, #464]	; (8002610 <Idle_status+0x1e4>)
 8002440:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002444:	ca07      	ldmia	r2, {r0, r1, r2}
 8002446:	c303      	stmia	r3!, {r0, r1}
 8002448:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 800244a:	4a72      	ldr	r2, [pc, #456]	; (8002614 <Idle_status+0x1e8>)
 800244c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002450:	ca07      	ldmia	r2, {r0, r1, r2}
 8002452:	c303      	stmia	r3!, {r0, r1}
 8002454:	701a      	strb	r2, [r3, #0]
    uint8_t START_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x24};
 8002456:	4a70      	ldr	r2, [pc, #448]	; (8002618 <Idle_status+0x1ec>)
 8002458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800245c:	ca07      	ldmia	r2, {r0, r1, r2}
 800245e:	c303      	stmia	r3!, {r0, r1}
 8002460:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT1_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x27};
 8002462:	4a6e      	ldr	r2, [pc, #440]	; (800261c <Idle_status+0x1f0>)
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	ca07      	ldmia	r2, {r0, r1, r2}
 800246a:	c303      	stmia	r3!, {r0, r1}
 800246c:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT2_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x26};
 800246e:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <Idle_status+0x1f4>)
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	ca07      	ldmia	r2, {r0, r1, r2}
 8002476:	c303      	stmia	r3!, {r0, r1}
 8002478:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT3_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x21};
 800247a:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <Idle_status+0x1f8>)
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002480:	c303      	stmia	r3!, {r0, r1}
 8002482:	701a      	strb	r2, [r3, #0]
    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Cur_Check();
 8002484:	f7fe f8d6 	bl	8000634 <LiDAR_Cur_Check>

    while (ViewerQueue.data > 0)
 8002488:	e00d      	b.n	80024a6 <Idle_status+0x7a>
    {
        VIEWER_RX_BUFF[VIEWER_RX_Cnt++] = GetDataFromUartQueue(&hViewer);
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <Idle_status+0x1fc>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	b2d1      	uxtb	r1, r2
 8002492:	4a65      	ldr	r2, [pc, #404]	; (8002628 <Idle_status+0x1fc>)
 8002494:	7011      	strb	r1, [r2, #0]
 8002496:	461c      	mov	r4, r3
 8002498:	4864      	ldr	r0, [pc, #400]	; (800262c <Idle_status+0x200>)
 800249a:	f7ff fea1 	bl	80021e0 <GetDataFromUartQueue>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <Idle_status+0x204>)
 80024a4:	551a      	strb	r2, [r3, r4]
    while (ViewerQueue.data > 0)
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <Idle_status+0x208>)
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ed      	bne.n	800248a <Idle_status+0x5e>
    }

    if (memcmp(&CONNECT_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC Connect
 80024ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024b2:	2209      	movs	r2, #9
 80024b4:	495e      	ldr	r1, [pc, #376]	; (8002630 <Idle_status+0x204>)
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fc56 	bl	8006d68 <memcmp>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <Idle_status+0xb6>
    {
        GUI_Protocol_Tx(GUI_COMMAND_CONNECT, 0);
 80024c2:	2100      	movs	r1, #0
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fddf 	bl	8001088 <GUI_Protocol_Tx>
        connect = 1;
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <Idle_status+0x20c>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80024d0:	2209      	movs	r2, #9
 80024d2:	2100      	movs	r1, #0
 80024d4:	4856      	ldr	r0, [pc, #344]	; (8002630 <Idle_status+0x204>)
 80024d6:	f004 fc57 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 80024da:	4b53      	ldr	r3, [pc, #332]	; (8002628 <Idle_status+0x1fc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
        VIEWER_RX_Cnt = 0;
    }
    else
    {
    }
}
 80024e0:	e08f      	b.n	8002602 <Idle_status+0x1d6>
    else if (memcmp(&INFO_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Info request
 80024e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024e6:	2209      	movs	r2, #9
 80024e8:	4951      	ldr	r1, [pc, #324]	; (8002630 <Idle_status+0x204>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 fc3c 	bl	8006d68 <memcmp>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10e      	bne.n	8002514 <Idle_status+0xe8>
        HAL_UART_Transmit(&hViewer, INFO_RX_BUFF, sizeof(INFO_RX_BUFF), 100);
 80024f6:	2364      	movs	r3, #100	; 0x64
 80024f8:	220d      	movs	r2, #13
 80024fa:	4950      	ldr	r1, [pc, #320]	; (800263c <Idle_status+0x210>)
 80024fc:	484b      	ldr	r0, [pc, #300]	; (800262c <Idle_status+0x200>)
 80024fe:	f003 f948 	bl	8005792 <HAL_UART_Transmit>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002502:	2209      	movs	r2, #9
 8002504:	2100      	movs	r1, #0
 8002506:	484a      	ldr	r0, [pc, #296]	; (8002630 <Idle_status+0x204>)
 8002508:	f004 fc3e 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 800250c:	4b46      	ldr	r3, [pc, #280]	; (8002628 <Idle_status+0x1fc>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
}
 8002512:	e076      	b.n	8002602 <Idle_status+0x1d6>
    else if (memcmp(&DETECT1_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	2209      	movs	r2, #9
 800251a:	4945      	ldr	r1, [pc, #276]	; (8002630 <Idle_status+0x204>)
 800251c:	4618      	mov	r0, r3
 800251e:	f004 fc23 	bl	8006d68 <memcmp>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10e      	bne.n	8002546 <Idle_status+0x11a>
        GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT1, Detect1_Result);
 8002528:	4b45      	ldr	r3, [pc, #276]	; (8002640 <Idle_status+0x214>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	2002      	movs	r0, #2
 8002530:	f7fe ff1a 	bl	8001368 <GUI_Protocol_Detect_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002534:	2209      	movs	r2, #9
 8002536:	2100      	movs	r1, #0
 8002538:	483d      	ldr	r0, [pc, #244]	; (8002630 <Idle_status+0x204>)
 800253a:	f004 fc25 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 800253e:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <Idle_status+0x1fc>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
}
 8002544:	e05d      	b.n	8002602 <Idle_status+0x1d6>
    else if (memcmp(&DETECT2_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	2209      	movs	r2, #9
 800254c:	4938      	ldr	r1, [pc, #224]	; (8002630 <Idle_status+0x204>)
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fc0a 	bl	8006d68 <memcmp>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10e      	bne.n	8002578 <Idle_status+0x14c>
        GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT2, Detect2_Result);
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <Idle_status+0x218>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	2003      	movs	r0, #3
 8002562:	f7fe ff01 	bl	8001368 <GUI_Protocol_Detect_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002566:	2209      	movs	r2, #9
 8002568:	2100      	movs	r1, #0
 800256a:	4831      	ldr	r0, [pc, #196]	; (8002630 <Idle_status+0x204>)
 800256c:	f004 fc0c 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <Idle_status+0x1fc>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
}
 8002576:	e044      	b.n	8002602 <Idle_status+0x1d6>
    else if (memcmp(&DETECT3_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2209      	movs	r2, #9
 800257c:	492c      	ldr	r1, [pc, #176]	; (8002630 <Idle_status+0x204>)
 800257e:	4618      	mov	r0, r3
 8002580:	f004 fbf2 	bl	8006d68 <memcmp>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10e      	bne.n	80025a8 <Idle_status+0x17c>
        GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT3, Detect3_Result);
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <Idle_status+0x21c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	2004      	movs	r0, #4
 8002592:	f7fe fee9 	bl	8001368 <GUI_Protocol_Detect_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002596:	2209      	movs	r2, #9
 8002598:	2100      	movs	r1, #0
 800259a:	4825      	ldr	r0, [pc, #148]	; (8002630 <Idle_status+0x204>)
 800259c:	f004 fbf4 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 80025a0:	4b21      	ldr	r3, [pc, #132]	; (8002628 <Idle_status+0x1fc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
}
 80025a6:	e02c      	b.n	8002602 <Idle_status+0x1d6>
    else if (memcmp(&MODE_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 80025a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025ac:	2209      	movs	r2, #9
 80025ae:	4920      	ldr	r1, [pc, #128]	; (8002630 <Idle_status+0x204>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 fbd9 	bl	8006d68 <memcmp>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <Idle_status+0x1ac>
        GUI_Protocol_Mode_Tx(Mode_data);
 80025bc:	4b23      	ldr	r3, [pc, #140]	; (800264c <Idle_status+0x220>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fe49 	bl	8001258 <GUI_Protocol_Mode_Tx>
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80025c6:	2209      	movs	r2, #9
 80025c8:	2100      	movs	r1, #0
 80025ca:	4819      	ldr	r0, [pc, #100]	; (8002630 <Idle_status+0x204>)
 80025cc:	f004 fbdc 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <Idle_status+0x1fc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
}
 80025d6:	e014      	b.n	8002602 <Idle_status+0x1d6>
    else if (memcmp(&START_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 80025d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025dc:	2209      	movs	r2, #9
 80025de:	4914      	ldr	r1, [pc, #80]	; (8002630 <Idle_status+0x204>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fbc1 	bl	8006d68 <memcmp>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <Idle_status+0x1d6>
        g_Status = kStatus_Test;
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <Idle_status+0x224>)
 80025ee:	2205      	movs	r2, #5
 80025f0:	701a      	strb	r2, [r3, #0]
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80025f2:	2209      	movs	r2, #9
 80025f4:	2100      	movs	r1, #0
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <Idle_status+0x204>)
 80025f8:	f004 fbc6 	bl	8006d88 <memset>
        VIEWER_RX_Cnt = 0;
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <Idle_status+0x1fc>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	375c      	adds	r7, #92	; 0x5c
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	08006dd0 	.word	0x08006dd0
 8002610:	08006ddc 	.word	0x08006ddc
 8002614:	08006de8 	.word	0x08006de8
 8002618:	08006df4 	.word	0x08006df4
 800261c:	08006e00 	.word	0x08006e00
 8002620:	08006e0c 	.word	0x08006e0c
 8002624:	08006e18 	.word	0x08006e18
 8002628:	200002b1 	.word	0x200002b1
 800262c:	20000300 	.word	0x20000300
 8002630:	200002a8 	.word	0x200002a8
 8002634:	2000018c 	.word	0x2000018c
 8002638:	2000028e 	.word	0x2000028e
 800263c:	20000290 	.word	0x20000290
 8002640:	2000029f 	.word	0x2000029f
 8002644:	200002a1 	.word	0x200002a1
 8002648:	200002a3 	.word	0x200002a3
 800264c:	200002b2 	.word	0x200002b2
 8002650:	20000084 	.word	0x20000084

08002654 <Test_status>:

void Test_status(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	; 0x30
 8002658:	af00      	add	r7, sp, #0
    uint8_t ETH_BUFF[6] = {' ', 'E', 't', 'h', 'e', 'r'};
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <Test_status+0x7c>)
 800265c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002664:	6018      	str	r0, [r3, #0]
 8002666:	3304      	adds	r3, #4
 8002668:	8019      	strh	r1, [r3, #0]
    uint8_t APD_BUFF[6] = {' ', 'A', 'P', 'D', ' ', 'B'};
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <Test_status+0x80>)
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002674:	6018      	str	r0, [r3, #0]
 8002676:	3304      	adds	r3, #4
 8002678:	8019      	strh	r1, [r3, #0]
    uint8_t MOT_BUFF[6] = {' ', 'M', 'o', 't', 'o', 'r'};
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <Test_status+0x84>)
 800267c:	f107 0318 	add.w	r3, r7, #24
 8002680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002684:	6018      	str	r0, [r3, #0]
 8002686:	3304      	adds	r3, #4
 8002688:	8019      	strh	r1, [r3, #0]
    uint8_t ENC_BUFF[6] = {' ', 'E', 'n', 'c', 'o', 'd'};
 800268a:	4a14      	ldr	r2, [pc, #80]	; (80026dc <Test_status+0x88>)
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002694:	6018      	str	r0, [r3, #0]
 8002696:	3304      	adds	r3, #4
 8002698:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_INIT_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'I'};
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <Test_status+0x8c>)
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a4:	6018      	str	r0, [r3, #0]
 80026a6:	3304      	adds	r3, #4
 80026a8:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_CAL_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'C'};
 80026aa:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <Test_status+0x90>)
 80026ac:	463b      	mov	r3, r7
 80026ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026b2:	6018      	str	r0, [r3, #0]
 80026b4:	3304      	adds	r3, #4
 80026b6:	8019      	strh	r1, [r3, #0]

    LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fc65 	bl	8000f88 <LiDAR_Protocol_Tx>
    Delay_ms(500);
 80026be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026c2:	f7fe f869 	bl	8000798 <Delay_ms>
}
 80026c6:	bf00      	nop
 80026c8:	3730      	adds	r7, #48	; 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08006e24 	.word	0x08006e24
 80026d4:	08006e2c 	.word	0x08006e2c
 80026d8:	08006e34 	.word	0x08006e34
 80026dc:	08006e3c 	.word	0x08006e3c
 80026e0:	08006e44 	.word	0x08006e44
 80026e4:	08006e4c 	.word	0x08006e4c

080026e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4013      	ands	r3, r2
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40013c00 	.word	0x40013c00

08002764 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6153      	str	r3, [r2, #20]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40013c00 	.word	0x40013c00

08002784 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <NMI_Handler+0x4>

0800278a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278e:	e7fe      	b.n	800278e <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <MemManage_Handler+0x4>

08002796 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a2 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d0:	f000 fb6a 	bl	8002ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 interrupt.
 */
void EXTI0_IRQHandler(void) // mode switch
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 80027dc:	f000 f86a 	bl	80028b4 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80027e0:	2001      	movs	r0, #1
 80027e2:	f7ff ffa9 	bl	8002738 <LL_EXTI_IsActiveFlag_0_31>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff ffb9 	bl	8002764 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) // start button
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  EXTI15_10_EXTI_Callback();
 80027fa:	f000 faa9 	bl	8002d50 <EXTI15_10_EXTI_Callback>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80027fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002802:	f7ff ff99 	bl	8002738 <LL_EXTI_IsActiveFlag_0_31>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800280c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002810:	f7ff ffa8 	bl	8002764 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  HAL_UART5_RxCpltCallback();
 800281c:	f000 fa66 	bl	8002cec <HAL_UART5_RxCpltCallback>
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <UART5_IRQHandler+0x14>)
 8002822:	f003 f879 	bl	8005918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000300 	.word	0x20000300

08002830 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&hLiDAR, UART_FLAG_RXNE) != RESET))
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <USART6_IRQHandler+0x44>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b20      	cmp	r3, #32
 8002842:	d107      	bne.n	8002854 <USART6_IRQHandler+0x24>
  {
    PutDataToUartQueue(&hLiDAR, (uint8_t)(hLiDAR.Instance->DR & (uint8_t)0x00FF));
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <USART6_IRQHandler+0x44>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4619      	mov	r1, r3
 800284e:	4809      	ldr	r0, [pc, #36]	; (8002874 <USART6_IRQHandler+0x44>)
 8002850:	f7ff fc92 	bl	8002178 <PutDataToUartQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&hLiDAR); /* clear event flag */
 8002854:	2300      	movs	r3, #0
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <USART6_IRQHandler+0x44>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <USART6_IRQHandler+0x44>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
  return;
 800286a:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000344 	.word	0x20000344

08002878 <LL_GPIO_SetOutputPin>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	619a      	str	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_GPIO_ResetOutputPin>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	041a      	lsls	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 80028b8:	2101      	movs	r1, #1
 80028ba:	4815      	ldr	r0, [pc, #84]	; (8002910 <switch_check+0x5c>)
 80028bc:	f001 fa5c 	bl	8003d78 <HAL_GPIO_ReadPin>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d013      	beq.n	80028ee <switch_check+0x3a>
    {
        Mode_data = 0x00U;
 80028c6:	4b13      	ldr	r3, [pc, #76]	; (8002914 <switch_check+0x60>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80028cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028d0:	480f      	ldr	r0, [pc, #60]	; (8002910 <switch_check+0x5c>)
 80028d2:	f7ff ffd1 	bl	8002878 <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	480f      	ldr	r0, [pc, #60]	; (8002918 <switch_check+0x64>)
 80028da:	f7ff ffdb 	bl	8002894 <LL_GPIO_ResetOutputPin>
        if (connect)
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <switch_check+0x68>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <switch_check+0x58>
        {
            // HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // Viewer start button enable only
            g_Start_Switch_IRQ_Flag = 0;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <switch_check+0x6c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
        // HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
        g_Start_Switch_IRQ_Flag = 1;
    }
 80028ec:	e00e      	b.n	800290c <switch_check+0x58>
        Mode_data = 0x01U;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <switch_check+0x60>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80028f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <switch_check+0x5c>)
 80028fa:	f7ff ffcb 	bl	8002894 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <switch_check+0x64>)
 8002902:	f7ff ffb9 	bl	8002878 <LL_GPIO_SetOutputPin>
        g_Start_Switch_IRQ_Flag = 1;
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <switch_check+0x6c>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40020400 	.word	0x40020400
 8002914:	200002b2 	.word	0x200002b2
 8002918:	40020000 	.word	0x40020000
 800291c:	2000028e 	.word	0x2000028e
 8002920:	20000009 	.word	0x20000009

08002924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <SystemInit+0x20>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	4a05      	ldr	r2, [pc, #20]	; (8002944 <SystemInit+0x20>)
 8002930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08e      	sub	sp, #56	; 0x38
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
 8002974:	615a      	str	r2, [r3, #20]
 8002976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <MX_TIM3_Init+0xe4>)
 800297a:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <MX_TIM3_Init+0xe8>)
 800297c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <MX_TIM3_Init+0xe4>)
 8002980:	222c      	movs	r2, #44	; 0x2c
 8002982:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <MX_TIM3_Init+0xe4>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <MX_TIM3_Init+0xe4>)
 800298c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <MX_TIM3_Init+0xe4>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <MX_TIM3_Init+0xe4>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800299e:	4823      	ldr	r0, [pc, #140]	; (8002a2c <MX_TIM3_Init+0xe4>)
 80029a0:	f001 ffb4 	bl	800490c <HAL_TIM_Base_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80029aa:	f7fe fae7 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b8:	4619      	mov	r1, r3
 80029ba:	481c      	ldr	r0, [pc, #112]	; (8002a2c <MX_TIM3_Init+0xe4>)
 80029bc:	f002 fa48 	bl	8004e50 <HAL_TIM_ConfigClockSource>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80029c6:	f7fe fad9 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029ca:	4818      	ldr	r0, [pc, #96]	; (8002a2c <MX_TIM3_Init+0xe4>)
 80029cc:	f001 ffed 	bl	80049aa <HAL_TIM_PWM_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80029d6:	f7fe fad1 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e2:	f107 0320 	add.w	r3, r7, #32
 80029e6:	4619      	mov	r1, r3
 80029e8:	4810      	ldr	r0, [pc, #64]	; (8002a2c <MX_TIM3_Init+0xe4>)
 80029ea:	f002 fe09 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80029f4:	f7fe fac2 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f8:	2360      	movs	r3, #96	; 0x60
 80029fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 80029fc:	23f9      	movs	r3, #249	; 0xf9
 80029fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4807      	ldr	r0, [pc, #28]	; (8002a2c <MX_TIM3_Init+0xe4>)
 8002a10:	f002 f95c 	bl	8004ccc <HAL_TIM_PWM_ConfigChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002a1a:	f7fe faaf 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <MX_TIM3_Init+0xe4>)
 8002a20:	f000 f82a 	bl	8002a78 <HAL_TIM_MspPostInit>

}
 8002a24:	bf00      	nop
 8002a26:	3738      	adds	r7, #56	; 0x38
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200002b4 	.word	0x200002b4
 8002a30:	40000400 	.word	0x40000400

08002a34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_TIM_Base_MspInit+0x3c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10d      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_TIM_Base_MspInit+0x40>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_TIM_Base_MspInit+0x40>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_TIM_Base_MspInit+0x40>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_TIM_MspPostInit+0x68>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d11e      	bne.n	8002ad8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_TIM_MspPostInit+0x6c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	; (8002ae8 <HAL_TIM_MspPostInit+0x70>)
 8002ad4:	f000 ffbc 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020800 	.word	0x40020800

08002aec <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <MX_UART5_Init+0x50>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002afc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_UART5_Init+0x4c>)
 8002b24:	f002 fde8 	bl	80056f8 <HAL_UART_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002b2e:	f7fe fa25 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000300 	.word	0x20000300
 8002b3c:	40005000 	.word	0x40005000

08002b40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <MX_USART6_UART_Init+0x50>)
 8002b48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b4c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002b50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b58:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b66:	220c      	movs	r2, #12
 8002b68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <MX_USART6_UART_Init+0x4c>)
 8002b78:	f002 fdbe 	bl	80056f8 <HAL_UART_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b82:	f7fe f9fb 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000344 	.word	0x20000344
 8002b90:	40011400 	.word	0x40011400

08002b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if (uartHandle->Instance == UART5)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a49      	ldr	r2, [pc, #292]	; (8002cd8 <HAL_UART_MspInit+0x144>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d153      	bne.n	8002c5e <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a47      	ldr	r2, [pc, #284]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a39      	ldr	r2, [pc, #228]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4619      	mov	r1, r3
 8002c26:	482e      	ldr	r0, [pc, #184]	; (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002c28:	f000 ff12 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	4827      	ldr	r0, [pc, #156]	; (8002ce4 <HAL_UART_MspInit+0x150>)
 8002c48:	f000 ff02 	bl	8003a50 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2035      	movs	r0, #53	; 0x35
 8002c52:	f000 fe34 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002c56:	2035      	movs	r0, #53	; 0x35
 8002c58:	f000 fe4d 	bl	80038f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }
}
 8002c5c:	e038      	b.n	8002cd0 <HAL_UART_MspInit+0x13c>
  else if (uartHandle->Instance == USART6)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_UART_MspInit+0x154>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d133      	bne.n	8002cd0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	6453      	str	r3, [r2, #68]	; 0x44
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <HAL_UART_MspInit+0x148>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002ca0:	23c0      	movs	r3, #192	; 0xc0
 8002ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <HAL_UART_MspInit+0x14c>)
 8002cbc:	f000 fec8 	bl	8003a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2047      	movs	r0, #71	; 0x47
 8002cc6:	f000 fdfa 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002cca:	2047      	movs	r0, #71	; 0x47
 8002ccc:	f000 fe13 	bl	80038f6 <HAL_NVIC_EnableIRQ>
}
 8002cd0:	bf00      	nop
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40005000 	.word	0x40005000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020800 	.word	0x40020800
 8002ce4:	40020c00 	.word	0x40020c00
 8002ce8:	40011400 	.word	0x40011400

08002cec <HAL_UART5_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART5_RxCpltCallback(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
  if (g_Viewer_IRQ_Flag)
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_UART5_RxCpltCallback+0x58>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01a      	beq.n	8002d32 <HAL_UART5_RxCpltCallback+0x46>
  {
    if ((__HAL_UART_GET_FLAG(&hViewer, UART_FLAG_RXNE) != RESET))
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_UART5_RxCpltCallback+0x5c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d107      	bne.n	8002d1a <HAL_UART5_RxCpltCallback+0x2e>
    {
      PutDataToUartQueue(&hViewer, (uint8_t)(hViewer.Instance->DR & (uint8_t)0x00FF));
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_UART5_RxCpltCallback+0x5c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	4619      	mov	r1, r3
 8002d14:	480c      	ldr	r0, [pc, #48]	; (8002d48 <HAL_UART5_RxCpltCallback+0x5c>)
 8002d16:	f7ff fa2f 	bl	8002178 <PutDataToUartQueue>
    }
    __HAL_UART_CLEAR_PEFLAG(&hViewer); /* clear event flag */
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_UART5_RxCpltCallback+0x5c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_UART5_RxCpltCallback+0x5c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
    return;
 8002d30:	e004      	b.n	8002d3c <HAL_UART5_RxCpltCallback+0x50>
  }

  HAL_UART_Receive_IT(&hViewer, VIEWER_RX_BUFF, 1);
 8002d32:	2201      	movs	r2, #1
 8002d34:	4905      	ldr	r1, [pc, #20]	; (8002d4c <HAL_UART5_RxCpltCallback+0x60>)
 8002d36:	4804      	ldr	r0, [pc, #16]	; (8002d48 <HAL_UART5_RxCpltCallback+0x5c>)
 8002d38:	f002 fdbd 	bl	80058b6 <HAL_UART_Receive_IT>
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000008 	.word	0x20000008
 8002d48:	20000300 	.word	0x20000300
 8002d4c:	200002a8 	.word	0x200002a8

08002d50 <EXTI15_10_EXTI_Callback>:

void EXTI15_10_EXTI_Callback(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  if (g_Start_Switch_IRQ_Flag)
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <EXTI15_10_EXTI_Callback+0x4c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <EXTI15_10_EXTI_Callback+0x40>
  {
    if (Mode_data == 0) // jig mode
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <EXTI15_10_EXTI_Callback+0x50>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <EXTI15_10_EXTI_Callback+0x1e>
    {
      g_Status = kStatus_Test;
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <EXTI15_10_EXTI_Callback+0x54>)
 8002d68:	2205      	movs	r2, #5
 8002d6a:	701a      	strb	r2, [r3, #0]
        // HAL_NVIC_EnableIRQ(UART5_IRQn);
        g_Viewer_IRQ_Flag = 1;
      }
    }
  }
}
 8002d6c:	e010      	b.n	8002d90 <EXTI15_10_EXTI_Callback+0x40>
      if (tx_start_flag == 0)
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <EXTI15_10_EXTI_Callback+0x58>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <EXTI15_10_EXTI_Callback+0x34>
        tx_start_flag = 1;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <EXTI15_10_EXTI_Callback+0x58>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
        g_Viewer_IRQ_Flag = 0;
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <EXTI15_10_EXTI_Callback+0x5c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
}
 8002d82:	e005      	b.n	8002d90 <EXTI15_10_EXTI_Callback+0x40>
        tx_start_flag = 0;
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <EXTI15_10_EXTI_Callback+0x58>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
        g_Viewer_IRQ_Flag = 1;
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <EXTI15_10_EXTI_Callback+0x5c>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000009 	.word	0x20000009
 8002da0:	200002b2 	.word	0x200002b2
 8002da4:	20000084 	.word	0x20000084
 8002da8:	200002fc 	.word	0x200002fc
 8002dac:	20000008 	.word	0x20000008

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002db6:	490e      	ldr	r1, [pc, #56]	; (8002df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db8:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dcc:	4c0b      	ldr	r4, [pc, #44]	; (8002dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dda:	f7ff fda3 	bl	8002924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f003 ff9f 	bl	8006d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7fd ff95 	bl	8000d10 <main>
  bx  lr    
 8002de6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002df4:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 8002df8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002dfc:	2000038c 	.word	0x2000038c

08002e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>
	...

08002e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_Init+0x40>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_Init+0x40>)
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_Init+0x40>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_Init+0x40>)
 8002e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_Init+0x40>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_Init+0x40>)
 8002e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2c:	2003      	movs	r0, #3
 8002e2e:	f000 fd3b 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e32:	200f      	movs	r0, #15
 8002e34:	f000 f808 	bl	8002e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e38:	f7ff fc56 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00

08002e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_InitTick+0x54>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_InitTick+0x58>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fd53 	bl	8003912 <HAL_SYSTICK_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00e      	b.n	8002e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d80a      	bhi.n	8002e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f000 fd1b 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <HAL_InitTick+0x5c>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000004 	.word	0x20000004
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	2000000c 	.word	0x2000000c

08002ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_IncTick+0x20>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <HAL_IncTick+0x24>)
 8002eba:	6013      	str	r3, [r2, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	20000388 	.word	0x20000388

08002ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_GetTick+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000388 	.word	0x20000388

08002ee8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e033      	b.n	8002f66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fb50 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d118      	bne.n	8002f58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f2e:	f023 0302 	bic.w	r3, r3, #2
 8002f32:	f043 0202 	orr.w	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fae8 	bl	8003510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	f043 0201 	orr.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
 8002f56:	e001      	b.n	8002f5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Start+0x1a>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e0b2      	b.n	80030f0 <HAL_ADC_Start+0x180>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d018      	beq.n	8002fd2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb0:	4b52      	ldr	r3, [pc, #328]	; (80030fc <HAL_ADC_Start+0x18c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_ADC_Start+0x190>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9a      	lsrs	r2, r3, #18
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d17a      	bne.n	80030d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800300a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	d106      	bne.n	800302e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f023 0206 	bic.w	r2, r3, #6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
 800302c:	e002      	b.n	8003034 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_ADC_Start+0x194>)
 800303e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003048:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2b00      	cmp	r3, #0
 8003054:	d12a      	bne.n	80030ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <HAL_ADC_Start+0x198>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d015      	beq.n	800308c <HAL_ADC_Start+0x11c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <HAL_ADC_Start+0x19c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d105      	bne.n	8003076 <HAL_ADC_Start+0x106>
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_ADC_Start+0x194>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a25      	ldr	r2, [pc, #148]	; (8003110 <HAL_ADC_Start+0x1a0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d136      	bne.n	80030ee <HAL_ADC_Start+0x17e>
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_ADC_Start+0x194>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d130      	bne.n	80030ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d129      	bne.n	80030ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	e020      	b.n	80030ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a15      	ldr	r2, [pc, #84]	; (8003108 <HAL_ADC_Start+0x198>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11b      	bne.n	80030ee <HAL_ADC_Start+0x17e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d114      	bne.n	80030ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	e00b      	b.n	80030ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000004 	.word	0x20000004
 8003100:	431bde83 	.word	0x431bde83
 8003104:	40012300 	.word	0x40012300
 8003108:	40012000 	.word	0x40012000
 800310c:	40012100 	.word	0x40012100
 8003110:	40012200 	.word	0x40012200

08003114 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_ADC_Stop+0x16>
 8003126:	2302      	movs	r3, #2
 8003128:	e021      	b.n	800316e <HAL_ADC_Stop+0x5a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d113      	bne.n	80031c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a6:	d10b      	bne.n	80031c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e063      	b.n	8003288 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031c0:	f7ff fe86 	bl	8002ed0 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031c6:	e021      	b.n	800320c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ce:	d01d      	beq.n	800320c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_ADC_PollForConversion+0x6c>
 80031d6:	f7ff fe7b 	bl	8002ed0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d212      	bcs.n	800320c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d00b      	beq.n	800320c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e03d      	b.n	8003288 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d1d6      	bne.n	80031c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0212 	mvn.w	r2, #18
 8003222:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d123      	bne.n	8003286 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11f      	bne.n	8003286 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800325e:	2b00      	cmp	r3, #0
 8003260:	d111      	bne.n	8003286 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0201 	orr.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e113      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x244>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b09      	cmp	r3, #9
 80032d6:	d925      	bls.n	8003324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68d9      	ldr	r1, [r3, #12]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	3b1e      	subs	r3, #30
 80032ee:	2207      	movs	r2, #7
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43da      	mvns	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	400a      	ands	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	4603      	mov	r3, r0
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4403      	add	r3, r0
 8003316:	3b1e      	subs	r3, #30
 8003318:	409a      	lsls	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e022      	b.n	800336a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	2207      	movs	r2, #7
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6919      	ldr	r1, [r3, #16]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	4603      	mov	r3, r0
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4403      	add	r3, r0
 8003360:	409a      	lsls	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d824      	bhi.n	80033bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b05      	subs	r3, #5
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b05      	subs	r3, #5
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ba:	e04c      	b.n	8003456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d824      	bhi.n	800340e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b23      	subs	r3, #35	; 0x23
 80033d6:	221f      	movs	r2, #31
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43da      	mvns	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	400a      	ands	r2, r1
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b23      	subs	r3, #35	; 0x23
 8003400:	fa00 f203 	lsl.w	r2, r0, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
 800340c:	e023      	b.n	8003456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3b41      	subs	r3, #65	; 0x41
 8003420:	221f      	movs	r2, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b41      	subs	r3, #65	; 0x41
 800344a:	fa00 f203 	lsl.w	r2, r0, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003456:	4b29      	ldr	r3, [pc, #164]	; (80034fc <HAL_ADC_ConfigChannel+0x250>)
 8003458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a28      	ldr	r2, [pc, #160]	; (8003500 <HAL_ADC_ConfigChannel+0x254>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10f      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d8>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b12      	cmp	r3, #18
 800346a:	d10b      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <HAL_ADC_ConfigChannel+0x254>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12b      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <HAL_ADC_ConfigChannel+0x258>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x1f4>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b11      	cmp	r3, #17
 800349e:	d122      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_ADC_ConfigChannel+0x258>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_ADC_ConfigChannel+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <HAL_ADC_ConfigChannel+0x260>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9a      	lsrs	r2, r3, #18
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034d8:	e002      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3b01      	subs	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40012300 	.word	0x40012300
 8003500:	40012000 	.word	0x40012000
 8003504:	10000012 	.word	0x10000012
 8003508:	20000004 	.word	0x20000004
 800350c:	431bde83 	.word	0x431bde83

08003510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003518:	4b79      	ldr	r3, [pc, #484]	; (8003700 <ADC_Init+0x1f0>)
 800351a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800358a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	4a58      	ldr	r2, [pc, #352]	; (8003704 <ADC_Init+0x1f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e00f      	b.n	800360e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800360c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0202 	bic.w	r2, r2, #2
 800361c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e1b      	ldrb	r3, [r3, #24]
 8003628:	005a      	lsls	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800365a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	3b01      	subs	r3, #1
 8003668:	035a      	lsls	r2, r3, #13
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e007      	b.n	8003684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	3b01      	subs	r3, #1
 80036a0:	051a      	lsls	r2, r3, #20
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036c6:	025a      	lsls	r2, r3, #9
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6899      	ldr	r1, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	029a      	lsls	r2, r3, #10
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012300 	.word	0x40012300
 8003704:	0f000001 	.word	0x0f000001

08003708 <__NVIC_SetPriorityGrouping>:
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	f7ff ff8e 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff29 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d0:	f7ff ff3e 	bl	8003750 <__NVIC_GetPriorityGrouping>
 80038d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f7ff ff8e 	bl	80037fc <NVIC_EncodePriority>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff5d 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff31 	bl	800376c <__NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffa2 	bl	8003864 <SysTick_Config>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff faca 	bl	8002ed0 <HAL_GetTick>
 800393c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d008      	beq.n	800395c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e052      	b.n	8003a02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0216 	bic.w	r2, r2, #22
 800396a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <HAL_DMA_Abort+0x62>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0208 	bic.w	r2, r2, #8
 800399a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ac:	e013      	b.n	80039d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ae:	f7ff fa8f 	bl	8002ed0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d90c      	bls.n	80039d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e015      	b.n	8003a02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e4      	bne.n	80039ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	223f      	movs	r2, #63	; 0x3f
 80039ea:	409a      	lsls	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d004      	beq.n	8003a28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e00c      	b.n	8003a42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2205      	movs	r2, #5
 8003a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e165      	b.n	8003d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	f040 8154 	bne.w	8003d32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d005      	beq.n	8003aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d130      	bne.n	8003b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad8:	2201      	movs	r2, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0201 	and.w	r2, r3, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d017      	beq.n	8003b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4013      	ands	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d123      	bne.n	8003b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	08da      	lsrs	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3208      	adds	r2, #8
 8003b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	220f      	movs	r2, #15
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	08da      	lsrs	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3208      	adds	r2, #8
 8003b8e:	69b9      	ldr	r1, [r7, #24]
 8003b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0203 	and.w	r2, r3, #3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 80ae 	beq.w	8003d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	4a5c      	ldr	r2, [pc, #368]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003be4:	6453      	str	r3, [r2, #68]	; 0x44
 8003be6:	4b5a      	ldr	r3, [pc, #360]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bf2:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_GPIO_Init+0x304>)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	220f      	movs	r2, #15
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <HAL_GPIO_Init+0x308>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d025      	beq.n	8003c6a <HAL_GPIO_Init+0x21a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4e      	ldr	r2, [pc, #312]	; (8003d5c <HAL_GPIO_Init+0x30c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01f      	beq.n	8003c66 <HAL_GPIO_Init+0x216>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4d      	ldr	r2, [pc, #308]	; (8003d60 <HAL_GPIO_Init+0x310>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d019      	beq.n	8003c62 <HAL_GPIO_Init+0x212>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4c      	ldr	r2, [pc, #304]	; (8003d64 <HAL_GPIO_Init+0x314>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0x20e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4b      	ldr	r2, [pc, #300]	; (8003d68 <HAL_GPIO_Init+0x318>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00d      	beq.n	8003c5a <HAL_GPIO_Init+0x20a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4a      	ldr	r2, [pc, #296]	; (8003d6c <HAL_GPIO_Init+0x31c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <HAL_GPIO_Init+0x206>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a49      	ldr	r2, [pc, #292]	; (8003d70 <HAL_GPIO_Init+0x320>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_GPIO_Init+0x202>
 8003c4e:	2306      	movs	r3, #6
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c52:	2307      	movs	r3, #7
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x21c>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x304>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a31      	ldr	r2, [pc, #196]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <HAL_GPIO_Init+0x324>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae96 	bls.w	8003a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40013c00 	.word	0x40013c00

08003d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e001      	b.n	8003d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_PWREx_EnableOverDrive+0x90>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_PWREx_EnableOverDrive+0x94>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd4:	f7ff f87c 	bl	8002ed0 <HAL_GetTick>
 8003dd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dda:	e009      	b.n	8003df0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ddc:	f7ff f878 	bl	8002ed0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dea:	d901      	bls.n	8003df0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e01f      	b.n	8003e30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d1ee      	bne.n	8003ddc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e04:	f7ff f864 	bl	8002ed0 <HAL_GetTick>
 8003e08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e0a:	e009      	b.n	8003e20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e0c:	f7ff f860 	bl	8002ed0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e1a:	d901      	bls.n	8003e20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e007      	b.n	8003e30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e2c:	d1ee      	bne.n	8003e0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	420e0040 	.word	0x420e0040
 8003e40:	40007000 	.word	0x40007000
 8003e44:	420e0044 	.word	0x420e0044

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90c      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e067      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b37      	ldr	r3, [pc, #220]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4934      	ldr	r1, [pc, #208]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fe ffca 	bl	8002ed0 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fe ffc6 	bl	8002ed0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e04f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d20c      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f855 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490a      	ldr	r1, [pc, #40]	; (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe ff2a 	bl	8002e48 <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00
 8004004:	40023800 	.word	0x40023800
 8004008:	08006e54 	.word	0x08006e54
 800400c:	20000004 	.word	0x20000004
 8004010:	2000000c 	.word	0x2000000c

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000004 	.word	0x20000004

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	08006e64 	.word	0x08006e64

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	08006e64 	.word	0x08006e64

0800407c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004080:	b0a6      	sub	sp, #152	; 0x98
 8004082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a2:	4bc8      	ldr	r3, [pc, #800]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	f200 817e 	bhi.w	80043ac <HAL_RCC_GetSysClockFreq+0x330>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080043ad 	.word	0x080043ad
 80040c0:	080043ad 	.word	0x080043ad
 80040c4:	080043ad 	.word	0x080043ad
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	080043ad 	.word	0x080043ad
 80040d0:	080043ad 	.word	0x080043ad
 80040d4:	080043ad 	.word	0x080043ad
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	080043ad 	.word	0x080043ad
 80040e0:	080043ad 	.word	0x080043ad
 80040e4:	080043ad 	.word	0x080043ad
 80040e8:	08004267 	.word	0x08004267
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4bb6      	ldr	r3, [pc, #728]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80040ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80040f2:	e15f      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040f4:	4bb5      	ldr	r3, [pc, #724]	; (80043cc <HAL_RCC_GetSysClockFreq+0x350>)
 80040f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80040fa:	e15b      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040fc:	4bb1      	ldr	r3, [pc, #708]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004108:	4bae      	ldr	r3, [pc, #696]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d031      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004114:	4bab      	ldr	r3, [pc, #684]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	2200      	movs	r2, #0
 800411c:	66bb      	str	r3, [r7, #104]	; 0x68
 800411e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	663b      	str	r3, [r7, #96]	; 0x60
 8004128:	2300      	movs	r3, #0
 800412a:	667b      	str	r3, [r7, #100]	; 0x64
 800412c:	4ba7      	ldr	r3, [pc, #668]	; (80043cc <HAL_RCC_GetSysClockFreq+0x350>)
 800412e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004132:	462a      	mov	r2, r5
 8004134:	fb03 f202 	mul.w	r2, r3, r2
 8004138:	2300      	movs	r3, #0
 800413a:	4621      	mov	r1, r4
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	4aa2      	ldr	r2, [pc, #648]	; (80043cc <HAL_RCC_GetSysClockFreq+0x350>)
 8004144:	4621      	mov	r1, r4
 8004146:	fba1 1202 	umull	r1, r2, r1, r2
 800414a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800414c:	460a      	mov	r2, r1
 800414e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004150:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004152:	4413      	add	r3, r2
 8004154:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800415a:	2200      	movs	r2, #0
 800415c:	65bb      	str	r3, [r7, #88]	; 0x58
 800415e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004160:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004164:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004168:	f7fc f84c 	bl	8000204 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004176:	e064      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004178:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	2200      	movs	r2, #0
 8004180:	653b      	str	r3, [r7, #80]	; 0x50
 8004182:	657a      	str	r2, [r7, #84]	; 0x54
 8004184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418a:	64bb      	str	r3, [r7, #72]	; 0x48
 800418c:	2300      	movs	r3, #0
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004194:	4622      	mov	r2, r4
 8004196:	462b      	mov	r3, r5
 8004198:	f04f 0000 	mov.w	r0, #0
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	0159      	lsls	r1, r3, #5
 80041a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a6:	0150      	lsls	r0, r2, #5
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4621      	mov	r1, r4
 80041ae:	1a51      	subs	r1, r2, r1
 80041b0:	6139      	str	r1, [r7, #16]
 80041b2:	4629      	mov	r1, r5
 80041b4:	eb63 0301 	sbc.w	r3, r3, r1
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c6:	4659      	mov	r1, fp
 80041c8:	018b      	lsls	r3, r1, #6
 80041ca:	4651      	mov	r1, sl
 80041cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d0:	4651      	mov	r1, sl
 80041d2:	018a      	lsls	r2, r1, #6
 80041d4:	4651      	mov	r1, sl
 80041d6:	ebb2 0801 	subs.w	r8, r2, r1
 80041da:	4659      	mov	r1, fp
 80041dc:	eb63 0901 	sbc.w	r9, r3, r1
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041f4:	4690      	mov	r8, r2
 80041f6:	4699      	mov	r9, r3
 80041f8:	4623      	mov	r3, r4
 80041fa:	eb18 0303 	adds.w	r3, r8, r3
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	462b      	mov	r3, r5
 8004202:	eb49 0303 	adc.w	r3, r9, r3
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004214:	4629      	mov	r1, r5
 8004216:	028b      	lsls	r3, r1, #10
 8004218:	4621      	mov	r1, r4
 800421a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800421e:	4621      	mov	r1, r4
 8004220:	028a      	lsls	r2, r1, #10
 8004222:	4610      	mov	r0, r2
 8004224:	4619      	mov	r1, r3
 8004226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800422a:	2200      	movs	r2, #0
 800422c:	643b      	str	r3, [r7, #64]	; 0x40
 800422e:	647a      	str	r2, [r7, #68]	; 0x44
 8004230:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004234:	f7fb ffe6 	bl	8000204 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004242:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	3301      	adds	r3, #1
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004254:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004264:	e0a6      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004266:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004272:	4b54      	ldr	r3, [pc, #336]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d02a      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
 8004288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004290:	2100      	movs	r1, #0
 8004292:	4b4e      	ldr	r3, [pc, #312]	; (80043cc <HAL_RCC_GetSysClockFreq+0x350>)
 8004294:	fb03 f201 	mul.w	r2, r3, r1
 8004298:	2300      	movs	r3, #0
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	4413      	add	r3, r2
 80042a0:	4a4a      	ldr	r2, [pc, #296]	; (80043cc <HAL_RCC_GetSysClockFreq+0x350>)
 80042a2:	fba0 1202 	umull	r1, r2, r0, r2
 80042a6:	677a      	str	r2, [r7, #116]	; 0x74
 80042a8:	460a      	mov	r2, r1
 80042aa:	673a      	str	r2, [r7, #112]	; 0x70
 80042ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042ae:	4413      	add	r3, r2
 80042b0:	677b      	str	r3, [r7, #116]	; 0x74
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b6:	2200      	movs	r2, #0
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	637a      	str	r2, [r7, #52]	; 0x34
 80042bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042c0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80042c4:	f7fb ff9e 	bl	8000204 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042d2:	e05b      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d4:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	2200      	movs	r2, #0
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e6:	623b      	str	r3, [r7, #32]
 80042e8:	2300      	movs	r3, #0
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
 80042ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	f04f 0000 	mov.w	r0, #0
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	0159      	lsls	r1, r3, #5
 80042fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004302:	0150      	lsls	r0, r2, #5
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4641      	mov	r1, r8
 800430a:	ebb2 0a01 	subs.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb63 0b01 	sbc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004320:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004324:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004328:	ebb2 040a 	subs.w	r4, r2, sl
 800432c:	eb63 050b 	sbc.w	r5, r3, fp
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	464b      	mov	r3, r9
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800435e:	4629      	mov	r1, r5
 8004360:	028b      	lsls	r3, r1, #10
 8004362:	4621      	mov	r1, r4
 8004364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004368:	4621      	mov	r1, r4
 800436a:	028a      	lsls	r2, r1, #10
 800436c:	4610      	mov	r0, r2
 800436e:	4619      	mov	r1, r3
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004374:	2200      	movs	r2, #0
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	61fa      	str	r2, [r7, #28]
 800437a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437e:	f7fb ff41 	bl	8000204 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4613      	mov	r3, r2
 8004388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x348>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0f1b      	lsrs	r3, r3, #28
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800439a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800439e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80043aa:	e003      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80043ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80043b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3798      	adds	r7, #152	; 0x98
 80043bc:	46bd      	mov	sp, r7
 80043be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	016e3600 	.word	0x016e3600

080043d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e28d      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8083 	beq.w	80044f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f0:	4b94      	ldr	r3, [pc, #592]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d019      	beq.n	8004430 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043fc:	4b91      	ldr	r3, [pc, #580]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004404:	2b08      	cmp	r3, #8
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004408:	4b8e      	ldr	r3, [pc, #568]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d00c      	beq.n	8004430 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004416:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d112      	bne.n	8004448 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004422:	4b88      	ldr	r3, [pc, #544]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800442e:	d10b      	bne.n	8004448 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	4b84      	ldr	r3, [pc, #528]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d05b      	beq.n	80044f4 <HAL_RCC_OscConfig+0x124>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d157      	bne.n	80044f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e25a      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004450:	d106      	bne.n	8004460 <HAL_RCC_OscConfig+0x90>
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7b      	ldr	r2, [pc, #492]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e01d      	b.n	800449c <HAL_RCC_OscConfig+0xcc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004468:	d10c      	bne.n	8004484 <HAL_RCC_OscConfig+0xb4>
 800446a:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a75      	ldr	r2, [pc, #468]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b73      	ldr	r3, [pc, #460]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a72      	ldr	r2, [pc, #456]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e00b      	b.n	800449c <HAL_RCC_OscConfig+0xcc>
 8004484:	4b6f      	ldr	r3, [pc, #444]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6e      	ldr	r2, [pc, #440]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a6b      	ldr	r2, [pc, #428]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fe fd14 	bl	8002ed0 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fe fd10 	bl	8002ed0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e21f      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0xdc>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fe fd00 	bl	8002ed0 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fe fcfc 	bl	8002ed0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e20b      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b57      	ldr	r3, [pc, #348]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x104>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06f      	beq.n	80045e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004502:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 030c 	and.w	r3, r3, #12
 800450a:	2b00      	cmp	r3, #0
 800450c:	d017      	beq.n	800453e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450e:	4b4d      	ldr	r3, [pc, #308]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004516:	2b08      	cmp	r3, #8
 8004518:	d105      	bne.n	8004526 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451a:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d11c      	bne.n	800456c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b44      	ldr	r3, [pc, #272]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCC_OscConfig+0x186>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1d3      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4937      	ldr	r1, [pc, #220]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	e03a      	b.n	80045e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_OscConfig+0x278>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe fca9 	bl	8002ed0 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004582:	f7fe fca5 	bl	8002ed0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1b4      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4925      	ldr	r1, [pc, #148]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
 80045b4:	e015      	b.n	80045e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x278>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe fc88 	bl	8002ed0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fe fc84 	bl	8002ed0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e193      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d036      	beq.n	800465c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_RCC_OscConfig+0x27c>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fe fc68 	bl	8002ed0 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004604:	f7fe fc64 	bl	8002ed0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e173      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_OscConfig+0x274>)
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x234>
 8004622:	e01b      	b.n	800465c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_OscConfig+0x27c>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fe fc51 	bl	8002ed0 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	e00e      	b.n	8004650 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004632:	f7fe fc4d 	bl	8002ed0 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d907      	bls.n	8004650 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e15c      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
 8004644:	40023800 	.word	0x40023800
 8004648:	42470000 	.word	0x42470000
 800464c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004650:	4b8a      	ldr	r3, [pc, #552]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ea      	bne.n	8004632 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8097 	beq.w	8004798 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466e:	4b83      	ldr	r3, [pc, #524]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	4b7f      	ldr	r3, [pc, #508]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a7e      	ldr	r2, [pc, #504]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b7c      	ldr	r3, [pc, #496]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004696:	2301      	movs	r3, #1
 8004698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b79      	ldr	r3, [pc, #484]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d118      	bne.n	80046d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b2:	f7fe fc0d 	bl	8002ed0 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fe fc09 	bl	8002ed0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e118      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x4b0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x31e>
 80046e0:	4b66      	ldr	r3, [pc, #408]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a65      	ldr	r2, [pc, #404]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
 80046ec:	e01c      	b.n	8004728 <HAL_RCC_OscConfig+0x358>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x340>
 80046f6:	4b61      	ldr	r3, [pc, #388]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a60      	ldr	r2, [pc, #384]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	4b5e      	ldr	r3, [pc, #376]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6713      	str	r3, [r2, #112]	; 0x70
 800470e:	e00b      	b.n	8004728 <HAL_RCC_OscConfig+0x358>
 8004710:	4b5a      	ldr	r3, [pc, #360]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a59      	ldr	r2, [pc, #356]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	4b57      	ldr	r3, [pc, #348]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a56      	ldr	r2, [pc, #344]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004722:	f023 0304 	bic.w	r3, r3, #4
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fe fbce 	bl	8002ed0 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004736:	e00a      	b.n	800474e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004738:	f7fe fbca 	bl	8002ed0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f241 3288 	movw	r2, #5000	; 0x1388
 8004746:	4293      	cmp	r3, r2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e0d7      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	4b4b      	ldr	r3, [pc, #300]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ee      	beq.n	8004738 <HAL_RCC_OscConfig+0x368>
 800475a:	e014      	b.n	8004786 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe fbb8 	bl	8002ed0 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004762:	e00a      	b.n	800477a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fe fbb4 	bl	8002ed0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e0c1      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477a:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1ee      	bne.n	8004764 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d105      	bne.n	8004798 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	4a3a      	ldr	r2, [pc, #232]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80ad 	beq.w	80048fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d060      	beq.n	8004870 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d145      	bne.n	8004842 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b6:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCC_OscConfig+0x4b4>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe fb88 	bl	8002ed0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fe fb84 	bl	8002ed0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e093      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	3b01      	subs	r3, #1
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	491b      	ldr	r1, [pc, #108]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x4b4>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fe fb59 	bl	8002ed0 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004822:	f7fe fb55 	bl	8002ed0 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e064      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x452>
 8004840:	e05c      	b.n	80048fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b10      	ldr	r3, [pc, #64]	; (8004884 <HAL_RCC_OscConfig+0x4b4>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fe fb42 	bl	8002ed0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fe fb3e 	bl	8002ed0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e04d      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_OscConfig+0x4ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x480>
 800486e:	e045      	b.n	80048fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d107      	bne.n	8004888 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e040      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
 8004884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004888:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <HAL_RCC_OscConfig+0x538>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d030      	beq.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d129      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d122      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048b8:	4013      	ands	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d119      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d10f      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fe f87e 	bl	8002a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fb48 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e041      	b.n	8004a40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f839 	bl	8004a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f000 faf9 	bl	8004fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start+0x24>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e022      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x6a>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d109      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x3e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e015      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x6a>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIM_PWM_Start+0x58>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e008      	b.n	8004ac6 <HAL_TIM_PWM_Start+0x6a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07c      	b.n	8004bc8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0x82>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	e013      	b.n	8004b06 <HAL_TIM_PWM_Start+0xaa>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_PWM_Start+0x92>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aec:	e00b      	b.n	8004b06 <HAL_TIM_PWM_Start+0xaa>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_PWM_Start+0xa2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	e003      	b.n	8004b06 <HAL_TIM_PWM_Start+0xaa>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fd50 	bl	80055b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2d      	ldr	r2, [pc, #180]	; (8004bd0 <HAL_TIM_PWM_Start+0x174>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_PWM_Start+0xcc>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <HAL_TIM_PWM_Start+0x178>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_PWM_Start+0xd0>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_TIM_PWM_Start+0xd2>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a22      	ldr	r2, [pc, #136]	; (8004bd0 <HAL_TIM_PWM_Start+0x174>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d01d      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <HAL_TIM_PWM_Start+0x17c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d018      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <HAL_TIM_PWM_Start+0x180>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <HAL_TIM_PWM_Start+0x184>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <HAL_TIM_PWM_Start+0x178>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <HAL_TIM_PWM_Start+0x188>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x136>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a16      	ldr	r2, [pc, #88]	; (8004be8 <HAL_TIM_PWM_Start+0x18c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d111      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b06      	cmp	r3, #6
 8004ba2:	d010      	beq.n	8004bc6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	e007      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40010400 	.word	0x40010400
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40014000 	.word	0x40014000
 8004be8:	40001800 	.word	0x40001800

08004bec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fcd8 	bl	80055b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <HAL_TIM_PWM_Stop+0xd8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIM_PWM_Stop+0x2c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2d      	ldr	r2, [pc, #180]	; (8004cc8 <HAL_TIM_PWM_Stop+0xdc>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d101      	bne.n	8004c1c <HAL_TIM_PWM_Stop+0x30>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_PWM_Stop+0x32>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d017      	beq.n	8004c52 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10f      	bne.n	8004c52 <HAL_TIM_PWM_Stop+0x66>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	f240 4344 	movw	r3, #1092	; 0x444
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_PWM_Stop+0x66>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_TIM_PWM_Stop+0x96>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	f240 4344 	movw	r3, #1092	; 0x444
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_PWM_Stop+0x96>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <HAL_TIM_PWM_Stop+0xa6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c90:	e013      	b.n	8004cba <HAL_TIM_PWM_Stop+0xce>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_PWM_Stop+0xb6>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca0:	e00b      	b.n	8004cba <HAL_TIM_PWM_Stop+0xce>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_PWM_Stop+0xc6>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	e003      	b.n	8004cba <HAL_TIM_PWM_Stop+0xce>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e0ae      	b.n	8004e48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	f200 809f 	bhi.w	8004e38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d35 	.word	0x08004d35
 8004d04:	08004e39 	.word	0x08004e39
 8004d08:	08004e39 	.word	0x08004e39
 8004d0c:	08004e39 	.word	0x08004e39
 8004d10:	08004d75 	.word	0x08004d75
 8004d14:	08004e39 	.word	0x08004e39
 8004d18:	08004e39 	.word	0x08004e39
 8004d1c:	08004e39 	.word	0x08004e39
 8004d20:	08004db7 	.word	0x08004db7
 8004d24:	08004e39 	.word	0x08004e39
 8004d28:	08004e39 	.word	0x08004e39
 8004d2c:	08004e39 	.word	0x08004e39
 8004d30:	08004df7 	.word	0x08004df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f9f0 	bl	8005120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	619a      	str	r2, [r3, #24]
      break;
 8004d72:	e064      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fa40 	bl	8005200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	619a      	str	r2, [r3, #24]
      break;
 8004db4:	e043      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fa95 	bl	80052ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0208 	orr.w	r2, r2, #8
 8004dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0204 	bic.w	r2, r2, #4
 8004de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	61da      	str	r2, [r3, #28]
      break;
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fae9 	bl	80053d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	61da      	str	r2, [r3, #28]
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_ConfigClockSource+0x1c>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e0b4      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x186>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea4:	d03e      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eaa:	f200 8087 	bhi.w	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	f000 8086 	beq.w	8004fc2 <HAL_TIM_ConfigClockSource+0x172>
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eba:	d87f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d01a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ec0:	2b70      	cmp	r3, #112	; 0x70
 8004ec2:	d87b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d050      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x11a>
 8004ec8:	2b60      	cmp	r3, #96	; 0x60
 8004eca:	d877      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d03c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0xfa>
 8004ed0:	2b50      	cmp	r3, #80	; 0x50
 8004ed2:	d873      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d058      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x13a>
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d86f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d064      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ee0:	2b30      	cmp	r3, #48	; 0x30
 8004ee2:	d86b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d060      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d867      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d05c      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d05a      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x15a>
 8004ef4:	e062      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f000 fb35 	bl	8005574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	609a      	str	r2, [r3, #8]
      break;
 8004f22:	e04f      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6899      	ldr	r1, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f000 fb1e 	bl	8005574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f46:	609a      	str	r2, [r3, #8]
      break;
 8004f48:	e03c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fa92 	bl	8005480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2150      	movs	r1, #80	; 0x50
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 faeb 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 8004f68:	e02c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f000 fab1 	bl	80054de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2160      	movs	r1, #96	; 0x60
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fadb 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 8004f88:	e01c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 fa72 	bl	8005480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 facb 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e00c      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fac2 	bl	800553e <TIM_ITRx_SetConfig>
      break;
 8004fba:	e003      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc0:	e000      	b.n	8004fc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a40      	ldr	r2, [pc, #256]	; (80050f4 <TIM_Base_SetConfig+0x114>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d00f      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3d      	ldr	r2, [pc, #244]	; (80050f8 <TIM_Base_SetConfig+0x118>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3c      	ldr	r2, [pc, #240]	; (80050fc <TIM_Base_SetConfig+0x11c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a3b      	ldr	r2, [pc, #236]	; (8005100 <TIM_Base_SetConfig+0x120>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a3a      	ldr	r2, [pc, #232]	; (8005104 <TIM_Base_SetConfig+0x124>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <TIM_Base_SetConfig+0x114>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d02b      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d027      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2c      	ldr	r2, [pc, #176]	; (80050f8 <TIM_Base_SetConfig+0x118>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d023      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2b      	ldr	r2, [pc, #172]	; (80050fc <TIM_Base_SetConfig+0x11c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01f      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <TIM_Base_SetConfig+0x120>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01b      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a29      	ldr	r2, [pc, #164]	; (8005104 <TIM_Base_SetConfig+0x124>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d017      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a28      	ldr	r2, [pc, #160]	; (8005108 <TIM_Base_SetConfig+0x128>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a27      	ldr	r2, [pc, #156]	; (800510c <TIM_Base_SetConfig+0x12c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00f      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a26      	ldr	r2, [pc, #152]	; (8005110 <TIM_Base_SetConfig+0x130>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00b      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a25      	ldr	r2, [pc, #148]	; (8005114 <TIM_Base_SetConfig+0x134>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d007      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a24      	ldr	r2, [pc, #144]	; (8005118 <TIM_Base_SetConfig+0x138>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d003      	beq.n	8005092 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a23      	ldr	r2, [pc, #140]	; (800511c <TIM_Base_SetConfig+0x13c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d108      	bne.n	80050a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a0a      	ldr	r2, [pc, #40]	; (80050f4 <TIM_Base_SetConfig+0x114>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0xf8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <TIM_Base_SetConfig+0x124>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d103      	bne.n	80050e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	615a      	str	r2, [r3, #20]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40010400 	.word	0x40010400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800
 8005114:	40001800 	.word	0x40001800
 8005118:	40001c00 	.word	0x40001c00
 800511c:	40002000 	.word	0x40002000

08005120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0302 	bic.w	r3, r3, #2
 8005168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a20      	ldr	r2, [pc, #128]	; (80051f8 <TIM_OC1_SetConfig+0xd8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC1_SetConfig+0x64>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1f      	ldr	r2, [pc, #124]	; (80051fc <TIM_OC1_SetConfig+0xdc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10c      	bne.n	800519e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0308 	bic.w	r3, r3, #8
 800518a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <TIM_OC1_SetConfig+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC1_SetConfig+0x8e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <TIM_OC1_SetConfig+0xdc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d111      	bne.n	80051d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	621a      	str	r2, [r3, #32]
}
 80051ec:	bf00      	nop
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f023 0210 	bic.w	r2, r3, #16
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0320 	bic.w	r3, r3, #32
 800524a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <TIM_OC2_SetConfig+0xe4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC2_SetConfig+0x68>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <TIM_OC2_SetConfig+0xe8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10d      	bne.n	8005284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a17      	ldr	r2, [pc, #92]	; (80052e4 <TIM_OC2_SetConfig+0xe4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_OC2_SetConfig+0x94>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <TIM_OC2_SetConfig+0xe8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d113      	bne.n	80052bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800529a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40010400 	.word	0x40010400

080052ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a21      	ldr	r2, [pc, #132]	; (80053cc <TIM_OC3_SetConfig+0xe0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_OC3_SetConfig+0x66>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a20      	ldr	r2, [pc, #128]	; (80053d0 <TIM_OC3_SetConfig+0xe4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10d      	bne.n	800536e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <TIM_OC3_SetConfig+0xe0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC3_SetConfig+0x92>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <TIM_OC3_SetConfig+0xe4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d113      	bne.n	80053a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	621a      	str	r2, [r3, #32]
}
 80053c0:	bf00      	nop
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40010000 	.word	0x40010000
 80053d0:	40010400 	.word	0x40010400

080053d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800541e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	031b      	lsls	r3, r3, #12
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a12      	ldr	r2, [pc, #72]	; (8005478 <TIM_OC4_SetConfig+0xa4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_OC4_SetConfig+0x68>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a11      	ldr	r2, [pc, #68]	; (800547c <TIM_OC4_SetConfig+0xa8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d109      	bne.n	8005450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	019b      	lsls	r3, r3, #6
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40010400 	.word	0x40010400

08005480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f023 0201 	bic.w	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 030a 	bic.w	r3, r3, #10
 80054bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054de:	b480      	push	{r7}
 80054e0:	b087      	sub	sp, #28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0210 	bic.w	r2, r3, #16
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	031b      	lsls	r3, r3, #12
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800551a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	f043 0307 	orr.w	r3, r3, #7
 8005560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	609a      	str	r2, [r3, #8]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	021a      	lsls	r2, r3, #8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	431a      	orrs	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	609a      	str	r2, [r3, #8]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2201      	movs	r2, #1
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1a      	ldr	r2, [r3, #32]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	43db      	mvns	r3, r3
 80055d6:	401a      	ands	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1a      	ldr	r2, [r3, #32]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e05a      	b.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d01d      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10c      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40010400 	.word	0x40010400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40001800 	.word	0x40001800

080056f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e03f      	b.n	800578a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fd fa38 	bl	8002b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2224      	movs	r2, #36	; 0x24
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fde9 	bl	8006314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b08a      	sub	sp, #40	; 0x28
 8005796:	af02      	add	r7, sp, #8
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d17c      	bne.n	80058ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_UART_Transmit+0x2c>
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e075      	b.n	80058ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_UART_Transmit+0x3e>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e06e      	b.n	80058ae <HAL_UART_Transmit+0x11c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2221      	movs	r2, #33	; 0x21
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057e6:	f7fd fb73 	bl	8002ed0 <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005800:	d108      	bne.n	8005814 <HAL_UART_Transmit+0x82>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e003      	b.n	800581c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005824:	e02a      	b.n	800587c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fb29 	bl	8005e88 <UART_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e036      	b.n	80058ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	3302      	adds	r3, #2
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e007      	b.n	800586e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	3301      	adds	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1cf      	bne.n	8005826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2200      	movs	r2, #0
 800588e:	2140      	movs	r1, #64	; 0x40
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 faf9 	bl	8005e88 <UART_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e006      	b.n	80058ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e000      	b.n	80058ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058ac:	2302      	movs	r3, #2
  }
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	4613      	mov	r3, r2
 80058c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d11d      	bne.n	800590c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_UART_Receive_IT+0x26>
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e016      	b.n	800590e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Receive_IT+0x38>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e00f      	b.n	800590e <HAL_UART_Receive_IT+0x58>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	461a      	mov	r2, r3
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fb2e 	bl	8005f64 <UART_Start_Receive_IT>
 8005908:	4603      	mov	r3, r0
 800590a:	e000      	b.n	800590e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b0ba      	sub	sp, #232	; 0xe8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_UART_IRQHandler+0x66>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc11 	bl	800619e <UART_Receive_IT>
      return;
 800597c:	e256      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800597e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80de 	beq.w	8005b44 <HAL_UART_IRQHandler+0x22c>
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005998:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80d1 	beq.w	8005b44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xae>
 80059ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0xd2>
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0202 	orr.w	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_UART_IRQHandler+0xf6>
 80059f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <HAL_UART_IRQHandler+0x126>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0208 	orr.w	r2, r3, #8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 81ed 	beq.w	8005e22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_UART_IRQHandler+0x14e>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb9c 	bl	800619e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	bf0c      	ite	eq
 8005a74:	2301      	moveq	r3, #1
 8005a76:	2300      	movne	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_UART_IRQHandler+0x17a>
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04f      	beq.n	8005b32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 faa4 	bl	8005fe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d141      	bne.n	8005b2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1d9      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	4a7d      	ldr	r2, [pc, #500]	; (8005cf4 <HAL_UART_IRQHandler+0x3dc>)
 8005b00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fd ff7f 	bl	8003a0a <HAL_DMA_Abort_IT>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e00e      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f99a 	bl	8005e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	e00a      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f996 	bl	8005e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e006      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f992 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b3e:	e170      	b.n	8005e22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	bf00      	nop
    return;
 8005b42:	e16e      	b.n	8005e22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 814a 	bne.w	8005de2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8143 	beq.w	8005de2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 813c 	beq.w	8005de2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	f040 80b4 	bne.w	8005cf8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8140 	beq.w	8005e26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	f080 8139 	bcs.w	8005e26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc6:	f000 8088 	beq.w	8005cda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1d9      	bne.n	8005bca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e1      	bne.n	8005c16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3314      	adds	r3, #20
 8005c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e3      	bne.n	8005c52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e3      	bne.n	8005c98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd fe28 	bl	800392a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8c0 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf0:	e099      	b.n	8005e26 <HAL_UART_IRQHandler+0x50e>
 8005cf2:	bf00      	nop
 8005cf4:	080060a7 	.word	0x080060a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 808b 	beq.w	8005e2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8086 	beq.w	8005e2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	330c      	adds	r3, #12
 8005d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d42:	647a      	str	r2, [r7, #68]	; 0x44
 8005d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e3      	bne.n	8005d1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	623b      	str	r3, [r7, #32]
   return(result);
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e3      	bne.n	8005d56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0310 	bic.w	r3, r3, #16
 8005db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dc0:	61fa      	str	r2, [r7, #28]
 8005dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e3      	bne.n	8005d9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f848 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005de0:	e023      	b.n	8005e2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <HAL_UART_IRQHandler+0x4ea>
 8005dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f967 	bl	80060ce <UART_Transmit_IT>
    return;
 8005e00:	e014      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00e      	beq.n	8005e2c <HAL_UART_IRQHandler+0x514>
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f9a7 	bl	800616e <UART_EndTransmit_IT>
    return;
 8005e20:	e004      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
    return;
 8005e22:	bf00      	nop
 8005e24:	e002      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
      return;
 8005e26:	bf00      	nop
 8005e28:	e000      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
      return;
 8005e2a:	bf00      	nop
  }
}
 8005e2c:	37e8      	adds	r7, #232	; 0xe8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b090      	sub	sp, #64	; 0x40
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e98:	e050      	b.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d04c      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ea8:	f7fd f812 	bl	8002ed0 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d241      	bcs.n	8005f3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ed8:	637a      	str	r2, [r7, #52]	; 0x34
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e5      	bne.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3314      	adds	r3, #20
 8005ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	613b      	str	r3, [r7, #16]
   return(result);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f023 0301 	bic.w	r3, r3, #1
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3314      	adds	r3, #20
 8005f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f0c:	623a      	str	r2, [r7, #32]
 8005f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	69f9      	ldr	r1, [r7, #28]
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e00f      	b.n	8005f5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4013      	ands	r3, r2
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d09f      	beq.n	8005e9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3740      	adds	r7, #64	; 0x40
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2222      	movs	r2, #34	; 0x22
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0201 	orr.w	r2, r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0220 	orr.w	r2, r2, #32
 8005fd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b095      	sub	sp, #84	; 0x54
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006008:	643a      	str	r2, [r7, #64]	; 0x40
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800600e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3314      	adds	r3, #20
 8006022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	61fb      	str	r3, [r7, #28]
   return(result);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	64bb      	str	r3, [r7, #72]	; 0x48
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	2b01      	cmp	r3, #1
 8006056:	d119      	bne.n	800608c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60bb      	str	r3, [r7, #8]
   return(result);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	647b      	str	r3, [r7, #68]	; 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006078:	61ba      	str	r2, [r7, #24]
 800607a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	613b      	str	r3, [r7, #16]
   return(result);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
}
 800609a:	bf00      	nop
 800609c:	3754      	adds	r7, #84	; 0x54
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fecb 	bl	8005e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b21      	cmp	r3, #33	; 0x21
 80060e0:	d13e      	bne.n	8006160 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	d114      	bne.n	8006116 <UART_Transmit_IT+0x48>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d110      	bne.n	8006116 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006108:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	1c9a      	adds	r2, r3, #2
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	621a      	str	r2, [r3, #32]
 8006114:	e008      	b.n	8006128 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	1c59      	adds	r1, r3, #1
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6211      	str	r1, [r2, #32]
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4619      	mov	r1, r3
 8006136:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10f      	bne.n	800615c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800614a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800615a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006184:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fe50 	bl	8005e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b08c      	sub	sp, #48	; 0x30
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b22      	cmp	r3, #34	; 0x22
 80061b0:	f040 80ab 	bne.w	800630a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d117      	bne.n	80061ee <UART_Receive_IT+0x50>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d113      	bne.n	80061ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28
 80061ec:	e026      	b.n	800623c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006200:	d007      	beq.n	8006212 <UART_Receive_IT+0x74>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <UART_Receive_IT+0x82>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e008      	b.n	8006232 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622c:	b2da      	uxtb	r2, r3
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29b      	uxth	r3, r3
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4619      	mov	r1, r3
 800624a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800624c:	2b00      	cmp	r3, #0
 800624e:	d15a      	bne.n	8006306 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0220 	bic.w	r2, r2, #32
 800625e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800626e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695a      	ldr	r2, [r3, #20]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	2b01      	cmp	r3, #1
 800628e:	d135      	bne.n	80062fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	330c      	adds	r3, #12
 800629c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	613b      	str	r3, [r7, #16]
   return(result);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f023 0310 	bic.w	r3, r3, #16
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b6:	623a      	str	r2, [r7, #32]
 80062b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	69f9      	ldr	r1, [r7, #28]
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d10a      	bne.n	80062ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fdbb 	bl	8005e70 <HAL_UARTEx_RxEventCallback>
 80062fa:	e002      	b.n	8006302 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fda3 	bl	8005e48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	e002      	b.n	800630c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	e000      	b.n	800630c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3730      	adds	r7, #48	; 0x30
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006318:	b0c0      	sub	sp, #256	; 0x100
 800631a:	af00      	add	r7, sp, #0
 800631c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	68d9      	ldr	r1, [r3, #12]
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	ea40 0301 	orr.w	r3, r0, r1
 800633c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	431a      	orrs	r2, r3
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	431a      	orrs	r2, r3
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800636c:	f021 010c 	bic.w	r1, r1, #12
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800637a:	430b      	orrs	r3, r1
 800637c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638e:	6999      	ldr	r1, [r3, #24]
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	ea40 0301 	orr.w	r3, r0, r1
 800639a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b8f      	ldr	r3, [pc, #572]	; (80065e0 <UART_SetConfig+0x2cc>)
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d005      	beq.n	80063b4 <UART_SetConfig+0xa0>
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b8d      	ldr	r3, [pc, #564]	; (80065e4 <UART_SetConfig+0x2d0>)
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d104      	bne.n	80063be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063b4:	f7fd fe4e 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 80063b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80063bc:	e003      	b.n	80063c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063be:	f7fd fe35 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80063c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d0:	f040 810c 	bne.w	80065ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063e6:	4622      	mov	r2, r4
 80063e8:	462b      	mov	r3, r5
 80063ea:	1891      	adds	r1, r2, r2
 80063ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ee:	415b      	adcs	r3, r3
 80063f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063f6:	4621      	mov	r1, r4
 80063f8:	eb12 0801 	adds.w	r8, r2, r1
 80063fc:	4629      	mov	r1, r5
 80063fe:	eb43 0901 	adc.w	r9, r3, r1
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800640e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006416:	4690      	mov	r8, r2
 8006418:	4699      	mov	r9, r3
 800641a:	4623      	mov	r3, r4
 800641c:	eb18 0303 	adds.w	r3, r8, r3
 8006420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006424:	462b      	mov	r3, r5
 8006426:	eb49 0303 	adc.w	r3, r9, r3
 800642a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800643a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800643e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006442:	460b      	mov	r3, r1
 8006444:	18db      	adds	r3, r3, r3
 8006446:	653b      	str	r3, [r7, #80]	; 0x50
 8006448:	4613      	mov	r3, r2
 800644a:	eb42 0303 	adc.w	r3, r2, r3
 800644e:	657b      	str	r3, [r7, #84]	; 0x54
 8006450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006458:	f7f9 fed4 	bl	8000204 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4b61      	ldr	r3, [pc, #388]	; (80065e8 <UART_SetConfig+0x2d4>)
 8006462:	fba3 2302 	umull	r2, r3, r3, r2
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	011c      	lsls	r4, r3, #4
 800646a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006474:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	1891      	adds	r1, r2, r2
 8006482:	64b9      	str	r1, [r7, #72]	; 0x48
 8006484:	415b      	adcs	r3, r3
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800648c:	4641      	mov	r1, r8
 800648e:	eb12 0a01 	adds.w	sl, r2, r1
 8006492:	4649      	mov	r1, r9
 8006494:	eb43 0b01 	adc.w	fp, r3, r1
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ac:	4692      	mov	sl, r2
 80064ae:	469b      	mov	fp, r3
 80064b0:	4643      	mov	r3, r8
 80064b2:	eb1a 0303 	adds.w	r3, sl, r3
 80064b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064ba:	464b      	mov	r3, r9
 80064bc:	eb4b 0303 	adc.w	r3, fp, r3
 80064c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064d8:	460b      	mov	r3, r1
 80064da:	18db      	adds	r3, r3, r3
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
 80064de:	4613      	mov	r3, r2
 80064e0:	eb42 0303 	adc.w	r3, r2, r3
 80064e4:	647b      	str	r3, [r7, #68]	; 0x44
 80064e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064ee:	f7f9 fe89 	bl	8000204 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	4b3b      	ldr	r3, [pc, #236]	; (80065e8 <UART_SetConfig+0x2d4>)
 80064fa:	fba3 2301 	umull	r2, r3, r3, r1
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	2264      	movs	r2, #100	; 0x64
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	1acb      	subs	r3, r1, r3
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800650e:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <UART_SetConfig+0x2d4>)
 8006510:	fba3 2302 	umull	r2, r3, r3, r2
 8006514:	095b      	lsrs	r3, r3, #5
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800651c:	441c      	add	r4, r3
 800651e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006522:	2200      	movs	r2, #0
 8006524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006528:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800652c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	1891      	adds	r1, r2, r2
 8006536:	63b9      	str	r1, [r7, #56]	; 0x38
 8006538:	415b      	adcs	r3, r3
 800653a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006540:	4641      	mov	r1, r8
 8006542:	1851      	adds	r1, r2, r1
 8006544:	6339      	str	r1, [r7, #48]	; 0x30
 8006546:	4649      	mov	r1, r9
 8006548:	414b      	adcs	r3, r1
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006558:	4659      	mov	r1, fp
 800655a:	00cb      	lsls	r3, r1, #3
 800655c:	4651      	mov	r1, sl
 800655e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006562:	4651      	mov	r1, sl
 8006564:	00ca      	lsls	r2, r1, #3
 8006566:	4610      	mov	r0, r2
 8006568:	4619      	mov	r1, r3
 800656a:	4603      	mov	r3, r0
 800656c:	4642      	mov	r2, r8
 800656e:	189b      	adds	r3, r3, r2
 8006570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006574:	464b      	mov	r3, r9
 8006576:	460a      	mov	r2, r1
 8006578:	eb42 0303 	adc.w	r3, r2, r3
 800657c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800658c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006594:	460b      	mov	r3, r1
 8006596:	18db      	adds	r3, r3, r3
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
 800659a:	4613      	mov	r3, r2
 800659c:	eb42 0303 	adc.w	r3, r2, r3
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065aa:	f7f9 fe2b 	bl	8000204 <__aeabi_uldivmod>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <UART_SetConfig+0x2d4>)
 80065b4:	fba3 1302 	umull	r1, r3, r3, r2
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	2164      	movs	r1, #100	; 0x64
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	3332      	adds	r3, #50	; 0x32
 80065c6:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <UART_SetConfig+0x2d4>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	f003 0207 	and.w	r2, r3, #7
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4422      	add	r2, r4
 80065da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065dc:	e105      	b.n	80067ea <UART_SetConfig+0x4d6>
 80065de:	bf00      	nop
 80065e0:	40011000 	.word	0x40011000
 80065e4:	40011400 	.word	0x40011400
 80065e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065fe:	4642      	mov	r2, r8
 8006600:	464b      	mov	r3, r9
 8006602:	1891      	adds	r1, r2, r2
 8006604:	6239      	str	r1, [r7, #32]
 8006606:	415b      	adcs	r3, r3
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
 800660a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800660e:	4641      	mov	r1, r8
 8006610:	1854      	adds	r4, r2, r1
 8006612:	4649      	mov	r1, r9
 8006614:	eb43 0501 	adc.w	r5, r3, r1
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	00eb      	lsls	r3, r5, #3
 8006622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006626:	00e2      	lsls	r2, r4, #3
 8006628:	4614      	mov	r4, r2
 800662a:	461d      	mov	r5, r3
 800662c:	4643      	mov	r3, r8
 800662e:	18e3      	adds	r3, r4, r3
 8006630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006634:	464b      	mov	r3, r9
 8006636:	eb45 0303 	adc.w	r3, r5, r3
 800663a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800664a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800664e:	f04f 0200 	mov.w	r2, #0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800665a:	4629      	mov	r1, r5
 800665c:	008b      	lsls	r3, r1, #2
 800665e:	4621      	mov	r1, r4
 8006660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006664:	4621      	mov	r1, r4
 8006666:	008a      	lsls	r2, r1, #2
 8006668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800666c:	f7f9 fdca 	bl	8000204 <__aeabi_uldivmod>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4b60      	ldr	r3, [pc, #384]	; (80067f8 <UART_SetConfig+0x4e4>)
 8006676:	fba3 2302 	umull	r2, r3, r3, r2
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	011c      	lsls	r4, r3, #4
 800667e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006688:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800668c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	1891      	adds	r1, r2, r2
 8006696:	61b9      	str	r1, [r7, #24]
 8006698:	415b      	adcs	r3, r3
 800669a:	61fb      	str	r3, [r7, #28]
 800669c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a0:	4641      	mov	r1, r8
 80066a2:	1851      	adds	r1, r2, r1
 80066a4:	6139      	str	r1, [r7, #16]
 80066a6:	4649      	mov	r1, r9
 80066a8:	414b      	adcs	r3, r1
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066b8:	4659      	mov	r1, fp
 80066ba:	00cb      	lsls	r3, r1, #3
 80066bc:	4651      	mov	r1, sl
 80066be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c2:	4651      	mov	r1, sl
 80066c4:	00ca      	lsls	r2, r1, #3
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	4642      	mov	r2, r8
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066d4:	464b      	mov	r3, r9
 80066d6:	460a      	mov	r2, r1
 80066d8:	eb42 0303 	adc.w	r3, r2, r3
 80066dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80066ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066f8:	4649      	mov	r1, r9
 80066fa:	008b      	lsls	r3, r1, #2
 80066fc:	4641      	mov	r1, r8
 80066fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006702:	4641      	mov	r1, r8
 8006704:	008a      	lsls	r2, r1, #2
 8006706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800670a:	f7f9 fd7b 	bl	8000204 <__aeabi_uldivmod>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4b39      	ldr	r3, [pc, #228]	; (80067f8 <UART_SetConfig+0x4e4>)
 8006714:	fba3 1302 	umull	r1, r3, r3, r2
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	2164      	movs	r1, #100	; 0x64
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	3332      	adds	r3, #50	; 0x32
 8006726:	4a34      	ldr	r2, [pc, #208]	; (80067f8 <UART_SetConfig+0x4e4>)
 8006728:	fba2 2303 	umull	r2, r3, r2, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006732:	441c      	add	r4, r3
 8006734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006738:	2200      	movs	r2, #0
 800673a:	673b      	str	r3, [r7, #112]	; 0x70
 800673c:	677a      	str	r2, [r7, #116]	; 0x74
 800673e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006742:	4642      	mov	r2, r8
 8006744:	464b      	mov	r3, r9
 8006746:	1891      	adds	r1, r2, r2
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	415b      	adcs	r3, r3
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006752:	4641      	mov	r1, r8
 8006754:	1851      	adds	r1, r2, r1
 8006756:	6039      	str	r1, [r7, #0]
 8006758:	4649      	mov	r1, r9
 800675a:	414b      	adcs	r3, r1
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800676a:	4659      	mov	r1, fp
 800676c:	00cb      	lsls	r3, r1, #3
 800676e:	4651      	mov	r1, sl
 8006770:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006774:	4651      	mov	r1, sl
 8006776:	00ca      	lsls	r2, r1, #3
 8006778:	4610      	mov	r0, r2
 800677a:	4619      	mov	r1, r3
 800677c:	4603      	mov	r3, r0
 800677e:	4642      	mov	r2, r8
 8006780:	189b      	adds	r3, r3, r2
 8006782:	66bb      	str	r3, [r7, #104]	; 0x68
 8006784:	464b      	mov	r3, r9
 8006786:	460a      	mov	r2, r1
 8006788:	eb42 0303 	adc.w	r3, r2, r3
 800678c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	663b      	str	r3, [r7, #96]	; 0x60
 8006798:	667a      	str	r2, [r7, #100]	; 0x64
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067a6:	4649      	mov	r1, r9
 80067a8:	008b      	lsls	r3, r1, #2
 80067aa:	4641      	mov	r1, r8
 80067ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067b0:	4641      	mov	r1, r8
 80067b2:	008a      	lsls	r2, r1, #2
 80067b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067b8:	f7f9 fd24 	bl	8000204 <__aeabi_uldivmod>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <UART_SetConfig+0x4e4>)
 80067c2:	fba3 1302 	umull	r1, r3, r3, r2
 80067c6:	095b      	lsrs	r3, r3, #5
 80067c8:	2164      	movs	r1, #100	; 0x64
 80067ca:	fb01 f303 	mul.w	r3, r1, r3
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	3332      	adds	r3, #50	; 0x32
 80067d4:	4a08      	ldr	r2, [pc, #32]	; (80067f8 <UART_SetConfig+0x4e4>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	f003 020f 	and.w	r2, r3, #15
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4422      	add	r2, r4
 80067e8:	609a      	str	r2, [r3, #8]
}
 80067ea:	bf00      	nop
 80067ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067f0:	46bd      	mov	sp, r7
 80067f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f6:	bf00      	nop
 80067f8:	51eb851f 	.word	0x51eb851f

080067fc <LL_EXTI_EnableIT_0_31>:
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <LL_EXTI_EnableIT_0_31+0x20>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4904      	ldr	r1, [pc, #16]	; (800681c <LL_EXTI_EnableIT_0_31+0x20>)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4313      	orrs	r3, r2
 800680e:	600b      	str	r3, [r1, #0]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40013c00 	.word	0x40013c00

08006820 <LL_EXTI_DisableIT_0_31>:
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <LL_EXTI_DisableIT_0_31+0x24>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	43db      	mvns	r3, r3
 8006830:	4904      	ldr	r1, [pc, #16]	; (8006844 <LL_EXTI_DisableIT_0_31+0x24>)
 8006832:	4013      	ands	r3, r2
 8006834:	600b      	str	r3, [r1, #0]
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40013c00 	.word	0x40013c00

08006848 <LL_EXTI_EnableEvent_0_31>:
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	4904      	ldr	r1, [pc, #16]	; (8006868 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4313      	orrs	r3, r2
 800685a:	604b      	str	r3, [r1, #4]
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40013c00 	.word	0x40013c00

0800686c <LL_EXTI_DisableEvent_0_31>:
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8006874:	4b06      	ldr	r3, [pc, #24]	; (8006890 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	43db      	mvns	r3, r3
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <LL_EXTI_DisableEvent_0_31+0x24>)
 800687e:	4013      	ands	r3, r2
 8006880:	604b      	str	r3, [r1, #4]
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40013c00 	.word	0x40013c00

08006894 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	4904      	ldr	r1, [pc, #16]	; (80068b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	608b      	str	r3, [r1, #8]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40013c00 	.word	0x40013c00

080068b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	4904      	ldr	r1, [pc, #16]	; (80068dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	608b      	str	r3, [r1, #8]
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40013c00 	.word	0x40013c00

080068e0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	4904      	ldr	r1, [pc, #16]	; (8006900 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60cb      	str	r3, [r1, #12]
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40013c00 	.word	0x40013c00

08006904 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	43db      	mvns	r3, r3
 8006914:	4904      	ldr	r1, [pc, #16]	; (8006928 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006916:	4013      	ands	r3, r2
 8006918:	60cb      	str	r3, [r1, #12]
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40013c00 	.word	0x40013c00

0800692c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d065      	beq.n	8006a0c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d06c      	beq.n	8006a22 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	795b      	ldrb	r3, [r3, #5]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d01c      	beq.n	800698a <LL_EXTI_Init+0x5e>
 8006950:	2b02      	cmp	r3, #2
 8006952:	dc25      	bgt.n	80069a0 <LL_EXTI_Init+0x74>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <LL_EXTI_Init+0x32>
 8006958:	2b01      	cmp	r3, #1
 800695a:	d00b      	beq.n	8006974 <LL_EXTI_Init+0x48>
 800695c:	e020      	b.n	80069a0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff ff82 	bl	800686c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff45 	bl	80067fc <LL_EXTI_EnableIT_0_31>
          break;
 8006972:	e018      	b.n	80069a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff ff51 	bl	8006820 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff ff60 	bl	8006848 <LL_EXTI_EnableEvent_0_31>
          break;
 8006988:	e00d      	b.n	80069a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff ff34 	bl	80067fc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff ff55 	bl	8006848 <LL_EXTI_EnableEvent_0_31>
          break;
 800699e:	e002      	b.n	80069a6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
          break;
 80069a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	799b      	ldrb	r3, [r3, #6]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d039      	beq.n	8006a22 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	799b      	ldrb	r3, [r3, #6]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d01c      	beq.n	80069f0 <LL_EXTI_Init+0xc4>
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	dc25      	bgt.n	8006a06 <LL_EXTI_Init+0xda>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d002      	beq.n	80069c4 <LL_EXTI_Init+0x98>
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d00b      	beq.n	80069da <LL_EXTI_Init+0xae>
 80069c2:	e020      	b.n	8006a06 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff9b 	bl	8006904 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff ff5e 	bl	8006894 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80069d8:	e024      	b.n	8006a24 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff ff6a 	bl	80068b8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff ff79 	bl	80068e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80069ee:	e019      	b.n	8006a24 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff ff4d 	bl	8006894 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff ff6e 	bl	80068e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006a04:	e00e      	b.n	8006a24 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
            break;
 8006a0a:	e00b      	b.n	8006a24 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff05 	bl	8006820 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ff26 	bl	800686c <LL_EXTI_DisableEvent_0_31>
 8006a20:	e000      	b.n	8006a24 <LL_EXTI_Init+0xf8>
      }
 8006a22:	bf00      	nop
  }
  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <LL_GPIO_SetPinMode>:
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b089      	sub	sp, #36	; 0x24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	fa93 f3a3 	rbit	r3, r3
 8006a48:	613b      	str	r3, [r7, #16]
  return result;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	fab3 f383 	clz	r3, r3
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	2103      	movs	r1, #3
 8006a56:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	401a      	ands	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	fa93 f3a3 	rbit	r3, r3
 8006a68:	61bb      	str	r3, [r7, #24]
  return result;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	fab3 f383 	clz	r3, r3
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	601a      	str	r2, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	3724      	adds	r7, #36	; 0x24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_GPIO_SetPinOutputType>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	401a      	ands	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	605a      	str	r2, [r3, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <LL_GPIO_SetPinSpeed>:
{
 8006abc:	b480      	push	{r7}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	fa93 f3a3 	rbit	r3, r3
 8006ad6:	613b      	str	r3, [r7, #16]
  return result;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	fab3 f383 	clz	r3, r3
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	2103      	movs	r1, #3
 8006ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	401a      	ands	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	61bb      	str	r3, [r7, #24]
  return result;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	fa01 f303 	lsl.w	r3, r1, r3
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	609a      	str	r2, [r3, #8]
}
 8006b0e:	bf00      	nop
 8006b10:	3724      	adds	r7, #36	; 0x24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <LL_GPIO_SetPinPull>:
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b089      	sub	sp, #36	; 0x24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	fa93 f3a3 	rbit	r3, r3
 8006b34:	613b      	str	r3, [r7, #16]
  return result;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	fab3 f383 	clz	r3, r3
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	2103      	movs	r1, #3
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	401a      	ands	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	fa93 f3a3 	rbit	r3, r3
 8006b54:	61bb      	str	r3, [r7, #24]
  return result;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	fab3 f383 	clz	r3, r3
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	fa01 f303 	lsl.w	r3, r1, r3
 8006b66:	431a      	orrs	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
}
 8006b6c:	bf00      	nop
 8006b6e:	3724      	adds	r7, #36	; 0x24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <LL_GPIO_SetAFPin_0_7>:
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	fa93 f3a3 	rbit	r3, r3
 8006b92:	613b      	str	r3, [r7, #16]
  return result;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	fab3 f383 	clz	r3, r3
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	210f      	movs	r1, #15
 8006ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	401a      	ands	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	fa93 f3a3 	rbit	r3, r3
 8006bb2:	61bb      	str	r3, [r7, #24]
  return result;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	fab3 f383 	clz	r3, r3
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	3724      	adds	r7, #36	; 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <LL_GPIO_SetAFPin_8_15>:
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b089      	sub	sp, #36	; 0x24
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	fa93 f3a3 	rbit	r3, r3
 8006bf2:	613b      	str	r3, [r7, #16]
  return result;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	fab3 f383 	clz	r3, r3
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	210f      	movs	r1, #15
 8006c00:	fa01 f303 	lsl.w	r3, r1, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	fa93 f3a3 	rbit	r3, r3
 8006c14:	61bb      	str	r3, [r7, #24]
  return result;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	fab3 f383 	clz	r3, r3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	fa01 f303 	lsl.w	r3, r1, r3
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006c2c:	bf00      	nop
 8006c2e:	3724      	adds	r7, #36	; 0x24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	fa93 f3a3 	rbit	r3, r3
 8006c56:	613b      	str	r3, [r7, #16]
  return result;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	fab3 f383 	clz	r3, r3
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c62:	e050      	b.n	8006d06 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2101      	movs	r1, #1
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c70:	4013      	ands	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d042      	beq.n	8006d00 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d003      	beq.n	8006c8a <LL_GPIO_Init+0x52>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d10d      	bne.n	8006ca6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	69b9      	ldr	r1, [r7, #24]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff ff12 	bl	8006abc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	69b9      	ldr	r1, [r7, #24]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff fef3 	bl	8006a8c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	461a      	mov	r2, r3
 8006cac:	69b9      	ldr	r1, [r7, #24]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ff33 	bl	8006b1a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d11a      	bne.n	8006cf2 <LL_GPIO_Init+0xba>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	fa93 f3a3 	rbit	r3, r3
 8006cc6:	60bb      	str	r3, [r7, #8]
  return result;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006cca:	fab3 f383 	clz	r3, r3
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b07      	cmp	r3, #7
 8006cd2:	d807      	bhi.n	8006ce4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	69b9      	ldr	r1, [r7, #24]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff ff4b 	bl	8006b78 <LL_GPIO_SetAFPin_0_7>
 8006ce2:	e006      	b.n	8006cf2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	69b9      	ldr	r1, [r7, #24]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff72 	bl	8006bd6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff fe97 	bl	8006a2e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	3301      	adds	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1a7      	bne.n	8006c64 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <__libc_init_array>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4d0d      	ldr	r5, [pc, #52]	; (8006d58 <__libc_init_array+0x38>)
 8006d24:	4c0d      	ldr	r4, [pc, #52]	; (8006d5c <__libc_init_array+0x3c>)
 8006d26:	1b64      	subs	r4, r4, r5
 8006d28:	10a4      	asrs	r4, r4, #2
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	42a6      	cmp	r6, r4
 8006d2e:	d109      	bne.n	8006d44 <__libc_init_array+0x24>
 8006d30:	4d0b      	ldr	r5, [pc, #44]	; (8006d60 <__libc_init_array+0x40>)
 8006d32:	4c0c      	ldr	r4, [pc, #48]	; (8006d64 <__libc_init_array+0x44>)
 8006d34:	f000 f830 	bl	8006d98 <_init>
 8006d38:	1b64      	subs	r4, r4, r5
 8006d3a:	10a4      	asrs	r4, r4, #2
 8006d3c:	2600      	movs	r6, #0
 8006d3e:	42a6      	cmp	r6, r4
 8006d40:	d105      	bne.n	8006d4e <__libc_init_array+0x2e>
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d48:	4798      	blx	r3
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7ee      	b.n	8006d2c <__libc_init_array+0xc>
 8006d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d52:	4798      	blx	r3
 8006d54:	3601      	adds	r6, #1
 8006d56:	e7f2      	b.n	8006d3e <__libc_init_array+0x1e>
 8006d58:	08006e74 	.word	0x08006e74
 8006d5c:	08006e74 	.word	0x08006e74
 8006d60:	08006e74 	.word	0x08006e74
 8006d64:	08006e78 	.word	0x08006e78

08006d68 <memcmp>:
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	3901      	subs	r1, #1
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4290      	cmp	r0, r2
 8006d70:	d101      	bne.n	8006d76 <memcmp+0xe>
 8006d72:	2000      	movs	r0, #0
 8006d74:	e005      	b.n	8006d82 <memcmp+0x1a>
 8006d76:	7803      	ldrb	r3, [r0, #0]
 8006d78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d001      	beq.n	8006d84 <memcmp+0x1c>
 8006d80:	1b18      	subs	r0, r3, r4
 8006d82:	bd10      	pop	{r4, pc}
 8006d84:	3001      	adds	r0, #1
 8006d86:	e7f2      	b.n	8006d6e <memcmp+0x6>

08006d88 <memset>:
 8006d88:	4402      	add	r2, r0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d100      	bne.n	8006d92 <memset+0xa>
 8006d90:	4770      	bx	lr
 8006d92:	f803 1b01 	strb.w	r1, [r3], #1
 8006d96:	e7f9      	b.n	8006d8c <memset+0x4>

08006d98 <_init>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr

08006da4 <_fini>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr
