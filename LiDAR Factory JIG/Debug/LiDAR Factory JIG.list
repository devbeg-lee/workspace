
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a94  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf0  08005cf0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cf8  08005cf8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000010  08005d10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08005d10  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014aef  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354d  00000000  00000000  00034b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00038080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00039170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002814d  00000000  00000000  0003a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b81  00000000  00000000  00062235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed4c9  00000000  00000000  0007adb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016827f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  001682d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005c40 	.word	0x08005c40

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005c40 	.word	0x08005c40

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x98>)
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ADC1_Init+0x98>)
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_ADC1_Init+0x98>)
 800056a:	f002 f8d3 	bl	8002714 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fce2 	bl	8000f3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000580:	2304      	movs	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0x98>)
 800058a:	f002 faa5 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fcd2 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000038 	.word	0x20000038
 80005a4:	40012000 	.word	0x40012000
 80005a8:	0f000001 	.word	0x0f000001

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d127      	bne.n	800061e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_MspInit+0x84>)
 800061a:	f002 fdcf 	bl	80031bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <LiDAR_Cur_Check>:
  }
}

/* USER CODE BEGIN 1 */
void LiDAR_Cur_Check(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 800063a:	f002 f8af 	bl	800279c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000642:	f002 f9b0 	bl	80029a6 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000648:	f002 fa38 	bl	8002abc <HAL_ADC_GetValue>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000652:	801a      	strh	r2, [r3, #0]
  total_adc_val += adc_val;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
  cnt++;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000672:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000676:	f002 f963 	bl	8002940 <HAL_ADC_Stop>

  Delay_ms(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f88c 	bl	8000798 <Delay_ms>
  if (cnt == ADC_AVG_BUFFER_SIZE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d120      	bne.n	80006cc <LiDAR_Cur_Check+0x98>
  {
    avg_adc_val = total_adc_val / ADC_AVG_BUFFER_SIZE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <LiDAR_Cur_Check+0xac>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069a:	801a      	strh	r2, [r3, #0]
    load_current = avg_adc_val / ADC_OFFSET;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006aa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006e8 <LiDAR_Cur_Check+0xb4>
 80006ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <LiDAR_Cur_Check+0xb8>)
 80006be:	801a      	strh	r2, [r3, #0]
    total_adc_val = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    cnt = 0;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  }
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000038 	.word	0x20000038
 80006d4:	2000002e 	.word	0x2000002e
 80006d8:	20000030 	.word	0x20000030
 80006dc:	20000034 	.word	0x20000034
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	20000036 	.word	0x20000036
 80006e8:	4022cbfb 	.word	0x4022cbfb
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Delay_us+0x40>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006fe:	f003 f83f 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <Delay_us+0x44>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Delay_us+0x40>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f8      	bcc.n	8000716 <Delay_us+0x26>
    	;
  }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0001000 	.word	0xe0001000
 8000734:	431bde83 	.word	0x431bde83

08000738 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <DWT_Delay_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <DWT_Delay_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <DWT_Delay_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <DWT_Delay_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <DWT_Delay_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <DWT_Delay_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile("NOP");
 8000772:	bf00      	nop
  __ASM volatile("NOP");
 8000774:	bf00      	nop
  __ASM volatile("NOP");
 8000776:	bf00      	nop

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <DWT_Delay_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <DWT_Delay_Init+0x4c>
  {
    return 0; /*clock cycle counter started*/
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /*clock cycle counter not started*/
 8000784:	2301      	movs	r3, #1
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa0 	bl	80006f0 <Delay_us>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3302      	adds	r3, #2
 80008de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	43db      	mvns	r3, r3
 80008e8:	ea02 0103 	and.w	r1, r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	fa03 f202 	lsl.w	r2, r3, r2
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	430a      	orrs	r2, r1
 8000912:	3302      	adds	r3, #2
 8000914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013800 	.word	0x40013800

08000928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa93 f3a3 	rbit	r3, r3
 8000942:	613b      	str	r3, [r7, #16]
  return result;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61bb      	str	r3, [r7, #24]
  return result;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	431a      	orrs	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000986:	b480      	push	{r7}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	613b      	str	r3, [r7, #16]
  return result;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa93 f3a3 	rbit	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
  return result;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff ffd5 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	f7ff ffd2 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffcf 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff ffcc 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff ffc9 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a72:	f642 4107 	movw	r1, #11271	; 0x2c07
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000a78:	f7ff ffb4 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	4880      	ldr	r0, [pc, #512]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000a80:	f7ff ffb0 	bl	80009e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 8000a84:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000a88:	487e      	ldr	r0, [pc, #504]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000a8a:	f7ff ffab 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a8e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000a92:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000aaa:	f005 f829 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000aae:	2382      	movs	r3, #130	; 0x82
 8000ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486e      	ldr	r0, [pc, #440]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000ac8:	f005 f81a 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000acc:	f240 630c 	movw	r3, #1548	; 0x60c
 8000ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000aec:	f005 f808 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 8000af0:	f641 1370 	movw	r3, #6512	; 0x1970
 8000af4:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	485f      	ldr	r0, [pc, #380]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000b04:	f004 fffc 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4855      	ldr	r0, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000b26:	f004 ffeb 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b4a:	f004 ffd9 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b6a:	f004 ffc9 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b82:	f004 ffbd 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000b86:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000b8a:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000ba2:	f004 ffad 	bl	8005b00 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000bba:	f004 ffa1 	bl	8005b00 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000bbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe82 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000bc8:	492f      	ldr	r1, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x254>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe7e 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fe05 	bl	80057f4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fdf7 	bl	80057f4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c0c:	f7ff febb 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c18:	f7ff feb5 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c22:	f7ff fe81 	bl	8000928 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c2e:	f7ff fe7b 	bl	8000928 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c32:	f7ff fdc1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe11 	bl	8000864 <NVIC_EncodePriority>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fde2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f7ff fdc1 	bl	80007d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c52:	f7ff fdb1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe01 	bl	8000864 <NVIC_EncodePriority>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4619      	mov	r1, r3
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff fdd2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f7ff fdb1 	bl	80007d4 <__NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	f0000003 	.word	0xf0000003

08000c8c <LL_GPIO_SetOutputPin>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ResetOutputPin>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <Delay_us>:
  {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <Delay_us+0x40>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cd6:	f002 fd53 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <Delay_us+0x44>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000cec:	bf00      	nop
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <Delay_us+0x40>)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3f8      	bcc.n	8000cee <Delay_us+0x26>
  }
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e0001000 	.word	0xe0001000
 8000d0c:	431bde83 	.word	0x431bde83

08000d10 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f001 fc8c 	bl	8002630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f89e 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff fe8a 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d20:	f7ff fbf2 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000d24:	f001 fb5a 	bl	80023dc <MX_UART5_Init>
  MX_TIM3_Init();
 8000d28:	f001 fa86 	bl	8002238 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000d2c:	f001 fb80 	bl	8002430 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000d30:	f7ff fd02 	bl	8000738 <DWT_Delay_Init>
  InitUartQueue(&ViewerQueue);
 8000d34:	483b      	ldr	r0, [pc, #236]	; (8000e24 <main+0x114>)
 8000d36:	f000 fffb 	bl	8001d30 <InitUartQueue>
  InitUartQueue(&LiDARQueue);
 8000d3a:	483b      	ldr	r0, [pc, #236]	; (8000e28 <main+0x118>)
 8000d3c:	f000 fff8 	bl	8001d30 <InitUartQueue>
  if (HAL_UART_Receive_IT(&hViewer, ViewerQueue.Buffer, 1) != HAL_OK)
 8000d40:	2201      	movs	r2, #1
 8000d42:	493a      	ldr	r1, [pc, #232]	; (8000e2c <main+0x11c>)
 8000d44:	483a      	ldr	r0, [pc, #232]	; (8000e30 <main+0x120>)
 8000d46:	f004 f96c 	bl	8005022 <HAL_UART_Receive_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <main+0x44>
  {
    Error_Handler();
 8000d50:	f000 f8f4 	bl	8000f3c <Error_Handler>
  }
  if (HAL_UART_Receive_IT(&hLiDAR, LiDARQueue.Buffer, 1) != HAL_OK)
 8000d54:	2201      	movs	r2, #1
 8000d56:	4937      	ldr	r1, [pc, #220]	; (8000e34 <main+0x124>)
 8000d58:	4837      	ldr	r0, [pc, #220]	; (8000e38 <main+0x128>)
 8000d5a:	f004 f962 	bl	8005022 <HAL_UART_Receive_IT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <main+0x58>
  {
    Error_Handler();
 8000d64:	f000 f8ea 	bl	8000f3c <Error_Handler>
  }
  //  LL_USART_EnableIT_RXNE(UART5);
  //  LL_USART_EnableIT_RXNE(USART6);
  switch_check();
 8000d68:	f001 fa24 	bl	80021b4 <switch_check>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

    if (Mode_data == 0) // Factory JIG
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <main+0x12c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d114      	bne.n	8000d9e <main+0x8e>
    {
      switch (g_Status)
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <main+0x130>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d00c      	beq.n	8000d98 <main+0x88>
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	dc4d      	bgt.n	8000e1e <main+0x10e>
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <main+0x7c>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d003      	beq.n	8000d92 <main+0x82>
      case kStatus_Result:
        result();
        break;

      default:
        break;
 8000d8a:	e048      	b.n	8000e1e <main+0x10e>
        Idle_status();
 8000d8c:	f001 f84e 	bl	8001e2c <Idle_status>
        break;
 8000d90:	e046      	b.n	8000e20 <main+0x110>
        Test_status();
 8000d92:	f001 f8ad 	bl	8001ef0 <Test_status>
        break;
 8000d96:	e043      	b.n	8000e20 <main+0x110>
        result();
 8000d98:	f000 fa00 	bl	800119c <result>
        break;
 8000d9c:	e040      	b.n	8000e20 <main+0x110>
      }
    }
    else // LD Tx
    {
      if (tx_start_flag == 1)
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <main+0x134>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d1e2      	bne.n	8000d6c <main+0x5c>
      {
        if (stop_feedback == 0)
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <main+0x138>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d129      	bne.n	8000e02 <main+0xf2>
        {
          LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <main+0x13c>)
 8000db4:	f7ff ff6a 	bl	8000c8c <LL_GPIO_SetOutputPin>
          stop_feedback = HAL_GPIO_ReadPin(FB_STOP1_SIG_GPIO_Port, FB_STOP1_SIG_Pin);
 8000db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbc:	4823      	ldr	r0, [pc, #140]	; (8000e4c <main+0x13c>)
 8000dbe:	f002 fb91 	bl	80034e4 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <main+0x138>)
 8000dc8:	701a      	strb	r2, [r3, #0]
          LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dce:	481f      	ldr	r0, [pc, #124]	; (8000e4c <main+0x13c>)
 8000dd0:	f7ff ff6a 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
          feedback_ng_cnt++;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <main+0x140>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <main+0x140>)
 8000dde:	701a      	strb	r2, [r3, #0]
          if (feedback_ng_cnt >= 5)
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <main+0x140>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d908      	bls.n	8000dfa <main+0xea>
          {
            g_Result = kResult_Err_11;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <main+0x144>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	701a      	strb	r2, [r3, #0]
            stop_feedback = 1;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <main+0x138>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
            feedback_ng_cnt = 0;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <main+0x140>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
          }
          Delay_us(20);
 8000dfa:	2014      	movs	r0, #20
 8000dfc:	f7ff ff64 	bl	8000cc8 <Delay_us>
 8000e00:	e7b4      	b.n	8000d6c <main+0x5c>
        }
        else
        {
          LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <main+0x13c>)
 8000e08:	f7ff ff40 	bl	8000c8c <LL_GPIO_SetOutputPin>
          LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <main+0x13c>)
 8000e12:	f7ff ff49 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
          Delay_us(20);
 8000e16:	2014      	movs	r0, #20
 8000e18:	f7ff ff56 	bl	8000cc8 <Delay_us>
 8000e1c:	e7a6      	b.n	8000d6c <main+0x5c>
        break;
 8000e1e:	bf00      	nop
    if (Mode_data == 0) // Factory JIG
 8000e20:	e7a4      	b.n	8000d6c <main+0x5c>
 8000e22:	bf00      	nop
 8000e24:	20000188 	.word	0x20000188
 8000e28:	20000084 	.word	0x20000084
 8000e2c:	2000018b 	.word	0x2000018b
 8000e30:	200002e4 	.word	0x200002e4
 8000e34:	20000087 	.word	0x20000087
 8000e38:	20000328 	.word	0x20000328
 8000e3c:	2000029b 	.word	0x2000029b
 8000e40:	20000080 	.word	0x20000080
 8000e44:	2000029a 	.word	0x2000029a
 8000e48:	20000081 	.word	0x20000081
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	20000082 	.word	0x20000082
 8000e54:	20000083 	.word	0x20000083

08000e58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	; 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2234      	movs	r2, #52	; 0x34
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fee2 	bl	8005c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <SystemClock_Config+0xdc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a2b      	ldr	r2, [pc, #172]	; (8000f34 <SystemClock_Config+0xdc>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <SystemClock_Config+0xdc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <SystemClock_Config+0xe0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a25      	ldr	r2, [pc, #148]	; (8000f38 <SystemClock_Config+0xe0>)
 8000ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SystemClock_Config+0xe0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ecc:	23b4      	movs	r3, #180	; 0xb4
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fe2b 	bl	8003b3c <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eec:	f000 f826 	bl	8000f3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ef0:	f002 fb10 	bl	8003514 <HAL_PWREx_EnableOverDrive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000efa:	f000 f81f 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000efe:	230f      	movs	r3, #15
 8000f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2302      	movs	r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fb49 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f28:	f000 f808 	bl	8000f3c <Error_Handler>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	3750      	adds	r7, #80	; 0x50
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000

08000f3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>
	...

08000f48 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d85d      	bhi.n	800102a <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000f6e:	7cfb      	ldrb	r3, [r7, #19]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	74fa      	strb	r2, [r7, #19]
 8000f74:	3318      	adds	r3, #24
 8000f76:	443b      	add	r3, r7
 8000f78:	22fa      	movs	r2, #250	; 0xfa
 8000f7a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000f7e:	7cfb      	ldrb	r3, [r7, #19]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	74fa      	strb	r2, [r7, #19]
 8000f84:	3318      	adds	r3, #24
 8000f86:	443b      	add	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000f8e:	7cfb      	ldrb	r3, [r7, #19]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	74fa      	strb	r2, [r7, #19]
 8000f94:	3318      	adds	r3, #24
 8000f96:	443b      	add	r3, r7
 8000f98:	22d0      	movs	r2, #208	; 0xd0
 8000f9a:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000f9e:	7cfb      	ldrb	r3, [r7, #19]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	74fa      	strb	r2, [r7, #19]
 8000fa4:	3318      	adds	r3, #24
 8000fa6:	443b      	add	r3, r7
 8000fa8:	220f      	movs	r2, #15
 8000faa:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8000fae:	7cfb      	ldrb	r3, [r7, #19]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	74fa      	strb	r2, [r7, #19]
 8000fb4:	3318      	adds	r3, #24
 8000fb6:	443b      	add	r3, r7
 8000fb8:	79fa      	ldrb	r2, [r7, #7]
 8000fba:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fbe:	7cfb      	ldrb	r3, [r7, #19]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	74fa      	strb	r2, [r7, #19]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	443b      	add	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	74fa      	strb	r2, [r7, #19]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	443b      	add	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	74fa      	strb	r2, [r7, #19]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	443b      	add	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	82bb      	strh	r3, [r7, #20]
 8000ff6:	e00a      	b.n	800100e <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8000ff8:	8abb      	ldrh	r3, [r7, #20]
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	443b      	add	r3, r7
 8000ffe:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	4053      	eors	r3, r2
 8001006:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001008:	8abb      	ldrh	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	82bb      	strh	r3, [r7, #20]
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	b29b      	uxth	r3, r3
 8001012:	8aba      	ldrh	r2, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3ef      	bcc.n	8000ff8 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8001018:	7cfb      	ldrb	r3, [r7, #19]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	74fa      	strb	r2, [r7, #19]
 800101e:	3318      	adds	r3, #24
 8001020:	443b      	add	r3, r7
 8001022:	7dfa      	ldrb	r2, [r7, #23]
 8001024:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001028:	e000      	b.n	800102c <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 800102a:	bf00      	nop
    }
    HAL_UART_Transmit(&hLiDAR, senddata, sizeof(senddata), 10000);
 800102c:	f107 0108 	add.w	r1, r7, #8
 8001030:	f242 7310 	movw	r3, #10000	; 0x2710
 8001034:	2209      	movs	r2, #9
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <LiDAR_Protocol_Tx+0xfc>)
 8001038:	f003 ff61 	bl	8004efe <HAL_UART_Transmit>
    //    UART_Transmit(USART6, senddata, sizeof(senddata));
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000328 	.word	0x20000328

08001048 <LL_GPIO_SetOutputPin>:
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	619a      	str	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_GPIO_ResetOutputPin>:
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <fail_sound>:

extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;

void fail_sound(uint8_t i)
{
 8001084:	b490      	push	{r4, r7}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <fail_sound+0x16>
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <fail_sound+0x78>
    {
        unsigned int fail_sound[] = {C5, C5, C5, C5};
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <fail_sound+0x8c>)
 800109c:	f107 0408 	add.w	r4, r7, #8
 80010a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <fail_sound+0x90>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	3318      	adds	r3, #24
 80010b2:	443b      	add	r3, r7
 80010b4:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <fail_sound+0x94>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	fbb1 f2f2 	udiv	r2, r1, r2
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <fail_sound+0x90>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	3318      	adds	r3, #24
 80010ce:	443b      	add	r3, r7
 80010d0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <fail_sound+0x94>)
 80010da:	60d3      	str	r3, [r2, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <fail_sound+0x90>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	3318      	adds	r3, #24
 80010e8:	443b      	add	r3, r7
 80010ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80010ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <fail_sound+0x94>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	0852      	lsrs	r2, r2, #1
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 80010fa:	e004      	b.n	8001106 <fail_sound+0x82>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <fail_sound+0x94>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc90      	pop	{r4, r7}
 800110e:	4770      	bx	lr
 8001110:	08005c58 	.word	0x08005c58
 8001114:	20000000 	.word	0x20000000
 8001118:	2000029c 	.word	0x2000029c

0800111c <pass_sound>:

void pass_sound(uint8_t i)
{
 800111c:	b490      	push	{r4, r7}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C4, E4, G4, C5};
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <pass_sound+0x74>)
 8001128:	f107 0408 	add.w	r4, r7, #8
 800112c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <pass_sound+0x78>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	3318      	adds	r3, #24
 800113e:	443b      	add	r3, r7
 8001140:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <pass_sound+0x7c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	fbb1 f2f2 	udiv	r2, r1, r2
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <pass_sound+0x78>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	3318      	adds	r3, #24
 800115a:	443b      	add	r3, r7
 800115c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <pass_sound+0x7c>)
 8001166:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / pass_sound[i] / 2);
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <pass_sound+0x78>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	3318      	adds	r3, #24
 8001174:	443b      	add	r3, r7
 8001176:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800117a:	fbb2 f2f3 	udiv	r2, r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <pass_sound+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0852      	lsrs	r2, r2, #1
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bc90      	pop	{r4, r7}
 800118e:	4770      	bx	lr
 8001190:	08005c68 	.word	0x08005c68
 8001194:	20000000 	.word	0x20000000
 8001198:	2000029c 	.word	0x2000029c

0800119c <result>:

void result(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011a2:	2108      	movs	r1, #8
 80011a4:	48ba      	ldr	r0, [pc, #744]	; (8001490 <result+0x2f4>)
 80011a6:	f003 f80f 	bl	80041c8 <HAL_TIM_PWM_Start>

    switch (g_Result)
 80011aa:	4bba      	ldr	r3, [pc, #744]	; (8001494 <result+0x2f8>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b0d      	cmp	r3, #13
 80011b2:	f200 82d0 	bhi.w	8001756 <result+0x5ba>
 80011b6:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <result+0x20>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011f5 	.word	0x080011f5
 80011c0:	0800121b 	.word	0x0800121b
 80011c4:	0800127d 	.word	0x0800127d
 80011c8:	080012e3 	.word	0x080012e3
 80011cc:	08001349 	.word	0x08001349
 80011d0:	080013af 	.word	0x080013af
 80011d4:	08001415 	.word	0x08001415
 80011d8:	0800147b 	.word	0x0800147b
 80011dc:	080014f3 	.word	0x080014f3
 80011e0:	08001559 	.word	0x08001559
 80011e4:	080015bf 	.word	0x080015bf
 80011e8:	08001625 	.word	0x08001625
 80011ec:	0800168b 	.word	0x0800168b
 80011f0:	080016f1 	.word	0x080016f1
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80011f4:	2104      	movs	r1, #4
 80011f6:	48a8      	ldr	r0, [pc, #672]	; (8001498 <result+0x2fc>)
 80011f8:	f7ff ff34 	bl	8001064 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80011fc:	2120      	movs	r1, #32
 80011fe:	48a7      	ldr	r0, [pc, #668]	; (800149c <result+0x300>)
 8001200:	f7ff ff30 	bl	8001064 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	48a3      	ldr	r0, [pc, #652]	; (8001498 <result+0x2fc>)
 800120a:	f7ff ff2b 	bl	8001064 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	48a1      	ldr	r0, [pc, #644]	; (8001498 <result+0x2fc>)
 8001214:	f7ff ff26 	bl	8001064 <LL_GPIO_ResetOutputPin>
        break;
 8001218:	e29e      	b.n	8001758 <result+0x5bc>

    case kResult_Pass:
        for (uint8_t j = 0; j <= 3; j++)
 800121a:	2300      	movs	r3, #0
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	e029      	b.n	8001274 <result+0xd8>
        {
            pass_sound(j);
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff7a 	bl	800111c <pass_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001228:	2301      	movs	r3, #1
 800122a:	77bb      	strb	r3, [r7, #30]
 800122c:	e01c      	b.n	8001268 <result+0xcc>
            {
                FND_1();
 800122e:	f000 faa5 	bl	800177c <FND_1>
                FND_P();
 8001232:	f000 fb0b 	bl	800184c <FND_P>
                Delay_ms(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff faae 	bl	8000798 <Delay_ms>
                FND_2();
 800123c:	f000 fab8 	bl	80017b0 <FND_2>
                FND_A();
 8001240:	f000 fb2c 	bl	800189c <FND_A>
                Delay_ms(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff faa7 	bl	8000798 <Delay_ms>
                FND_3();
 800124a:	f000 facb 	bl	80017e4 <FND_3>
                FND_S();
 800124e:	f000 fb4d 	bl	80018ec <FND_S>
                Delay_ms(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff faa0 	bl	8000798 <Delay_ms>
                FND_4();
 8001258:	f000 fade 	bl	8001818 <FND_4>
                Delay_ms(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff fa9b 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001262:	7fbb      	ldrb	r3, [r7, #30]
 8001264:	3301      	adds	r3, #1
 8001266:	77bb      	strb	r3, [r7, #30]
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	2bfa      	cmp	r3, #250	; 0xfa
 800126c:	d9df      	bls.n	800122e <result+0x92>
        for (uint8_t j = 0; j <= 3; j++)
 800126e:	7ffb      	ldrb	r3, [r7, #31]
 8001270:	3301      	adds	r3, #1
 8001272:	77fb      	strb	r3, [r7, #31]
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d9d2      	bls.n	8001220 <result+0x84>
            }
        }
        break;
 800127a:	e26d      	b.n	8001758 <result+0x5bc>

    case kResult_Err_1: // UART Fail
        for (uint8_t j = 0; j <= 3; j++)
 800127c:	2300      	movs	r3, #0
 800127e:	777b      	strb	r3, [r7, #29]
 8001280:	e02b      	b.n	80012da <result+0x13e>
        {
            fail_sound(j);
 8001282:	7f7b      	ldrb	r3, [r7, #29]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fefd 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 800128a:	2301      	movs	r3, #1
 800128c:	773b      	strb	r3, [r7, #28]
 800128e:	e01e      	b.n	80012ce <result+0x132>
            {
                FND_1();
 8001290:	f000 fa74 	bl	800177c <FND_1>
                FND_E();
 8001294:	f000 fb52 	bl	800193c <FND_E>
                Delay_ms(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff fa7d 	bl	8000798 <Delay_ms>
                FND_2();
 800129e:	f000 fa87 	bl	80017b0 <FND_2>
                FND_r();
 80012a2:	f000 fb73 	bl	800198c <FND_r>
                Delay_ms(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fa76 	bl	8000798 <Delay_ms>
                FND_3();
 80012ac:	f000 fa9a 	bl	80017e4 <FND_3>
                FND_zero();
 80012b0:	f000 fb94 	bl	80019dc <FND_zero>
                Delay_ms(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fa6f 	bl	8000798 <Delay_ms>
                FND_4();
 80012ba:	f000 faad 	bl	8001818 <FND_4>
                FND_one();
 80012be:	f000 fbb5 	bl	8001a2c <FND_one>
                Delay_ms(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7ff fa68 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80012c8:	7f3b      	ldrb	r3, [r7, #28]
 80012ca:	3301      	adds	r3, #1
 80012cc:	773b      	strb	r3, [r7, #28]
 80012ce:	7f3b      	ldrb	r3, [r7, #28]
 80012d0:	2bfa      	cmp	r3, #250	; 0xfa
 80012d2:	d9dd      	bls.n	8001290 <result+0xf4>
        for (uint8_t j = 0; j <= 3; j++)
 80012d4:	7f7b      	ldrb	r3, [r7, #29]
 80012d6:	3301      	adds	r3, #1
 80012d8:	777b      	strb	r3, [r7, #29]
 80012da:	7f7b      	ldrb	r3, [r7, #29]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d9d0      	bls.n	8001282 <result+0xe6>
            }
        }
        break;
 80012e0:	e23a      	b.n	8001758 <result+0x5bc>

    case kResult_Err_2: // Ethernet chip Fail
        for (uint8_t j = 0; j <= 3; j++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	76fb      	strb	r3, [r7, #27]
 80012e6:	e02b      	b.n	8001340 <result+0x1a4>
        {
            fail_sound(j);
 80012e8:	7efb      	ldrb	r3, [r7, #27]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff feca 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80012f0:	2301      	movs	r3, #1
 80012f2:	76bb      	strb	r3, [r7, #26]
 80012f4:	e01e      	b.n	8001334 <result+0x198>
            {
                FND_1();
 80012f6:	f000 fa41 	bl	800177c <FND_1>
                FND_E();
 80012fa:	f000 fb1f 	bl	800193c <FND_E>
                Delay_ms(1);
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fa4a 	bl	8000798 <Delay_ms>
                FND_2();
 8001304:	f000 fa54 	bl	80017b0 <FND_2>
                FND_r();
 8001308:	f000 fb40 	bl	800198c <FND_r>
                Delay_ms(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fa43 	bl	8000798 <Delay_ms>
                FND_3();
 8001312:	f000 fa67 	bl	80017e4 <FND_3>
                FND_zero();
 8001316:	f000 fb61 	bl	80019dc <FND_zero>
                Delay_ms(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f7ff fa3c 	bl	8000798 <Delay_ms>
                FND_4();
 8001320:	f000 fa7a 	bl	8001818 <FND_4>
                FND_two();
 8001324:	f000 fbaa 	bl	8001a7c <FND_two>
                Delay_ms(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fa35 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800132e:	7ebb      	ldrb	r3, [r7, #26]
 8001330:	3301      	adds	r3, #1
 8001332:	76bb      	strb	r3, [r7, #26]
 8001334:	7ebb      	ldrb	r3, [r7, #26]
 8001336:	2bfa      	cmp	r3, #250	; 0xfa
 8001338:	d9dd      	bls.n	80012f6 <result+0x15a>
        for (uint8_t j = 0; j <= 3; j++)
 800133a:	7efb      	ldrb	r3, [r7, #27]
 800133c:	3301      	adds	r3, #1
 800133e:	76fb      	strb	r3, [r7, #27]
 8001340:	7efb      	ldrb	r3, [r7, #27]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d9d0      	bls.n	80012e8 <result+0x14c>
            }
        }
        break;
 8001346:	e207      	b.n	8001758 <result+0x5bc>
    case kResult_Err_3: // APD BIAS Control Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001348:	2300      	movs	r3, #0
 800134a:	767b      	strb	r3, [r7, #25]
 800134c:	e02b      	b.n	80013a6 <result+0x20a>
        {
            fail_sound(j);
 800134e:	7e7b      	ldrb	r3, [r7, #25]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe97 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001356:	2301      	movs	r3, #1
 8001358:	763b      	strb	r3, [r7, #24]
 800135a:	e01e      	b.n	800139a <result+0x1fe>
            {
                FND_1();
 800135c:	f000 fa0e 	bl	800177c <FND_1>
                FND_E();
 8001360:	f000 faec 	bl	800193c <FND_E>
                Delay_ms(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fa17 	bl	8000798 <Delay_ms>
                FND_2();
 800136a:	f000 fa21 	bl	80017b0 <FND_2>
                FND_r();
 800136e:	f000 fb0d 	bl	800198c <FND_r>
                Delay_ms(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff fa10 	bl	8000798 <Delay_ms>
                FND_3();
 8001378:	f000 fa34 	bl	80017e4 <FND_3>
                FND_zero();
 800137c:	f000 fb2e 	bl	80019dc <FND_zero>
                Delay_ms(1);
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fa09 	bl	8000798 <Delay_ms>
                FND_4();
 8001386:	f000 fa47 	bl	8001818 <FND_4>
                FND_three();
 800138a:	f000 fb9f 	bl	8001acc <FND_three>
                Delay_ms(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fa02 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001394:	7e3b      	ldrb	r3, [r7, #24]
 8001396:	3301      	adds	r3, #1
 8001398:	763b      	strb	r3, [r7, #24]
 800139a:	7e3b      	ldrb	r3, [r7, #24]
 800139c:	2bfa      	cmp	r3, #250	; 0xfa
 800139e:	d9dd      	bls.n	800135c <result+0x1c0>
        for (uint8_t j = 0; j <= 3; j++)
 80013a0:	7e7b      	ldrb	r3, [r7, #25]
 80013a2:	3301      	adds	r3, #1
 80013a4:	767b      	strb	r3, [r7, #25]
 80013a6:	7e7b      	ldrb	r3, [r7, #25]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d9d0      	bls.n	800134e <result+0x1b2>
            }
        }
        break;
 80013ac:	e1d4      	b.n	8001758 <result+0x5bc>
    case kResult_Err_4: // Motor Speed Cailbration Fail
        for (uint8_t j = 0; j <= 3; j++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
 80013b2:	e02b      	b.n	800140c <result+0x270>
        {
            fail_sound(j);
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe64 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80013bc:	2301      	movs	r3, #1
 80013be:	75bb      	strb	r3, [r7, #22]
 80013c0:	e01e      	b.n	8001400 <result+0x264>
            {
                FND_1();
 80013c2:	f000 f9db 	bl	800177c <FND_1>
                FND_E();
 80013c6:	f000 fab9 	bl	800193c <FND_E>
                Delay_ms(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff f9e4 	bl	8000798 <Delay_ms>
                FND_2();
 80013d0:	f000 f9ee 	bl	80017b0 <FND_2>
                FND_r();
 80013d4:	f000 fada 	bl	800198c <FND_r>
                Delay_ms(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff f9dd 	bl	8000798 <Delay_ms>
                FND_3();
 80013de:	f000 fa01 	bl	80017e4 <FND_3>
                FND_zero();
 80013e2:	f000 fafb 	bl	80019dc <FND_zero>
                Delay_ms(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff f9d6 	bl	8000798 <Delay_ms>
                FND_4();
 80013ec:	f000 fa14 	bl	8001818 <FND_4>
                FND_four();
 80013f0:	f000 fb94 	bl	8001b1c <FND_four>
                Delay_ms(1);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff f9cf 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	3301      	adds	r3, #1
 80013fe:	75bb      	strb	r3, [r7, #22]
 8001400:	7dbb      	ldrb	r3, [r7, #22]
 8001402:	2bfa      	cmp	r3, #250	; 0xfa
 8001404:	d9dd      	bls.n	80013c2 <result+0x226>
        for (uint8_t j = 0; j <= 3; j++)
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	3301      	adds	r3, #1
 800140a:	75fb      	strb	r3, [r7, #23]
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b03      	cmp	r3, #3
 8001410:	d9d0      	bls.n	80013b4 <result+0x218>
            }
        }
        break;
 8001412:	e1a1      	b.n	8001758 <result+0x5bc>
    case kResult_Err_5: // Encoder Check Start Point Slit Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001414:	2300      	movs	r3, #0
 8001416:	757b      	strb	r3, [r7, #21]
 8001418:	e02b      	b.n	8001472 <result+0x2d6>
        {
            fail_sound(j);
 800141a:	7d7b      	ldrb	r3, [r7, #21]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fe31 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001422:	2301      	movs	r3, #1
 8001424:	753b      	strb	r3, [r7, #20]
 8001426:	e01e      	b.n	8001466 <result+0x2ca>
            {
                FND_1();
 8001428:	f000 f9a8 	bl	800177c <FND_1>
                FND_E();
 800142c:	f000 fa86 	bl	800193c <FND_E>
                Delay_ms(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff f9b1 	bl	8000798 <Delay_ms>
                FND_2();
 8001436:	f000 f9bb 	bl	80017b0 <FND_2>
                FND_r();
 800143a:	f000 faa7 	bl	800198c <FND_r>
                Delay_ms(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff f9aa 	bl	8000798 <Delay_ms>
                FND_3();
 8001444:	f000 f9ce 	bl	80017e4 <FND_3>
                FND_zero();
 8001448:	f000 fac8 	bl	80019dc <FND_zero>
                Delay_ms(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff f9a3 	bl	8000798 <Delay_ms>
                FND_4();
 8001452:	f000 f9e1 	bl	8001818 <FND_4>
                FND_five();
 8001456:	f000 fb89 	bl	8001b6c <FND_five>
                Delay_ms(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff f99c 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001460:	7d3b      	ldrb	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	753b      	strb	r3, [r7, #20]
 8001466:	7d3b      	ldrb	r3, [r7, #20]
 8001468:	2bfa      	cmp	r3, #250	; 0xfa
 800146a:	d9dd      	bls.n	8001428 <result+0x28c>
        for (uint8_t j = 0; j <= 3; j++)
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	3301      	adds	r3, #1
 8001470:	757b      	strb	r3, [r7, #21]
 8001472:	7d7b      	ldrb	r3, [r7, #21]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d9d0      	bls.n	800141a <result+0x27e>
            }
        }
        break;
 8001478:	e16e      	b.n	8001758 <result+0x5bc>
    case kResult_Err_6: // TDC Init Fail
        for (uint8_t j = 0; j <= 3; j++)
 800147a:	2300      	movs	r3, #0
 800147c:	74fb      	strb	r3, [r7, #19]
 800147e:	e034      	b.n	80014ea <result+0x34e>
        {
            fail_sound(j);
 8001480:	7cfb      	ldrb	r3, [r7, #19]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fdfe 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001488:	2301      	movs	r3, #1
 800148a:	74bb      	strb	r3, [r7, #18]
 800148c:	e027      	b.n	80014de <result+0x342>
 800148e:	bf00      	nop
 8001490:	2000029c 	.word	0x2000029c
 8001494:	20000083 	.word	0x20000083
 8001498:	40020800 	.word	0x40020800
 800149c:	40020400 	.word	0x40020400
            {
                FND_1();
 80014a0:	f000 f96c 	bl	800177c <FND_1>
                FND_E();
 80014a4:	f000 fa4a 	bl	800193c <FND_E>
                Delay_ms(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff f975 	bl	8000798 <Delay_ms>
                FND_2();
 80014ae:	f000 f97f 	bl	80017b0 <FND_2>
                FND_r();
 80014b2:	f000 fa6b 	bl	800198c <FND_r>
                Delay_ms(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff f96e 	bl	8000798 <Delay_ms>
                FND_3();
 80014bc:	f000 f992 	bl	80017e4 <FND_3>
                FND_zero();
 80014c0:	f000 fa8c 	bl	80019dc <FND_zero>
                Delay_ms(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f7ff f967 	bl	8000798 <Delay_ms>
                FND_4();
 80014ca:	f000 f9a5 	bl	8001818 <FND_4>
                FND_six();
 80014ce:	f000 fb75 	bl	8001bbc <FND_six>
                Delay_ms(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff f960 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80014d8:	7cbb      	ldrb	r3, [r7, #18]
 80014da:	3301      	adds	r3, #1
 80014dc:	74bb      	strb	r3, [r7, #18]
 80014de:	7cbb      	ldrb	r3, [r7, #18]
 80014e0:	2bfa      	cmp	r3, #250	; 0xfa
 80014e2:	d9dd      	bls.n	80014a0 <result+0x304>
        for (uint8_t j = 0; j <= 3; j++)
 80014e4:	7cfb      	ldrb	r3, [r7, #19]
 80014e6:	3301      	adds	r3, #1
 80014e8:	74fb      	strb	r3, [r7, #19]
 80014ea:	7cfb      	ldrb	r3, [r7, #19]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d9c7      	bls.n	8001480 <result+0x2e4>
            }
        }
        break;
 80014f0:	e132      	b.n	8001758 <result+0x5bc>
    case kResult_Err_7: // TDC Calibration Fail
        for (uint8_t j = 0; j <= 3; j++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	747b      	strb	r3, [r7, #17]
 80014f6:	e02b      	b.n	8001550 <result+0x3b4>
        {
            fail_sound(j);
 80014f8:	7c7b      	ldrb	r3, [r7, #17]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fdc2 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001500:	2301      	movs	r3, #1
 8001502:	743b      	strb	r3, [r7, #16]
 8001504:	e01e      	b.n	8001544 <result+0x3a8>
            {
                FND_1();
 8001506:	f000 f939 	bl	800177c <FND_1>
                FND_E();
 800150a:	f000 fa17 	bl	800193c <FND_E>
                Delay_ms(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff f942 	bl	8000798 <Delay_ms>
                FND_2();
 8001514:	f000 f94c 	bl	80017b0 <FND_2>
                FND_r();
 8001518:	f000 fa38 	bl	800198c <FND_r>
                Delay_ms(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff f93b 	bl	8000798 <Delay_ms>
                FND_3();
 8001522:	f000 f95f 	bl	80017e4 <FND_3>
                FND_zero();
 8001526:	f000 fa59 	bl	80019dc <FND_zero>
                Delay_ms(1);
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff f934 	bl	8000798 <Delay_ms>
                FND_4();
 8001530:	f000 f972 	bl	8001818 <FND_4>
                FND_seven();
 8001534:	f000 fb6a 	bl	8001c0c <FND_seven>
                Delay_ms(1);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff f92d 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800153e:	7c3b      	ldrb	r3, [r7, #16]
 8001540:	3301      	adds	r3, #1
 8001542:	743b      	strb	r3, [r7, #16]
 8001544:	7c3b      	ldrb	r3, [r7, #16]
 8001546:	2bfa      	cmp	r3, #250	; 0xfa
 8001548:	d9dd      	bls.n	8001506 <result+0x36a>
        for (uint8_t j = 0; j <= 3; j++)
 800154a:	7c7b      	ldrb	r3, [r7, #17]
 800154c:	3301      	adds	r3, #1
 800154e:	747b      	strb	r3, [r7, #17]
 8001550:	7c7b      	ldrb	r3, [r7, #17]
 8001552:	2b03      	cmp	r3, #3
 8001554:	d9d0      	bls.n	80014f8 <result+0x35c>
            }
        }
        break;
 8001556:	e0ff      	b.n	8001758 <result+0x5bc>
    case kResult_Err_8: // Detect 1 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e02b      	b.n	80015b6 <result+0x41a>
        {
            fail_sound(j);
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fd8f 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001566:	2301      	movs	r3, #1
 8001568:	73bb      	strb	r3, [r7, #14]
 800156a:	e01e      	b.n	80015aa <result+0x40e>
            {
                FND_1();
 800156c:	f000 f906 	bl	800177c <FND_1>
                FND_E();
 8001570:	f000 f9e4 	bl	800193c <FND_E>
                Delay_ms(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f7ff f90f 	bl	8000798 <Delay_ms>
                FND_2();
 800157a:	f000 f919 	bl	80017b0 <FND_2>
                FND_r();
 800157e:	f000 fa05 	bl	800198c <FND_r>
                Delay_ms(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff f908 	bl	8000798 <Delay_ms>
                FND_3();
 8001588:	f000 f92c 	bl	80017e4 <FND_3>
                FND_zero();
 800158c:	f000 fa26 	bl	80019dc <FND_zero>
                Delay_ms(1);
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff f901 	bl	8000798 <Delay_ms>
                FND_4();
 8001596:	f000 f93f 	bl	8001818 <FND_4>
                FND_eight();
 800159a:	f000 fb5f 	bl	8001c5c <FND_eight>
                Delay_ms(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f7ff f8fa 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	3301      	adds	r3, #1
 80015a8:	73bb      	strb	r3, [r7, #14]
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	2bfa      	cmp	r3, #250	; 0xfa
 80015ae:	d9dd      	bls.n	800156c <result+0x3d0>
        for (uint8_t j = 0; j <= 3; j++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d9d0      	bls.n	800155e <result+0x3c2>
            }
        }
        break;
 80015bc:	e0cc      	b.n	8001758 <result+0x5bc>
    case kResult_Err_9: // Detect 2 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 80015be:	2300      	movs	r3, #0
 80015c0:	737b      	strb	r3, [r7, #13]
 80015c2:	e02b      	b.n	800161c <result+0x480>
        {
            fail_sound(j);
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fd5c 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80015cc:	2301      	movs	r3, #1
 80015ce:	733b      	strb	r3, [r7, #12]
 80015d0:	e01e      	b.n	8001610 <result+0x474>
            {
                FND_1();
 80015d2:	f000 f8d3 	bl	800177c <FND_1>
                FND_E();
 80015d6:	f000 f9b1 	bl	800193c <FND_E>
                Delay_ms(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff f8dc 	bl	8000798 <Delay_ms>
                FND_2();
 80015e0:	f000 f8e6 	bl	80017b0 <FND_2>
                FND_r();
 80015e4:	f000 f9d2 	bl	800198c <FND_r>
                Delay_ms(1);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff f8d5 	bl	8000798 <Delay_ms>
                FND_3();
 80015ee:	f000 f8f9 	bl	80017e4 <FND_3>
                FND_zero();
 80015f2:	f000 f9f3 	bl	80019dc <FND_zero>
                Delay_ms(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff f8ce 	bl	8000798 <Delay_ms>
                FND_4();
 80015fc:	f000 f90c 	bl	8001818 <FND_4>
                FND_nine();
 8001600:	f000 fb54 	bl	8001cac <FND_nine>
                Delay_ms(1);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff f8c7 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800160a:	7b3b      	ldrb	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	733b      	strb	r3, [r7, #12]
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	2bfa      	cmp	r3, #250	; 0xfa
 8001614:	d9dd      	bls.n	80015d2 <result+0x436>
        for (uint8_t j = 0; j <= 3; j++)
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	3301      	adds	r3, #1
 800161a:	737b      	strb	r3, [r7, #13]
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d9d0      	bls.n	80015c4 <result+0x428>
            }
        }
        break;
 8001622:	e099      	b.n	8001758 <result+0x5bc>
    case kResult_Err_10: // Detect 3 Pin Fail
        for (uint8_t j = 0; j <= 3; j++)
 8001624:	2300      	movs	r3, #0
 8001626:	72fb      	strb	r3, [r7, #11]
 8001628:	e02b      	b.n	8001682 <result+0x4e6>
        {
            fail_sound(j);
 800162a:	7afb      	ldrb	r3, [r7, #11]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fd29 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001632:	2301      	movs	r3, #1
 8001634:	72bb      	strb	r3, [r7, #10]
 8001636:	e01e      	b.n	8001676 <result+0x4da>
            {
                FND_1();
 8001638:	f000 f8a0 	bl	800177c <FND_1>
                FND_E();
 800163c:	f000 f97e 	bl	800193c <FND_E>
                Delay_ms(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff f8a9 	bl	8000798 <Delay_ms>
                FND_2();
 8001646:	f000 f8b3 	bl	80017b0 <FND_2>
                FND_r();
 800164a:	f000 f99f 	bl	800198c <FND_r>
                Delay_ms(1);
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff f8a2 	bl	8000798 <Delay_ms>
                FND_3();
 8001654:	f000 f8c6 	bl	80017e4 <FND_3>
                FND_one();
 8001658:	f000 f9e8 	bl	8001a2c <FND_one>
                Delay_ms(1);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff f89b 	bl	8000798 <Delay_ms>
                FND_4();
 8001662:	f000 f8d9 	bl	8001818 <FND_4>
                FND_zero();
 8001666:	f000 f9b9 	bl	80019dc <FND_zero>
                Delay_ms(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff f894 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 8001670:	7abb      	ldrb	r3, [r7, #10]
 8001672:	3301      	adds	r3, #1
 8001674:	72bb      	strb	r3, [r7, #10]
 8001676:	7abb      	ldrb	r3, [r7, #10]
 8001678:	2bfa      	cmp	r3, #250	; 0xfa
 800167a:	d9dd      	bls.n	8001638 <result+0x49c>
        for (uint8_t j = 0; j <= 3; j++)
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	3301      	adds	r3, #1
 8001680:	72fb      	strb	r3, [r7, #11]
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d9d0      	bls.n	800162a <result+0x48e>
            }
        }
        break;
 8001688:	e066      	b.n	8001758 <result+0x5bc>
    case kResult_Err_11: // LD Tx feedback Fail
        for (uint8_t j = 0; j <= 3; j++)
 800168a:	2300      	movs	r3, #0
 800168c:	727b      	strb	r3, [r7, #9]
 800168e:	e02b      	b.n	80016e8 <result+0x54c>
        {
            fail_sound(j);
 8001690:	7a7b      	ldrb	r3, [r7, #9]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fcf6 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 8001698:	2301      	movs	r3, #1
 800169a:	723b      	strb	r3, [r7, #8]
 800169c:	e01e      	b.n	80016dc <result+0x540>
            {
                FND_1();
 800169e:	f000 f86d 	bl	800177c <FND_1>
                FND_E();
 80016a2:	f000 f94b 	bl	800193c <FND_E>
                Delay_ms(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff f876 	bl	8000798 <Delay_ms>
                FND_2();
 80016ac:	f000 f880 	bl	80017b0 <FND_2>
                FND_r();
 80016b0:	f000 f96c 	bl	800198c <FND_r>
                Delay_ms(1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff f86f 	bl	8000798 <Delay_ms>
                FND_3();
 80016ba:	f000 f893 	bl	80017e4 <FND_3>
                FND_one();
 80016be:	f000 f9b5 	bl	8001a2c <FND_one>
                Delay_ms(1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff f868 	bl	8000798 <Delay_ms>
                FND_4();
 80016c8:	f000 f8a6 	bl	8001818 <FND_4>
                FND_one();
 80016cc:	f000 f9ae 	bl	8001a2c <FND_one>
                Delay_ms(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff f861 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 80016d6:	7a3b      	ldrb	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	723b      	strb	r3, [r7, #8]
 80016dc:	7a3b      	ldrb	r3, [r7, #8]
 80016de:	2bfa      	cmp	r3, #250	; 0xfa
 80016e0:	d9dd      	bls.n	800169e <result+0x502>
        for (uint8_t j = 0; j <= 3; j++)
 80016e2:	7a7b      	ldrb	r3, [r7, #9]
 80016e4:	3301      	adds	r3, #1
 80016e6:	727b      	strb	r3, [r7, #9]
 80016e8:	7a7b      	ldrb	r3, [r7, #9]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d9d0      	bls.n	8001690 <result+0x4f4>
            }
        }
        break;
 80016ee:	e033      	b.n	8001758 <result+0x5bc>
    case kResult_Err_12: //여분
        for (uint8_t j = 0; j <= 3; j++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	e02b      	b.n	800174e <result+0x5b2>
        {
            fail_sound(j);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fcc3 	bl	8001084 <fail_sound>
            for (uint8_t i = 1; i <= 250; i++)
 80016fe:	2301      	movs	r3, #1
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	e01e      	b.n	8001742 <result+0x5a6>
            {
                FND_1();
 8001704:	f000 f83a 	bl	800177c <FND_1>
                FND_E();
 8001708:	f000 f918 	bl	800193c <FND_E>
                Delay_ms(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff f843 	bl	8000798 <Delay_ms>
                FND_2();
 8001712:	f000 f84d 	bl	80017b0 <FND_2>
                FND_r();
 8001716:	f000 f939 	bl	800198c <FND_r>
                Delay_ms(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff f83c 	bl	8000798 <Delay_ms>
                FND_3();
 8001720:	f000 f860 	bl	80017e4 <FND_3>
                FND_one();
 8001724:	f000 f982 	bl	8001a2c <FND_one>
                Delay_ms(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff f835 	bl	8000798 <Delay_ms>
                FND_4();
 800172e:	f000 f873 	bl	8001818 <FND_4>
                FND_two();
 8001732:	f000 f9a3 	bl	8001a7c <FND_two>
                Delay_ms(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff f82e 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 250; i++)
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	3301      	adds	r3, #1
 8001740:	71bb      	strb	r3, [r7, #6]
 8001742:	79bb      	ldrb	r3, [r7, #6]
 8001744:	2bfa      	cmp	r3, #250	; 0xfa
 8001746:	d9dd      	bls.n	8001704 <result+0x568>
        for (uint8_t j = 0; j <= 3; j++)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	3301      	adds	r3, #1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d9d0      	bls.n	80016f6 <result+0x55a>
            }
        }
        break;
 8001754:	e000      	b.n	8001758 <result+0x5bc>

    default:
        break;
 8001756:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001758:	2108      	movs	r1, #8
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <result+0x5d8>)
 800175c:	f002 fdfc 	bl	8004358 <HAL_TIM_PWM_Stop>
    g_Result = kResult_None;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <result+0x5dc>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
    turn_off();
 8001766:	f000 fac9 	bl	8001cfc <turn_off>
}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000029c 	.word	0x2000029c
 8001778:	20000083 	.word	0x20000083

0800177c <FND_1>:

void FND_1(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001780:	2104      	movs	r1, #4
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <FND_1+0x2c>)
 8001784:	f7ff fc60 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001788:	2120      	movs	r1, #32
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <FND_1+0x30>)
 800178c:	f7ff fc6a 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <FND_1+0x2c>)
 8001796:	f7ff fc65 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	4802      	ldr	r0, [pc, #8]	; (80017a8 <FND_1+0x2c>)
 80017a0:	f7ff fc60 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020400 	.word	0x40020400

080017b0 <FND_2>:
void FND_2(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80017b4:	2104      	movs	r1, #4
 80017b6:	4809      	ldr	r0, [pc, #36]	; (80017dc <FND_2+0x2c>)
 80017b8:	f7ff fc54 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80017bc:	2120      	movs	r1, #32
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <FND_2+0x30>)
 80017c0:	f7ff fc42 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80017c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <FND_2+0x2c>)
 80017ca:	f7ff fc4b 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80017ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d2:	4802      	ldr	r0, [pc, #8]	; (80017dc <FND_2+0x2c>)
 80017d4:	f7ff fc46 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020400 	.word	0x40020400

080017e4 <FND_3>:
void FND_3(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80017e8:	2104      	movs	r1, #4
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <FND_3+0x2c>)
 80017ec:	f7ff fc3a 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80017f0:	2120      	movs	r1, #32
 80017f2:	4808      	ldr	r0, [pc, #32]	; (8001814 <FND_3+0x30>)
 80017f4:	f7ff fc36 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80017f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <FND_3+0x2c>)
 80017fe:	f7ff fc23 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <FND_3+0x2c>)
 8001808:	f7ff fc2c 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400

08001818 <FND_4>:
void FND_4(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 800181c:	2104      	movs	r1, #4
 800181e:	4809      	ldr	r0, [pc, #36]	; (8001844 <FND_4+0x2c>)
 8001820:	f7ff fc20 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001824:	2120      	movs	r1, #32
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <FND_4+0x30>)
 8001828:	f7ff fc1c 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 800182c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <FND_4+0x2c>)
 8001832:	f7ff fc17 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183a:	4802      	ldr	r0, [pc, #8]	; (8001844 <FND_4+0x2c>)
 800183c:	f7ff fc04 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40020800 	.word	0x40020800
 8001848:	40020400 	.word	0x40020400

0800184c <FND_P>:

void FND_P(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <FND_P+0x48>)
 8001856:	f7ff fbf7 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <FND_P+0x4c>)
 800185e:	f7ff fbf3 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <FND_P+0x4c>)
 8001866:	f7ff fbfd 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <FND_P+0x4c>)
 8001870:	f7ff fbf8 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001874:	2102      	movs	r1, #2
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <FND_P+0x48>)
 8001878:	f7ff fbe6 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 800187c:	2101      	movs	r1, #1
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <FND_P+0x48>)
 8001880:	f7ff fbe2 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <FND_P+0x4c>)
 800188a:	f7ff fbdd 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40020800 	.word	0x40020800
 8001898:	40020400 	.word	0x40020400

0800189c <FND_A>:

void FND_A(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80018a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a4:	480f      	ldr	r0, [pc, #60]	; (80018e4 <FND_A+0x48>)
 80018a6:	f7ff fbcf 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	480e      	ldr	r0, [pc, #56]	; (80018e8 <FND_A+0x4c>)
 80018ae:	f7ff fbcb 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <FND_A+0x4c>)
 80018b6:	f7ff fbc7 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80018ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <FND_A+0x4c>)
 80018c0:	f7ff fbd0 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80018c4:	2102      	movs	r1, #2
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <FND_A+0x48>)
 80018c8:	f7ff fbbe 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80018cc:	2101      	movs	r1, #1
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <FND_A+0x48>)
 80018d0:	f7ff fbba 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80018d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <FND_A+0x4c>)
 80018da:	f7ff fbb5 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020400 	.word	0x40020400

080018ec <FND_S>:

void FND_S(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80018f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f4:	480f      	ldr	r0, [pc, #60]	; (8001934 <FND_S+0x48>)
 80018f6:	f7ff fba7 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <FND_S+0x4c>)
 80018fe:	f7ff fbb1 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <FND_S+0x4c>)
 8001906:	f7ff fb9f 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800190a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <FND_S+0x4c>)
 8001910:	f7ff fb9a 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001914:	2102      	movs	r1, #2
 8001916:	4807      	ldr	r0, [pc, #28]	; (8001934 <FND_S+0x48>)
 8001918:	f7ff fba4 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 800191c:	2101      	movs	r1, #1
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <FND_S+0x48>)
 8001920:	f7ff fb92 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <FND_S+0x4c>)
 800192a:	f7ff fb8d 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020800 	.word	0x40020800
 8001938:	40020400 	.word	0x40020400

0800193c <FND_E>:

void FND_E(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001944:	480f      	ldr	r0, [pc, #60]	; (8001984 <FND_E+0x48>)
 8001946:	f7ff fb7f 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <FND_E+0x4c>)
 800194e:	f7ff fb89 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001952:	2140      	movs	r1, #64	; 0x40
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <FND_E+0x4c>)
 8001956:	f7ff fb85 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	480a      	ldr	r0, [pc, #40]	; (8001988 <FND_E+0x4c>)
 8001960:	f7ff fb72 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001964:	2102      	movs	r1, #2
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <FND_E+0x48>)
 8001968:	f7ff fb6e 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 800196c:	2101      	movs	r1, #1
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <FND_E+0x48>)
 8001970:	f7ff fb6a 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <FND_E+0x4c>)
 800197a:	f7ff fb65 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40020800 	.word	0x40020800
 8001988:	40020400 	.word	0x40020400

0800198c <FND_r>:

void FND_r(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001994:	480f      	ldr	r0, [pc, #60]	; (80019d4 <FND_r+0x48>)
 8001996:	f7ff fb65 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	480e      	ldr	r0, [pc, #56]	; (80019d8 <FND_r+0x4c>)
 800199e:	f7ff fb61 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80019a2:	2140      	movs	r1, #64	; 0x40
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <FND_r+0x4c>)
 80019a6:	f7ff fb5d 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <FND_r+0x4c>)
 80019b0:	f7ff fb58 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80019b4:	2102      	movs	r1, #2
 80019b6:	4807      	ldr	r0, [pc, #28]	; (80019d4 <FND_r+0x48>)
 80019b8:	f7ff fb46 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80019bc:	2101      	movs	r1, #1
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <FND_r+0x48>)
 80019c0:	f7ff fb50 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80019c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <FND_r+0x4c>)
 80019ca:	f7ff fb3d 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020400 	.word	0x40020400

080019dc <FND_zero>:

void FND_zero(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80019e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <FND_zero+0x48>)
 80019e6:	f7ff fb2f 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	480e      	ldr	r0, [pc, #56]	; (8001a28 <FND_zero+0x4c>)
 80019ee:	f7ff fb2b 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <FND_zero+0x4c>)
 80019f6:	f7ff fb27 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	480a      	ldr	r0, [pc, #40]	; (8001a28 <FND_zero+0x4c>)
 8001a00:	f7ff fb22 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001a04:	2102      	movs	r1, #2
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <FND_zero+0x48>)
 8001a08:	f7ff fb1e 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <FND_zero+0x48>)
 8001a10:	f7ff fb1a 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a18:	4803      	ldr	r0, [pc, #12]	; (8001a28 <FND_zero+0x4c>)
 8001a1a:	f7ff fb23 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020400 	.word	0x40020400

08001a2c <FND_one>:

void FND_one(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <FND_one+0x48>)
 8001a36:	f7ff fb15 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <FND_one+0x4c>)
 8001a3e:	f7ff fb03 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <FND_one+0x4c>)
 8001a46:	f7ff faff 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4e:	480a      	ldr	r0, [pc, #40]	; (8001a78 <FND_one+0x4c>)
 8001a50:	f7ff fb08 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001a54:	2102      	movs	r1, #2
 8001a56:	4807      	ldr	r0, [pc, #28]	; (8001a74 <FND_one+0x48>)
 8001a58:	f7ff fb04 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <FND_one+0x48>)
 8001a60:	f7ff fb00 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <FND_one+0x4c>)
 8001a6a:	f7ff fafb 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020400 	.word	0x40020400

08001a7c <FND_two>:

void FND_two(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a84:	480f      	ldr	r0, [pc, #60]	; (8001ac4 <FND_two+0x48>)
 8001a86:	f7ff fadf 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <FND_two+0x4c>)
 8001a8e:	f7ff fadb 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <FND_two+0x4c>)
 8001a96:	f7ff fae5 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9e:	480a      	ldr	r0, [pc, #40]	; (8001ac8 <FND_two+0x4c>)
 8001aa0:	f7ff fad2 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <FND_two+0x48>)
 8001aa8:	f7ff face 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001aac:	2101      	movs	r1, #1
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <FND_two+0x48>)
 8001ab0:	f7ff fad8 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <FND_two+0x4c>)
 8001aba:	f7ff fac5 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020400 	.word	0x40020400

08001acc <FND_three>:
void FND_three(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad4:	480f      	ldr	r0, [pc, #60]	; (8001b14 <FND_three+0x48>)
 8001ad6:	f7ff fab7 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	480e      	ldr	r0, [pc, #56]	; (8001b18 <FND_three+0x4c>)
 8001ade:	f7ff fab3 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <FND_three+0x4c>)
 8001ae6:	f7ff faaf 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <FND_three+0x4c>)
 8001af0:	f7ff faaa 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001af4:	2102      	movs	r1, #2
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <FND_three+0x48>)
 8001af8:	f7ff fab4 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001afc:	2101      	movs	r1, #1
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <FND_three+0x48>)
 8001b00:	f7ff fab0 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <FND_three+0x4c>)
 8001b0a:	f7ff fa9d 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020400 	.word	0x40020400

08001b1c <FND_four>:

void FND_four(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <FND_four+0x48>)
 8001b26:	f7ff fa9d 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	480e      	ldr	r0, [pc, #56]	; (8001b68 <FND_four+0x4c>)
 8001b2e:	f7ff fa8b 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001b32:	2140      	movs	r1, #64	; 0x40
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <FND_four+0x4c>)
 8001b36:	f7ff fa87 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b3e:	480a      	ldr	r0, [pc, #40]	; (8001b68 <FND_four+0x4c>)
 8001b40:	f7ff fa90 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001b44:	2102      	movs	r1, #2
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <FND_four+0x48>)
 8001b48:	f7ff fa8c 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <FND_four+0x48>)
 8001b50:	f7ff fa7a 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <FND_four+0x4c>)
 8001b5a:	f7ff fa75 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40020400 	.word	0x40020400

08001b6c <FND_five>:

void FND_five(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b74:	480f      	ldr	r0, [pc, #60]	; (8001bb4 <FND_five+0x48>)
 8001b76:	f7ff fa67 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <FND_five+0x4c>)
 8001b7e:	f7ff fa71 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001b82:	2140      	movs	r1, #64	; 0x40
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <FND_five+0x4c>)
 8001b86:	f7ff fa5f 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <FND_five+0x4c>)
 8001b90:	f7ff fa5a 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001b94:	2102      	movs	r1, #2
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <FND_five+0x48>)
 8001b98:	f7ff fa64 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <FND_five+0x48>)
 8001ba0:	f7ff fa52 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <FND_five+0x4c>)
 8001baa:	f7ff fa4d 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <FND_six>:

void FND_six(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <FND_six+0x48>)
 8001bc6:	f7ff fa3f 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	480e      	ldr	r0, [pc, #56]	; (8001c08 <FND_six+0x4c>)
 8001bce:	f7ff fa49 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001bd2:	2140      	movs	r1, #64	; 0x40
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <FND_six+0x4c>)
 8001bd6:	f7ff fa37 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	480a      	ldr	r0, [pc, #40]	; (8001c08 <FND_six+0x4c>)
 8001be0:	f7ff fa32 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001be4:	2102      	movs	r1, #2
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <FND_six+0x48>)
 8001be8:	f7ff fa2e 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001bec:	2101      	movs	r1, #1
 8001bee:	4805      	ldr	r0, [pc, #20]	; (8001c04 <FND_six+0x48>)
 8001bf0:	f7ff fa2a 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <FND_six+0x4c>)
 8001bfa:	f7ff fa25 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020400 	.word	0x40020400

08001c0c <FND_seven>:

void FND_seven(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c14:	480f      	ldr	r0, [pc, #60]	; (8001c54 <FND_seven+0x48>)
 8001c16:	f7ff fa17 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	480e      	ldr	r0, [pc, #56]	; (8001c58 <FND_seven+0x4c>)
 8001c1e:	f7ff fa13 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c22:	2140      	movs	r1, #64	; 0x40
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <FND_seven+0x4c>)
 8001c26:	f7ff fa0f 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <FND_seven+0x4c>)
 8001c30:	f7ff fa18 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c34:	2102      	movs	r1, #2
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <FND_seven+0x48>)
 8001c38:	f7ff fa14 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <FND_seven+0x48>)
 8001c40:	f7ff fa10 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <FND_seven+0x4c>)
 8001c4a:	f7ff fa0b 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020400 	.word	0x40020400

08001c5c <FND_eight>:

void FND_eight(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c64:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <FND_eight+0x48>)
 8001c66:	f7ff f9ef 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <FND_eight+0x4c>)
 8001c6e:	f7ff f9eb 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001c72:	2140      	movs	r1, #64	; 0x40
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <FND_eight+0x4c>)
 8001c76:	f7ff f9e7 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7e:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <FND_eight+0x4c>)
 8001c80:	f7ff f9e2 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001c84:	2102      	movs	r1, #2
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <FND_eight+0x48>)
 8001c88:	f7ff f9de 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <FND_eight+0x48>)
 8001c90:	f7ff f9da 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <FND_eight+0x4c>)
 8001c9a:	f7ff f9d5 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020400 	.word	0x40020400

08001cac <FND_nine>:
void FND_nine(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb4:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <FND_nine+0x48>)
 8001cb6:	f7ff f9c7 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <FND_nine+0x4c>)
 8001cbe:	f7ff f9c3 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <FND_nine+0x4c>)
 8001cc6:	f7ff f9bf 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cce:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <FND_nine+0x4c>)
 8001cd0:	f7ff f9ba 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <FND_nine+0x48>)
 8001cd8:	f7ff f9c4 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <FND_nine+0x48>)
 8001ce0:	f7ff f9b2 	bl	8001048 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <FND_nine+0x4c>)
 8001cea:	f7ff f9ad 	bl	8001048 <LL_GPIO_SetOutputPin>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <turn_off>:

void turn_off(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001d00:	2104      	movs	r1, #4
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <turn_off+0x2c>)
 8001d04:	f7ff f9ae 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001d08:	2120      	movs	r1, #32
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <turn_off+0x30>)
 8001d0c:	f7ff f9aa 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d14:	4804      	ldr	r0, [pc, #16]	; (8001d28 <turn_off+0x2c>)
 8001d16:	f7ff f9a5 	bl	8001064 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1e:	4802      	ldr	r0, [pc, #8]	; (8001d28 <turn_off+0x2c>)
 8001d20:	f7ff f9a0 	bl	8001064 <LL_GPIO_ResetOutputPin>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020400 	.word	0x40020400

08001d30 <InitUartQueue>:

UARTQUEUE LiDARQueue;
UARTQUEUE ViewerQueue;

void InitUartQueue(pUARTQUEUE pQueue)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    pQueue->data = pQueue->head = pQueue->tail = 0;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	705a      	strb	r2, [r3, #1]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	785a      	ldrb	r2, [r3, #1]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	709a      	strb	r2, [r3, #2]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <PutDataToUartQueue>:

void PutDataToUartQueue(UART_HandleTypeDef *huart, uint8_t data)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <PutDataToUartQueue+0x5c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <PutDataToUartQueue+0x1a>
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <PutDataToUartQueue+0x60>)
 8001d74:	e000      	b.n	8001d78 <PutDataToUartQueue+0x1c>
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <PutDataToUartQueue+0x64>)
 8001d78:	60fb      	str	r3, [r7, #12]
    // if (pQueue->data == QUEUE_BUFFER_LENGTH)
    //     GetDataFromUartQueue(huart);
    pQueue->Buffer[pQueue->head++] = data;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	b2d1      	uxtb	r1, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	7011      	strb	r1, [r2, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	70da      	strb	r2, [r3, #3]
    if (pQueue->head == QUEUE_BUFFER_LENGTH)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2bff      	cmp	r3, #255	; 0xff
 8001d96:	d102      	bne.n	8001d9e <PutDataToUartQueue+0x42>
        pQueue->head = 0;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
    pQueue->data++;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	709a      	strb	r2, [r3, #2]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40005000 	.word	0x40005000
 8001dbc:	20000188 	.word	0x20000188
 8001dc0:	20000084 	.word	0x20000084

08001dc4 <GetDataFromUartQueue>:

uint8_t GetDataFromUartQueue(UART_HandleTypeDef *huart)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    uint8_t ret;

    // UART_HandleTypeDef *dst = (huart->Instance == USART5 ? &hMonitor : &hViewer);
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <GetDataFromUartQueue+0x5c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <GetDataFromUartQueue+0x16>
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <GetDataFromUartQueue+0x60>)
 8001dd8:	e000      	b.n	8001ddc <GetDataFromUartQueue+0x18>
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <GetDataFromUartQueue+0x64>)
 8001ddc:	60fb      	str	r3, [r7, #12]
    // if (HAL_UART_Transmit(dst, pQueue->Buffer + pQueue->tail, 1, 3000) != HAL_OK)
    // {
    //     Error_Handler(__FILE__, __LINE__);
    // }
    ret = pQueue->Buffer[pQueue->tail];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	785b      	ldrb	r3, [r3, #1]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	78db      	ldrb	r3, [r3, #3]
 8001dea:	72fb      	strb	r3, [r7, #11]
    pQueue->tail++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	785b      	ldrb	r3, [r3, #1]
 8001df0:	3301      	adds	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	705a      	strb	r2, [r3, #1]
    if (pQueue->tail == QUEUE_BUFFER_LENGTH)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	2bff      	cmp	r3, #255	; 0xff
 8001dfe:	d102      	bne.n	8001e06 <GetDataFromUartQueue+0x42>
        pQueue->tail = 0;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
    pQueue->data--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	789b      	ldrb	r3, [r3, #2]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	709a      	strb	r2, [r3, #2]
    return ret;
 8001e12:	7afb      	ldrb	r3, [r7, #11]
    HAL_Delay(1);
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40005000 	.word	0x40005000
 8001e24:	20000188 	.word	0x20000188
 8001e28:	20000084 	.word	0x20000084

08001e2c <Idle_status>:
uint8_t INFO_RX_Flag = 0;
uint8_t INFO_RX_BUFF[13] = {0};
uint8_t INFO_RX_Cnt = 0;

void Idle_status(void)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b08d      	sub	sp, #52	; 0x34
 8001e30:	af00      	add	r7, sp, #0

    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 8001e32:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <Idle_status+0x9c>)
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e3a:	c303      	stmia	r3!, {r0, r1}
 8001e3c:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 8001e3e:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <Idle_status+0xa0>)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e46:	c303      	stmia	r3!, {r0, r1}
 8001e48:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 8001e4a:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <Idle_status+0xa4>)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e52:	c303      	stmia	r3!, {r0, r1}
 8001e54:	701a      	strb	r2, [r3, #0]
    uint8_t START_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x24};
 8001e56:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <Idle_status+0xa8>)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e5c:	c303      	stmia	r3!, {r0, r1}
 8001e5e:	701a      	strb	r2, [r3, #0]

    uint8_t checksum = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Cur_Check();
 8001e66:	f7fe fbe5 	bl	8000634 <LiDAR_Cur_Check>

    if (ViewerQueue.data > 0)
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <Idle_status+0xac>)
 8001e6c:	789b      	ldrb	r3, [r3, #2]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d126      	bne.n	8001ec0 <Idle_status+0x94>
        }
        Viewer_Rx_Flag = 0; */
    }
    else // PC Not Connect
    {
        if (INFO_RX_Flag == 0)
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <Idle_status+0xb0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11e      	bne.n	8001eb8 <Idle_status+0x8c>
        {
            LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff f864 	bl	8000f48 <LiDAR_Protocol_Tx>
            while (LiDARQueue.data > 0)
 8001e80:	e00f      	b.n	8001ea2 <Idle_status+0x76>
            {
                INFO_RX_BUFF[INFO_RX_Cnt] = GetDataFromUartQueue(&hLiDAR);
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <Idle_status+0xb4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461c      	mov	r4, r3
 8001e88:	4816      	ldr	r0, [pc, #88]	; (8001ee4 <Idle_status+0xb8>)
 8001e8a:	f7ff ff9b 	bl	8001dc4 <GetDataFromUartQueue>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <Idle_status+0xbc>)
 8001e94:	551a      	strb	r2, [r3, r4]
                INFO_RX_Cnt++;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <Idle_status+0xb4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <Idle_status+0xb4>)
 8001ea0:	701a      	strb	r2, [r3, #0]
            while (LiDARQueue.data > 0)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <Idle_status+0xc0>)
 8001ea4:	789b      	ldrb	r3, [r3, #2]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1eb      	bne.n	8001e82 <Idle_status+0x56>
            }
            if (INFO_RX_BUFF[0] != 0x00)
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <Idle_status+0xbc>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <Idle_status+0x8c>
            {
                INFO_RX_Flag = 1;
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <Idle_status+0xb0>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
        }

        else
        {
        }
        Delay_ms(500);
 8001eb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ebc:	f7fe fc6c 	bl	8000798 <Delay_ms>
    }
}
 8001ec0:	bf00      	nop
 8001ec2:	3734      	adds	r7, #52	; 0x34
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd90      	pop	{r4, r7, pc}
 8001ec8:	08005c78 	.word	0x08005c78
 8001ecc:	08005c84 	.word	0x08005c84
 8001ed0:	08005c90 	.word	0x08005c90
 8001ed4:	08005c9c 	.word	0x08005c9c
 8001ed8:	20000188 	.word	0x20000188
 8001edc:	2000028a 	.word	0x2000028a
 8001ee0:	20000299 	.word	0x20000299
 8001ee4:	20000328 	.word	0x20000328
 8001ee8:	2000028c 	.word	0x2000028c
 8001eec:	20000084 	.word	0x20000084

08001ef0 <Test_status>:

void Test_status(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
    uint8_t ETH_BUFF[6] = {' ', 'E', 't', 'h', 'e', 'r'};
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <Test_status+0x7c>)
 8001ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f00:	6018      	str	r0, [r3, #0]
 8001f02:	3304      	adds	r3, #4
 8001f04:	8019      	strh	r1, [r3, #0]
    uint8_t APD_BUFF[6] = {' ', 'A', 'P', 'D', ' ', 'B'};
 8001f06:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <Test_status+0x80>)
 8001f08:	f107 0320 	add.w	r3, r7, #32
 8001f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f10:	6018      	str	r0, [r3, #0]
 8001f12:	3304      	adds	r3, #4
 8001f14:	8019      	strh	r1, [r3, #0]
    uint8_t MOT_BUFF[6] = {' ', 'M', 'o', 't', 'o', 'r'};
 8001f16:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <Test_status+0x84>)
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f20:	6018      	str	r0, [r3, #0]
 8001f22:	3304      	adds	r3, #4
 8001f24:	8019      	strh	r1, [r3, #0]
    uint8_t ENC_BUFF[6] = {' ', 'E', 'n', 'c', 'o', 'd'};
 8001f26:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <Test_status+0x88>)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f30:	6018      	str	r0, [r3, #0]
 8001f32:	3304      	adds	r3, #4
 8001f34:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_INIT_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'I'};
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <Test_status+0x8c>)
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f40:	6018      	str	r0, [r3, #0]
 8001f42:	3304      	adds	r3, #4
 8001f44:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_CAL_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'C'};
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <Test_status+0x90>)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f4e:	6018      	str	r0, [r3, #0]
 8001f50:	3304      	adds	r3, #4
 8001f52:	8019      	strh	r1, [r3, #0]

    LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7fe fff7 	bl	8000f48 <LiDAR_Protocol_Tx>
    Delay_ms(500);
 8001f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f5e:	f7fe fc1b 	bl	8000798 <Delay_ms>
}
 8001f62:	bf00      	nop
 8001f64:	3730      	adds	r7, #48	; 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	08005ca8 	.word	0x08005ca8
 8001f70:	08005cb0 	.word	0x08005cb0
 8001f74:	08005cb8 	.word	0x08005cb8
 8001f78:	08005cc0 	.word	0x08005cc0
 8001f7c:	08005cc8 	.word	0x08005cc8
 8001f80:	08005cd0 	.word	0x08005cd0

08001f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40013c00 	.word	0x40013c00

08002000 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6153      	str	r3, [r2, #20]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40013c00 	.word	0x40013c00

08002020 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
 * @brief This function handles Debug ViewerhViewer.
 */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugViewerhViewer_IRQn 0 */
  /* USER CODE BEGIN DebugViewerhViewer_IRQn 1 */

  /* USER CODE END DebugViewerhViewer_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 fb32 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI line 0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 8002078:	f000 f89c 	bl	80021b4 <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800207c:	2001      	movs	r0, #1
 800207e:	f7ff ffa9 	bl	8001fd4 <LL_EXTI_IsActiveFlag_0_31>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff ffb9 	bl	8002000 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (Mode_data == 0) // jig mode
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <EXTI15_10_IRQHandler+0x4c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <EXTI15_10_IRQHandler+0x1a>
  {
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80020a0:	2035      	movs	r0, #53	; 0x35
 80020a2:	f001 f870 	bl	8003186 <HAL_NVIC_DisableIRQ>
    // g_Status = kStatus_Test;
    LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe ff4e 	bl	8000f48 <LiDAR_Protocol_Tx>
 80020ac:	e00a      	b.n	80020c4 <EXTI15_10_IRQHandler+0x30>
  }
  else // tx mode
  {
    if (tx_start_flag == 0)
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <EXTI15_10_IRQHandler+0x50>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <EXTI15_10_IRQHandler+0x2a>
    {
      tx_start_flag = 1;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <EXTI15_10_IRQHandler+0x50>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e002      	b.n	80020c4 <EXTI15_10_IRQHandler+0x30>
    }
    else
    {
      tx_start_flag = 0;
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <EXTI15_10_IRQHandler+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
    }
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80020c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020c8:	f7ff ff84 	bl	8001fd4 <LL_EXTI_IsActiveFlag_0_31>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80020d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020d6:	f7ff ff93 	bl	8002000 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000029b 	.word	0x2000029b
 80020e4:	2000029a 	.word	0x2000029a

080020e8 <UART5_IRQHandler>:

/**
 * @brief This function handles UART5 global interrupt.
 */
void UART5_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&hViewer, UART_FLAG_RXNE) != RESET))
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <UART5_IRQHandler+0x44>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d107      	bne.n	800210c <UART5_IRQHandler+0x24>
  {
    PutDataToUartQueue(&hViewer, (uint8_t)(hViewer.Instance->DR & (uint8_t)0x00FF));
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <UART5_IRQHandler+0x44>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4619      	mov	r1, r3
 8002106:	4809      	ldr	r0, [pc, #36]	; (800212c <UART5_IRQHandler+0x44>)
 8002108:	f7ff fe28 	bl	8001d5c <PutDataToUartQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&hViewer); /* clear event flag */
 800210c:	2300      	movs	r3, #0
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <UART5_IRQHandler+0x44>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <UART5_IRQHandler+0x44>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  return;
 8002122:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002e4 	.word	0x200002e4

08002130 <USART6_IRQHandler>:

/**
 * @brief This function handles USART6 global interrupt.
 */
void USART6_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&hLiDAR, UART_FLAG_RXNE) != RESET))
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <USART6_IRQHandler+0x44>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b20      	cmp	r3, #32
 8002142:	d107      	bne.n	8002154 <USART6_IRQHandler+0x24>
  {
    PutDataToUartQueue(&hLiDAR, (uint8_t)(hLiDAR.Instance->DR & (uint8_t)0x00FF));
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <USART6_IRQHandler+0x44>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	4809      	ldr	r0, [pc, #36]	; (8002174 <USART6_IRQHandler+0x44>)
 8002150:	f7ff fe04 	bl	8001d5c <PutDataToUartQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&hLiDAR); /* clear event flag */
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <USART6_IRQHandler+0x44>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <USART6_IRQHandler+0x44>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  return;
 800216a:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000328 	.word	0x20000328

08002178 <LL_GPIO_SetOutputPin>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	619a      	str	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_GPIO_ResetOutputPin>:
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 80021b8:	2101      	movs	r1, #1
 80021ba:	4813      	ldr	r0, [pc, #76]	; (8002208 <switch_check+0x54>)
 80021bc:	f001 f992 	bl	80034e4 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00f      	beq.n	80021e6 <switch_check+0x32>
    {
        Mode_data = 0x00U;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <switch_check+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80021cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d0:	480d      	ldr	r0, [pc, #52]	; (8002208 <switch_check+0x54>)
 80021d2:	f7ff ffd1 	bl	8002178 <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <switch_check+0x5c>)
 80021da:	f7ff ffdb 	bl	8002194 <LL_GPIO_ResetOutputPin>
        HAL_NVIC_EnableIRQ(UART5_IRQn);
 80021de:	2035      	movs	r0, #53	; 0x35
 80021e0:	f000 ffc3 	bl	800316a <HAL_NVIC_EnableIRQ>
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
        HAL_NVIC_DisableIRQ(UART5_IRQn);
    }
 80021e4:	e00e      	b.n	8002204 <switch_check+0x50>
        Mode_data = 0x01U;
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <switch_check+0x58>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <switch_check+0x54>)
 80021f2:	f7ff ffcf 	bl	8002194 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <switch_check+0x5c>)
 80021fa:	f7ff ffbd 	bl	8002178 <LL_GPIO_SetOutputPin>
        HAL_NVIC_DisableIRQ(UART5_IRQn);
 80021fe:	2035      	movs	r0, #53	; 0x35
 8002200:	f000 ffc1 	bl	8003186 <HAL_NVIC_DisableIRQ>
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40020400 	.word	0x40020400
 800220c:	2000029b 	.word	0x2000029b
 8002210:	40020000 	.word	0x40020000

08002214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <SystemInit+0x20>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <SystemInit+0x20>)
 8002220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08e      	sub	sp, #56	; 0x38
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800223e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	f107 0320 	add.w	r3, r7, #32
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	615a      	str	r2, [r3, #20]
 8002266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <MX_TIM3_Init+0xe4>)
 800226a:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <MX_TIM3_Init+0xe8>)
 800226c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <MX_TIM3_Init+0xe4>)
 8002270:	222c      	movs	r2, #44	; 0x2c
 8002272:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <MX_TIM3_Init+0xe4>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <MX_TIM3_Init+0xe4>)
 800227c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002280:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <MX_TIM3_Init+0xe4>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <MX_TIM3_Init+0xe4>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800228e:	4823      	ldr	r0, [pc, #140]	; (800231c <MX_TIM3_Init+0xe4>)
 8002290:	f001 fef2 	bl	8004078 <HAL_TIM_Base_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800229a:	f7fe fe4f 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a8:	4619      	mov	r1, r3
 80022aa:	481c      	ldr	r0, [pc, #112]	; (800231c <MX_TIM3_Init+0xe4>)
 80022ac:	f002 f986 	bl	80045bc <HAL_TIM_ConfigClockSource>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022b6:	f7fe fe41 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022ba:	4818      	ldr	r0, [pc, #96]	; (800231c <MX_TIM3_Init+0xe4>)
 80022bc:	f001 ff2b 	bl	8004116 <HAL_TIM_PWM_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022c6:	f7fe fe39 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022d2:	f107 0320 	add.w	r3, r7, #32
 80022d6:	4619      	mov	r1, r3
 80022d8:	4810      	ldr	r0, [pc, #64]	; (800231c <MX_TIM3_Init+0xe4>)
 80022da:	f002 fd47 	bl	8004d6c <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022e4:	f7fe fe2a 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e8:	2360      	movs	r3, #96	; 0x60
 80022ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 80022ec:	23f9      	movs	r3, #249	; 0xf9
 80022ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	2208      	movs	r2, #8
 80022fc:	4619      	mov	r1, r3
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <MX_TIM3_Init+0xe4>)
 8002300:	f002 f89a 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800230a:	f7fe fe17 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800230e:	4803      	ldr	r0, [pc, #12]	; (800231c <MX_TIM3_Init+0xe4>)
 8002310:	f000 f82a 	bl	8002368 <HAL_TIM_MspPostInit>

}
 8002314:	bf00      	nop
 8002316:	3738      	adds	r7, #56	; 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000029c 	.word	0x2000029c
 8002320:	40000400 	.word	0x40000400

08002324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_TIM_Base_MspInit+0x3c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d10d      	bne.n	8002352 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_TIM_Base_MspInit+0x40>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_TIM_Base_MspInit+0x40>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_TIM_Base_MspInit+0x40>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40000400 	.word	0x40000400
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_TIM_MspPostInit+0x68>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11e      	bne.n	80023c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4619      	mov	r1, r3
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <HAL_TIM_MspPostInit+0x70>)
 80023c4:	f000 fefa 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020800 	.word	0x40020800

080023dc <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_UART5_Init+0x4c>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <MX_UART5_Init+0x50>)
 80023e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_UART5_Init+0x4c>)
 80023e8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80023ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_UART5_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_UART5_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_UART5_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_UART5_Init+0x4c>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_UART5_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_UART5_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_UART5_Init+0x4c>)
 8002414:	f002 fd26 	bl	8004e64 <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800241e:	f7fe fd8d 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002e4 	.word	0x200002e4
 800242c:	40005000 	.word	0x40005000

08002430 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_USART6_UART_Init+0x4c>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <MX_USART6_UART_Init+0x50>)
 8002438:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <MX_USART6_UART_Init+0x4c>)
 800243c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002440:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_USART6_UART_Init+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_USART6_UART_Init+0x4c>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <MX_USART6_UART_Init+0x4c>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_USART6_UART_Init+0x4c>)
 8002456:	220c      	movs	r2, #12
 8002458:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <MX_USART6_UART_Init+0x4c>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_USART6_UART_Init+0x4c>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_USART6_UART_Init+0x4c>)
 8002468:	f002 fcfc 	bl	8004e64 <HAL_UART_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002472:	f7fe fd63 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000328 	.word	0x20000328
 8002480:	40011400 	.word	0x40011400

08002484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 031c 	add.w	r3, r7, #28
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if (uartHandle->Instance == UART5)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_UART_MspInit+0x144>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d153      	bne.n	800254e <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a47      	ldr	r2, [pc, #284]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b45      	ldr	r3, [pc, #276]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a40      	ldr	r2, [pc, #256]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a39      	ldr	r2, [pc, #228]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_UART_MspInit+0x148>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800250c:	2308      	movs	r3, #8
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002510:	f107 031c 	add.w	r3, r7, #28
 8002514:	4619      	mov	r1, r3
 8002516:	482e      	ldr	r0, [pc, #184]	; (80025d0 <HAL_UART_MspInit+0x14c>)
 8002518:	f000 fe50 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251c:	2304      	movs	r3, #4
 800251e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800252c:	2308      	movs	r3, #8
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	4619      	mov	r1, r3
 8002536:	4827      	ldr	r0, [pc, #156]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002538:	f000 fe40 	bl	80031bc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	2035      	movs	r0, #53	; 0x35
 8002542:	f000 fdf6 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002546:	2035      	movs	r0, #53	; 0x35
 8002548:	f000 fe0f 	bl	800316a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }
}
 800254c:	e038      	b.n	80025c0 <HAL_UART_MspInit+0x13c>
  else if (uartHandle->Instance == USART6)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_UART_MspInit+0x154>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d133      	bne.n	80025c0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_UART_MspInit+0x148>)
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_UART_MspInit+0x148>)
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	6453      	str	r3, [r2, #68]	; 0x44
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_UART_MspInit+0x148>)
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_UART_MspInit+0x148>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <HAL_UART_MspInit+0x148>)
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	6313      	str	r3, [r2, #48]	; 0x30
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_UART_MspInit+0x148>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002590:	23c0      	movs	r3, #192	; 0xc0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025a0:	2308      	movs	r3, #8
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4809      	ldr	r0, [pc, #36]	; (80025d0 <HAL_UART_MspInit+0x14c>)
 80025ac:	f000 fe06 	bl	80031bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2047      	movs	r0, #71	; 0x47
 80025b6:	f000 fdbc 	bl	8003132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80025ba:	2047      	movs	r0, #71	; 0x47
 80025bc:	f000 fdd5 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 80025c0:	bf00      	nop
 80025c2:	3730      	adds	r7, #48	; 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40005000 	.word	0x40005000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40011400 	.word	0x40011400

080025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002614 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025f8:	4c0b      	ldr	r4, [pc, #44]	; (8002628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002606:	f7ff fe05 	bl	8002214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260a:	f003 faed 	bl	8005be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260e:	f7fe fb7f 	bl	8000d10 <main>
  bx  lr    
 8002612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800261c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002620:	08005d00 	.word	0x08005d00
  ldr r2, =_sbss
 8002624:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002628:	20000370 	.word	0x20000370

0800262c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800262c:	e7fe      	b.n	800262c <ADC_IRQHandler>
	...

08002630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_Init+0x40>)
 800263a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_Init+0x40>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <HAL_Init+0x40>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 fd5f 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fc8e 	bl	8001f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fd85 	bl	80031a2 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 fd3f 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000004 	.word	0x20000004
 80026cc:	2000000c 	.word	0x2000000c
 80026d0:	20000008 	.word	0x20000008

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000000c 	.word	0x2000000c
 80026f8:	2000036c 	.word	0x2000036c

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000036c 	.word	0x2000036c

08002714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e033      	b.n	8002792 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fd ff3a 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	d118      	bne.n	8002784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800275a:	f023 0302 	bic.w	r3, r3, #2
 800275e:	f043 0202 	orr.w	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fae8 	bl	8002d3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
 8002782:	e001      	b.n	8002788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Start+0x1a>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e0b2      	b.n	800291c <HAL_ADC_Start+0x180>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d018      	beq.n	80027fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <HAL_ADC_Start+0x18c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a52      	ldr	r2, [pc, #328]	; (800292c <HAL_ADC_Start+0x190>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9a      	lsrs	r2, r3, #18
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027f0:	e002      	b.n	80027f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f9      	bne.n	80027f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d17a      	bne.n	8002902 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002836:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d106      	bne.n	800285a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f023 0206 	bic.w	r2, r3, #6
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
 8002858:	e002      	b.n	8002860 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_ADC_Start+0x194>)
 800286a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002874:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12a      	bne.n	80028d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <HAL_ADC_Start+0x198>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d015      	beq.n	80028b8 <HAL_ADC_Start+0x11c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a29      	ldr	r2, [pc, #164]	; (8002938 <HAL_ADC_Start+0x19c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d105      	bne.n	80028a2 <HAL_ADC_Start+0x106>
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_ADC_Start+0x194>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a25      	ldr	r2, [pc, #148]	; (800293c <HAL_ADC_Start+0x1a0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d136      	bne.n	800291a <HAL_ADC_Start+0x17e>
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_ADC_Start+0x194>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d130      	bne.n	800291a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d129      	bne.n	800291a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	e020      	b.n	800291a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_ADC_Start+0x198>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d11b      	bne.n	800291a <HAL_ADC_Start+0x17e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d114      	bne.n	800291a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	e00b      	b.n	800291a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	20000004 	.word	0x20000004
 800292c:	431bde83 	.word	0x431bde83
 8002930:	40012300 	.word	0x40012300
 8002934:	40012000 	.word	0x40012000
 8002938:	40012100 	.word	0x40012100
 800293c:	40012200 	.word	0x40012200

08002940 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Stop+0x16>
 8002952:	2302      	movs	r3, #2
 8002954:	e021      	b.n	800299a <HAL_ADC_Stop+0x5a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d113      	bne.n	80029ec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d2:	d10b      	bne.n	80029ec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e063      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029ec:	f7ff fe86 	bl	80026fc <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029f2:	e021      	b.n	8002a38 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fa:	d01d      	beq.n	8002a38 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_ADC_PollForConversion+0x6c>
 8002a02:	f7ff fe7b 	bl	80026fc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d212      	bcs.n	8002a38 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d00b      	beq.n	8002a38 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03d      	b.n	8002ab4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d1d6      	bne.n	80029f4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0212 	mvn.w	r2, #18
 8002a4e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d123      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d111      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1c>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e113      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x244>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d925      	bls.n	8002b50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43da      	mvns	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	400a      	ands	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4403      	add	r3, r0
 8002b42:	3b1e      	subs	r3, #30
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	e022      	b.n	8002b96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	2207      	movs	r2, #7
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4403      	add	r3, r0
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d824      	bhi.n	8002be8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b05      	subs	r3, #5
 8002bb0:	221f      	movs	r2, #31
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b05      	subs	r3, #5
 8002bda:	fa00 f203 	lsl.w	r2, r0, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34
 8002be6:	e04c      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d824      	bhi.n	8002c3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b23      	subs	r3, #35	; 0x23
 8002c02:	221f      	movs	r2, #31
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	400a      	ands	r2, r1
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b23      	subs	r3, #35	; 0x23
 8002c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
 8002c38:	e023      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b41      	subs	r3, #65	; 0x41
 8002c4c:	221f      	movs	r2, #31
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	400a      	ands	r2, r1
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	3b41      	subs	r3, #65	; 0x41
 8002c76:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_ADC_ConfigChannel+0x250>)
 8002c84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_ADC_ConfigChannel+0x254>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d10b      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_ADC_ConfigChannel+0x254>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d12b      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x23a>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_ADC_ConfigChannel+0x258>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x1f4>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b11      	cmp	r3, #17
 8002cca:	d122      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_ADC_ConfigChannel+0x258>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_ADC_ConfigChannel+0x25c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_ADC_ConfigChannel+0x260>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	0c9a      	lsrs	r2, r3, #18
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d04:	e002      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f9      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012300 	.word	0x40012300
 8002d2c:	40012000 	.word	0x40012000
 8002d30:	10000012 	.word	0x10000012
 8002d34:	20000004 	.word	0x20000004
 8002d38:	431bde83 	.word	0x431bde83

08002d3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d44:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <ADC_Init+0x1f0>)
 8002d46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	4a58      	ldr	r2, [pc, #352]	; (8002f30 <ADC_Init+0x1f4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e00f      	b.n	8002e3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0202 	bic.w	r2, r2, #2
 8002e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7e1b      	ldrb	r3, [r3, #24]
 8002e54:	005a      	lsls	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	3b01      	subs	r3, #1
 8002e94:	035a      	lsls	r2, r3, #13
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	e007      	b.n	8002eb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	051a      	lsls	r2, r3, #20
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ef2:	025a      	lsls	r2, r3, #9
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	029a      	lsls	r2, r3, #10
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40012300 	.word	0x40012300
 8002f30:	0f000001 	.word	0x0f000001

08002f34 <__NVIC_SetPriorityGrouping>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f50:	4013      	ands	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_GetPriorityGrouping>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__NVIC_GetPriorityGrouping+0x18>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	f003 0307 	and.w	r3, r3, #7
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_EnableIRQ>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	db0b      	blt.n	8002fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4907      	ldr	r1, [pc, #28]	; (8002fd0 <__NVIC_EnableIRQ+0x38>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2001      	movs	r0, #1
 8002fba:	fa00 f202 	lsl.w	r2, r0, r2
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e100 	.word	0xe000e100

08002fd4 <__NVIC_DisableIRQ>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db12      	blt.n	800300c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	490a      	ldr	r1, [pc, #40]	; (8003018 <__NVIC_DisableIRQ+0x44>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003000:	f3bf 8f4f 	dsb	sy
}
 8003004:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003006:	f3bf 8f6f 	isb	sy
}
 800300a:	bf00      	nop
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff05 	bl	8002f34 <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff1a 	bl	8002f7c <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff8e 	bl	8003070 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5d 	bl	800301c <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff0d 	bl	8002f98 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff1d 	bl	8002fd4 <__NVIC_DisableIRQ>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff94 	bl	80030d8 <SysTick_Config>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e165      	b.n	80034a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 8154 	bne.w	800349e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80ae 	beq.w	800349e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_GPIO_Init+0x300>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_GPIO_Init+0x300>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_GPIO_Init+0x300>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4f      	ldr	r2, [pc, #316]	; (80034c4 <HAL_GPIO_Init+0x308>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d025      	beq.n	80033d6 <HAL_GPIO_Init+0x21a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <HAL_GPIO_Init+0x30c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01f      	beq.n	80033d2 <HAL_GPIO_Init+0x216>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4d      	ldr	r2, [pc, #308]	; (80034cc <HAL_GPIO_Init+0x310>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d019      	beq.n	80033ce <HAL_GPIO_Init+0x212>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4c      	ldr	r2, [pc, #304]	; (80034d0 <HAL_GPIO_Init+0x314>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d013      	beq.n	80033ca <HAL_GPIO_Init+0x20e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_GPIO_Init+0x318>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00d      	beq.n	80033c6 <HAL_GPIO_Init+0x20a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_GPIO_Init+0x31c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <HAL_GPIO_Init+0x206>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a49      	ldr	r2, [pc, #292]	; (80034dc <HAL_GPIO_Init+0x320>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_GPIO_Init+0x202>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e00c      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033be:	2307      	movs	r3, #7
 80033c0:	e00a      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x21c>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_GPIO_Init+0x304>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_GPIO_Init+0x324>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_GPIO_Init+0x324>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a11      	ldr	r2, [pc, #68]	; (80034e0 <HAL_GPIO_Init+0x324>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f ae96 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40021400 	.word	0x40021400
 80034dc:	40021800 	.word	0x40021800
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e001      	b.n	8003506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	; 0x40
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003540:	f7ff f8dc 	bl	80026fc <HAL_GetTick>
 8003544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003546:	e009      	b.n	800355c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003548:	f7ff f8d8 	bl	80026fc <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003556:	d901      	bls.n	800355c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e01f      	b.n	800359c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_PWREx_EnableOverDrive+0x98>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d1ee      	bne.n	8003548 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003570:	f7ff f8c4 	bl	80026fc <HAL_GetTick>
 8003574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003576:	e009      	b.n	800358c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003578:	f7ff f8c0 	bl	80026fc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003586:	d901      	bls.n	800358c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e007      	b.n	800359c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <HAL_PWREx_EnableOverDrive+0x98>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003598:	d1ee      	bne.n	8003578 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	420e0040 	.word	0x420e0040
 80035ac:	40007000 	.word	0x40007000
 80035b0:	420e0044 	.word	0x420e0044

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cc      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b68      	ldr	r3, [pc, #416]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d90c      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d044      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	2b03      	cmp	r3, #3
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003672:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e067      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4934      	ldr	r1, [pc, #208]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a4:	f7ff f82a 	bl	80026fc <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7ff f826 	bl	80026fc <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e04f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d20c      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f855 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe ff8a 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08005cd8 	.word	0x08005cd8
 8003778:	20000004 	.word	0x20000004
 800377c:	20000008 	.word	0x20000008

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000004 	.word	0x20000004

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08005ce8 	.word	0x08005ce8

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	08005ce8 	.word	0x08005ce8

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	b0a6      	sub	sp, #152	; 0x98
 80037ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380e:	4bc8      	ldr	r3, [pc, #800]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b0c      	cmp	r3, #12
 8003818:	f200 817e 	bhi.w	8003b18 <HAL_RCC_GetSysClockFreq+0x330>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <HAL_RCC_GetSysClockFreq+0x3c>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003859 	.word	0x08003859
 8003828:	08003b19 	.word	0x08003b19
 800382c:	08003b19 	.word	0x08003b19
 8003830:	08003b19 	.word	0x08003b19
 8003834:	08003861 	.word	0x08003861
 8003838:	08003b19 	.word	0x08003b19
 800383c:	08003b19 	.word	0x08003b19
 8003840:	08003b19 	.word	0x08003b19
 8003844:	08003869 	.word	0x08003869
 8003848:	08003b19 	.word	0x08003b19
 800384c:	08003b19 	.word	0x08003b19
 8003850:	08003b19 	.word	0x08003b19
 8003854:	080039d3 	.word	0x080039d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003858:	4bb6      	ldr	r3, [pc, #728]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x34c>)
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800385e:	e15f      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003860:	4bb5      	ldr	r3, [pc, #724]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003866:	e15b      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003868:	4bb1      	ldr	r3, [pc, #708]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003870:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003874:	4bae      	ldr	r3, [pc, #696]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d031      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003880:	4bab      	ldr	r3, [pc, #684]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	2200      	movs	r2, #0
 8003888:	66bb      	str	r3, [r7, #104]	; 0x68
 800388a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800388c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	663b      	str	r3, [r7, #96]	; 0x60
 8003894:	2300      	movs	r3, #0
 8003896:	667b      	str	r3, [r7, #100]	; 0x64
 8003898:	4ba7      	ldr	r3, [pc, #668]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x350>)
 800389a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800389e:	462a      	mov	r2, r5
 80038a0:	fb03 f202 	mul.w	r2, r3, r2
 80038a4:	2300      	movs	r3, #0
 80038a6:	4621      	mov	r1, r4
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	4aa2      	ldr	r2, [pc, #648]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x350>)
 80038b0:	4621      	mov	r1, r4
 80038b2:	fba1 1202 	umull	r1, r2, r1, r2
 80038b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038b8:	460a      	mov	r2, r1
 80038ba:	67ba      	str	r2, [r7, #120]	; 0x78
 80038bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038be:	4413      	add	r3, r2
 80038c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c6:	2200      	movs	r2, #0
 80038c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80038ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80038cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80038d4:	f7fc fc96 	bl	8000204 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038e2:	e064      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e4:	4b92      	ldr	r3, [pc, #584]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	2200      	movs	r2, #0
 80038ec:	653b      	str	r3, [r7, #80]	; 0x50
 80038ee:	657a      	str	r2, [r7, #84]	; 0x54
 80038f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f8:	2300      	movs	r3, #0
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003900:	4622      	mov	r2, r4
 8003902:	462b      	mov	r3, r5
 8003904:	f04f 0000 	mov.w	r0, #0
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	0159      	lsls	r1, r3, #5
 800390e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003912:	0150      	lsls	r0, r2, #5
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4621      	mov	r1, r4
 800391a:	1a51      	subs	r1, r2, r1
 800391c:	6139      	str	r1, [r7, #16]
 800391e:	4629      	mov	r1, r5
 8003920:	eb63 0301 	sbc.w	r3, r3, r1
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003932:	4659      	mov	r1, fp
 8003934:	018b      	lsls	r3, r1, #6
 8003936:	4651      	mov	r1, sl
 8003938:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800393c:	4651      	mov	r1, sl
 800393e:	018a      	lsls	r2, r1, #6
 8003940:	4651      	mov	r1, sl
 8003942:	ebb2 0801 	subs.w	r8, r2, r1
 8003946:	4659      	mov	r1, fp
 8003948:	eb63 0901 	sbc.w	r9, r3, r1
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003958:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800395c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003960:	4690      	mov	r8, r2
 8003962:	4699      	mov	r9, r3
 8003964:	4623      	mov	r3, r4
 8003966:	eb18 0303 	adds.w	r3, r8, r3
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	462b      	mov	r3, r5
 800396e:	eb49 0303 	adc.w	r3, r9, r3
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003980:	4629      	mov	r1, r5
 8003982:	028b      	lsls	r3, r1, #10
 8003984:	4621      	mov	r1, r4
 8003986:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800398a:	4621      	mov	r1, r4
 800398c:	028a      	lsls	r2, r1, #10
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003996:	2200      	movs	r2, #0
 8003998:	643b      	str	r3, [r7, #64]	; 0x40
 800399a:	647a      	str	r2, [r7, #68]	; 0x44
 800399c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039a0:	f7fc fc30 	bl	8000204 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039ae:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	3301      	adds	r3, #1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80039c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80039d0:	e0a6      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d2:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039de:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02a      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039fc:	2100      	movs	r1, #0
 80039fe:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a00:	fb03 f201 	mul.w	r2, r3, r1
 8003a04:	2300      	movs	r3, #0
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a4a      	ldr	r2, [pc, #296]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x350>)
 8003a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a12:	677a      	str	r2, [r7, #116]	; 0x74
 8003a14:	460a      	mov	r2, r1
 8003a16:	673a      	str	r2, [r7, #112]	; 0x70
 8003a18:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a1a:	4413      	add	r3, r2
 8003a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8003a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a22:	2200      	movs	r2, #0
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
 8003a26:	637a      	str	r2, [r7, #52]	; 0x34
 8003a28:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003a30:	f7fc fbe8 	bl	8000204 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a3e:	e05b      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a40:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	2200      	movs	r2, #0
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	f04f 0000 	mov.w	r0, #0
 8003a64:	f04f 0100 	mov.w	r1, #0
 8003a68:	0159      	lsls	r1, r3, #5
 8003a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6e:	0150      	lsls	r0, r2, #5
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4641      	mov	r1, r8
 8003a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a94:	ebb2 040a 	subs.w	r4, r2, sl
 8003a98:	eb63 050b 	sbc.w	r5, r3, fp
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	00eb      	lsls	r3, r5, #3
 8003aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aaa:	00e2      	lsls	r2, r4, #3
 8003aac:	4614      	mov	r4, r2
 8003aae:	461d      	mov	r5, r3
 8003ab0:	4643      	mov	r3, r8
 8003ab2:	18e3      	adds	r3, r4, r3
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	eb45 0303 	adc.w	r3, r5, r3
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aca:	4629      	mov	r1, r5
 8003acc:	028b      	lsls	r3, r1, #10
 8003ace:	4621      	mov	r1, r4
 8003ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	028a      	lsls	r2, r1, #10
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	61fa      	str	r2, [r7, #28]
 8003ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aea:	f7fc fb8b 	bl	8000204 <__aeabi_uldivmod>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4613      	mov	r3, r2
 8003af4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x348>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0f1b      	lsrs	r3, r3, #28
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b16:	e003      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3798      	adds	r7, #152	; 0x98
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	016e3600 	.word	0x016e3600

08003b3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e28d      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 8083 	beq.w	8003c62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b5c:	4b94      	ldr	r3, [pc, #592]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d019      	beq.n	8003b9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b68:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b74:	4b8e      	ldr	r3, [pc, #568]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b80:	d00c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d112      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	4b84      	ldr	r3, [pc, #528]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05b      	beq.n	8003c60 <HAL_RCC_OscConfig+0x124>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d157      	bne.n	8003c60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e25a      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d106      	bne.n	8003bcc <HAL_RCC_OscConfig+0x90>
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7b      	ldr	r2, [pc, #492]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e01d      	b.n	8003c08 <HAL_RCC_OscConfig+0xcc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0xb4>
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b73      	ldr	r3, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a72      	ldr	r2, [pc, #456]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e00b      	b.n	8003c08 <HAL_RCC_OscConfig+0xcc>
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6e      	ldr	r2, [pc, #440]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6b      	ldr	r2, [pc, #428]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fd74 	bl	80026fc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe fd70 	bl	80026fc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e21f      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0xdc>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fd60 	bl	80026fc <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe fd5c 	bl	80026fc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e20b      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x104>
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06f      	beq.n	8003d4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c6e:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d017      	beq.n	8003caa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c7a:	4b4d      	ldr	r3, [pc, #308]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x186>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1d3      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4937      	ldr	r1, [pc, #220]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	e03a      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fe fd09 	bl	80026fc <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fe fd05 	bl	80026fc <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e1b4      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4925      	ldr	r1, [pc, #148]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x278>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe fce8 	bl	80026fc <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fe fce4 	bl	80026fc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e193      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	4b1b      	ldr	r3, [pc, #108]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d036      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d016      	beq.n	8003d90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_RCC_OscConfig+0x27c>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d68:	f7fe fcc8 	bl	80026fc <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fe fcc4 	bl	80026fc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e173      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x274>)
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x234>
 8003d8e:	e01b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_OscConfig+0x27c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fcb1 	bl	80026fc <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	e00e      	b.n	8003dbc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fcad 	bl	80026fc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d907      	bls.n	8003dbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e15c      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
 8003db0:	40023800 	.word	0x40023800
 8003db4:	42470000 	.word	0x42470000
 8003db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	4b8a      	ldr	r3, [pc, #552]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ea      	bne.n	8003d9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8097 	beq.w	8003f04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b83      	ldr	r3, [pc, #524]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	4b7f      	ldr	r3, [pc, #508]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a7e      	ldr	r2, [pc, #504]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b7c      	ldr	r3, [pc, #496]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e02:	2301      	movs	r3, #1
 8003e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	4b79      	ldr	r3, [pc, #484]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d118      	bne.n	8003e44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe fc6d 	bl	80026fc <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fe fc69 	bl	80026fc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e118      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x4b0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x31e>
 8003e4c:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	4a65      	ldr	r2, [pc, #404]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70
 8003e58:	e01c      	b.n	8003e94 <HAL_RCC_OscConfig+0x358>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b05      	cmp	r3, #5
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x340>
 8003e62:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	4a60      	ldr	r2, [pc, #384]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	f043 0304 	orr.w	r3, r3, #4
 8003e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6e:	4b5e      	ldr	r3, [pc, #376]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0x358>
 8003e7c:	4b5a      	ldr	r3, [pc, #360]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e80:	4a59      	ldr	r2, [pc, #356]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	6713      	str	r3, [r2, #112]	; 0x70
 8003e88:	4b57      	ldr	r3, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a56      	ldr	r2, [pc, #344]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003e8e:	f023 0304 	bic.w	r3, r3, #4
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fe fc2e 	bl	80026fc <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fe fc2a 	bl	80026fc <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e0d7      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eba:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0ee      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x368>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fe fc18 	bl	80026fc <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fe fc14 	bl	80026fc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0c1      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee6:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ee      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80ad 	beq.w	8004068 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d060      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d145      	bne.n	8003fae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_RCC_OscConfig+0x4b4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe fbe8 	bl	80026fc <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fe fbe4 	bl	80026fc <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e093      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	071b      	lsls	r3, r3, #28
 8003f7a:	491b      	ldr	r1, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x4b4>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fe fbb9 	bl	80026fc <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fe fbb5 	bl	80026fc <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e064      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x452>
 8003fac:	e05c      	b.n	8004068 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <HAL_RCC_OscConfig+0x4b4>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fba2 	bl	80026fc <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe fb9e 	bl	80026fc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04d      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_OscConfig+0x4ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x480>
 8003fda:	e045      	b.n	8004068 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e040      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_RCC_OscConfig+0x538>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d030      	beq.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d129      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d122      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	4293      	cmp	r3, r2
 800402e:	d119      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d10f      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800

08004078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e041      	b.n	800410e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe f940 	bl	8002324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f000 fb48 	bl	800474c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e041      	b.n	80041ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f839 	bl	80041b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 faf9 	bl	800474c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_PWM_Start+0x24>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e022      	b.n	8004232 <HAL_TIM_PWM_Start+0x6a>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_PWM_Start+0x3e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e015      	b.n	8004232 <HAL_TIM_PWM_Start+0x6a>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start+0x58>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e008      	b.n	8004232 <HAL_TIM_PWM_Start+0x6a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e07c      	b.n	8004334 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0x82>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004248:	e013      	b.n	8004272 <HAL_TIM_PWM_Start+0xaa>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0x92>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004258:	e00b      	b.n	8004272 <HAL_TIM_PWM_Start+0xaa>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004268:	e003      	b.n	8004272 <HAL_TIM_PWM_Start+0xaa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fd50 	bl	8004d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a2d      	ldr	r2, [pc, #180]	; (800433c <HAL_TIM_PWM_Start+0x174>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_PWM_Start+0xcc>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <HAL_TIM_PWM_Start+0x178>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_TIM_PWM_Start+0xd0>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_TIM_PWM_Start+0xd2>
 8004298:	2300      	movs	r3, #0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_TIM_PWM_Start+0x174>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d022      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d01d      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <HAL_TIM_PWM_Start+0x17c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d018      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <HAL_TIM_PWM_Start+0x180>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_TIM_PWM_Start+0x184>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a16      	ldr	r2, [pc, #88]	; (8004340 <HAL_TIM_PWM_Start+0x178>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_TIM_PWM_Start+0x188>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_TIM_PWM_Start+0x136>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <HAL_TIM_PWM_Start+0x18c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d111      	bne.n	8004322 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b06      	cmp	r3, #6
 800430e:	d010      	beq.n	8004332 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004320:	e007      	b.n	8004332 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40010000 	.word	0x40010000
 8004340:	40010400 	.word	0x40010400
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40014000 	.word	0x40014000
 8004354:	40001800 	.word	0x40001800

08004358 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fcd8 	bl	8004d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <HAL_TIM_PWM_Stop+0xd8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIM_PWM_Stop+0x2c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_TIM_PWM_Stop+0xdc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_TIM_PWM_Stop+0x30>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_TIM_PWM_Stop+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d017      	beq.n	80043be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a1a      	ldr	r2, [r3, #32]
 8004394:	f241 1311 	movw	r3, #4369	; 0x1111
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_TIM_PWM_Stop+0x66>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a1a      	ldr	r2, [r3, #32]
 80043a4:	f240 4344 	movw	r3, #1092	; 0x444
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_TIM_PWM_Stop+0x66>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <HAL_TIM_PWM_Stop+0x96>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	f240 4344 	movw	r3, #1092	; 0x444
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d107      	bne.n	80043ee <HAL_TIM_PWM_Stop+0x96>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <HAL_TIM_PWM_Stop+0xa6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fc:	e013      	b.n	8004426 <HAL_TIM_PWM_Stop+0xce>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d104      	bne.n	800440e <HAL_TIM_PWM_Stop+0xb6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800440c:	e00b      	b.n	8004426 <HAL_TIM_PWM_Stop+0xce>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d104      	bne.n	800441e <HAL_TIM_PWM_Stop+0xc6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800441c:	e003      	b.n	8004426 <HAL_TIM_PWM_Stop+0xce>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40010000 	.word	0x40010000
 8004434:	40010400 	.word	0x40010400

08004438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0ae      	b.n	80045b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b0c      	cmp	r3, #12
 8004462:	f200 809f 	bhi.w	80045a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080045a5 	.word	0x080045a5
 8004474:	080045a5 	.word	0x080045a5
 8004478:	080045a5 	.word	0x080045a5
 800447c:	080044e1 	.word	0x080044e1
 8004480:	080045a5 	.word	0x080045a5
 8004484:	080045a5 	.word	0x080045a5
 8004488:	080045a5 	.word	0x080045a5
 800448c:	08004523 	.word	0x08004523
 8004490:	080045a5 	.word	0x080045a5
 8004494:	080045a5 	.word	0x080045a5
 8004498:	080045a5 	.word	0x080045a5
 800449c:	08004563 	.word	0x08004563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f9f0 	bl	800488c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
      break;
 80044de:	e064      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa40 	bl	800496c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
      break;
 8004520:	e043      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fa95 	bl	8004a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0208 	orr.w	r2, r2, #8
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
      break;
 8004560:	e023      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fae9 	bl	8004b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	61da      	str	r2, [r3, #28]
      break;
 80045a2:	e002      	b.n	80045aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
      break;
 80045a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_ConfigClockSource+0x1c>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e0b4      	b.n	8004742 <HAL_TIM_ConfigClockSource+0x186>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d03e      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0xd4>
 8004612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004616:	f200 8087 	bhi.w	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	f000 8086 	beq.w	800472e <HAL_TIM_ConfigClockSource+0x172>
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d87f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b70      	cmp	r3, #112	; 0x70
 800462a:	d01a      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xa6>
 800462c:	2b70      	cmp	r3, #112	; 0x70
 800462e:	d87b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b60      	cmp	r3, #96	; 0x60
 8004632:	d050      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004634:	2b60      	cmp	r3, #96	; 0x60
 8004636:	d877      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b50      	cmp	r3, #80	; 0x50
 800463a:	d03c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xfa>
 800463c:	2b50      	cmp	r3, #80	; 0x50
 800463e:	d873      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d058      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d86f      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b30      	cmp	r3, #48	; 0x30
 800464a:	d064      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800464c:	2b30      	cmp	r3, #48	; 0x30
 800464e:	d86b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d060      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004654:	2b20      	cmp	r3, #32
 8004656:	d867      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d05c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b10      	cmp	r3, #16
 800465e:	d05a      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	e062      	b.n	8004728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 fb35 	bl	8004ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]
      break;
 800468e:	e04f      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f000 fb1e 	bl	8004ce0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b2:	609a      	str	r2, [r3, #8]
      break;
 80046b4:	e03c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 fa92 	bl	8004bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2150      	movs	r1, #80	; 0x50
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 faeb 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 80046d4:	e02c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 fab1 	bl	8004c4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2160      	movs	r1, #96	; 0x60
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fadb 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 80046f4:	e01c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fa72 	bl	8004bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	4618      	mov	r0, r3
 8004710:	f000 facb 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004714:	e00c      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 fac2 	bl	8004caa <TIM_ITRx_SetConfig>
      break;
 8004726:	e003      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e000      	b.n	8004730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800472e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <TIM_Base_SetConfig+0x114>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d00f      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3d      	ldr	r2, [pc, #244]	; (8004864 <TIM_Base_SetConfig+0x118>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00b      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3c      	ldr	r2, [pc, #240]	; (8004868 <TIM_Base_SetConfig+0x11c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d007      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3b      	ldr	r2, [pc, #236]	; (800486c <TIM_Base_SetConfig+0x120>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <TIM_Base_SetConfig+0x124>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d108      	bne.n	800479e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <TIM_Base_SetConfig+0x114>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02b      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d027      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2c      	ldr	r2, [pc, #176]	; (8004864 <TIM_Base_SetConfig+0x118>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d023      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2b      	ldr	r2, [pc, #172]	; (8004868 <TIM_Base_SetConfig+0x11c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01f      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2a      	ldr	r2, [pc, #168]	; (800486c <TIM_Base_SetConfig+0x120>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01b      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a29      	ldr	r2, [pc, #164]	; (8004870 <TIM_Base_SetConfig+0x124>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d017      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a28      	ldr	r2, [pc, #160]	; (8004874 <TIM_Base_SetConfig+0x128>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <TIM_Base_SetConfig+0x12c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00f      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <TIM_Base_SetConfig+0x130>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00b      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <TIM_Base_SetConfig+0x134>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d007      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a24      	ldr	r2, [pc, #144]	; (8004884 <TIM_Base_SetConfig+0x138>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d003      	beq.n	80047fe <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <TIM_Base_SetConfig+0x13c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d108      	bne.n	8004810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <TIM_Base_SetConfig+0x114>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_Base_SetConfig+0xf8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <TIM_Base_SetConfig+0x124>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d103      	bne.n	800484c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	615a      	str	r2, [r3, #20]
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40010000 	.word	0x40010000
 8004864:	40000400 	.word	0x40000400
 8004868:	40000800 	.word	0x40000800
 800486c:	40000c00 	.word	0x40000c00
 8004870:	40010400 	.word	0x40010400
 8004874:	40014000 	.word	0x40014000
 8004878:	40014400 	.word	0x40014400
 800487c:	40014800 	.word	0x40014800
 8004880:	40001800 	.word	0x40001800
 8004884:	40001c00 	.word	0x40001c00
 8004888:	40002000 	.word	0x40002000

0800488c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f023 0302 	bic.w	r3, r3, #2
 80048d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a20      	ldr	r2, [pc, #128]	; (8004964 <TIM_OC1_SetConfig+0xd8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC1_SetConfig+0x64>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <TIM_OC1_SetConfig+0xdc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10c      	bne.n	800490a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0308 	bic.w	r3, r3, #8
 80048f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0304 	bic.w	r3, r3, #4
 8004908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a15      	ldr	r2, [pc, #84]	; (8004964 <TIM_OC1_SetConfig+0xd8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_OC1_SetConfig+0x8e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <TIM_OC1_SetConfig+0xdc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d111      	bne.n	800493e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	621a      	str	r2, [r3, #32]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40010000 	.word	0x40010000
 8004968:	40010400 	.word	0x40010400

0800496c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0210 	bic.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0320 	bic.w	r3, r3, #32
 80049b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <TIM_OC2_SetConfig+0xe4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_OC2_SetConfig+0x68>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <TIM_OC2_SetConfig+0xe8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10d      	bne.n	80049f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <TIM_OC2_SetConfig+0xe4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC2_SetConfig+0x94>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <TIM_OC2_SetConfig+0xe8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d113      	bne.n	8004a28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40010400 	.word	0x40010400

08004a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <TIM_OC3_SetConfig+0xe0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC3_SetConfig+0x66>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <TIM_OC3_SetConfig+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10d      	bne.n	8004ada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <TIM_OC3_SetConfig+0xe0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_OC3_SetConfig+0x92>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <TIM_OC3_SetConfig+0xe4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d113      	bne.n	8004b12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40010400 	.word	0x40010400

08004b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <TIM_OC4_SetConfig+0xa4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x68>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <TIM_OC4_SetConfig+0xa8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d109      	bne.n	8004bbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400

08004bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f023 030a 	bic.w	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b087      	sub	sp, #28
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f043 0307 	orr.w	r3, r3, #7
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2201      	movs	r2, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	401a      	ands	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e05a      	b.n	8004e3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d022      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd0:	d01d      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d10c      	bne.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	40010400 	.word	0x40010400
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40001800 	.word	0x40001800

08004e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e03f      	b.n	8004ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fd fafa 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f997 	bl	80051dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b08a      	sub	sp, #40	; 0x28
 8004f02:	af02      	add	r7, sp, #8
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d17c      	bne.n	8005018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_UART_Transmit+0x2c>
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e075      	b.n	800501a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Transmit+0x3e>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e06e      	b.n	800501a <HAL_UART_Transmit+0x11c>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2221      	movs	r2, #33	; 0x21
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f52:	f7fd fbd3 	bl	80026fc <HAL_GetTick>
 8004f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d108      	bne.n	8004f80 <HAL_UART_Transmit+0x82>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d104      	bne.n	8004f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e003      	b.n	8004f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f90:	e02a      	b.n	8004fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f870 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e036      	b.n	800501a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e007      	b.n	8004fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1cf      	bne.n	8004f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2140      	movs	r1, #64	; 0x40
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f840 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e006      	b.n	800501a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005014:	2300      	movs	r3, #0
 8005016:	e000      	b.n	800501a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005018:	2302      	movs	r3, #2
  }
}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	4613      	mov	r3, r2
 800502e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	d11d      	bne.n	8005078 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_UART_Receive_IT+0x26>
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e016      	b.n	800507a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_UART_Receive_IT+0x38>
 8005056:	2302      	movs	r3, #2
 8005058:	e00f      	b.n	800507a <HAL_UART_Receive_IT+0x58>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005068:	88fb      	ldrh	r3, [r7, #6]
 800506a:	461a      	mov	r2, r3
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f875 	bl	800515e <UART_Start_Receive_IT>
 8005074:	4603      	mov	r3, r0
 8005076:	e000      	b.n	800507a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
  }
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b090      	sub	sp, #64	; 0x40
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005092:	e050      	b.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d04c      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800509c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a2:	f7fd fb2b 	bl	80026fc <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d241      	bcs.n	8005136 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050d2:	637a      	str	r2, [r7, #52]	; 0x34
 80050d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e5      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	613b      	str	r3, [r7, #16]
   return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005106:	623a      	str	r2, [r7, #32]
 8005108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	69f9      	ldr	r1, [r7, #28]
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	61bb      	str	r3, [r7, #24]
   return(result);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e5      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e00f      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d09f      	beq.n	8005094 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3740      	adds	r7, #64	; 0x40
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2222      	movs	r2, #34	; 0x22
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0220 	orr.w	r2, r2, #32
 80051ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e0:	b0c0      	sub	sp, #256	; 0x100
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	68d9      	ldr	r1, [r3, #12]
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	ea40 0301 	orr.w	r3, r0, r1
 8005204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	431a      	orrs	r2, r3
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	431a      	orrs	r2, r3
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005234:	f021 010c 	bic.w	r1, r1, #12
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005242:	430b      	orrs	r3, r1
 8005244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	6999      	ldr	r1, [r3, #24]
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	ea40 0301 	orr.w	r3, r0, r1
 8005262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b8f      	ldr	r3, [pc, #572]	; (80054a8 <UART_SetConfig+0x2cc>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d005      	beq.n	800527c <UART_SetConfig+0xa0>
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b8d      	ldr	r3, [pc, #564]	; (80054ac <UART_SetConfig+0x2d0>)
 8005278:	429a      	cmp	r2, r3
 800527a:	d104      	bne.n	8005286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fe faa0 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8005280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005284:	e003      	b.n	800528e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005286:	f7fe fa87 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 800528a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	f040 810c 	bne.w	80054b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052b6:	415b      	adcs	r3, r3
 80052b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052be:	4621      	mov	r1, r4
 80052c0:	eb12 0801 	adds.w	r8, r2, r1
 80052c4:	4629      	mov	r1, r5
 80052c6:	eb43 0901 	adc.w	r9, r3, r1
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052de:	4690      	mov	r8, r2
 80052e0:	4699      	mov	r9, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	eb18 0303 	adds.w	r3, r8, r3
 80052e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052ec:	462b      	mov	r3, r5
 80052ee:	eb49 0303 	adc.w	r3, r9, r3
 80052f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005302:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800530a:	460b      	mov	r3, r1
 800530c:	18db      	adds	r3, r3, r3
 800530e:	653b      	str	r3, [r7, #80]	; 0x50
 8005310:	4613      	mov	r3, r2
 8005312:	eb42 0303 	adc.w	r3, r2, r3
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
 8005318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800531c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005320:	f7fa ff70 	bl	8000204 <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4b61      	ldr	r3, [pc, #388]	; (80054b0 <UART_SetConfig+0x2d4>)
 800532a:	fba3 2302 	umull	r2, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	011c      	lsls	r4, r3, #4
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800533c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	1891      	adds	r1, r2, r2
 800534a:	64b9      	str	r1, [r7, #72]	; 0x48
 800534c:	415b      	adcs	r3, r3
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005354:	4641      	mov	r1, r8
 8005356:	eb12 0a01 	adds.w	sl, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb43 0b01 	adc.w	fp, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800536c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005374:	4692      	mov	sl, r2
 8005376:	469b      	mov	fp, r3
 8005378:	4643      	mov	r3, r8
 800537a:	eb1a 0303 	adds.w	r3, sl, r3
 800537e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005382:	464b      	mov	r3, r9
 8005384:	eb4b 0303 	adc.w	r3, fp, r3
 8005388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800539c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053a0:	460b      	mov	r3, r1
 80053a2:	18db      	adds	r3, r3, r3
 80053a4:	643b      	str	r3, [r7, #64]	; 0x40
 80053a6:	4613      	mov	r3, r2
 80053a8:	eb42 0303 	adc.w	r3, r2, r3
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
 80053ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053b6:	f7fa ff25 	bl	8000204 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	4b3b      	ldr	r3, [pc, #236]	; (80054b0 <UART_SetConfig+0x2d4>)
 80053c2:	fba3 2301 	umull	r2, r3, r3, r1
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2264      	movs	r2, #100	; 0x64
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
 80053ce:	1acb      	subs	r3, r1, r3
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053d6:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <UART_SetConfig+0x2d4>)
 80053d8:	fba3 2302 	umull	r2, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053e4:	441c      	add	r4, r3
 80053e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	1891      	adds	r1, r2, r2
 80053fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005400:	415b      	adcs	r3, r3
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005408:	4641      	mov	r1, r8
 800540a:	1851      	adds	r1, r2, r1
 800540c:	6339      	str	r1, [r7, #48]	; 0x30
 800540e:	4649      	mov	r1, r9
 8005410:	414b      	adcs	r3, r1
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005420:	4659      	mov	r1, fp
 8005422:	00cb      	lsls	r3, r1, #3
 8005424:	4651      	mov	r1, sl
 8005426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800542a:	4651      	mov	r1, sl
 800542c:	00ca      	lsls	r2, r1, #3
 800542e:	4610      	mov	r0, r2
 8005430:	4619      	mov	r1, r3
 8005432:	4603      	mov	r3, r0
 8005434:	4642      	mov	r2, r8
 8005436:	189b      	adds	r3, r3, r2
 8005438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800543c:	464b      	mov	r3, r9
 800543e:	460a      	mov	r2, r1
 8005440:	eb42 0303 	adc.w	r3, r2, r3
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800545c:	460b      	mov	r3, r1
 800545e:	18db      	adds	r3, r3, r3
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
 8005462:	4613      	mov	r3, r2
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800546a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800546e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005472:	f7fa fec7 	bl	8000204 <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <UART_SetConfig+0x2d4>)
 800547c:	fba3 1302 	umull	r1, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	2164      	movs	r1, #100	; 0x64
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	3332      	adds	r3, #50	; 0x32
 800548e:	4a08      	ldr	r2, [pc, #32]	; (80054b0 <UART_SetConfig+0x2d4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f003 0207 	and.w	r2, r3, #7
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4422      	add	r2, r4
 80054a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054a4:	e105      	b.n	80056b2 <UART_SetConfig+0x4d6>
 80054a6:	bf00      	nop
 80054a8:	40011000 	.word	0x40011000
 80054ac:	40011400 	.word	0x40011400
 80054b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	1891      	adds	r1, r2, r2
 80054cc:	6239      	str	r1, [r7, #32]
 80054ce:	415b      	adcs	r3, r3
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
 80054d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054d6:	4641      	mov	r1, r8
 80054d8:	1854      	adds	r4, r2, r1
 80054da:	4649      	mov	r1, r9
 80054dc:	eb43 0501 	adc.w	r5, r3, r1
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	00eb      	lsls	r3, r5, #3
 80054ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ee:	00e2      	lsls	r2, r4, #3
 80054f0:	4614      	mov	r4, r2
 80054f2:	461d      	mov	r5, r3
 80054f4:	4643      	mov	r3, r8
 80054f6:	18e3      	adds	r3, r4, r3
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054fc:	464b      	mov	r3, r9
 80054fe:	eb45 0303 	adc.w	r3, r5, r3
 8005502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005522:	4629      	mov	r1, r5
 8005524:	008b      	lsls	r3, r1, #2
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552c:	4621      	mov	r1, r4
 800552e:	008a      	lsls	r2, r1, #2
 8005530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005534:	f7fa fe66 	bl	8000204 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4b60      	ldr	r3, [pc, #384]	; (80056c0 <UART_SetConfig+0x4e4>)
 800553e:	fba3 2302 	umull	r2, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	011c      	lsls	r4, r3, #4
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	61b9      	str	r1, [r7, #24]
 8005560:	415b      	adcs	r3, r3
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005568:	4641      	mov	r1, r8
 800556a:	1851      	adds	r1, r2, r1
 800556c:	6139      	str	r1, [r7, #16]
 800556e:	4649      	mov	r1, r9
 8005570:	414b      	adcs	r3, r1
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005580:	4659      	mov	r1, fp
 8005582:	00cb      	lsls	r3, r1, #3
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558a:	4651      	mov	r1, sl
 800558c:	00ca      	lsls	r2, r1, #3
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	4603      	mov	r3, r0
 8005594:	4642      	mov	r2, r8
 8005596:	189b      	adds	r3, r3, r2
 8005598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800559c:	464b      	mov	r3, r9
 800559e:	460a      	mov	r2, r1
 80055a0:	eb42 0303 	adc.w	r3, r2, r3
 80055a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055c0:	4649      	mov	r1, r9
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	4641      	mov	r1, r8
 80055c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ca:	4641      	mov	r1, r8
 80055cc:	008a      	lsls	r2, r1, #2
 80055ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055d2:	f7fa fe17 	bl	8000204 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <UART_SetConfig+0x4e4>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a34      	ldr	r2, [pc, #208]	; (80056c0 <UART_SetConfig+0x4e4>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fa:	441c      	add	r4, r3
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005600:	2200      	movs	r2, #0
 8005602:	673b      	str	r3, [r7, #112]	; 0x70
 8005604:	677a      	str	r2, [r7, #116]	; 0x74
 8005606:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800560a:	4642      	mov	r2, r8
 800560c:	464b      	mov	r3, r9
 800560e:	1891      	adds	r1, r2, r2
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	415b      	adcs	r3, r3
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800561a:	4641      	mov	r1, r8
 800561c:	1851      	adds	r1, r2, r1
 800561e:	6039      	str	r1, [r7, #0]
 8005620:	4649      	mov	r1, r9
 8005622:	414b      	adcs	r3, r1
 8005624:	607b      	str	r3, [r7, #4]
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005632:	4659      	mov	r1, fp
 8005634:	00cb      	lsls	r3, r1, #3
 8005636:	4651      	mov	r1, sl
 8005638:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563c:	4651      	mov	r1, sl
 800563e:	00ca      	lsls	r2, r1, #3
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	4603      	mov	r3, r0
 8005646:	4642      	mov	r2, r8
 8005648:	189b      	adds	r3, r3, r2
 800564a:	66bb      	str	r3, [r7, #104]	; 0x68
 800564c:	464b      	mov	r3, r9
 800564e:	460a      	mov	r2, r1
 8005650:	eb42 0303 	adc.w	r3, r2, r3
 8005654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	663b      	str	r3, [r7, #96]	; 0x60
 8005660:	667a      	str	r2, [r7, #100]	; 0x64
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800566e:	4649      	mov	r1, r9
 8005670:	008b      	lsls	r3, r1, #2
 8005672:	4641      	mov	r1, r8
 8005674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005678:	4641      	mov	r1, r8
 800567a:	008a      	lsls	r2, r1, #2
 800567c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005680:	f7fa fdc0 	bl	8000204 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <UART_SetConfig+0x4e4>)
 800568a:	fba3 1302 	umull	r1, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2164      	movs	r1, #100	; 0x64
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	; 0x32
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <UART_SetConfig+0x4e4>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4422      	add	r2, r4
 80056b0:	609a      	str	r2, [r3, #8]
}
 80056b2:	bf00      	nop
 80056b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056b8:	46bd      	mov	sp, r7
 80056ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056be:	bf00      	nop
 80056c0:	51eb851f 	.word	0x51eb851f

080056c4 <LL_EXTI_EnableIT_0_31>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4904      	ldr	r1, [pc, #16]	; (80056e4 <LL_EXTI_EnableIT_0_31+0x20>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	600b      	str	r3, [r1, #0]
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	40013c00 	.word	0x40013c00

080056e8 <LL_EXTI_DisableIT_0_31>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <LL_EXTI_DisableIT_0_31+0x24>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	4904      	ldr	r1, [pc, #16]	; (800570c <LL_EXTI_DisableIT_0_31+0x24>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40013c00 	.word	0x40013c00

08005710 <LL_EXTI_EnableEvent_0_31>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <LL_EXTI_EnableEvent_0_31+0x20>)
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4904      	ldr	r1, [pc, #16]	; (8005730 <LL_EXTI_EnableEvent_0_31+0x20>)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40013c00 	.word	0x40013c00

08005734 <LL_EXTI_DisableEvent_0_31>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800573c:	4b06      	ldr	r3, [pc, #24]	; (8005758 <LL_EXTI_DisableEvent_0_31+0x24>)
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	43db      	mvns	r3, r3
 8005744:	4904      	ldr	r1, [pc, #16]	; (8005758 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005746:	4013      	ands	r3, r2
 8005748:	604b      	str	r3, [r1, #4]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40013c00 	.word	0x40013c00

0800575c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4904      	ldr	r1, [pc, #16]	; (800577c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4313      	orrs	r3, r2
 800576e:	608b      	str	r3, [r1, #8]
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40013c00 	.word	0x40013c00

08005780 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	43db      	mvns	r3, r3
 8005790:	4904      	ldr	r1, [pc, #16]	; (80057a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005792:	4013      	ands	r3, r2
 8005794:	608b      	str	r3, [r1, #8]
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40013c00 	.word	0x40013c00

080057a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	4904      	ldr	r1, [pc, #16]	; (80057c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60cb      	str	r3, [r1, #12]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40013c00 	.word	0x40013c00

080057cc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	43db      	mvns	r3, r3
 80057dc:	4904      	ldr	r1, [pc, #16]	; (80057f0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80057de:	4013      	ands	r3, r2
 80057e0:	60cb      	str	r3, [r1, #12]
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40013c00 	.word	0x40013c00

080057f4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d065      	beq.n	80058d4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d06c      	beq.n	80058ea <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	795b      	ldrb	r3, [r3, #5]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d01c      	beq.n	8005852 <LL_EXTI_Init+0x5e>
 8005818:	2b02      	cmp	r3, #2
 800581a:	dc25      	bgt.n	8005868 <LL_EXTI_Init+0x74>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <LL_EXTI_Init+0x32>
 8005820:	2b01      	cmp	r3, #1
 8005822:	d00b      	beq.n	800583c <LL_EXTI_Init+0x48>
 8005824:	e020      	b.n	8005868 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ff82 	bl	8005734 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff45 	bl	80056c4 <LL_EXTI_EnableIT_0_31>
          break;
 800583a:	e018      	b.n	800586e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff51 	bl	80056e8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff ff60 	bl	8005710 <LL_EXTI_EnableEvent_0_31>
          break;
 8005850:	e00d      	b.n	800586e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff34 	bl	80056c4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ff55 	bl	8005710 <LL_EXTI_EnableEvent_0_31>
          break;
 8005866:	e002      	b.n	800586e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
          break;
 800586c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	799b      	ldrb	r3, [r3, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d039      	beq.n	80058ea <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	799b      	ldrb	r3, [r3, #6]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d01c      	beq.n	80058b8 <LL_EXTI_Init+0xc4>
 800587e:	2b03      	cmp	r3, #3
 8005880:	dc25      	bgt.n	80058ce <LL_EXTI_Init+0xda>
 8005882:	2b01      	cmp	r3, #1
 8005884:	d002      	beq.n	800588c <LL_EXTI_Init+0x98>
 8005886:	2b02      	cmp	r3, #2
 8005888:	d00b      	beq.n	80058a2 <LL_EXTI_Init+0xae>
 800588a:	e020      	b.n	80058ce <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff9b 	bl	80057cc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff ff5e 	bl	800575c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80058a0:	e024      	b.n	80058ec <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff ff6a 	bl	8005780 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff79 	bl	80057a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80058b6:	e019      	b.n	80058ec <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff ff4d 	bl	800575c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff ff6e 	bl	80057a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80058cc:	e00e      	b.n	80058ec <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
            break;
 80058d2:	e00b      	b.n	80058ec <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff ff05 	bl	80056e8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff ff26 	bl	8005734 <LL_EXTI_DisableEvent_0_31>
 80058e8:	e000      	b.n	80058ec <LL_EXTI_Init+0xf8>
      }
 80058ea:	bf00      	nop
  }
  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <LL_GPIO_SetPinMode>:
{
 80058f6:	b480      	push	{r7}
 80058f8:	b089      	sub	sp, #36	; 0x24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	fa93 f3a3 	rbit	r3, r3
 8005910:	613b      	str	r3, [r7, #16]
  return result;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	2103      	movs	r1, #3
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	401a      	ands	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	61bb      	str	r3, [r7, #24]
  return result;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	fab3 f383 	clz	r3, r3
 8005938:	b2db      	uxtb	r3, r3
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	431a      	orrs	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]
}
 8005948:	bf00      	nop
 800594a:	3724      	adds	r7, #36	; 0x24
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <LL_GPIO_SetPinOutputType>:
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	43db      	mvns	r3, r3
 8005968:	401a      	ands	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	605a      	str	r2, [r3, #4]
}
 8005978:	bf00      	nop
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_GPIO_SetPinSpeed>:
{
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	; 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fa93 f3a3 	rbit	r3, r3
 800599e:	613b      	str	r3, [r7, #16]
  return result;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	fab3 f383 	clz	r3, r3
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	2103      	movs	r1, #3
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	fa93 f3a3 	rbit	r3, r3
 80059be:	61bb      	str	r3, [r7, #24]
  return result;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	fab3 f383 	clz	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <LL_GPIO_SetPinPull>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	b089      	sub	sp, #36	; 0x24
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fa93 f3a3 	rbit	r3, r3
 80059fc:	613b      	str	r3, [r7, #16]
  return result;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	fab3 f383 	clz	r3, r3
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	2103      	movs	r1, #3
 8005a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	401a      	ands	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	fa93 f3a3 	rbit	r3, r3
 8005a1c:	61bb      	str	r3, [r7, #24]
  return result;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	60da      	str	r2, [r3, #12]
}
 8005a34:	bf00      	nop
 8005a36:	3724      	adds	r7, #36	; 0x24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <LL_GPIO_SetAFPin_0_7>:
{
 8005a40:	b480      	push	{r7}
 8005a42:	b089      	sub	sp, #36	; 0x24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fa93 f3a3 	rbit	r3, r3
 8005a5a:	613b      	str	r3, [r7, #16]
  return result;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	fab3 f383 	clz	r3, r3
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	210f      	movs	r1, #15
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	401a      	ands	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	fa93 f3a3 	rbit	r3, r3
 8005a7a:	61bb      	str	r3, [r7, #24]
  return result;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	fab3 f383 	clz	r3, r3
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <LL_GPIO_SetAFPin_8_15>:
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b089      	sub	sp, #36	; 0x24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	fa93 f3a3 	rbit	r3, r3
 8005aba:	613b      	str	r3, [r7, #16]
  return result;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	fab3 f383 	clz	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	210f      	movs	r1, #15
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	401a      	ands	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	fa93 f3a3 	rbit	r3, r3
 8005adc:	61bb      	str	r3, [r7, #24]
  return result;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	fab3 f383 	clz	r3, r3
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005af4:	bf00      	nop
 8005af6:	3724      	adds	r7, #36	; 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	fa93 f3a3 	rbit	r3, r3
 8005b1e:	613b      	str	r3, [r7, #16]
  return result;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	fab3 f383 	clz	r3, r3
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005b2a:	e050      	b.n	8005bce <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2101      	movs	r1, #1
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d042      	beq.n	8005bc8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d003      	beq.n	8005b52 <LL_GPIO_Init+0x52>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d10d      	bne.n	8005b6e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	461a      	mov	r2, r3
 8005b58:	69b9      	ldr	r1, [r7, #24]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ff12 	bl	8005984 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	461a      	mov	r2, r3
 8005b66:	69b9      	ldr	r1, [r7, #24]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fef3 	bl	8005954 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	461a      	mov	r2, r3
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff33 	bl	80059e2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d11a      	bne.n	8005bba <LL_GPIO_Init+0xba>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	fa93 f3a3 	rbit	r3, r3
 8005b8e:	60bb      	str	r3, [r7, #8]
  return result;
 8005b90:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	d807      	bhi.n	8005bac <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	69b9      	ldr	r1, [r7, #24]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff4b 	bl	8005a40 <LL_GPIO_SetAFPin_0_7>
 8005baa:	e006      	b.n	8005bba <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	69b9      	ldr	r1, [r7, #24]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff72 	bl	8005a9e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff fe97 	bl	80058f6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1a7      	bne.n	8005b2c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <__libc_init_array>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4d0d      	ldr	r5, [pc, #52]	; (8005c20 <__libc_init_array+0x38>)
 8005bec:	4c0d      	ldr	r4, [pc, #52]	; (8005c24 <__libc_init_array+0x3c>)
 8005bee:	1b64      	subs	r4, r4, r5
 8005bf0:	10a4      	asrs	r4, r4, #2
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	d109      	bne.n	8005c0c <__libc_init_array+0x24>
 8005bf8:	4d0b      	ldr	r5, [pc, #44]	; (8005c28 <__libc_init_array+0x40>)
 8005bfa:	4c0c      	ldr	r4, [pc, #48]	; (8005c2c <__libc_init_array+0x44>)
 8005bfc:	f000 f820 	bl	8005c40 <_init>
 8005c00:	1b64      	subs	r4, r4, r5
 8005c02:	10a4      	asrs	r4, r4, #2
 8005c04:	2600      	movs	r6, #0
 8005c06:	42a6      	cmp	r6, r4
 8005c08:	d105      	bne.n	8005c16 <__libc_init_array+0x2e>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c10:	4798      	blx	r3
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7ee      	b.n	8005bf4 <__libc_init_array+0xc>
 8005c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1a:	4798      	blx	r3
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7f2      	b.n	8005c06 <__libc_init_array+0x1e>
 8005c20:	08005cf8 	.word	0x08005cf8
 8005c24:	08005cf8 	.word	0x08005cf8
 8005c28:	08005cf8 	.word	0x08005cf8
 8005c2c:	08005cfc 	.word	0x08005cfc

08005c30 <memset>:
 8005c30:	4402      	add	r2, r0
 8005c32:	4603      	mov	r3, r0
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d100      	bne.n	8005c3a <memset+0xa>
 8005c38:	4770      	bx	lr
 8005c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c3e:	e7f9      	b.n	8005c34 <memset+0x4>

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
