
LiDAR Factory JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007794  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a40  08007a40  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a48  08007a48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a98  20000014  08007a64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  08007a64  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016361  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bb  00000000  00000000  000363a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00039c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002840f  00000000  00000000  0003beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0c1  00000000  00000000  000642c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed884  00000000  00000000  0007e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bc0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000488c  00000000  00000000  0016bc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007940 	.word	0x08007940

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08007940 	.word	0x08007940

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800051a:	4b21      	ldr	r3, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x98>)
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <MX_ADC1_Init+0x9c>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000522:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <MX_ADC1_Init+0x98>)
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <MX_ADC1_Init+0xa0>)
 800054c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000556:	2201      	movs	r2, #1
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <MX_ADC1_Init+0x98>)
 800056a:	f003 f901 	bl	8003770 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fd0e 	bl	8000f94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000580:	2304      	movs	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_ADC1_Init+0x98>)
 800058a:	f003 fad3 	bl	8003b34 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fcfe 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	40012000 	.word	0x40012000
 80005a8:	0f000001 	.word	0x0f000001

080005ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if (adcHandle->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d127      	bne.n	800061e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_ADC_MspInit+0x80>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_ADC_MspInit+0x84>)
 800061a:	f003 fe5d 	bl	80042d8 <HAL_GPIO_Init>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012000 	.word	0x40012000
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000

08000634 <LiDAR_Cur_Check>:
  }
}

/* USER CODE BEGIN 1 */
void LiDAR_Cur_Check(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8000638:	4825      	ldr	r0, [pc, #148]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 800063a:	f003 f8dd 	bl	80037f8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	4823      	ldr	r0, [pc, #140]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000642:	f003 f9de 	bl	8003a02 <HAL_ADC_PollForConversion>
  adc_val = HAL_ADC_GetValue(&hadc1);
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000648:	f003 fa66 	bl	8003b18 <HAL_ADC_GetValue>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000652:	801a      	strh	r2, [r3, #0]
  total_adc_val += adc_val;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LiDAR_Cur_Check+0xa0>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b29b      	uxth	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4413      	add	r3, r2
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 8000664:	6013      	str	r3, [r2, #0]
  cnt++;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000672:	701a      	strb	r2, [r3, #0]
  HAL_ADC_Stop(&hadc1);
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <LiDAR_Cur_Check+0x9c>)
 8000676:	f003 f991 	bl	800399c <HAL_ADC_Stop>

  Delay_ms(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f88c 	bl	8000798 <Delay_ms>
  if (cnt == ADC_AVG_BUFFER_SIZE)
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b64      	cmp	r3, #100	; 0x64
 8000688:	d120      	bne.n	80006cc <LiDAR_Cur_Check+0x98>
  {
    avg_adc_val = total_adc_val / ADC_AVG_BUFFER_SIZE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <LiDAR_Cur_Check+0xac>)
 8000690:	fba2 2303 	umull	r2, r3, r2, r3
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069a:	801a      	strh	r2, [r3, #0]
    load_current = avg_adc_val / ADC_OFFSET;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <LiDAR_Cur_Check+0xb0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006aa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80006e8 <LiDAR_Cur_Check+0xb4>
 80006ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <LiDAR_Cur_Check+0xb8>)
 80006be:	801a      	strh	r2, [r3, #0]
    total_adc_val = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LiDAR_Cur_Check+0xa4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
    cnt = 0;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LiDAR_Cur_Check+0xa8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
  }
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000003c 	.word	0x2000003c
 80006d4:	20000032 	.word	0x20000032
 80006d8:	20000034 	.word	0x20000034
 80006dc:	20000038 	.word	0x20000038
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	2000003a 	.word	0x2000003a
 80006e8:	4022cbfb 	.word	0x4022cbfb
 80006ec:	20000030 	.word	0x20000030

080006f0 <Delay_us>:
  /**
   * @brief  This function provides a delay (in microseconds)
   * @param  microseconds: delay in microseconds
   */
  __STATIC_INLINE void Delay_us(volatile uint32_t microseconds)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Delay_us+0x40>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

    /* Go to number of cycles for system */
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80006fe:	f004 f8e7 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <Delay_us+0x44>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000714:	bf00      	nop
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Delay_us+0x40>)
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3f8      	bcc.n	8000716 <Delay_us+0x26>
    	;
  }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e0001000 	.word	0xe0001000
 8000734:	431bde83 	.word	0x431bde83

08000738 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <DWT_Delay_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <DWT_Delay_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <DWT_Delay_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <DWT_Delay_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <DWT_Delay_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // 0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <DWT_Delay_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <DWT_Delay_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile("NOP");
 8000772:	bf00      	nop
  __ASM volatile("NOP");
 8000774:	bf00      	nop
  __ASM volatile("NOP");
 8000776:	bf00      	nop

  /* Check if clock cycle counter has started */
  if (DWT->CYCCNT)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <DWT_Delay_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <DWT_Delay_Init+0x4c>
  {
    return 0; /*clock cycle counter started*/
 8000780:	2300      	movs	r3, #0
 8000782:	e000      	b.n	8000786 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1; /*clock cycle counter not started*/
 8000784:	2301      	movs	r3, #1
  }
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <Delay_ms>:

void Delay_ms(uint32_t ms)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  Delay_us(ms * 1000U);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a6:	fb02 f303 	mul.w	r3, r2, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa0 	bl	80006f0 <Delay_us>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db0b      	blt.n	80007fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f003 021f 	and.w	r2, r3, #31
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <__NVIC_EnableIRQ+0x38>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	2001      	movs	r0, #1
 80007f6:	fa00 f202 	lsl.w	r2, r0, r2
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	3302      	adds	r3, #2
 80008de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	43db      	mvns	r3, r3
 80008e8:	ea02 0103 	and.w	r1, r2, r3
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	0c1b      	lsrs	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	fa93 f3a3 	rbit	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	fa03 f202 	lsl.w	r2, r3, r2
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <LL_SYSCFG_SetEXTISource+0x58>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	430a      	orrs	r2, r1
 8000912:	3302      	adds	r3, #2
 8000914:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40013800 	.word	0x40013800

08000928 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa93 f3a3 	rbit	r3, r3
 8000942:	613b      	str	r3, [r7, #16]
  return result;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	61bb      	str	r3, [r7, #24]
  return result;
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fab3 f383 	clz	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	431a      	orrs	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	; 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000986:	b480      	push	{r7}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	613b      	str	r3, [r7, #16]
  return result;
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fab3 f383 	clz	r3, r3
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa93 f3a3 	rbit	r3, r3
 80009c0:	61bb      	str	r3, [r7, #24]
  return result;
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	431a      	orrs	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	; 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	041a      	lsls	r2, r3, #16
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	619a      	str	r2, [r3, #24]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40023800 	.word	0x40023800

08000a34 <MX_GPIO_Init>:
     PB10   ------> USART3_TX
     PA9   ------> USART1_TX
     PA10   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff ffd5 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000a5a:	2080      	movs	r0, #128	; 0x80
 8000a5c:	f7ff ffd2 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffcf 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff ffcc 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff ffc9 	bl	8000a04 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a72:	f642 4107 	movw	r1, #11271	; 0x2c07
 8000a76:	4881      	ldr	r0, [pc, #516]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000a78:	f7ff ffb4 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND4_SIG_Pin|FND3_SIG_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, GREEN_LED_Pin|RED_LED_Pin);
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	4880      	ldr	r0, [pc, #512]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000a80:	f7ff ffb0 	bl	80009e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, BLUE_LED_Pin|LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin
 8000a84:	f245 31e0 	movw	r1, #21472	; 0x53e0
 8000a88:	487e      	ldr	r0, [pc, #504]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000a8a:	f7ff ffab 	bl	80009e4 <LL_GPIO_ResetOutputPin>
                          |FND_B_Pin|FND_D_Pin|FND_G_Pin);

  /**/
  GPIO_InitStruct.Pin = FND_A_Pin|FND_F_Pin|FND_E_Pin|FND1_SIG_Pin
 8000a8e:	f642 4307 	movw	r3, #11271	; 0x2c07
 8000a92:	603b      	str	r3, [r7, #0]
                          |FND4_SIG_Pin|FND3_SIG_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4874      	ldr	r0, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000aaa:	f006 fe99 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000aae:	2382      	movs	r3, #130	; 0x82
 8000ab0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	486e      	ldr	r0, [pc, #440]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000ac8:	f006 fe8a 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000acc:	f240 630c 	movw	r3, #1548	; 0x60c
 8000ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4865      	ldr	r0, [pc, #404]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000aec:	f006 fe78 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Detect_SIG_1_Pin|Detect_SIG_2_Pin|Detect_SIG_3_Pin|SW_OP_3_Pin
 8000af0:	f641 1370 	movw	r3, #6512	; 0x1970
 8000af4:	603b      	str	r3, [r7, #0]
                          |SW_OP_2_Pin|SW_OP_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	485f      	ldr	r0, [pc, #380]	; (8000c80 <MX_GPIO_Init+0x24c>)
 8000b04:	f006 fe6c 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	463b      	mov	r3, r7
 8000b22:	4619      	mov	r1, r3
 8000b24:	4855      	ldr	r0, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000b26:	f006 fe5b 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b4a:	f006 fe49 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4846      	ldr	r0, [pc, #280]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b6a:	f006 fe39 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FB_STOP1_SIG_Pin;
 8000b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FB_STOP1_SIG_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000b82:	f006 fe2d 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD_TRIG_Pin|FND2_SIG_Pin|FND_C_Pin|FND_B_Pin
 8000b86:	f244 33e0 	movw	r3, #17376	; 0x43e0
 8000b8a:	603b      	str	r3, [r7, #0]
                          |FND_D_Pin|FND_G_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000ba2:	f006 fe1d 	bl	80077e0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OP_4_Pin;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SW_OP_4_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4830      	ldr	r0, [pc, #192]	; (8000c7c <MX_GPIO_Init+0x248>)
 8000bba:	f006 fe11 	bl	80077e0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8000bbe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fe82 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8000bc8:	492f      	ldr	r1, [pc, #188]	; (8000c88 <MX_GPIO_Init+0x254>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe7e 	bl	80008cc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be0:	f107 0318 	add.w	r3, r7, #24
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 fc75 	bl	80074d4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f006 fc67 	bl	80074d4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_PULL_NO);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	481e      	ldr	r0, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c0c:	f7ff febb 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_PULL_NO);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	481b      	ldr	r0, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c18:	f7ff feb5 	bl	8000986 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(MODE_SW_GPIO_Port, MODE_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c22:	f7ff fe81 	bl	8000928 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(START_SW_GPIO_Port, START_SW_Pin, LL_GPIO_MODE_INPUT);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4815      	ldr	r0, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x250>)
 8000c2e:	f7ff fe7b 	bl	8000928 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c32:	f7ff fdc1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe11 	bl	8000864 <NVIC_EncodePriority>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	2006      	movs	r0, #6
 8000c48:	f7ff fde2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000c4c:	2006      	movs	r0, #6
 8000c4e:	f7ff fdc1 	bl	80007d4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c52:	f7ff fdb1 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe01 	bl	8000864 <NVIC_EncodePriority>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4619      	mov	r1, r3
 8000c66:	2028      	movs	r0, #40	; 0x28
 8000c68:	f7ff fdd2 	bl	8000810 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c6c:	2028      	movs	r0, #40	; 0x28
 8000c6e:	f7ff fdb1 	bl	80007d4 <__NVIC_EnableIRQ>

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400
 8000c88:	f0000003 	.word	0xf0000003

08000c8c <LL_GPIO_SetOutputPin>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	619a      	str	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_GPIO_ResetOutputPin>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	619a      	str	r2, [r3, #24]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <LL_EXTI_DisableIT_0_31+0x24>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4904      	ldr	r1, [pc, #16]	; (8000cec <LL_EXTI_DisableIT_0_31+0x24>)
 8000cda:	4013      	ands	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40013c00 	.word	0x40013c00

08000cf0 <Delay_us>:
  {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <Delay_us+0x40>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]
    microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000cfe:	f003 fde7 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <Delay_us+0x44>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	fb02 f303 	mul.w	r3, r2, r3
 8000d12:	607b      	str	r3, [r7, #4]
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000d14:	bf00      	nop
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <Delay_us+0x40>)
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1ad2      	subs	r2, r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3f8      	bcc.n	8000d16 <Delay_us+0x26>
  }
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e0001000 	.word	0xe0001000
 8000d34:	431bde83 	.word	0x431bde83

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f002 fca6 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f8aa 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f7ff fe76 	bl	8000a34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d48:	f7ff fbde 	bl	8000508 <MX_ADC1_Init>
  MX_UART5_Init();
 8000d4c:	f002 fb74 	bl	8003438 <MX_UART5_Init>
  MX_TIM3_Init();
 8000d50:	f002 f972 	bl	8003038 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000d54:	f002 fb9a 	bl	800348c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000d58:	f002 f920 	bl	8002f9c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d5c:	f000 f90e 	bl	8000f7c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000d60:	f7ff fcea 	bl	8000738 <DWT_Delay_Init>

  InitUartQueue(&ViewerQueue);
 8000d64:	4843      	ldr	r0, [pc, #268]	; (8000e74 <main+0x13c>)
 8000d66:	f001 fa0d 	bl	8002184 <InitUartQueue>
  InitUartQueue(&LiDARQueue);
 8000d6a:	4843      	ldr	r0, [pc, #268]	; (8000e78 <main+0x140>)
 8000d6c:	f001 fa0a 	bl	8002184 <InitUartQueue>

  switch_check();
 8000d70:	f002 f8ac 	bl	8002ecc <switch_check>

  __HAL_UART_ENABLE_IT(&hLiDAR, UART_IT_RXNE);
 8000d74:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <main+0x144>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <main+0x144>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0220 	orr.w	r2, r2, #32
 8000d82:	60da      	str	r2, [r3, #12]
  LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15);
 8000d84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d88:	f7ff ff9e 	bl	8000cc8 <LL_EXTI_DisableIT_0_31>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    if (tx_start_flag == 0)
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <main+0x148>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d12f      	bne.n	8000df6 <main+0xbe>
    {
      switch (g_Status)
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <main+0x14c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d866      	bhi.n	8000e6e <main+0x136>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <main+0x70>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000dc5 	.word	0x08000dc5
 8000dac:	08000dcb 	.word	0x08000dcb
 8000db0:	08000dd1 	.word	0x08000dd1
 8000db4:	08000dd7 	.word	0x08000dd7
 8000db8:	08000ddd 	.word	0x08000ddd
 8000dbc:	08000de3 	.word	0x08000de3
 8000dc0:	08000de9 	.word	0x08000de9
      {
      case kStatus_Info:
        Info_status();
 8000dc4:	f001 fa84 	bl	80022d0 <Info_status>
        break;
 8000dc8:	e052      	b.n	8000e70 <main+0x138>

      case kStatus_Detect1:
        Detect1_status();
 8000dca:	f001 faeb 	bl	80023a4 <Detect1_status>
        break;
 8000dce:	e04f      	b.n	8000e70 <main+0x138>

      case kStatus_Detect2:
        Detect2_status();
 8000dd0:	f001 fb22 	bl	8002418 <Detect2_status>
        break;
 8000dd4:	e04c      	b.n	8000e70 <main+0x138>

      case kStatus_Detect3:
        Detect3_status();
 8000dd6:	f001 fb4f 	bl	8002478 <Detect3_status>
        break;
 8000dda:	e049      	b.n	8000e70 <main+0x138>

      case kStatus_Idle:
        Idle_status();
 8000ddc:	f001 fba2 	bl	8002524 <Idle_status>
        break;
 8000de0:	e046      	b.n	8000e70 <main+0x138>

      case kStatus_Test:

        Test_status();
 8000de2:	f001 fd2d 	bl	8002840 <Test_status>
        break;
 8000de6:	e043      	b.n	8000e70 <main+0x138>

      case kStatus_Result:
        result(g_Result);
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <main+0x150>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fba0 	bl	8001534 <result>
        break;
 8000df4:	e03c      	b.n	8000e70 <main+0x138>
        break;
      }
    }
    else // LD Tx On
    {
      if (stop_feedback == 0)
 8000df6:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <main+0x154>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d129      	bne.n	8000e52 <main+0x11a>
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <main+0x158>)
 8000e04:	f7ff ff42 	bl	8000c8c <LL_GPIO_SetOutputPin>
        stop_feedback = HAL_GPIO_ReadPin(FB_STOP1_SIG_GPIO_Port, FB_STOP1_SIG_Pin);
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	4820      	ldr	r0, [pc, #128]	; (8000e90 <main+0x158>)
 8000e0e:	f003 fbf7 	bl	8004600 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <main+0x154>)
 8000e18:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1e:	481c      	ldr	r0, [pc, #112]	; (8000e90 <main+0x158>)
 8000e20:	f7ff ff42 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        feedback_ng_cnt++;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <main+0x15c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <main+0x15c>)
 8000e2e:	701a      	strb	r2, [r3, #0]
        if (feedback_ng_cnt >= 5)
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <main+0x15c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d908      	bls.n	8000e4a <main+0x112>
        {
          result(kResult_Err_11);
 8000e38:	200c      	movs	r0, #12
 8000e3a:	f000 fb7b 	bl	8001534 <result>
          stop_feedback = 1;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <main+0x154>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	701a      	strb	r2, [r3, #0]
          feedback_ng_cnt = 0;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <main+0x15c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
        }
        Delay_us(20);
 8000e4a:	2014      	movs	r0, #20
 8000e4c:	f7ff ff50 	bl	8000cf0 <Delay_us>
 8000e50:	e79c      	b.n	8000d8c <main+0x54>
      }
      else
      {
        LL_GPIO_SetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <main+0x158>)
 8000e58:	f7ff ff18 	bl	8000c8c <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(LD_TRIG_GPIO_Port, LD_TRIG_Pin);
 8000e5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x158>)
 8000e62:	f7ff ff21 	bl	8000ca8 <LL_GPIO_ResetOutputPin>
        Delay_us(20);
 8000e66:	2014      	movs	r0, #20
 8000e68:	f7ff ff42 	bl	8000cf0 <Delay_us>
 8000e6c:	e78e      	b.n	8000d8c <main+0x54>
        break;
 8000e6e:	bf00      	nop
    if (tx_start_flag == 0)
 8000e70:	e78c      	b.n	8000d8c <main+0x54>
 8000e72:	bf00      	nop
 8000e74:	20000478 	.word	0x20000478
 8000e78:	20000088 	.word	0x20000088
 8000e7c:	20000a64 	.word	0x20000a64
 8000e80:	2000098a 	.word	0x2000098a
 8000e84:	20000084 	.word	0x20000084
 8000e88:	20000087 	.word	0x20000087
 8000e8c:	20000085 	.word	0x20000085
 8000e90:	40020400 	.word	0x40020400
 8000e94:	20000086 	.word	0x20000086

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2234      	movs	r2, #52	; 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 fd42 	bl	8007930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <SystemClock_Config+0xdc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <SystemClock_Config+0xdc>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <SystemClock_Config+0xdc>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <SystemClock_Config+0xe0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <SystemClock_Config+0xe0>)
 8000ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <SystemClock_Config+0xe0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f0c:	23b4      	movs	r3, #180	; 0xb4
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 feb3 	bl	8004c8c <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f2c:	f000 f832 	bl	8000f94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f30:	f003 fb98 	bl	8004664 <HAL_PWREx_EnableOverDrive>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f3a:	f000 f82b 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000f42:	2303      	movs	r3, #3
 8000f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fbd1 	bl	8004704 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f68:	f000 f814 	bl	8000f94 <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3750      	adds	r7, #80	; 0x50
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	201c      	movs	r0, #28
 8000f86:	f003 f8de 	bl	8004146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f8a:	201c      	movs	r0, #28
 8000f8c:	f003 f8f7 	bl	800417e <HAL_NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <LiDAR_Protocol_Tx>:
#include "protocol.h"

void LiDAR_Protocol_Tx(uint8_t parameter)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d85d      	bhi.n	8001082 <LiDAR_Protocol_Tx+0xe2>
    case LIDAR_COMMAND_START:
    case LIDAR_COMMAND_DETECT1:
    case LIDAR_COMMAND_DETECT2:
    case LIDAR_COMMAND_DETECT3:

        senddata[cnt++] = PROTOCOL_HEADER;
 8000fc6:	7cfb      	ldrb	r3, [r7, #19]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	74fa      	strb	r2, [r7, #19]
 8000fcc:	3318      	adds	r3, #24
 8000fce:	443b      	add	r3, r7
 8000fd0:	22fa      	movs	r2, #250	; 0xfa
 8000fd2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 8000fd6:	7cfb      	ldrb	r3, [r7, #19]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	74fa      	strb	r2, [r7, #19]
 8000fdc:	3318      	adds	r3, #24
 8000fde:	443b      	add	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 8000fe6:	7cfb      	ldrb	r3, [r7, #19]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	74fa      	strb	r2, [r7, #19]
 8000fec:	3318      	adds	r3, #24
 8000fee:	443b      	add	r3, r7
 8000ff0:	22d0      	movs	r2, #208	; 0xd0
 8000ff2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = LIDAR_MODE;
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	74fa      	strb	r2, [r7, #19]
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	443b      	add	r3, r7
 8001000:	220f      	movs	r2, #15
 8001002:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	74fa      	strb	r2, [r7, #19]
 800100c:	3318      	adds	r3, #24
 800100e:	443b      	add	r3, r7
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	74fa      	strb	r2, [r7, #19]
 800101c:	3318      	adds	r3, #24
 800101e:	443b      	add	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001026:	7cfb      	ldrb	r3, [r7, #19]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	74fa      	strb	r2, [r7, #19]
 800102c:	3318      	adds	r3, #24
 800102e:	443b      	add	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001036:	7cfb      	ldrb	r3, [r7, #19]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	74fa      	strb	r2, [r7, #19]
 800103c:	3318      	adds	r3, #24
 800103e:	443b      	add	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001046:	7a3b      	ldrb	r3, [r7, #8]
 8001048:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800104a:	2301      	movs	r3, #1
 800104c:	82bb      	strh	r3, [r7, #20]
 800104e:	e00a      	b.n	8001066 <LiDAR_Protocol_Tx+0xc6>
        {
            checksum ^= senddata[i];
 8001050:	8abb      	ldrh	r3, [r7, #20]
 8001052:	3318      	adds	r3, #24
 8001054:	443b      	add	r3, r7
 8001056:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	4053      	eors	r3, r2
 800105e:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001060:	8abb      	ldrh	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	82bb      	strh	r3, [r7, #20]
 8001066:	7cfb      	ldrb	r3, [r7, #19]
 8001068:	b29b      	uxth	r3, r3
 800106a:	8aba      	ldrh	r2, [r7, #20]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3ef      	bcc.n	8001050 <LiDAR_Protocol_Tx+0xb0>
        }
        senddata[cnt++] = checksum;
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	74fa      	strb	r2, [r7, #19]
 8001076:	3318      	adds	r3, #24
 8001078:	443b      	add	r3, r7
 800107a:	7dfa      	ldrb	r2, [r7, #23]
 800107c:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001080:	e000      	b.n	8001084 <LiDAR_Protocol_Tx+0xe4>
    default:
        break;
 8001082:	bf00      	nop
    }
    HAL_UART_Transmit(&hLiDAR, senddata, sizeof(senddata), 3000);
 8001084:	f107 0108 	add.w	r1, r7, #8
 8001088:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800108c:	2209      	movs	r2, #9
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <LiDAR_Protocol_Tx+0xfc>)
 8001090:	f005 f9c1 	bl	8006416 <HAL_UART_Transmit>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000a64 	.word	0x20000a64

080010a0 <GUI_Protocol_Tx>:

void GUI_Protocol_Tx(uint8_t parameter, uint8_t data)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	711a      	strb	r2, [r3, #4]

    switch (parameter)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <GUI_Protocol_Tx+0x36>
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db60      	blt.n	8001192 <GUI_Protocol_Tx+0xf2>
 80010d0:	3b02      	subs	r3, #2
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d85d      	bhi.n	8001192 <GUI_Protocol_Tx+0xf2>
    case GUI_COMMAND_MOT_SPEED:
    case GUI_COMMAND_ENC_CHECK:
    case GUI_COMMAND_TDC_INIT:
    case GUI_COMMAND_TDC_CAL:

        senddata[cnt++] = PROTOCOL_HEADER;
 80010d6:	7cfb      	ldrb	r3, [r7, #19]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	74fa      	strb	r2, [r7, #19]
 80010dc:	3318      	adds	r3, #24
 80010de:	443b      	add	r3, r7
 80010e0:	22fa      	movs	r2, #250	; 0xfa
 80010e2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_LINE;
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	74fa      	strb	r2, [r7, #19]
 80010ec:	3318      	adds	r3, #24
 80010ee:	443b      	add	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = PRODUCT_ID;
 80010f6:	7cfb      	ldrb	r3, [r7, #19]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	74fa      	strb	r2, [r7, #19]
 80010fc:	3318      	adds	r3, #24
 80010fe:	443b      	add	r3, r7
 8001100:	22d0      	movs	r2, #208	; 0xd0
 8001102:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = GUI_MODE;
 8001106:	7cfb      	ldrb	r3, [r7, #19]
 8001108:	1c5a      	adds	r2, r3, #1
 800110a:	74fa      	strb	r2, [r7, #19]
 800110c:	3318      	adds	r3, #24
 800110e:	443b      	add	r3, r7
 8001110:	22f0      	movs	r2, #240	; 0xf0
 8001112:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = parameter;
 8001116:	7cfb      	ldrb	r3, [r7, #19]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	74fa      	strb	r2, [r7, #19]
 800111c:	3318      	adds	r3, #24
 800111e:	443b      	add	r3, r7
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x00U;
 8001126:	7cfb      	ldrb	r3, [r7, #19]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	74fa      	strb	r2, [r7, #19]
 800112c:	3318      	adds	r3, #24
 800112e:	443b      	add	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = 0x01U;
 8001136:	7cfb      	ldrb	r3, [r7, #19]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	74fa      	strb	r2, [r7, #19]
 800113c:	3318      	adds	r3, #24
 800113e:	443b      	add	r3, r7
 8001140:	2201      	movs	r2, #1
 8001142:	f803 2c10 	strb.w	r2, [r3, #-16]
        senddata[cnt++] = data; // 0x00 : OK, 0x01 : FAIL / ACK
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	74fa      	strb	r2, [r7, #19]
 800114c:	3318      	adds	r3, #24
 800114e:	443b      	add	r3, r7
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	f803 2c10 	strb.w	r2, [r3, #-16]

        checksum = senddata[0];
 8001156:	7a3b      	ldrb	r3, [r7, #8]
 8001158:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 800115a:	2301      	movs	r3, #1
 800115c:	82bb      	strh	r3, [r7, #20]
 800115e:	e00a      	b.n	8001176 <GUI_Protocol_Tx+0xd6>
        {
            checksum ^= senddata[i];
 8001160:	8abb      	ldrh	r3, [r7, #20]
 8001162:	3318      	adds	r3, #24
 8001164:	443b      	add	r3, r7
 8001166:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	4053      	eors	r3, r2
 800116e:	75fb      	strb	r3, [r7, #23]
        for (uint16_t i = 1U; i < cnt; i++)
 8001170:	8abb      	ldrh	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	82bb      	strh	r3, [r7, #20]
 8001176:	7cfb      	ldrb	r3, [r7, #19]
 8001178:	b29b      	uxth	r3, r3
 800117a:	8aba      	ldrh	r2, [r7, #20]
 800117c:	429a      	cmp	r2, r3
 800117e:	d3ef      	bcc.n	8001160 <GUI_Protocol_Tx+0xc0>
        }
        senddata[cnt++] = checksum;
 8001180:	7cfb      	ldrb	r3, [r7, #19]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	74fa      	strb	r2, [r7, #19]
 8001186:	3318      	adds	r3, #24
 8001188:	443b      	add	r3, r7
 800118a:	7dfa      	ldrb	r2, [r7, #23]
 800118c:	f803 2c10 	strb.w	r2, [r3, #-16]
        break;
 8001190:	e000      	b.n	8001194 <GUI_Protocol_Tx+0xf4>
    default:
        break;
 8001192:	bf00      	nop
    }
    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 8001194:	f107 0108 	add.w	r1, r7, #8
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	2209      	movs	r2, #9
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <GUI_Protocol_Tx+0x10c>)
 800119e:	f005 f93a 	bl	8006416 <HAL_UART_Transmit>
    //    UART_Transmit(UART5, senddata, sizeof(senddata));
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000a20 	.word	0x20000a20

080011b0 <GUI_Protocol_Mode_Tx>:

void GUI_Protocol_Mode_Tx(uint8_t data) // ADC Cur 추가
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
    uint8_t checksum = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 80011be:	2300      	movs	r3, #0
 80011c0:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[10] = {0};
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	809a      	strh	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 80011d0:	7cfb      	ldrb	r3, [r7, #19]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	74fa      	strb	r2, [r7, #19]
 80011d6:	3318      	adds	r3, #24
 80011d8:	443b      	add	r3, r7
 80011da:	22fa      	movs	r2, #250	; 0xfa
 80011dc:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	74fa      	strb	r2, [r7, #19]
 80011e6:	3318      	adds	r3, #24
 80011e8:	443b      	add	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	74fa      	strb	r2, [r7, #19]
 80011f6:	3318      	adds	r3, #24
 80011f8:	443b      	add	r3, r7
 80011fa:	22d0      	movs	r2, #208	; 0xd0
 80011fc:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_MODE;
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	74fa      	strb	r2, [r7, #19]
 8001206:	3318      	adds	r3, #24
 8001208:	443b      	add	r3, r7
 800120a:	22f0      	movs	r2, #240	; 0xf0
 800120c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = GUI_COMMAND_MODE;
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	74fa      	strb	r2, [r7, #19]
 8001216:	3318      	adds	r3, #24
 8001218:	443b      	add	r3, r7
 800121a:	2201      	movs	r2, #1
 800121c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 8001220:	7cfb      	ldrb	r3, [r7, #19]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	74fa      	strb	r2, [r7, #19]
 8001226:	3318      	adds	r3, #24
 8001228:	443b      	add	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 8001230:	7cfb      	ldrb	r3, [r7, #19]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	74fa      	strb	r2, [r7, #19]
 8001236:	3318      	adds	r3, #24
 8001238:	443b      	add	r3, r7
 800123a:	2201      	movs	r2, #1
 800123c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : Factory JIG MODE, 0x01 : Tx MODE
 8001240:	7cfb      	ldrb	r3, [r7, #19]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	74fa      	strb	r2, [r7, #19]
 8001246:	3318      	adds	r3, #24
 8001248:	443b      	add	r3, r7
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = load_current;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <GUI_Protocol_Mode_Tx+0x108>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29a      	uxth	r2, r3
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	1c59      	adds	r1, r3, #1
 800125a:	74f9      	strb	r1, [r7, #19]
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	3318      	adds	r3, #24
 8001260:	443b      	add	r3, r7
 8001262:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 800126a:	2301      	movs	r3, #1
 800126c:	82bb      	strh	r3, [r7, #20]
 800126e:	e00a      	b.n	8001286 <GUI_Protocol_Mode_Tx+0xd6>
    {
        checksum ^= senddata[i];
 8001270:	8abb      	ldrh	r3, [r7, #20]
 8001272:	3318      	adds	r3, #24
 8001274:	443b      	add	r3, r7
 8001276:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	4053      	eors	r3, r2
 800127e:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001280:	8abb      	ldrh	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	82bb      	strh	r3, [r7, #20]
 8001286:	7cfb      	ldrb	r3, [r7, #19]
 8001288:	b29b      	uxth	r3, r3
 800128a:	8aba      	ldrh	r2, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3ef      	bcc.n	8001270 <GUI_Protocol_Mode_Tx+0xc0>
    }
    senddata[cnt++] = checksum;
 8001290:	7cfb      	ldrb	r3, [r7, #19]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	74fa      	strb	r2, [r7, #19]
 8001296:	3318      	adds	r3, #24
 8001298:	443b      	add	r3, r7
 800129a:	7dfa      	ldrb	r2, [r7, #23]
 800129c:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 80012a0:	f107 0108 	add.w	r1, r7, #8
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	220a      	movs	r2, #10
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <GUI_Protocol_Mode_Tx+0x10c>)
 80012aa:	f005 f8b4 	bl	8006416 <HAL_UART_Transmit>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000030 	.word	0x20000030
 80012bc:	20000a20 	.word	0x20000a20

080012c0 <GUI_Protocol_Detect_Tx>:

void GUI_Protocol_Detect_Tx(uint8_t parameter, uint8_t data)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
    uint8_t checksum = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]
    uint8_t cnt = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	74fb      	strb	r3, [r7, #19]
    uint8_t senddata[9] = {0};
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	711a      	strb	r2, [r3, #4]

    senddata[cnt++] = PROTOCOL_HEADER;
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	74fa      	strb	r2, [r7, #19]
 80012ec:	3318      	adds	r3, #24
 80012ee:	443b      	add	r3, r7
 80012f0:	22fa      	movs	r2, #250	; 0xfa
 80012f2:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_LINE;
 80012f6:	7cfb      	ldrb	r3, [r7, #19]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	74fa      	strb	r2, [r7, #19]
 80012fc:	3318      	adds	r3, #24
 80012fe:	443b      	add	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = PRODUCT_ID;
 8001306:	7cfb      	ldrb	r3, [r7, #19]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	74fa      	strb	r2, [r7, #19]
 800130c:	3318      	adds	r3, #24
 800130e:	443b      	add	r3, r7
 8001310:	22d0      	movs	r2, #208	; 0xd0
 8001312:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = LIDAR_MODE;
 8001316:	7cfb      	ldrb	r3, [r7, #19]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	74fa      	strb	r2, [r7, #19]
 800131c:	3318      	adds	r3, #24
 800131e:	443b      	add	r3, r7
 8001320:	220f      	movs	r2, #15
 8001322:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = parameter;
 8001326:	7cfb      	ldrb	r3, [r7, #19]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	74fa      	strb	r2, [r7, #19]
 800132c:	3318      	adds	r3, #24
 800132e:	443b      	add	r3, r7
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x00U;
 8001336:	7cfb      	ldrb	r3, [r7, #19]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	74fa      	strb	r2, [r7, #19]
 800133c:	3318      	adds	r3, #24
 800133e:	443b      	add	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = 0x01U;
 8001346:	7cfb      	ldrb	r3, [r7, #19]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	74fa      	strb	r2, [r7, #19]
 800134c:	3318      	adds	r3, #24
 800134e:	443b      	add	r3, r7
 8001350:	2201      	movs	r2, #1
 8001352:	f803 2c10 	strb.w	r2, [r3, #-16]
    senddata[cnt++] = data; // 0x00 : FAIL, 0x01 : OK
 8001356:	7cfb      	ldrb	r3, [r7, #19]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	74fa      	strb	r2, [r7, #19]
 800135c:	3318      	adds	r3, #24
 800135e:	443b      	add	r3, r7
 8001360:	79ba      	ldrb	r2, [r7, #6]
 8001362:	f803 2c10 	strb.w	r2, [r3, #-16]

    checksum = senddata[0];
 8001366:	7a3b      	ldrb	r3, [r7, #8]
 8001368:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 800136a:	2301      	movs	r3, #1
 800136c:	82bb      	strh	r3, [r7, #20]
 800136e:	e00a      	b.n	8001386 <GUI_Protocol_Detect_Tx+0xc6>
    {
        checksum ^= senddata[i];
 8001370:	8abb      	ldrh	r3, [r7, #20]
 8001372:	3318      	adds	r3, #24
 8001374:	443b      	add	r3, r7
 8001376:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	4053      	eors	r3, r2
 800137e:	75fb      	strb	r3, [r7, #23]
    for (uint16_t i = 1U; i < cnt; i++)
 8001380:	8abb      	ldrh	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	82bb      	strh	r3, [r7, #20]
 8001386:	7cfb      	ldrb	r3, [r7, #19]
 8001388:	b29b      	uxth	r3, r3
 800138a:	8aba      	ldrh	r2, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3ef      	bcc.n	8001370 <GUI_Protocol_Detect_Tx+0xb0>
    }
    senddata[cnt++] = checksum;
 8001390:	7cfb      	ldrb	r3, [r7, #19]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	74fa      	strb	r2, [r7, #19]
 8001396:	3318      	adds	r3, #24
 8001398:	443b      	add	r3, r7
 800139a:	7dfa      	ldrb	r2, [r7, #23]
 800139c:	f803 2c10 	strb.w	r2, [r3, #-16]

    HAL_UART_Transmit(&hViewer, senddata, sizeof(senddata), 100);
 80013a0:	f107 0108 	add.w	r1, r7, #8
 80013a4:	2364      	movs	r3, #100	; 0x64
 80013a6:	2209      	movs	r2, #9
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <GUI_Protocol_Detect_Tx+0xf8>)
 80013aa:	f005 f834 	bl	8006416 <HAL_UART_Transmit>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000a20 	.word	0x20000a20

080013bc <LL_GPIO_SetOutputPin>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_GPIO_ResetOutputPin>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <fail_sound>:
extern TIM_HandleTypeDef htim3;
int divide_freq = 2000000;
int duty_freq = 3500000;

void fail_sound(uint8_t i)
{
 80013f8:	b4b0      	push	{r4, r5, r7}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
    if (i == 0 || i == 2 || i == 4 || i == 6)
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d008      	beq.n	800141a <fail_sound+0x22>
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d005      	beq.n	800141a <fail_sound+0x22>
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d002      	beq.n	800141a <fail_sound+0x22>
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b06      	cmp	r3, #6
 8001418:	d134      	bne.n	8001484 <fail_sound+0x8c>
    {
        unsigned int fail_sound[] = {T5, T5, T5, T5, T5, T5, T5, T5}; //수정 중
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <fail_sound+0xa0>)
 800141c:	f107 0408 	add.w	r4, r7, #8
 8001420:	461d      	mov	r5, r3
 8001422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001426:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800142a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / fail_sound[i]);
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <fail_sound+0xa4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	3328      	adds	r3, #40	; 0x28
 800143a:	443b      	add	r3, r7
 800143c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <fail_sound+0xa8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fbb1 f2f2 	udiv	r2, r1, r2
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <fail_sound+0xa4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	3328      	adds	r3, #40	; 0x28
 8001456:	443b      	add	r3, r7
 8001458:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <fail_sound+0xa8>)
 8001462:	60d3      	str	r3, [r2, #12]
        //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, divide_freq / fail_sound[i] / 2);
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_freq / fail_sound[i] / 2);
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <fail_sound+0xac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	3328      	adds	r3, #40	; 0x28
 8001470:	443b      	add	r3, r7
 8001472:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001476:	fbb2 f2f3 	udiv	r2, r2, r3
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <fail_sound+0xa8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0852      	lsrs	r2, r2, #1
 8001480:	63da      	str	r2, [r3, #60]	; 0x3c
    {
 8001482:	e004      	b.n	800148e <fail_sound+0x96>
    }
    else
    {
        htim3.Instance->CCR3 = 0;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <fail_sound+0xa8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	372c      	adds	r7, #44	; 0x2c
 8001492:	46bd      	mov	sp, r7
 8001494:	bcb0      	pop	{r4, r5, r7}
 8001496:	4770      	bx	lr
 8001498:	08007958 	.word	0x08007958
 800149c:	20000000 	.word	0x20000000
 80014a0:	200009d8 	.word	0x200009d8
 80014a4:	20000004 	.word	0x20000004

080014a8 <pass_sound>:

void pass_sound(uint8_t i)
{
 80014a8:	b4b0      	push	{r4, r5, r7}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
    unsigned int pass_sound[] = {C5, E5, G5, C6, C5, E5, G5, C6};
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <pass_sound+0x7c>)
 80014b4:	f107 0408 	add.w	r4, r7, #8
 80014b8:	461d      	mov	r5, r3
 80014ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    __HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / pass_sound[i]);
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <pass_sound+0x80>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	3328      	adds	r3, #40	; 0x28
 80014d2:	443b      	add	r3, r7
 80014d4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <pass_sound+0x84>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fbb1 f2f2 	udiv	r2, r1, r2
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <pass_sound+0x80>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	3328      	adds	r3, #40	; 0x28
 80014ee:	443b      	add	r3, r7
 80014f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80014f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <pass_sound+0x84>)
 80014fa:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_freq / pass_sound[i] / 2);
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <pass_sound+0x88>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	3328      	adds	r3, #40	; 0x28
 8001508:	443b      	add	r3, r7
 800150a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800150e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <pass_sound+0x84>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0852      	lsrs	r2, r2, #1
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800151a:	bf00      	nop
 800151c:	372c      	adds	r7, #44	; 0x2c
 800151e:	46bd      	mov	sp, r7
 8001520:	bcb0      	pop	{r4, r5, r7}
 8001522:	4770      	bx	lr
 8001524:	08007978 	.word	0x08007978
 8001528:	20000000 	.word	0x20000000
 800152c:	200009d8 	.word	0x200009d8
 8001530:	20000004 	.word	0x20000004

08001534 <result>:

void result(uint8_t data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
    g_Result = data;
 800153e:	4ad7      	ldr	r2, [pc, #860]	; (800189c <result+0x368>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	7013      	strb	r3, [r2, #0]

    switch (g_Result)
 8001544:	4bd5      	ldr	r3, [pc, #852]	; (800189c <result+0x368>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b0d      	cmp	r3, #13
 800154c:	f200 8328 	bhi.w	8001ba0 <result+0x66c>
 8001550:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <result+0x24>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	08001591 	.word	0x08001591
 800155c:	080015b7 	.word	0x080015b7
 8001560:	08001633 	.word	0x08001633
 8001564:	080016b3 	.word	0x080016b3
 8001568:	08001733 	.word	0x08001733
 800156c:	080017b3 	.word	0x080017b3
 8001570:	08001821 	.word	0x08001821
 8001574:	0800188f 	.word	0x0800188f
 8001578:	0800190d 	.word	0x0800190d
 800157c:	0800197b 	.word	0x0800197b
 8001580:	080019e9 	.word	0x080019e9
 8001584:	08001a57 	.word	0x08001a57
 8001588:	08001ac5 	.word	0x08001ac5
 800158c:	08001b33 	.word	0x08001b33
    {
    case kResult_None:
        LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001590:	2104      	movs	r1, #4
 8001592:	48c3      	ldr	r0, [pc, #780]	; (80018a0 <result+0x36c>)
 8001594:	f7ff ff20 	bl	80013d8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001598:	2120      	movs	r1, #32
 800159a:	48c2      	ldr	r0, [pc, #776]	; (80018a4 <result+0x370>)
 800159c:	f7ff ff1c 	bl	80013d8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	48be      	ldr	r0, [pc, #760]	; (80018a0 <result+0x36c>)
 80015a6:	f7ff ff17 	bl	80013d8 <LL_GPIO_ResetOutputPin>
        LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80015aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ae:	48bc      	ldr	r0, [pc, #752]	; (80018a0 <result+0x36c>)
 80015b0:	f7ff ff12 	bl	80013d8 <LL_GPIO_ResetOutputPin>
        break;
 80015b4:	e2f5      	b.n	8001ba2 <result+0x66e>

    case kResult_Pass:
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015b6:	2108      	movs	r1, #8
 80015b8:	48bb      	ldr	r0, [pc, #748]	; (80018a8 <result+0x374>)
 80015ba:	f003 ff4d 	bl	8005458 <HAL_TIM_PWM_Start>
        for (uint8_t j = 0; j <= 7; j++)
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015c4:	e030      	b.n	8001628 <result+0xf4>
        {
            pass_sound(j);
 80015c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff6c 	bl	80014a8 <pass_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015d6:	e01e      	b.n	8001616 <result+0xe2>
            {
                FND_1();
 80015d8:	f000 fafa 	bl	8001bd0 <FND_1>
                FND_P();
 80015dc:	f000 fb60 	bl	8001ca0 <FND_P>
                Delay_ms(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff f8d9 	bl	8000798 <Delay_ms>
                FND_2();
 80015e6:	f000 fb0d 	bl	8001c04 <FND_2>
                FND_A();
 80015ea:	f000 fb81 	bl	8001cf0 <FND_A>
                Delay_ms(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff f8d2 	bl	8000798 <Delay_ms>
                FND_3();
 80015f4:	f000 fb20 	bl	8001c38 <FND_3>
                FND_S();
 80015f8:	f000 fba2 	bl	8001d40 <FND_S>
                Delay_ms(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff f8cb 	bl	8000798 <Delay_ms>
                FND_4();
 8001602:	f000 fb33 	bl	8001c6c <FND_4>
                Delay_ms(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f7ff f8c6 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800160c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001616:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800161a:	2b7d      	cmp	r3, #125	; 0x7d
 800161c:	d9dc      	bls.n	80015d8 <result+0xa4>
        for (uint8_t j = 0; j <= 7; j++)
 800161e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001622:	3301      	adds	r3, #1
 8001624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800162c:	2b07      	cmp	r3, #7
 800162e:	d9ca      	bls.n	80015c6 <result+0x92>
            }
        }
        break;
 8001630:	e2b7      	b.n	8001ba2 <result+0x66e>

    case kResult_Err_1: // UART Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001632:	2108      	movs	r1, #8
 8001634:	489c      	ldr	r0, [pc, #624]	; (80018a8 <result+0x374>)
 8001636:	f003 ff0f 	bl	8005458 <HAL_TIM_PWM_Start>
        for (uint8_t j = 0; j <= 7; j++)
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001640:	e032      	b.n	80016a8 <result+0x174>
        {
            fail_sound(j);
 8001642:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fed6 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 800164c:	2301      	movs	r3, #1
 800164e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001652:	e020      	b.n	8001696 <result+0x162>
            {
                FND_1();
 8001654:	f000 fabc 	bl	8001bd0 <FND_1>
                FND_E();
 8001658:	f000 fb9a 	bl	8001d90 <FND_E>
                Delay_ms(1);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff f89b 	bl	8000798 <Delay_ms>
                FND_2();
 8001662:	f000 facf 	bl	8001c04 <FND_2>
                FND_r();
 8001666:	f000 fbbb 	bl	8001de0 <FND_r>
                Delay_ms(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff f894 	bl	8000798 <Delay_ms>
                FND_3();
 8001670:	f000 fae2 	bl	8001c38 <FND_3>
                FND_zero();
 8001674:	f000 fbdc 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff f88d 	bl	8000798 <Delay_ms>
                FND_4();
 800167e:	f000 faf5 	bl	8001c6c <FND_4>
                FND_one();
 8001682:	f000 fbfd 	bl	8001e80 <FND_one>
                Delay_ms(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff f886 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800168c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001696:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800169a:	2b7d      	cmp	r3, #125	; 0x7d
 800169c:	d9da      	bls.n	8001654 <result+0x120>
        for (uint8_t j = 0; j <= 7; j++)
 800169e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016a2:	3301      	adds	r3, #1
 80016a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	d9c8      	bls.n	8001642 <result+0x10e>
            }
        }
        break;
 80016b0:	e277      	b.n	8001ba2 <result+0x66e>

    case kResult_Err_2: // Detect Pin 1 Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016b2:	2108      	movs	r1, #8
 80016b4:	487c      	ldr	r0, [pc, #496]	; (80018a8 <result+0x374>)
 80016b6:	f003 fecf 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016c0:	e032      	b.n	8001728 <result+0x1f4>
        {
            fail_sound(j);
 80016c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe96 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80016d2:	e020      	b.n	8001716 <result+0x1e2>
            {
                FND_1();
 80016d4:	f000 fa7c 	bl	8001bd0 <FND_1>
                FND_E();
 80016d8:	f000 fb5a 	bl	8001d90 <FND_E>
                Delay_ms(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff f85b 	bl	8000798 <Delay_ms>
                FND_2();
 80016e2:	f000 fa8f 	bl	8001c04 <FND_2>
                FND_r();
 80016e6:	f000 fb7b 	bl	8001de0 <FND_r>
                Delay_ms(1);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff f854 	bl	8000798 <Delay_ms>
                FND_3();
 80016f0:	f000 faa2 	bl	8001c38 <FND_3>
                FND_zero();
 80016f4:	f000 fb9c 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff f84d 	bl	8000798 <Delay_ms>
                FND_4();
 80016fe:	f000 fab5 	bl	8001c6c <FND_4>
                FND_two();
 8001702:	f000 fbe5 	bl	8001ed0 <FND_two>
                Delay_ms(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff f846 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800170c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001710:	3301      	adds	r3, #1
 8001712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001716:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800171a:	2b7d      	cmp	r3, #125	; 0x7d
 800171c:	d9da      	bls.n	80016d4 <result+0x1a0>
        for (uint8_t j = 0; j <= 7; j++)
 800171e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001722:	3301      	adds	r3, #1
 8001724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800172c:	2b07      	cmp	r3, #7
 800172e:	d9c8      	bls.n	80016c2 <result+0x18e>
            }
        }
        break;
 8001730:	e237      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_3: // Detect Pin 2 Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001732:	2108      	movs	r1, #8
 8001734:	485c      	ldr	r0, [pc, #368]	; (80018a8 <result+0x374>)
 8001736:	f003 fe8f 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001740:	e032      	b.n	80017a8 <result+0x274>
        {
            fail_sound(j);
 8001742:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe56 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 800174c:	2301      	movs	r3, #1
 800174e:	f887 3020 	strb.w	r3, [r7, #32]
 8001752:	e020      	b.n	8001796 <result+0x262>
            {
                FND_1();
 8001754:	f000 fa3c 	bl	8001bd0 <FND_1>
                FND_E();
 8001758:	f000 fb1a 	bl	8001d90 <FND_E>
                Delay_ms(1);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff f81b 	bl	8000798 <Delay_ms>
                FND_2();
 8001762:	f000 fa4f 	bl	8001c04 <FND_2>
                FND_r();
 8001766:	f000 fb3b 	bl	8001de0 <FND_r>
                Delay_ms(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff f814 	bl	8000798 <Delay_ms>
                FND_3();
 8001770:	f000 fa62 	bl	8001c38 <FND_3>
                FND_zero();
 8001774:	f000 fb5c 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff f80d 	bl	8000798 <Delay_ms>
                FND_4();
 800177e:	f000 fa75 	bl	8001c6c <FND_4>
                FND_three();
 8001782:	f000 fbcd 	bl	8001f20 <FND_three>
                Delay_ms(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff f806 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 800178c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001790:	3301      	adds	r3, #1
 8001792:	f887 3020 	strb.w	r3, [r7, #32]
 8001796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800179a:	2b7d      	cmp	r3, #125	; 0x7d
 800179c:	d9da      	bls.n	8001754 <result+0x220>
        for (uint8_t j = 0; j <= 7; j++)
 800179e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017a2:	3301      	adds	r3, #1
 80017a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80017a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017ac:	2b07      	cmp	r3, #7
 80017ae:	d9c8      	bls.n	8001742 <result+0x20e>
            }
        }
        break;
 80017b0:	e1f7      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_4: // Err Pin Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017b2:	2108      	movs	r1, #8
 80017b4:	483c      	ldr	r0, [pc, #240]	; (80018a8 <result+0x374>)
 80017b6:	f003 fe4f 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	77fb      	strb	r3, [r7, #31]
 80017be:	e02b      	b.n	8001818 <result+0x2e4>
        {
            fail_sound(j);
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fe18 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80017c8:	2301      	movs	r3, #1
 80017ca:	77bb      	strb	r3, [r7, #30]
 80017cc:	e01e      	b.n	800180c <result+0x2d8>
            {
                FND_1();
 80017ce:	f000 f9ff 	bl	8001bd0 <FND_1>
                FND_E();
 80017d2:	f000 fadd 	bl	8001d90 <FND_E>
                Delay_ms(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7fe ffde 	bl	8000798 <Delay_ms>
                FND_2();
 80017dc:	f000 fa12 	bl	8001c04 <FND_2>
                FND_r();
 80017e0:	f000 fafe 	bl	8001de0 <FND_r>
                Delay_ms(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7fe ffd7 	bl	8000798 <Delay_ms>
                FND_3();
 80017ea:	f000 fa25 	bl	8001c38 <FND_3>
                FND_zero();
 80017ee:	f000 fb1f 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7fe ffd0 	bl	8000798 <Delay_ms>
                FND_4();
 80017f8:	f000 fa38 	bl	8001c6c <FND_4>
                FND_four();
 80017fc:	f000 fbb8 	bl	8001f70 <FND_four>
                Delay_ms(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f7fe ffc9 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001806:	7fbb      	ldrb	r3, [r7, #30]
 8001808:	3301      	adds	r3, #1
 800180a:	77bb      	strb	r3, [r7, #30]
 800180c:	7fbb      	ldrb	r3, [r7, #30]
 800180e:	2b7d      	cmp	r3, #125	; 0x7d
 8001810:	d9dd      	bls.n	80017ce <result+0x29a>
        for (uint8_t j = 0; j <= 7; j++)
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	3301      	adds	r3, #1
 8001816:	77fb      	strb	r3, [r7, #31]
 8001818:	7ffb      	ldrb	r3, [r7, #31]
 800181a:	2b07      	cmp	r3, #7
 800181c:	d9d0      	bls.n	80017c0 <result+0x28c>
            }
        }
        break;
 800181e:	e1c0      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_5: // Ethernet chip Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001820:	2108      	movs	r1, #8
 8001822:	4821      	ldr	r0, [pc, #132]	; (80018a8 <result+0x374>)
 8001824:	f003 fe18 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001828:	2300      	movs	r3, #0
 800182a:	777b      	strb	r3, [r7, #29]
 800182c:	e02b      	b.n	8001886 <result+0x352>
        {
            fail_sound(j);
 800182e:	7f7b      	ldrb	r3, [r7, #29]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fde1 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001836:	2301      	movs	r3, #1
 8001838:	773b      	strb	r3, [r7, #28]
 800183a:	e01e      	b.n	800187a <result+0x346>
            {
                FND_1();
 800183c:	f000 f9c8 	bl	8001bd0 <FND_1>
                FND_E();
 8001840:	f000 faa6 	bl	8001d90 <FND_E>
                Delay_ms(1);
 8001844:	2001      	movs	r0, #1
 8001846:	f7fe ffa7 	bl	8000798 <Delay_ms>
                FND_2();
 800184a:	f000 f9db 	bl	8001c04 <FND_2>
                FND_r();
 800184e:	f000 fac7 	bl	8001de0 <FND_r>
                Delay_ms(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f7fe ffa0 	bl	8000798 <Delay_ms>
                FND_3();
 8001858:	f000 f9ee 	bl	8001c38 <FND_3>
                FND_zero();
 800185c:	f000 fae8 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 8001860:	2001      	movs	r0, #1
 8001862:	f7fe ff99 	bl	8000798 <Delay_ms>
                FND_4();
 8001866:	f000 fa01 	bl	8001c6c <FND_4>
                FND_five();
 800186a:	f000 fba9 	bl	8001fc0 <FND_five>
                Delay_ms(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f7fe ff92 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001874:	7f3b      	ldrb	r3, [r7, #28]
 8001876:	3301      	adds	r3, #1
 8001878:	773b      	strb	r3, [r7, #28]
 800187a:	7f3b      	ldrb	r3, [r7, #28]
 800187c:	2b7d      	cmp	r3, #125	; 0x7d
 800187e:	d9dd      	bls.n	800183c <result+0x308>
        for (uint8_t j = 0; j <= 7; j++)
 8001880:	7f7b      	ldrb	r3, [r7, #29]
 8001882:	3301      	adds	r3, #1
 8001884:	777b      	strb	r3, [r7, #29]
 8001886:	7f7b      	ldrb	r3, [r7, #29]
 8001888:	2b07      	cmp	r3, #7
 800188a:	d9d0      	bls.n	800182e <result+0x2fa>
            }
        }
        break;
 800188c:	e189      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_6: // APD BIAS Control Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800188e:	2108      	movs	r1, #8
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <result+0x374>)
 8001892:	f003 fde1 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001896:	2300      	movs	r3, #0
 8001898:	76fb      	strb	r3, [r7, #27]
 800189a:	e033      	b.n	8001904 <result+0x3d0>
 800189c:	20000087 	.word	0x20000087
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020400 	.word	0x40020400
 80018a8:	200009d8 	.word	0x200009d8
        {
            fail_sound(j);
 80018ac:	7efb      	ldrb	r3, [r7, #27]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fda2 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80018b4:	2301      	movs	r3, #1
 80018b6:	76bb      	strb	r3, [r7, #26]
 80018b8:	e01e      	b.n	80018f8 <result+0x3c4>
            {
                FND_1();
 80018ba:	f000 f989 	bl	8001bd0 <FND_1>
                FND_E();
 80018be:	f000 fa67 	bl	8001d90 <FND_E>
                Delay_ms(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7fe ff68 	bl	8000798 <Delay_ms>
                FND_2();
 80018c8:	f000 f99c 	bl	8001c04 <FND_2>
                FND_r();
 80018cc:	f000 fa88 	bl	8001de0 <FND_r>
                Delay_ms(1);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7fe ff61 	bl	8000798 <Delay_ms>
                FND_3();
 80018d6:	f000 f9af 	bl	8001c38 <FND_3>
                FND_zero();
 80018da:	f000 faa9 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7fe ff5a 	bl	8000798 <Delay_ms>
                FND_4();
 80018e4:	f000 f9c2 	bl	8001c6c <FND_4>
                FND_six();
 80018e8:	f000 fb92 	bl	8002010 <FND_six>
                Delay_ms(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7fe ff53 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 80018f2:	7ebb      	ldrb	r3, [r7, #26]
 80018f4:	3301      	adds	r3, #1
 80018f6:	76bb      	strb	r3, [r7, #26]
 80018f8:	7ebb      	ldrb	r3, [r7, #26]
 80018fa:	2b7d      	cmp	r3, #125	; 0x7d
 80018fc:	d9dd      	bls.n	80018ba <result+0x386>
        for (uint8_t j = 0; j <= 7; j++)
 80018fe:	7efb      	ldrb	r3, [r7, #27]
 8001900:	3301      	adds	r3, #1
 8001902:	76fb      	strb	r3, [r7, #27]
 8001904:	7efb      	ldrb	r3, [r7, #27]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d9d0      	bls.n	80018ac <result+0x378>
            }
        }
        break;
 800190a:	e14a      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_7: // Motor speed calibration Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800190c:	2108      	movs	r1, #8
 800190e:	48ad      	ldr	r0, [pc, #692]	; (8001bc4 <result+0x690>)
 8001910:	f003 fda2 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001914:	2300      	movs	r3, #0
 8001916:	767b      	strb	r3, [r7, #25]
 8001918:	e02b      	b.n	8001972 <result+0x43e>
        {
            fail_sound(j);
 800191a:	7e7b      	ldrb	r3, [r7, #25]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fd6b 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001922:	2301      	movs	r3, #1
 8001924:	763b      	strb	r3, [r7, #24]
 8001926:	e01e      	b.n	8001966 <result+0x432>
            {
                FND_1();
 8001928:	f000 f952 	bl	8001bd0 <FND_1>
                FND_E();
 800192c:	f000 fa30 	bl	8001d90 <FND_E>
                Delay_ms(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f7fe ff31 	bl	8000798 <Delay_ms>
                FND_2();
 8001936:	f000 f965 	bl	8001c04 <FND_2>
                FND_r();
 800193a:	f000 fa51 	bl	8001de0 <FND_r>
                Delay_ms(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f7fe ff2a 	bl	8000798 <Delay_ms>
                FND_3();
 8001944:	f000 f978 	bl	8001c38 <FND_3>
                FND_zero();
 8001948:	f000 fa72 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 800194c:	2001      	movs	r0, #1
 800194e:	f7fe ff23 	bl	8000798 <Delay_ms>
                FND_4();
 8001952:	f000 f98b 	bl	8001c6c <FND_4>
                FND_seven();
 8001956:	f000 fb83 	bl	8002060 <FND_seven>
                Delay_ms(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f7fe ff1c 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001960:	7e3b      	ldrb	r3, [r7, #24]
 8001962:	3301      	adds	r3, #1
 8001964:	763b      	strb	r3, [r7, #24]
 8001966:	7e3b      	ldrb	r3, [r7, #24]
 8001968:	2b7d      	cmp	r3, #125	; 0x7d
 800196a:	d9dd      	bls.n	8001928 <result+0x3f4>
        for (uint8_t j = 0; j <= 7; j++)
 800196c:	7e7b      	ldrb	r3, [r7, #25]
 800196e:	3301      	adds	r3, #1
 8001970:	767b      	strb	r3, [r7, #25]
 8001972:	7e7b      	ldrb	r3, [r7, #25]
 8001974:	2b07      	cmp	r3, #7
 8001976:	d9d0      	bls.n	800191a <result+0x3e6>
            }
        }
        break;
 8001978:	e113      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_8: // Encoder check start slit Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800197a:	2108      	movs	r1, #8
 800197c:	4891      	ldr	r0, [pc, #580]	; (8001bc4 <result+0x690>)
 800197e:	f003 fd6b 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
 8001986:	e02b      	b.n	80019e0 <result+0x4ac>
        {
            fail_sound(j);
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fd34 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001990:	2301      	movs	r3, #1
 8001992:	75bb      	strb	r3, [r7, #22]
 8001994:	e01e      	b.n	80019d4 <result+0x4a0>
            {
                FND_1();
 8001996:	f000 f91b 	bl	8001bd0 <FND_1>
                FND_E();
 800199a:	f000 f9f9 	bl	8001d90 <FND_E>
                Delay_ms(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7fe fefa 	bl	8000798 <Delay_ms>
                FND_2();
 80019a4:	f000 f92e 	bl	8001c04 <FND_2>
                FND_r();
 80019a8:	f000 fa1a 	bl	8001de0 <FND_r>
                Delay_ms(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7fe fef3 	bl	8000798 <Delay_ms>
                FND_3();
 80019b2:	f000 f941 	bl	8001c38 <FND_3>
                FND_zero();
 80019b6:	f000 fa3b 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7fe feec 	bl	8000798 <Delay_ms>
                FND_4();
 80019c0:	f000 f954 	bl	8001c6c <FND_4>
                FND_eight();
 80019c4:	f000 fb74 	bl	80020b0 <FND_eight>
                Delay_ms(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7fe fee5 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 80019ce:	7dbb      	ldrb	r3, [r7, #22]
 80019d0:	3301      	adds	r3, #1
 80019d2:	75bb      	strb	r3, [r7, #22]
 80019d4:	7dbb      	ldrb	r3, [r7, #22]
 80019d6:	2b7d      	cmp	r3, #125	; 0x7d
 80019d8:	d9dd      	bls.n	8001996 <result+0x462>
        for (uint8_t j = 0; j <= 7; j++)
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	3301      	adds	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	d9d0      	bls.n	8001988 <result+0x454>
            }
        }
        break;
 80019e6:	e0dc      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_9: // TDC Init Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019e8:	2108      	movs	r1, #8
 80019ea:	4876      	ldr	r0, [pc, #472]	; (8001bc4 <result+0x690>)
 80019ec:	f003 fd34 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	757b      	strb	r3, [r7, #21]
 80019f4:	e02b      	b.n	8001a4e <result+0x51a>
        {
            fail_sound(j);
 80019f6:	7d7b      	ldrb	r3, [r7, #21]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fcfd 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 80019fe:	2301      	movs	r3, #1
 8001a00:	753b      	strb	r3, [r7, #20]
 8001a02:	e01e      	b.n	8001a42 <result+0x50e>
            {
                FND_1();
 8001a04:	f000 f8e4 	bl	8001bd0 <FND_1>
                FND_E();
 8001a08:	f000 f9c2 	bl	8001d90 <FND_E>
                Delay_ms(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7fe fec3 	bl	8000798 <Delay_ms>
                FND_2();
 8001a12:	f000 f8f7 	bl	8001c04 <FND_2>
                FND_r();
 8001a16:	f000 f9e3 	bl	8001de0 <FND_r>
                Delay_ms(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7fe febc 	bl	8000798 <Delay_ms>
                FND_3();
 8001a20:	f000 f90a 	bl	8001c38 <FND_3>
                FND_zero();
 8001a24:	f000 fa04 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7fe feb5 	bl	8000798 <Delay_ms>
                FND_4();
 8001a2e:	f000 f91d 	bl	8001c6c <FND_4>
                FND_nine();
 8001a32:	f000 fb65 	bl	8002100 <FND_nine>
                Delay_ms(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7fe feae 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001a3c:	7d3b      	ldrb	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	753b      	strb	r3, [r7, #20]
 8001a42:	7d3b      	ldrb	r3, [r7, #20]
 8001a44:	2b7d      	cmp	r3, #125	; 0x7d
 8001a46:	d9dd      	bls.n	8001a04 <result+0x4d0>
        for (uint8_t j = 0; j <= 7; j++)
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	757b      	strb	r3, [r7, #21]
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d9d0      	bls.n	80019f6 <result+0x4c2>
            }
        }
        break;
 8001a54:	e0a5      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_10: // TDC Calibration Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a56:	2108      	movs	r1, #8
 8001a58:	485a      	ldr	r0, [pc, #360]	; (8001bc4 <result+0x690>)
 8001a5a:	f003 fcfd 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	74fb      	strb	r3, [r7, #19]
 8001a62:	e02b      	b.n	8001abc <result+0x588>
        {
            fail_sound(j);
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fcc6 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	74bb      	strb	r3, [r7, #18]
 8001a70:	e01e      	b.n	8001ab0 <result+0x57c>
            {
                FND_1();
 8001a72:	f000 f8ad 	bl	8001bd0 <FND_1>
                FND_E();
 8001a76:	f000 f98b 	bl	8001d90 <FND_E>
                Delay_ms(1);
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7fe fe8c 	bl	8000798 <Delay_ms>
                FND_2();
 8001a80:	f000 f8c0 	bl	8001c04 <FND_2>
                FND_r();
 8001a84:	f000 f9ac 	bl	8001de0 <FND_r>
                Delay_ms(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7fe fe85 	bl	8000798 <Delay_ms>
                FND_3();
 8001a8e:	f000 f8d3 	bl	8001c38 <FND_3>
                FND_one();
 8001a92:	f000 f9f5 	bl	8001e80 <FND_one>
                Delay_ms(1);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7fe fe7e 	bl	8000798 <Delay_ms>
                FND_4();
 8001a9c:	f000 f8e6 	bl	8001c6c <FND_4>
                FND_zero();
 8001aa0:	f000 f9c6 	bl	8001e30 <FND_zero>
                Delay_ms(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7fe fe77 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001aaa:	7cbb      	ldrb	r3, [r7, #18]
 8001aac:	3301      	adds	r3, #1
 8001aae:	74bb      	strb	r3, [r7, #18]
 8001ab0:	7cbb      	ldrb	r3, [r7, #18]
 8001ab2:	2b7d      	cmp	r3, #125	; 0x7d
 8001ab4:	d9dd      	bls.n	8001a72 <result+0x53e>
        for (uint8_t j = 0; j <= 7; j++)
 8001ab6:	7cfb      	ldrb	r3, [r7, #19]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	74fb      	strb	r3, [r7, #19]
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	2b07      	cmp	r3, #7
 8001ac0:	d9d0      	bls.n	8001a64 <result+0x530>
            }
        }
        break;
 8001ac2:	e06e      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_11: // LD Tx feedback Fail
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	483f      	ldr	r0, [pc, #252]	; (8001bc4 <result+0x690>)
 8001ac8:	f003 fcc6 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	747b      	strb	r3, [r7, #17]
 8001ad0:	e02b      	b.n	8001b2a <result+0x5f6>
        {
            fail_sound(j);
 8001ad2:	7c7b      	ldrb	r3, [r7, #17]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fc8f 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001ada:	2301      	movs	r3, #1
 8001adc:	743b      	strb	r3, [r7, #16]
 8001ade:	e01e      	b.n	8001b1e <result+0x5ea>
            {
                FND_1();
 8001ae0:	f000 f876 	bl	8001bd0 <FND_1>
                FND_E();
 8001ae4:	f000 f954 	bl	8001d90 <FND_E>
                Delay_ms(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7fe fe55 	bl	8000798 <Delay_ms>
                FND_2();
 8001aee:	f000 f889 	bl	8001c04 <FND_2>
                FND_r();
 8001af2:	f000 f975 	bl	8001de0 <FND_r>
                Delay_ms(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7fe fe4e 	bl	8000798 <Delay_ms>
                FND_3();
 8001afc:	f000 f89c 	bl	8001c38 <FND_3>
                FND_one();
 8001b00:	f000 f9be 	bl	8001e80 <FND_one>
                Delay_ms(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7fe fe47 	bl	8000798 <Delay_ms>
                FND_4();
 8001b0a:	f000 f8af 	bl	8001c6c <FND_4>
                FND_one();
 8001b0e:	f000 f9b7 	bl	8001e80 <FND_one>
                Delay_ms(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7fe fe40 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001b18:	7c3b      	ldrb	r3, [r7, #16]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	743b      	strb	r3, [r7, #16]
 8001b1e:	7c3b      	ldrb	r3, [r7, #16]
 8001b20:	2b7d      	cmp	r3, #125	; 0x7d
 8001b22:	d9dd      	bls.n	8001ae0 <result+0x5ac>
        for (uint8_t j = 0; j <= 7; j++)
 8001b24:	7c7b      	ldrb	r3, [r7, #17]
 8001b26:	3301      	adds	r3, #1
 8001b28:	747b      	strb	r3, [r7, #17]
 8001b2a:	7c7b      	ldrb	r3, [r7, #17]
 8001b2c:	2b07      	cmp	r3, #7
 8001b2e:	d9d0      	bls.n	8001ad2 <result+0x59e>
            }
        }
        break;
 8001b30:	e037      	b.n	8001ba2 <result+0x66e>
    case kResult_Err_12: //여분
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b32:	2108      	movs	r1, #8
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <result+0x690>)
 8001b36:	f003 fc8f 	bl	8005458 <HAL_TIM_PWM_Start>

        for (uint8_t j = 0; j <= 7; j++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e02b      	b.n	8001b98 <result+0x664>
        {
            fail_sound(j);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fc58 	bl	80013f8 <fail_sound>
            for (uint8_t i = 1; i <= 125; i++)
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73bb      	strb	r3, [r7, #14]
 8001b4c:	e01e      	b.n	8001b8c <result+0x658>
            {
                FND_1();
 8001b4e:	f000 f83f 	bl	8001bd0 <FND_1>
                FND_E();
 8001b52:	f000 f91d 	bl	8001d90 <FND_E>
                Delay_ms(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7fe fe1e 	bl	8000798 <Delay_ms>
                FND_2();
 8001b5c:	f000 f852 	bl	8001c04 <FND_2>
                FND_r();
 8001b60:	f000 f93e 	bl	8001de0 <FND_r>
                Delay_ms(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f7fe fe17 	bl	8000798 <Delay_ms>
                FND_3();
 8001b6a:	f000 f865 	bl	8001c38 <FND_3>
                FND_one();
 8001b6e:	f000 f987 	bl	8001e80 <FND_one>
                Delay_ms(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f7fe fe10 	bl	8000798 <Delay_ms>
                FND_4();
 8001b78:	f000 f878 	bl	8001c6c <FND_4>
                FND_two();
 8001b7c:	f000 f9a8 	bl	8001ed0 <FND_two>
                Delay_ms(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7fe fe09 	bl	8000798 <Delay_ms>
            for (uint8_t i = 1; i <= 125; i++)
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73bb      	strb	r3, [r7, #14]
 8001b8c:	7bbb      	ldrb	r3, [r7, #14]
 8001b8e:	2b7d      	cmp	r3, #125	; 0x7d
 8001b90:	d9dd      	bls.n	8001b4e <result+0x61a>
        for (uint8_t j = 0; j <= 7; j++)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b07      	cmp	r3, #7
 8001b9c:	d9d0      	bls.n	8001b40 <result+0x60c>
            }
        }
        break;
 8001b9e:	e000      	b.n	8001ba2 <result+0x66e>

    default:
        break;
 8001ba0:	bf00      	nop
    }
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <result+0x690>)
 8001ba6:	f003 fd1f 	bl	80055e8 <HAL_TIM_PWM_Stop>
    turn_off();
 8001baa:	f000 fad1 	bl	8002150 <turn_off>
    g_Result = kResult_None;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <result+0x694>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Idle;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <result+0x698>)
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200009d8 	.word	0x200009d8
 8001bc8:	20000087 	.word	0x20000087
 8001bcc:	20000084 	.word	0x20000084

08001bd0 <FND_1>:

void FND_1(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4809      	ldr	r0, [pc, #36]	; (8001bfc <FND_1+0x2c>)
 8001bd8:	f7ff fbf0 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001bdc:	2120      	movs	r1, #32
 8001bde:	4808      	ldr	r0, [pc, #32]	; (8001c00 <FND_1+0x30>)
 8001be0:	f7ff fbfa 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <FND_1+0x2c>)
 8001bea:	f7ff fbf5 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf2:	4802      	ldr	r0, [pc, #8]	; (8001bfc <FND_1+0x2c>)
 8001bf4:	f7ff fbf0 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400

08001c04 <FND_2>:
void FND_2(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c08:	2104      	movs	r1, #4
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <FND_2+0x2c>)
 8001c0c:	f7ff fbe4 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c10:	2120      	movs	r1, #32
 8001c12:	4808      	ldr	r0, [pc, #32]	; (8001c34 <FND_2+0x30>)
 8001c14:	f7ff fbd2 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <FND_2+0x2c>)
 8001c1e:	f7ff fbdb 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c26:	4802      	ldr	r0, [pc, #8]	; (8001c30 <FND_2+0x2c>)
 8001c28:	f7ff fbd6 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020400 	.word	0x40020400

08001c38 <FND_3>:
void FND_3(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	4809      	ldr	r0, [pc, #36]	; (8001c64 <FND_3+0x2c>)
 8001c40:	f7ff fbca 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c44:	2120      	movs	r1, #32
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <FND_3+0x30>)
 8001c48:	f7ff fbc6 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <FND_3+0x2c>)
 8001c52:	f7ff fbb3 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c5a:	4802      	ldr	r0, [pc, #8]	; (8001c64 <FND_3+0x2c>)
 8001c5c:	f7ff fbbc 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020400 	.word	0x40020400

08001c6c <FND_4>:
void FND_4(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8001c70:	2104      	movs	r1, #4
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <FND_4+0x2c>)
 8001c74:	f7ff fbb0 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8001c78:	2120      	movs	r1, #32
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <FND_4+0x30>)
 8001c7c:	f7ff fbac 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8001c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <FND_4+0x2c>)
 8001c86:	f7ff fba7 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 8001c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8e:	4802      	ldr	r0, [pc, #8]	; (8001c98 <FND_4+0x2c>)
 8001c90:	f7ff fb94 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <FND_P>:

void FND_P(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca8:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <FND_P+0x48>)
 8001caa:	f7ff fb87 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	480e      	ldr	r0, [pc, #56]	; (8001cec <FND_P+0x4c>)
 8001cb2:	f7ff fb83 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001cb6:	2140      	movs	r1, #64	; 0x40
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <FND_P+0x4c>)
 8001cba:	f7ff fb8d 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc2:	480a      	ldr	r0, [pc, #40]	; (8001cec <FND_P+0x4c>)
 8001cc4:	f7ff fb88 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001cc8:	2102      	movs	r1, #2
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <FND_P+0x48>)
 8001ccc:	f7ff fb76 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <FND_P+0x48>)
 8001cd4:	f7ff fb72 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <FND_P+0x4c>)
 8001cde:	f7ff fb6d 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <FND_A>:

void FND_A(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf8:	480f      	ldr	r0, [pc, #60]	; (8001d38 <FND_A+0x48>)
 8001cfa:	f7ff fb5f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <FND_A+0x4c>)
 8001d02:	f7ff fb5b 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d06:	2140      	movs	r1, #64	; 0x40
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <FND_A+0x4c>)
 8001d0a:	f7ff fb57 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d12:	480a      	ldr	r0, [pc, #40]	; (8001d3c <FND_A+0x4c>)
 8001d14:	f7ff fb60 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <FND_A+0x48>)
 8001d1c:	f7ff fb4e 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d20:	2101      	movs	r1, #1
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <FND_A+0x48>)
 8001d24:	f7ff fb4a 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <FND_A+0x4c>)
 8001d2e:	f7ff fb45 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020400 	.word	0x40020400

08001d40 <FND_S>:

void FND_S(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	480f      	ldr	r0, [pc, #60]	; (8001d88 <FND_S+0x48>)
 8001d4a:	f7ff fb37 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	480e      	ldr	r0, [pc, #56]	; (8001d8c <FND_S+0x4c>)
 8001d52:	f7ff fb41 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <FND_S+0x4c>)
 8001d5a:	f7ff fb2f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d62:	480a      	ldr	r0, [pc, #40]	; (8001d8c <FND_S+0x4c>)
 8001d64:	f7ff fb2a 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001d68:	2102      	movs	r1, #2
 8001d6a:	4807      	ldr	r0, [pc, #28]	; (8001d88 <FND_S+0x48>)
 8001d6c:	f7ff fb34 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001d70:	2101      	movs	r1, #1
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <FND_S+0x48>)
 8001d74:	f7ff fb22 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <FND_S+0x4c>)
 8001d7e:	f7ff fb1d 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020400 	.word	0x40020400

08001d90 <FND_E>:

void FND_E(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d98:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <FND_E+0x48>)
 8001d9a:	f7ff fb0f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <FND_E+0x4c>)
 8001da2:	f7ff fb19 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001da6:	2140      	movs	r1, #64	; 0x40
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <FND_E+0x4c>)
 8001daa:	f7ff fb15 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db2:	480a      	ldr	r0, [pc, #40]	; (8001ddc <FND_E+0x4c>)
 8001db4:	f7ff fb02 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001db8:	2102      	movs	r1, #2
 8001dba:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <FND_E+0x48>)
 8001dbc:	f7ff fafe 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <FND_E+0x48>)
 8001dc4:	f7ff fafa 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <FND_E+0x4c>)
 8001dce:	f7ff faf5 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <FND_r>:

void FND_r(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de8:	480f      	ldr	r0, [pc, #60]	; (8001e28 <FND_r+0x48>)
 8001dea:	f7ff faf5 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001dee:	2180      	movs	r1, #128	; 0x80
 8001df0:	480e      	ldr	r0, [pc, #56]	; (8001e2c <FND_r+0x4c>)
 8001df2:	f7ff faf1 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <FND_r+0x4c>)
 8001dfa:	f7ff faed 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e02:	480a      	ldr	r0, [pc, #40]	; (8001e2c <FND_r+0x4c>)
 8001e04:	f7ff fae8 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e08:	2102      	movs	r1, #2
 8001e0a:	4807      	ldr	r0, [pc, #28]	; (8001e28 <FND_r+0x48>)
 8001e0c:	f7ff fad6 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e10:	2101      	movs	r1, #1
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <FND_r+0x48>)
 8001e14:	f7ff fae0 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <FND_r+0x4c>)
 8001e1e:	f7ff facd 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <FND_zero>:

void FND_zero(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e38:	480f      	ldr	r0, [pc, #60]	; (8001e78 <FND_zero+0x48>)
 8001e3a:	f7ff fabf 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <FND_zero+0x4c>)
 8001e42:	f7ff fabb 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	480c      	ldr	r0, [pc, #48]	; (8001e7c <FND_zero+0x4c>)
 8001e4a:	f7ff fab7 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <FND_zero+0x4c>)
 8001e54:	f7ff fab2 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <FND_zero+0x48>)
 8001e5c:	f7ff faae 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001e60:	2101      	movs	r1, #1
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <FND_zero+0x48>)
 8001e64:	f7ff faaa 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <FND_zero+0x4c>)
 8001e6e:	f7ff fab3 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020400 	.word	0x40020400

08001e80 <FND_one>:

void FND_one(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e88:	480f      	ldr	r0, [pc, #60]	; (8001ec8 <FND_one+0x48>)
 8001e8a:	f7ff faa5 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	480e      	ldr	r0, [pc, #56]	; (8001ecc <FND_one+0x4c>)
 8001e92:	f7ff fa93 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <FND_one+0x4c>)
 8001e9a:	f7ff fa8f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	480a      	ldr	r0, [pc, #40]	; (8001ecc <FND_one+0x4c>)
 8001ea4:	f7ff fa98 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <FND_one+0x48>)
 8001eac:	f7ff fa94 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <FND_one+0x48>)
 8001eb4:	f7ff fa90 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <FND_one+0x4c>)
 8001ebe:	f7ff fa8b 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <FND_two>:

void FND_two(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed8:	480f      	ldr	r0, [pc, #60]	; (8001f18 <FND_two+0x48>)
 8001eda:	f7ff fa6f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <FND_two+0x4c>)
 8001ee2:	f7ff fa6b 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001ee6:	2140      	movs	r1, #64	; 0x40
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <FND_two+0x4c>)
 8001eea:	f7ff fa75 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef2:	480a      	ldr	r0, [pc, #40]	; (8001f1c <FND_two+0x4c>)
 8001ef4:	f7ff fa62 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <FND_two+0x48>)
 8001efc:	f7ff fa5e 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f00:	2101      	movs	r1, #1
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <FND_two+0x48>)
 8001f04:	f7ff fa68 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <FND_two+0x4c>)
 8001f0e:	f7ff fa55 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020400 	.word	0x40020400

08001f20 <FND_three>:
void FND_three(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f28:	480f      	ldr	r0, [pc, #60]	; (8001f68 <FND_three+0x48>)
 8001f2a:	f7ff fa47 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <FND_three+0x4c>)
 8001f32:	f7ff fa43 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <FND_three+0x4c>)
 8001f3a:	f7ff fa3f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f42:	480a      	ldr	r0, [pc, #40]	; (8001f6c <FND_three+0x4c>)
 8001f44:	f7ff fa3a 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4807      	ldr	r0, [pc, #28]	; (8001f68 <FND_three+0x48>)
 8001f4c:	f7ff fa44 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001f50:	2101      	movs	r1, #1
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <FND_three+0x48>)
 8001f54:	f7ff fa40 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5c:	4803      	ldr	r0, [pc, #12]	; (8001f6c <FND_three+0x4c>)
 8001f5e:	f7ff fa2d 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <FND_four>:

void FND_four(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f78:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <FND_four+0x48>)
 8001f7a:	f7ff fa2d 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <FND_four+0x4c>)
 8001f82:	f7ff fa1b 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <FND_four+0x4c>)
 8001f8a:	f7ff fa17 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f92:	480a      	ldr	r0, [pc, #40]	; (8001fbc <FND_four+0x4c>)
 8001f94:	f7ff fa20 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <FND_four+0x48>)
 8001f9c:	f7ff fa1c 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <FND_four+0x48>)
 8001fa4:	f7ff fa0a 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <FND_four+0x4c>)
 8001fae:	f7ff fa05 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <FND_five>:

void FND_five(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8001fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fc8:	480f      	ldr	r0, [pc, #60]	; (8002008 <FND_five+0x48>)
 8001fca:	f7ff f9f7 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <FND_five+0x4c>)
 8001fd2:	f7ff fa01 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8001fd6:	2140      	movs	r1, #64	; 0x40
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <FND_five+0x4c>)
 8001fda:	f7ff f9ef 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe2:	480a      	ldr	r0, [pc, #40]	; (800200c <FND_five+0x4c>)
 8001fe4:	f7ff f9ea 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <FND_five+0x48>)
 8001fec:	f7ff f9f4 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <FND_five+0x48>)
 8001ff4:	f7ff f9e2 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8001ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <FND_five+0x4c>)
 8001ffe:	f7ff f9dd 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020800 	.word	0x40020800
 800200c:	40020400 	.word	0x40020400

08002010 <FND_six>:

void FND_six(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8002014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002018:	480f      	ldr	r0, [pc, #60]	; (8002058 <FND_six+0x48>)
 800201a:	f7ff f9cf 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	480e      	ldr	r0, [pc, #56]	; (800205c <FND_six+0x4c>)
 8002022:	f7ff f9d9 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <FND_six+0x4c>)
 800202a:	f7ff f9c7 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800202e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002032:	480a      	ldr	r0, [pc, #40]	; (800205c <FND_six+0x4c>)
 8002034:	f7ff f9c2 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002038:	2102      	movs	r1, #2
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <FND_six+0x48>)
 800203c:	f7ff f9be 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002040:	2101      	movs	r1, #1
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <FND_six+0x48>)
 8002044:	f7ff f9ba 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <FND_six+0x4c>)
 800204e:	f7ff f9b5 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020800 	.word	0x40020800
 800205c:	40020400 	.word	0x40020400

08002060 <FND_seven>:

void FND_seven(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8002064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002068:	480f      	ldr	r0, [pc, #60]	; (80020a8 <FND_seven+0x48>)
 800206a:	f7ff f9a7 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	480e      	ldr	r0, [pc, #56]	; (80020ac <FND_seven+0x4c>)
 8002072:	f7ff f9a3 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <FND_seven+0x4c>)
 800207a:	f7ff f99f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800207e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <FND_seven+0x4c>)
 8002084:	f7ff f9a8 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002088:	2102      	movs	r1, #2
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <FND_seven+0x48>)
 800208c:	f7ff f9a4 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002090:	2101      	movs	r1, #1
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <FND_seven+0x48>)
 8002094:	f7ff f9a0 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <FND_seven+0x4c>)
 800209e:	f7ff f99b 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40020400 	.word	0x40020400

080020b0 <FND_eight>:

void FND_eight(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80020b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b8:	480f      	ldr	r0, [pc, #60]	; (80020f8 <FND_eight+0x48>)
 80020ba:	f7ff f97f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 80020be:	2180      	movs	r1, #128	; 0x80
 80020c0:	480e      	ldr	r0, [pc, #56]	; (80020fc <FND_eight+0x4c>)
 80020c2:	f7ff f97b 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <FND_eight+0x4c>)
 80020ca:	f7ff f977 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80020ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d2:	480a      	ldr	r0, [pc, #40]	; (80020fc <FND_eight+0x4c>)
 80020d4:	f7ff f972 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80020d8:	2102      	movs	r1, #2
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <FND_eight+0x48>)
 80020dc:	f7ff f96e 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80020e0:	2101      	movs	r1, #1
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <FND_eight+0x48>)
 80020e4:	f7ff f96a 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 80020e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ec:	4803      	ldr	r0, [pc, #12]	; (80020fc <FND_eight+0x4c>)
 80020ee:	f7ff f965 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020400 	.word	0x40020400

08002100 <FND_nine>:
void FND_nine(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
    LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 8002104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002108:	480f      	ldr	r0, [pc, #60]	; (8002148 <FND_nine+0x48>)
 800210a:	f7ff f957 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	480e      	ldr	r0, [pc, #56]	; (800214c <FND_nine+0x4c>)
 8002112:	f7ff f953 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8002116:	2140      	movs	r1, #64	; 0x40
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <FND_nine+0x4c>)
 800211a:	f7ff f94f 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800211e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <FND_nine+0x4c>)
 8002124:	f7ff f94a 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 8002128:	2102      	movs	r1, #2
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <FND_nine+0x48>)
 800212c:	f7ff f954 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 8002130:	2101      	movs	r1, #1
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <FND_nine+0x48>)
 8002134:	f7ff f942 	bl	80013bc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(FND_G_GPIO_Port, FND_G_Pin);
 8002138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <FND_nine+0x4c>)
 800213e:	f7ff f93d 	bl	80013bc <LL_GPIO_SetOutputPin>
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40020800 	.word	0x40020800
 800214c:	40020400 	.word	0x40020400

08002150 <turn_off>:

void turn_off(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8002154:	2104      	movs	r1, #4
 8002156:	4809      	ldr	r0, [pc, #36]	; (800217c <turn_off+0x2c>)
 8002158:	f7ff f93e 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 800215c:	2120      	movs	r1, #32
 800215e:	4808      	ldr	r0, [pc, #32]	; (8002180 <turn_off+0x30>)
 8002160:	f7ff f93a 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8002164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <turn_off+0x2c>)
 800216a:	f7ff f935 	bl	80013d8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800216e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002172:	4802      	ldr	r0, [pc, #8]	; (800217c <turn_off+0x2c>)
 8002174:	f7ff f930 	bl	80013d8 <LL_GPIO_ResetOutputPin>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40020800 	.word	0x40020800
 8002180:	40020400 	.word	0x40020400

08002184 <InitUartQueue>:

UARTQUEUE LiDARQueue;
UARTQUEUE ViewerQueue;

void InitUartQueue(pUARTQUEUE pQueue)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    pQueue->data = pQueue->head = pQueue->tail = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	805a      	strh	r2, [r3, #2]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	885a      	ldrh	r2, [r3, #2]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	881a      	ldrh	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	809a      	strh	r2, [r3, #4]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <PutDataToUartQueue>:

void PutDataToUartQueue(UART_HandleTypeDef *huart, uint8_t data)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <PutDataToUartQueue+0x5c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <PutDataToUartQueue+0x1a>
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <PutDataToUartQueue+0x60>)
 80021c8:	e000      	b.n	80021cc <PutDataToUartQueue+0x1c>
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <PutDataToUartQueue+0x64>)
 80021cc:	60fb      	str	r3, [r7, #12]
    // if (pQueue->data == QUEUE_BUFFER_LENGTH)
    //     GetDataFromUartQueue(huart);
    pQueue->Buffer[pQueue->head++] = data;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	b291      	uxth	r1, r2
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	8011      	strh	r1, [r2, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	719a      	strb	r2, [r3, #6]
    if (pQueue->head == QUEUE_BUFFER_LENGTH)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ec:	d102      	bne.n	80021f4 <PutDataToUartQueue+0x44>
        pQueue->head = 0;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	801a      	strh	r2, [r3, #0]
    pQueue->data++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	889b      	ldrh	r3, [r3, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	809a      	strh	r2, [r3, #4]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40005000 	.word	0x40005000
 8002210:	20000478 	.word	0x20000478
 8002214:	20000088 	.word	0x20000088

08002218 <GetDataFromUartQueue>:

uint8_t GetDataFromUartQueue(UART_HandleTypeDef *huart)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    uint8_t ret;

    // UART_HandleTypeDef *dst = (huart->Instance == USART5 ? &hMonitor : &hViewer);
    pUARTQUEUE pQueue = (huart->Instance == UART5 ? &ViewerQueue : &LiDARQueue);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <GetDataFromUartQueue+0x60>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <GetDataFromUartQueue+0x16>
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <GetDataFromUartQueue+0x64>)
 800222c:	e000      	b.n	8002230 <GetDataFromUartQueue+0x18>
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <GetDataFromUartQueue+0x68>)
 8002230:	60fb      	str	r3, [r7, #12]
    // if (HAL_UART_Transmit(dst, pQueue->Buffer + pQueue->tail, 1, 3000) != HAL_OK)
    // {
    //     Error_Handler(__FILE__, __LINE__);
    // }
    ret = pQueue->Buffer[pQueue->tail];
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	885b      	ldrh	r3, [r3, #2]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	799b      	ldrb	r3, [r3, #6]
 800223e:	72fb      	strb	r3, [r7, #11]
    pQueue->tail++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	3301      	adds	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	805a      	strh	r2, [r3, #2]
    if (pQueue->tail == QUEUE_BUFFER_LENGTH)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	885b      	ldrh	r3, [r3, #2]
 8002250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002254:	d102      	bne.n	800225c <GetDataFromUartQueue+0x44>
        pQueue->tail = 0;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	805a      	strh	r2, [r3, #2]
    pQueue->data--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	889b      	ldrh	r3, [r3, #4]
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	809a      	strh	r2, [r3, #4]
    return ret;
 8002268:	7afb      	ldrb	r3, [r7, #11]
    HAL_Delay(1);
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40005000 	.word	0x40005000
 800227c:	20000478 	.word	0x20000478
 8002280:	20000088 	.word	0x20000088

08002284 <LL_EXTI_EnableIT_0_31>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4904      	ldr	r1, [pc, #16]	; (80022a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40013c00 	.word	0x40013c00

080022a8 <LL_EXTI_DisableIT_0_31>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <LL_EXTI_DisableIT_0_31+0x24>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	4904      	ldr	r1, [pc, #16]	; (80022cc <LL_EXTI_DisableIT_0_31+0x24>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <Info_status>:
uint8_t LiDAR_RX_BUFF[256] = {0};
uint8_t LiDAR_RX_Cnt = 0;
uint8_t Test_Start_Flag = 0;

void Info_status(void)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
    uint8_t checksum = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	71fb      	strb	r3, [r7, #7]
    // uint8_t temp_INFO_DATA[13] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x05, 0x01, 0xF4, 0x01, 0x2F, 0x04, 0xFF};

    LiDAR_Protocol_Tx(LIDAR_COMMAND_INFO);
 80022da:	2000      	movs	r0, #0
 80022dc:	f7fe fe60 	bl	8000fa0 <LiDAR_Protocol_Tx>
    Delay_ms(500);
 80022e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022e4:	f7fe fa58 	bl	8000798 <Delay_ms>
    while (LiDARQueue.data > 0)
 80022e8:	e00d      	b.n	8002306 <Info_status+0x36>
    {
        INFO_RX_BUFF[INFO_RX_Cnt++] = GetDataFromUartQueue(&hLiDAR);
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <Info_status+0xbc>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	b2d1      	uxtb	r1, r2
 80022f2:	4a26      	ldr	r2, [pc, #152]	; (800238c <Info_status+0xbc>)
 80022f4:	7011      	strb	r1, [r2, #0]
 80022f6:	461c      	mov	r4, r3
 80022f8:	4825      	ldr	r0, [pc, #148]	; (8002390 <Info_status+0xc0>)
 80022fa:	f7ff ff8d 	bl	8002218 <GetDataFromUartQueue>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <Info_status+0xc4>)
 8002304:	551a      	strb	r2, [r3, r4]
    while (LiDARQueue.data > 0)
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <Info_status+0xc8>)
 8002308:	889b      	ldrh	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ed      	bne.n	80022ea <Info_status+0x1a>
    }
    if (INFO_RX_BUFF[0] != 0xFA)
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <Info_status+0xc4>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2bfa      	cmp	r3, #250	; 0xfa
 8002314:	d008      	beq.n	8002328 <Info_status+0x58>
    {
        INFO_RX_Cnt = 0;
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <Info_status+0xbc>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
        memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 800231c:	220d      	movs	r2, #13
 800231e:	2100      	movs	r1, #0
 8002320:	481c      	ldr	r0, [pc, #112]	; (8002394 <Info_status+0xc4>)
 8002322:	f005 fb05 	bl	8007930 <memset>
        {
            INFO_RX_Cnt = 0;
            memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
        }
    }
}
 8002326:	e02c      	b.n	8002382 <Info_status+0xb2>
        checksum = INFO_RX_BUFF[0];
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <Info_status+0xc4>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	71fb      	strb	r3, [r7, #7]
        for (uint8_t i = 1; i < INFO_RX_Cnt - 1; i++)
 800232e:	2301      	movs	r3, #1
 8002330:	71bb      	strb	r3, [r7, #6]
 8002332:	e008      	b.n	8002346 <Info_status+0x76>
            checksum ^= INFO_RX_BUFF[i];
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	4a17      	ldr	r2, [pc, #92]	; (8002394 <Info_status+0xc4>)
 8002338:	5cd2      	ldrb	r2, [r2, r3]
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4053      	eors	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
        for (uint8_t i = 1; i < INFO_RX_Cnt - 1; i++)
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	3301      	adds	r3, #1
 8002344:	71bb      	strb	r3, [r7, #6]
 8002346:	79ba      	ldrb	r2, [r7, #6]
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <Info_status+0xbc>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	3b01      	subs	r3, #1
 800234e:	429a      	cmp	r2, r3
 8002350:	dbf0      	blt.n	8002334 <Info_status+0x64>
        if (INFO_RX_BUFF[12] == checksum)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <Info_status+0xc4>)
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	79fa      	ldrb	r2, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d10a      	bne.n	8002372 <Info_status+0xa2>
            LiDAR_Model = INFO_RX_BUFF[11];
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <Info_status+0xc4>)
 800235e:	7ada      	ldrb	r2, [r3, #11]
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <Info_status+0xcc>)
 8002362:	701a      	strb	r2, [r3, #0]
            INFO_RX_Cnt = 0;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <Info_status+0xbc>)
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
            g_Status = kStatus_Detect1;
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <Info_status+0xd0>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
}
 8002370:	e007      	b.n	8002382 <Info_status+0xb2>
            INFO_RX_Cnt = 0;
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <Info_status+0xbc>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
            memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 8002378:	220d      	movs	r2, #13
 800237a:	2100      	movs	r1, #0
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <Info_status+0xc4>)
 800237e:	f005 fad7 	bl	8007930 <memset>
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	20000875 	.word	0x20000875
 8002390:	20000a64 	.word	0x20000a64
 8002394:	20000868 	.word	0x20000868
 8002398:	20000088 	.word	0x20000088
 800239c:	20000876 	.word	0x20000876
 80023a0:	20000084 	.word	0x20000084

080023a4 <Detect1_status>:

void Detect1_status(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 20 && Detect1_Result != 0x01U)
 80023a8:	e013      	b.n	80023d2 <Detect1_status+0x2e>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT1);
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7fe fdf8 	bl	8000fa0 <LiDAR_Protocol_Tx>
        Delay_ms(1);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7fe f9f1 	bl	8000798 <Delay_ms>
        Detect1_Result = HAL_GPIO_ReadPin(Detect_SIG_1_GPIO_Port, Detect_SIG_1_Pin);
 80023b6:	2110      	movs	r1, #16
 80023b8:	4812      	ldr	r0, [pc, #72]	; (8002404 <Detect1_status+0x60>)
 80023ba:	f002 f921 	bl	8004600 <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <Detect1_status+0x64>)
 80023c4:	701a      	strb	r2, [r3, #0]

        Detect_Check_Count++;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <Detect1_status+0x68>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <Detect1_status+0x68>)
 80023d0:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 20 && Detect1_Result != 0x01U)
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <Detect1_status+0x68>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b13      	cmp	r3, #19
 80023d8:	d803      	bhi.n	80023e2 <Detect1_status+0x3e>
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <Detect1_status+0x64>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d1e3      	bne.n	80023aa <Detect1_status+0x6>
    }
    Detect_Check_Count = 0;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <Detect1_status+0x68>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]

    if (LiDAR_Model == 0x04) // R300
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <Detect1_status+0x6c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d103      	bne.n	80023f8 <Detect1_status+0x54>
    {
        g_Status = kStatus_Detect3;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <Detect1_status+0x70>)
 80023f2:	2203      	movs	r2, #3
 80023f4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        g_Status = kStatus_Detect2;
    }
}
 80023f6:	e002      	b.n	80023fe <Detect1_status+0x5a>
        g_Status = kStatus_Detect2;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <Detect1_status+0x70>)
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020000 	.word	0x40020000
 8002408:	20000877 	.word	0x20000877
 800240c:	2000087a 	.word	0x2000087a
 8002410:	20000876 	.word	0x20000876
 8002414:	20000084 	.word	0x20000084

08002418 <Detect2_status>:

void Detect2_status(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 20 && Detect2_Result != 0x01U)
 800241c:	e013      	b.n	8002446 <Detect2_status+0x2e>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT2);
 800241e:	2003      	movs	r0, #3
 8002420:	f7fe fdbe 	bl	8000fa0 <LiDAR_Protocol_Tx>
        Delay_ms(1);
 8002424:	2001      	movs	r0, #1
 8002426:	f7fe f9b7 	bl	8000798 <Delay_ms>
        Detect2_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 800242a:	2120      	movs	r1, #32
 800242c:	480e      	ldr	r0, [pc, #56]	; (8002468 <Detect2_status+0x50>)
 800242e:	f002 f8e7 	bl	8004600 <HAL_GPIO_ReadPin>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <Detect2_status+0x54>)
 8002438:	701a      	strb	r2, [r3, #0]

        Detect_Check_Count++;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <Detect2_status+0x58>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <Detect2_status+0x58>)
 8002444:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 20 && Detect2_Result != 0x01U)
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <Detect2_status+0x58>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b13      	cmp	r3, #19
 800244c:	d803      	bhi.n	8002456 <Detect2_status+0x3e>
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <Detect2_status+0x54>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d1e3      	bne.n	800241e <Detect2_status+0x6>
    }

    Detect_Check_Count = 0;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <Detect2_status+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
    g_Status = kStatus_Detect3;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <Detect2_status+0x5c>)
 800245e:	2203      	movs	r2, #3
 8002460:	701a      	strb	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40020000 	.word	0x40020000
 800246c:	20000878 	.word	0x20000878
 8002470:	2000087a 	.word	0x2000087a
 8002474:	20000084 	.word	0x20000084

08002478 <Detect3_status>:

void Detect3_status(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
    while (Detect_Check_Count < 20 && Detect3_Result != 0x01U)
 800247e:	e020      	b.n	80024c2 <Detect3_status+0x4a>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_DETECT3);
 8002480:	2004      	movs	r0, #4
 8002482:	f7fe fd8d 	bl	8000fa0 <LiDAR_Protocol_Tx>
        Delay_ms(5);
 8002486:	2005      	movs	r0, #5
 8002488:	f7fe f986 	bl	8000798 <Delay_ms>
        if (LiDAR_Model == 0x04) // R300
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <Detect3_status+0x98>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d108      	bne.n	80024a6 <Detect3_status+0x2e>
        {
            Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_2_GPIO_Port, Detect_SIG_2_Pin);
 8002494:	2120      	movs	r1, #32
 8002496:	481f      	ldr	r0, [pc, #124]	; (8002514 <Detect3_status+0x9c>)
 8002498:	f002 f8b2 	bl	8004600 <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <Detect3_status+0xa0>)
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e007      	b.n	80024b6 <Detect3_status+0x3e>
        }
        else
        {
            Detect3_Result = HAL_GPIO_ReadPin(Detect_SIG_3_GPIO_Port, Detect_SIG_3_Pin);
 80024a6:	2140      	movs	r1, #64	; 0x40
 80024a8:	481a      	ldr	r0, [pc, #104]	; (8002514 <Detect3_status+0x9c>)
 80024aa:	f002 f8a9 	bl	8004600 <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <Detect3_status+0xa0>)
 80024b4:	701a      	strb	r2, [r3, #0]
        }

        Detect_Check_Count++;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <Detect3_status+0xa4>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <Detect3_status+0xa4>)
 80024c0:	701a      	strb	r2, [r3, #0]
    while (Detect_Check_Count < 20 && Detect3_Result != 0x01U)
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <Detect3_status+0xa4>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b13      	cmp	r3, #19
 80024c8:	d803      	bhi.n	80024d2 <Detect3_status+0x5a>
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <Detect3_status+0xa0>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d1d6      	bne.n	8002480 <Detect3_status+0x8>
    }

    Detect_Check_Count = 0;
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <Detect3_status+0xa4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 4; i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	e00a      	b.n	80024f4 <Detect3_status+0x7c>
    {
        HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80024de:	2102      	movs	r1, #2
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <Detect3_status+0x9c>)
 80024e2:	f002 f8a5 	bl	8004630 <HAL_GPIO_TogglePin>
        Delay_ms(500);
 80024e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ea:	f7fe f955 	bl	8000798 <Delay_ms>
    for (uint8_t i = 0; i < 4; i++)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	3301      	adds	r3, #1
 80024f2:	71fb      	strb	r3, [r7, #7]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d9f1      	bls.n	80024de <Detect3_status+0x66>
    }
    g_Status = kStatus_Idle;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <Detect3_status+0xa8>)
 80024fc:	2204      	movs	r2, #4
 80024fe:	701a      	strb	r2, [r3, #0]
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 8002500:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002504:	f7ff febe 	bl	8002284 <LL_EXTI_EnableIT_0_31>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000876 	.word	0x20000876
 8002514:	40020000 	.word	0x40020000
 8002518:	20000879 	.word	0x20000879
 800251c:	2000087a 	.word	0x2000087a
 8002520:	20000084 	.word	0x20000084

08002524 <Idle_status>:

void Idle_status(void)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b099      	sub	sp, #100	; 0x64
 8002528:	af00      	add	r7, sp, #0
    __HAL_UART_ENABLE_IT(&hViewer, UART_IT_RXNE);
 800252a:	4bb2      	ldr	r3, [pc, #712]	; (80027f4 <Idle_status+0x2d0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	4bb0      	ldr	r3, [pc, #704]	; (80027f4 <Idle_status+0x2d0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0220 	orr.w	r2, r2, #32
 8002538:	60da      	str	r2, [r3, #12]

    uint8_t checksum = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    uint8_t CONNECT_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xDA};
 8002540:	4aad      	ldr	r2, [pc, #692]	; (80027f8 <Idle_status+0x2d4>)
 8002542:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002546:	ca07      	ldmia	r2, {r0, r1, r2}
 8002548:	c303      	stmia	r3!, {r0, r1}
 800254a:	701a      	strb	r2, [r3, #0]
    uint8_t INFO_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x25};
 800254c:	4aab      	ldr	r2, [pc, #684]	; (80027fc <Idle_status+0x2d8>)
 800254e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002552:	ca07      	ldmia	r2, {r0, r1, r2}
 8002554:	c303      	stmia	r3!, {r0, r1}
 8002556:	701a      	strb	r2, [r3, #0]
    uint8_t MODE_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x01, 0x00, 0x01, 0x00, 0xDA};
 8002558:	4aa9      	ldr	r2, [pc, #676]	; (8002800 <Idle_status+0x2dc>)
 800255a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800255e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002560:	c303      	stmia	r3!, {r0, r1}
 8002562:	701a      	strb	r2, [r3, #0]
    uint8_t START_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x24};
 8002564:	4aa7      	ldr	r2, [pc, #668]	; (8002804 <Idle_status+0x2e0>)
 8002566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800256a:	ca07      	ldmia	r2, {r0, r1, r2}
 800256c:	c303      	stmia	r3!, {r0, r1}
 800256e:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT1_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x27};
 8002570:	4aa5      	ldr	r2, [pc, #660]	; (8002808 <Idle_status+0x2e4>)
 8002572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002576:	ca07      	ldmia	r2, {r0, r1, r2}
 8002578:	c303      	stmia	r3!, {r0, r1}
 800257a:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT2_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x26};
 800257c:	4aa3      	ldr	r2, [pc, #652]	; (800280c <Idle_status+0x2e8>)
 800257e:	f107 0318 	add.w	r3, r7, #24
 8002582:	ca07      	ldmia	r2, {r0, r1, r2}
 8002584:	c303      	stmia	r3!, {r0, r1}
 8002586:	701a      	strb	r2, [r3, #0]
    uint8_t DETECT3_BUFF[9] = {0xFA, 0x00, 0xD0, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x21};
 8002588:	4aa1      	ldr	r2, [pc, #644]	; (8002810 <Idle_status+0x2ec>)
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002590:	c303      	stmia	r3!, {r0, r1}
 8002592:	701a      	strb	r2, [r3, #0]
    uint8_t RESET_BUFF[9] = {0xFA, 0x00, 0xD0, 0xF0, 0x08, 0x00, 0x00, 0x00, 0xD2};
 8002594:	4a9f      	ldr	r2, [pc, #636]	; (8002814 <Idle_status+0x2f0>)
 8002596:	463b      	mov	r3, r7
 8002598:	ca07      	ldmia	r2, {r0, r1, r2}
 800259a:	c303      	stmia	r3!, {r0, r1}
 800259c:	701a      	strb	r2, [r3, #0]

    LiDAR_Cur_Check();
 800259e:	f7fe f849 	bl	8000634 <LiDAR_Cur_Check>

    while (ViewerQueue.data > 0)
 80025a2:	e00d      	b.n	80025c0 <Idle_status+0x9c>
    {
        VIEWER_RX_BUFF[VIEWER_RX_Cnt++] = GetDataFromUartQueue(&hViewer);
 80025a4:	4b9c      	ldr	r3, [pc, #624]	; (8002818 <Idle_status+0x2f4>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	b2d1      	uxtb	r1, r2
 80025ac:	4a9a      	ldr	r2, [pc, #616]	; (8002818 <Idle_status+0x2f4>)
 80025ae:	7011      	strb	r1, [r2, #0]
 80025b0:	461c      	mov	r4, r3
 80025b2:	4890      	ldr	r0, [pc, #576]	; (80027f4 <Idle_status+0x2d0>)
 80025b4:	f7ff fe30 	bl	8002218 <GetDataFromUartQueue>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b97      	ldr	r3, [pc, #604]	; (800281c <Idle_status+0x2f8>)
 80025be:	551a      	strb	r2, [r3, r4]
    while (ViewerQueue.data > 0)
 80025c0:	4b97      	ldr	r3, [pc, #604]	; (8002820 <Idle_status+0x2fc>)
 80025c2:	889b      	ldrh	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ed      	bne.n	80025a4 <Idle_status+0x80>
    }

    if (VIEWER_RX_BUFF[0] != 0xFA)
 80025c8:	4b94      	ldr	r3, [pc, #592]	; (800281c <Idle_status+0x2f8>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2bfa      	cmp	r3, #250	; 0xfa
 80025ce:	d008      	beq.n	80025e2 <Idle_status+0xbe>
    {
        VIEWER_RX_Cnt = 0;
 80025d0:	4b91      	ldr	r3, [pc, #580]	; (8002818 <Idle_status+0x2f4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
        memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80025d6:	2209      	movs	r2, #9
 80025d8:	2100      	movs	r1, #0
 80025da:	4890      	ldr	r0, [pc, #576]	; (800281c <Idle_status+0x2f8>)
 80025dc:	f005 f9a8 	bl	8007930 <memset>
        {
            VIEWER_RX_Cnt = 0;
            memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
        }
    }
}
 80025e0:	e103      	b.n	80027ea <Idle_status+0x2c6>
        checksum = VIEWER_RX_BUFF[0];
 80025e2:	4b8e      	ldr	r3, [pc, #568]	; (800281c <Idle_status+0x2f8>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        for (uint8_t i = 1; i < VIEWER_RX_Cnt - 1; i++)
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80025f0:	e00d      	b.n	800260e <Idle_status+0xea>
            checksum ^= VIEWER_RX_BUFF[i];
 80025f2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025f6:	4a89      	ldr	r2, [pc, #548]	; (800281c <Idle_status+0x2f8>)
 80025f8:	5cd2      	ldrb	r2, [r2, r3]
 80025fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025fe:	4053      	eors	r3, r2
 8002600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        for (uint8_t i = 1; i < VIEWER_RX_Cnt - 1; i++)
 8002604:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002608:	3301      	adds	r3, #1
 800260a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800260e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8002612:	4b81      	ldr	r3, [pc, #516]	; (8002818 <Idle_status+0x2f4>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	3b01      	subs	r3, #1
 8002618:	429a      	cmp	r2, r3
 800261a:	dbea      	blt.n	80025f2 <Idle_status+0xce>
        if (VIEWER_RX_BUFF[8] == checksum)
 800261c:	4b7f      	ldr	r3, [pc, #508]	; (800281c <Idle_status+0x2f8>)
 800261e:	7a1b      	ldrb	r3, [r3, #8]
 8002620:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 80d8 	bne.w	80027da <Idle_status+0x2b6>
            if (memcmp(&CONNECT_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC Connect
 800262a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800262e:	2209      	movs	r2, #9
 8002630:	497a      	ldr	r1, [pc, #488]	; (800281c <Idle_status+0x2f8>)
 8002632:	4618      	mov	r0, r3
 8002634:	f005 f96c 	bl	8007910 <memcmp>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d117      	bne.n	800266e <Idle_status+0x14a>
                GUI_Protocol_Tx(GUI_COMMAND_CONNECT, 1);
 800263e:	2101      	movs	r1, #1
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe fd2d 	bl	80010a0 <GUI_Protocol_Tx>
                connect = 1;
 8002646:	4b77      	ldr	r3, [pc, #476]	; (8002824 <Idle_status+0x300>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
                if (Mode_data == 0)
 800264c:	4b76      	ldr	r3, [pc, #472]	; (8002828 <Idle_status+0x304>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <Idle_status+0x138>
                    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15);
 8002654:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002658:	f7ff fe26 	bl	80022a8 <LL_EXTI_DisableIT_0_31>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 800265c:	2209      	movs	r2, #9
 800265e:	2100      	movs	r1, #0
 8002660:	486e      	ldr	r0, [pc, #440]	; (800281c <Idle_status+0x2f8>)
 8002662:	f005 f965 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 8002666:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <Idle_status+0x2f4>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e0b1      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&INFO_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Info request
 800266e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002672:	2209      	movs	r2, #9
 8002674:	4969      	ldr	r1, [pc, #420]	; (800281c <Idle_status+0x2f8>)
 8002676:	4618      	mov	r0, r3
 8002678:	f005 f94a 	bl	8007910 <memcmp>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <Idle_status+0x17c>
                HAL_UART_Transmit(&hViewer, INFO_RX_BUFF, sizeof(INFO_RX_BUFF), 100);
 8002682:	2364      	movs	r3, #100	; 0x64
 8002684:	220d      	movs	r2, #13
 8002686:	4969      	ldr	r1, [pc, #420]	; (800282c <Idle_status+0x308>)
 8002688:	485a      	ldr	r0, [pc, #360]	; (80027f4 <Idle_status+0x2d0>)
 800268a:	f003 fec4 	bl	8006416 <HAL_UART_Transmit>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 800268e:	2209      	movs	r2, #9
 8002690:	2100      	movs	r1, #0
 8002692:	4862      	ldr	r0, [pc, #392]	; (800281c <Idle_status+0x2f8>)
 8002694:	f005 f94c 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 8002698:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <Idle_status+0x2f4>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	e098      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&DETECT1_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	2209      	movs	r2, #9
 80026a6:	495d      	ldr	r1, [pc, #372]	; (800281c <Idle_status+0x2f8>)
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 f931 	bl	8007910 <memcmp>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10e      	bne.n	80026d2 <Idle_status+0x1ae>
                GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT1, Detect1_Result);
 80026b4:	4b5e      	ldr	r3, [pc, #376]	; (8002830 <Idle_status+0x30c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7fe fe00 	bl	80012c0 <GUI_Protocol_Detect_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80026c0:	2209      	movs	r2, #9
 80026c2:	2100      	movs	r1, #0
 80026c4:	4855      	ldr	r0, [pc, #340]	; (800281c <Idle_status+0x2f8>)
 80026c6:	f005 f933 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 80026ca:	4b53      	ldr	r3, [pc, #332]	; (8002818 <Idle_status+0x2f4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e07f      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&DETECT2_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	2209      	movs	r2, #9
 80026d8:	4950      	ldr	r1, [pc, #320]	; (800281c <Idle_status+0x2f8>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f005 f918 	bl	8007910 <memcmp>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <Idle_status+0x1e0>
                GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT2, Detect2_Result);
 80026e6:	4b53      	ldr	r3, [pc, #332]	; (8002834 <Idle_status+0x310>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	2003      	movs	r0, #3
 80026ee:	f7fe fde7 	bl	80012c0 <GUI_Protocol_Detect_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80026f2:	2209      	movs	r2, #9
 80026f4:	2100      	movs	r1, #0
 80026f6:	4849      	ldr	r0, [pc, #292]	; (800281c <Idle_status+0x2f8>)
 80026f8:	f005 f91a 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 80026fc:	4b46      	ldr	r3, [pc, #280]	; (8002818 <Idle_status+0x2f4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e066      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&DETECT3_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0) // PC -> JIG Detect 1 reqeust
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2209      	movs	r2, #9
 800270a:	4944      	ldr	r1, [pc, #272]	; (800281c <Idle_status+0x2f8>)
 800270c:	4618      	mov	r0, r3
 800270e:	f005 f8ff 	bl	8007910 <memcmp>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10e      	bne.n	8002736 <Idle_status+0x212>
                GUI_Protocol_Detect_Tx(LIDAR_COMMAND_DETECT3, Detect3_Result);
 8002718:	4b47      	ldr	r3, [pc, #284]	; (8002838 <Idle_status+0x314>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	2004      	movs	r0, #4
 8002720:	f7fe fdce 	bl	80012c0 <GUI_Protocol_Detect_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002724:	2209      	movs	r2, #9
 8002726:	2100      	movs	r1, #0
 8002728:	483c      	ldr	r0, [pc, #240]	; (800281c <Idle_status+0x2f8>)
 800272a:	f005 f901 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 800272e:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <Idle_status+0x2f4>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e04d      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&MODE_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 8002736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800273a:	2209      	movs	r2, #9
 800273c:	4937      	ldr	r1, [pc, #220]	; (800281c <Idle_status+0x2f8>)
 800273e:	4618      	mov	r0, r3
 8002740:	f005 f8e6 	bl	8007910 <memcmp>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <Idle_status+0x242>
                GUI_Protocol_Mode_Tx(Mode_data);
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <Idle_status+0x304>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd2e 	bl	80011b0 <GUI_Protocol_Mode_Tx>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002754:	2209      	movs	r2, #9
 8002756:	2100      	movs	r1, #0
 8002758:	4830      	ldr	r0, [pc, #192]	; (800281c <Idle_status+0x2f8>)
 800275a:	f005 f8e9 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <Idle_status+0x2f4>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e035      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&START_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 8002766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276a:	2209      	movs	r2, #9
 800276c:	492b      	ldr	r1, [pc, #172]	; (800281c <Idle_status+0x2f8>)
 800276e:	4618      	mov	r0, r3
 8002770:	f005 f8ce 	bl	8007910 <memcmp>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <Idle_status+0x26e>
                g_Status = kStatus_Test;
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <Idle_status+0x318>)
 800277c:	2205      	movs	r2, #5
 800277e:	701a      	strb	r2, [r3, #0]
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 8002780:	2209      	movs	r2, #9
 8002782:	2100      	movs	r1, #0
 8002784:	4825      	ldr	r0, [pc, #148]	; (800281c <Idle_status+0x2f8>)
 8002786:	f005 f8d3 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <Idle_status+0x2f4>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e01f      	b.n	80027d2 <Idle_status+0x2ae>
            else if (memcmp(&RESET_BUFF, &VIEWER_RX_BUFF, sizeof(VIEWER_RX_BUFF)) == 0)
 8002792:	463b      	mov	r3, r7
 8002794:	2209      	movs	r2, #9
 8002796:	4921      	ldr	r1, [pc, #132]	; (800281c <Idle_status+0x2f8>)
 8002798:	4618      	mov	r0, r3
 800279a:	f005 f8b9 	bl	8007910 <memcmp>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d116      	bne.n	80027d2 <Idle_status+0x2ae>
                GUI_Protocol_Tx(GUI_COMMAND_RESET, 1);
 80027a4:	2101      	movs	r1, #1
 80027a6:	2008      	movs	r0, #8
 80027a8:	f7fe fc7a 	bl	80010a0 <GUI_Protocol_Tx>
                g_Status = kStatus_Info;
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <Idle_status+0x318>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
                connect = 0;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <Idle_status+0x300>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
                memset(INFO_RX_BUFF, 0, sizeof(INFO_RX_BUFF));
 80027b8:	220d      	movs	r2, #13
 80027ba:	2100      	movs	r1, #0
 80027bc:	481b      	ldr	r0, [pc, #108]	; (800282c <Idle_status+0x308>)
 80027be:	f005 f8b7 	bl	8007930 <memset>
                memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80027c2:	2209      	movs	r2, #9
 80027c4:	2100      	movs	r1, #0
 80027c6:	4815      	ldr	r0, [pc, #84]	; (800281c <Idle_status+0x2f8>)
 80027c8:	f005 f8b2 	bl	8007930 <memset>
                VIEWER_RX_Cnt = 0;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <Idle_status+0x2f4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
            VIEWER_RX_Cnt = 0;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <Idle_status+0x2f4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	e007      	b.n	80027ea <Idle_status+0x2c6>
            VIEWER_RX_Cnt = 0;
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <Idle_status+0x2f4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
            memset(VIEWER_RX_BUFF, 0, sizeof(VIEWER_RX_BUFF));
 80027e0:	2209      	movs	r2, #9
 80027e2:	2100      	movs	r1, #0
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <Idle_status+0x2f8>)
 80027e6:	f005 f8a3 	bl	8007930 <memset>
}
 80027ea:	bf00      	nop
 80027ec:	3764      	adds	r7, #100	; 0x64
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000a20 	.word	0x20000a20
 80027f8:	08007998 	.word	0x08007998
 80027fc:	080079a4 	.word	0x080079a4
 8002800:	080079b0 	.word	0x080079b0
 8002804:	080079bc 	.word	0x080079bc
 8002808:	080079c8 	.word	0x080079c8
 800280c:	080079d4 	.word	0x080079d4
 8002810:	080079e0 	.word	0x080079e0
 8002814:	080079ec 	.word	0x080079ec
 8002818:	20000885 	.word	0x20000885
 800281c:	2000087c 	.word	0x2000087c
 8002820:	20000478 	.word	0x20000478
 8002824:	20000866 	.word	0x20000866
 8002828:	2000098b 	.word	0x2000098b
 800282c:	20000868 	.word	0x20000868
 8002830:	20000877 	.word	0x20000877
 8002834:	20000878 	.word	0x20000878
 8002838:	20000879 	.word	0x20000879
 800283c:	20000084 	.word	0x20000084

08002840 <Test_status>:

void Test_status(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08c      	sub	sp, #48	; 0x30
 8002844:	af00      	add	r7, sp, #0
    uint8_t ETH_BUFF[6] = {' ', 'E', 't', 'h', 'e', 'r'};
 8002846:	4ab2      	ldr	r2, [pc, #712]	; (8002b10 <Test_status+0x2d0>)
 8002848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800284c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002850:	6018      	str	r0, [r3, #0]
 8002852:	3304      	adds	r3, #4
 8002854:	8019      	strh	r1, [r3, #0]
    uint8_t APD_BUFF[6] = {' ', 'A', 'P', 'D', ' ', 'B'};
 8002856:	4aaf      	ldr	r2, [pc, #700]	; (8002b14 <Test_status+0x2d4>)
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002860:	6018      	str	r0, [r3, #0]
 8002862:	3304      	adds	r3, #4
 8002864:	8019      	strh	r1, [r3, #0]
    uint8_t MOT_BUFF[6] = {' ', 'M', 'o', 't', 'o', 'r'};
 8002866:	4aac      	ldr	r2, [pc, #688]	; (8002b18 <Test_status+0x2d8>)
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002870:	6018      	str	r0, [r3, #0]
 8002872:	3304      	adds	r3, #4
 8002874:	8019      	strh	r1, [r3, #0]
    uint8_t ENC_BUFF[6] = {' ', 'E', 'n', 'c', 'o', 'd'};
 8002876:	4aa9      	ldr	r2, [pc, #676]	; (8002b1c <Test_status+0x2dc>)
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002880:	6018      	str	r0, [r3, #0]
 8002882:	3304      	adds	r3, #4
 8002884:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_INIT_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'I'};
 8002886:	4aa6      	ldr	r2, [pc, #664]	; (8002b20 <Test_status+0x2e0>)
 8002888:	f107 0308 	add.w	r3, r7, #8
 800288c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002890:	6018      	str	r0, [r3, #0]
 8002892:	3304      	adds	r3, #4
 8002894:	8019      	strh	r1, [r3, #0]
    uint8_t TDC_CAL_BUFF[6] = {' ', 'T', 'D', 'C', ' ', 'C'};
 8002896:	4aa3      	ldr	r2, [pc, #652]	; (8002b24 <Test_status+0x2e4>)
 8002898:	463b      	mov	r3, r7
 800289a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800289e:	6018      	str	r0, [r3, #0]
 80028a0:	3304      	adds	r3, #4
 80028a2:	8019      	strh	r1, [r3, #0]

    LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15);
 80028a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028a8:	f7ff fcfe 	bl	80022a8 <LL_EXTI_DisableIT_0_31>
    HAL_TIM_Base_Start_IT(&htim2);
 80028ac:	489e      	ldr	r0, [pc, #632]	; (8002b28 <Test_status+0x2e8>)
 80028ae:	f002 fcdb 	bl	8005268 <HAL_TIM_Base_Start_IT>

    if (Test_Start_Flag == 0)
 80028b2:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <Test_status+0x2ec>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 8187 	bne.w	8002bca <Test_status+0x38a>
    {
        LiDAR_Protocol_Tx(LIDAR_COMMAND_START);
 80028bc:	2001      	movs	r0, #1
 80028be:	f7fe fb6f 	bl	8000fa0 <LiDAR_Protocol_Tx>
    }
    while (LiDARQueue.data > 0)
 80028c2:	e182      	b.n	8002bca <Test_status+0x38a>
    {
        Test_Start_Flag = 1;
 80028c4:	4b99      	ldr	r3, [pc, #612]	; (8002b2c <Test_status+0x2ec>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
        uint8_t data = GetDataFromUartQueue(&hLiDAR);
 80028ca:	4899      	ldr	r0, [pc, #612]	; (8002b30 <Test_status+0x2f0>)
 80028cc:	f7ff fca4 	bl	8002218 <GetDataFromUartQueue>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (data != '\n') // non carriage return
 80028d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028da:	2b0a      	cmp	r3, #10
 80028dc:	d00b      	beq.n	80028f6 <Test_status+0xb6>
        {
            LiDAR_RX_BUFF[LiDAR_RX_Cnt++] = data;
 80028de:	4b95      	ldr	r3, [pc, #596]	; (8002b34 <Test_status+0x2f4>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	b2d1      	uxtb	r1, r2
 80028e6:	4a93      	ldr	r2, [pc, #588]	; (8002b34 <Test_status+0x2f4>)
 80028e8:	7011      	strb	r1, [r2, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4a92      	ldr	r2, [pc, #584]	; (8002b38 <Test_status+0x2f8>)
 80028ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028f2:	5453      	strb	r3, [r2, r1]
 80028f4:	e169      	b.n	8002bca <Test_status+0x38a>
        }
        else // input carriage return
        {
            if (LiDAR_RX_BUFF[LiDAR_RX_Cnt - 4] == 'o' && LiDAR_RX_BUFF[LiDAR_RX_Cnt - 3] == 'k')
 80028f6:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <Test_status+0x2f4>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	3b04      	subs	r3, #4
 80028fc:	4a8e      	ldr	r2, [pc, #568]	; (8002b38 <Test_status+0x2f8>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	2b6f      	cmp	r3, #111	; 0x6f
 8002902:	f040 80a0 	bne.w	8002a46 <Test_status+0x206>
 8002906:	4b8b      	ldr	r3, [pc, #556]	; (8002b34 <Test_status+0x2f4>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3b03      	subs	r3, #3
 800290c:	4a8a      	ldr	r2, [pc, #552]	; (8002b38 <Test_status+0x2f8>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	2b6b      	cmp	r3, #107	; 0x6b
 8002912:	f040 8098 	bne.w	8002a46 <Test_status+0x206>
            {
                if (memcmp(ETH_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800291a:	2206      	movs	r2, #6
 800291c:	4986      	ldr	r1, [pc, #536]	; (8002b38 <Test_status+0x2f8>)
 800291e:	4618      	mov	r0, r3
 8002920:	f004 fff6 	bl	8007910 <memcmp>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <Test_status+0xf4>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ETHERNET, 0x00);
 800292a:	2100      	movs	r1, #0
 800292c:	2002      	movs	r0, #2
 800292e:	f7fe fbb7 	bl	80010a0 <GUI_Protocol_Tx>
 8002932:	e07e      	b.n	8002a32 <Test_status+0x1f2>
                }
                else if (memcmp(APD_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002934:	f107 0320 	add.w	r3, r7, #32
 8002938:	2206      	movs	r2, #6
 800293a:	497f      	ldr	r1, [pc, #508]	; (8002b38 <Test_status+0x2f8>)
 800293c:	4618      	mov	r0, r3
 800293e:	f004 ffe7 	bl	8007910 <memcmp>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <Test_status+0x112>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_APD_BIAS, 0x00);
 8002948:	2100      	movs	r1, #0
 800294a:	2003      	movs	r0, #3
 800294c:	f7fe fba8 	bl	80010a0 <GUI_Protocol_Tx>
 8002950:	e06f      	b.n	8002a32 <Test_status+0x1f2>
                }
                else if (memcmp(MOT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002952:	f107 0318 	add.w	r3, r7, #24
 8002956:	2206      	movs	r2, #6
 8002958:	4977      	ldr	r1, [pc, #476]	; (8002b38 <Test_status+0x2f8>)
 800295a:	4618      	mov	r0, r3
 800295c:	f004 ffd8 	bl	8007910 <memcmp>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <Test_status+0x130>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_MOT_SPEED, 0x00);
 8002966:	2100      	movs	r1, #0
 8002968:	2004      	movs	r0, #4
 800296a:	f7fe fb99 	bl	80010a0 <GUI_Protocol_Tx>
 800296e:	e060      	b.n	8002a32 <Test_status+0x1f2>
                }
                else if (memcmp(ENC_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2206      	movs	r2, #6
 8002976:	4970      	ldr	r1, [pc, #448]	; (8002b38 <Test_status+0x2f8>)
 8002978:	4618      	mov	r0, r3
 800297a:	f004 ffc9 	bl	8007910 <memcmp>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <Test_status+0x14e>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ENC_CHECK, 0x00);
 8002984:	2100      	movs	r1, #0
 8002986:	2005      	movs	r0, #5
 8002988:	f7fe fb8a 	bl	80010a0 <GUI_Protocol_Tx>
 800298c:	e051      	b.n	8002a32 <Test_status+0x1f2>
                }
                else if (memcmp(TDC_INIT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	2206      	movs	r2, #6
 8002994:	4968      	ldr	r1, [pc, #416]	; (8002b38 <Test_status+0x2f8>)
 8002996:	4618      	mov	r0, r3
 8002998:	f004 ffba 	bl	8007910 <memcmp>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <Test_status+0x16c>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_INIT, 0x00);
 80029a2:	2100      	movs	r1, #0
 80029a4:	2006      	movs	r0, #6
 80029a6:	f7fe fb7b 	bl	80010a0 <GUI_Protocol_Tx>
 80029aa:	e042      	b.n	8002a32 <Test_status+0x1f2>
                }
                else if (memcmp(TDC_CAL_BUFF, LiDAR_RX_BUFF, 6) == 0)
 80029ac:	463b      	mov	r3, r7
 80029ae:	2206      	movs	r2, #6
 80029b0:	4961      	ldr	r1, [pc, #388]	; (8002b38 <Test_status+0x2f8>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 ffac 	bl	8007910 <memcmp>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d139      	bne.n	8002a32 <Test_status+0x1f2>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_CAL, 0x00);
 80029be:	2100      	movs	r1, #0
 80029c0:	2007      	movs	r0, #7
 80029c2:	f7fe fb6d 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 80029c6:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <Test_status+0x2fc>)
 80029c8:	2206      	movs	r2, #6
 80029ca:	701a      	strb	r2, [r3, #0]

                    if (LiDAR_Model == 0x04)
 80029cc:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <Test_status+0x300>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d113      	bne.n	80029fc <Test_status+0x1bc>
                    {
                        if (Detect1_Result == 0)
 80029d4:	4b5b      	ldr	r3, [pc, #364]	; (8002b44 <Test_status+0x304>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <Test_status+0x1a4>
                        {
                            g_Result = kResult_Err_2;
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <Test_status+0x308>)
 80029de:	2203      	movs	r2, #3
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e026      	b.n	8002a32 <Test_status+0x1f2>
                        }
                        else if (Detect3_Result == 0)
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <Test_status+0x30c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <Test_status+0x1b4>
                        {
                            g_Result = kResult_Err_4;
 80029ec:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <Test_status+0x308>)
 80029ee:	2205      	movs	r2, #5
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	e01e      	b.n	8002a32 <Test_status+0x1f2>
                        }
                        else
                        {
                            g_Result = kResult_Pass;
 80029f4:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <Test_status+0x308>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e01a      	b.n	8002a32 <Test_status+0x1f2>
                        }
                    }

                    else
                    {
                        if (Detect1_Result == 0)
 80029fc:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <Test_status+0x304>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <Test_status+0x1cc>
                        {
                            g_Result = kResult_Err_2;
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <Test_status+0x308>)
 8002a06:	2203      	movs	r2, #3
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e012      	b.n	8002a32 <Test_status+0x1f2>
                        }
                        else if (Detect2_Result == 0)
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <Test_status+0x310>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d103      	bne.n	8002a1c <Test_status+0x1dc>
                        {
                            g_Result = kResult_Err_3;
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <Test_status+0x308>)
 8002a16:	2204      	movs	r2, #4
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e00a      	b.n	8002a32 <Test_status+0x1f2>
                        }
                        else if (Detect3_Result == 0)
 8002a1c:	4b4b      	ldr	r3, [pc, #300]	; (8002b4c <Test_status+0x30c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <Test_status+0x1ec>
                        {
                            g_Result = kResult_Err_4;
 8002a24:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <Test_status+0x308>)
 8002a26:	2205      	movs	r2, #5
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e002      	b.n	8002a32 <Test_status+0x1f2>
                        }
                        else
                        {
                            g_Result = kResult_Pass;
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <Test_status+0x308>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
                    }
                }
                else
                {
                };
                memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a36:	2100      	movs	r1, #0
 8002a38:	483f      	ldr	r0, [pc, #252]	; (8002b38 <Test_status+0x2f8>)
 8002a3a:	f004 ff79 	bl	8007930 <memset>
                LiDAR_RX_Cnt = 0;
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <Test_status+0x2f4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e0c1      	b.n	8002bca <Test_status+0x38a>
            }
            else if (LiDAR_RX_BUFF[LiDAR_RX_Cnt - 4] == 'i' && LiDAR_RX_BUFF[LiDAR_RX_Cnt - 3] == 'l')
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <Test_status+0x2f4>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <Test_status+0x2f8>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	2b69      	cmp	r3, #105	; 0x69
 8002a52:	f040 80b1 	bne.w	8002bb8 <Test_status+0x378>
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <Test_status+0x2f4>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3b03      	subs	r3, #3
 8002a5c:	4a36      	ldr	r2, [pc, #216]	; (8002b38 <Test_status+0x2f8>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	2b6c      	cmp	r3, #108	; 0x6c
 8002a62:	f040 80a9 	bne.w	8002bb8 <Test_status+0x378>
            {
                if (memcmp(ETH_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6a:	2206      	movs	r2, #6
 8002a6c:	4932      	ldr	r1, [pc, #200]	; (8002b38 <Test_status+0x2f8>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 ff4e 	bl	8007910 <memcmp>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <Test_status+0x250>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ETHERNET, 0x01);
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f7fe fb0f 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <Test_status+0x2fc>)
 8002a84:	2206      	movs	r2, #6
 8002a86:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_5;
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <Test_status+0x308>)
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e089      	b.n	8002ba4 <Test_status+0x364>
                }
                else if (memcmp(APD_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	2206      	movs	r2, #6
 8002a96:	4928      	ldr	r1, [pc, #160]	; (8002b38 <Test_status+0x2f8>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 ff39 	bl	8007910 <memcmp>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <Test_status+0x27a>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_APD_BIAS, 0x01);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	f7fe fafa 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <Test_status+0x2fc>)
 8002aae:	2206      	movs	r2, #6
 8002ab0:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_6;
 8002ab2:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <Test_status+0x308>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e074      	b.n	8002ba4 <Test_status+0x364>
                }
                else if (memcmp(MOT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002aba:	f107 0318 	add.w	r3, r7, #24
 8002abe:	2206      	movs	r2, #6
 8002ac0:	491d      	ldr	r1, [pc, #116]	; (8002b38 <Test_status+0x2f8>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 ff24 	bl	8007910 <memcmp>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <Test_status+0x2a4>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_MOT_SPEED, 0x01);
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2004      	movs	r0, #4
 8002ad2:	f7fe fae5 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <Test_status+0x2fc>)
 8002ad8:	2206      	movs	r2, #6
 8002ada:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_7;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <Test_status+0x308>)
 8002ade:	2208      	movs	r2, #8
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e05f      	b.n	8002ba4 <Test_status+0x364>
                }
                else if (memcmp(ENC_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	2206      	movs	r2, #6
 8002aea:	4913      	ldr	r1, [pc, #76]	; (8002b38 <Test_status+0x2f8>)
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 ff0f 	bl	8007910 <memcmp>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d12d      	bne.n	8002b54 <Test_status+0x314>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_ENC_CHECK, 0x01);
 8002af8:	2101      	movs	r1, #1
 8002afa:	2005      	movs	r0, #5
 8002afc:	f7fe fad0 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <Test_status+0x2fc>)
 8002b02:	2206      	movs	r2, #6
 8002b04:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_8;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <Test_status+0x308>)
 8002b08:	2209      	movs	r2, #9
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e04a      	b.n	8002ba4 <Test_status+0x364>
 8002b0e:	bf00      	nop
 8002b10:	080079f8 	.word	0x080079f8
 8002b14:	08007a00 	.word	0x08007a00
 8002b18:	08007a08 	.word	0x08007a08
 8002b1c:	08007a10 	.word	0x08007a10
 8002b20:	08007a18 	.word	0x08007a18
 8002b24:	08007a20 	.word	0x08007a20
 8002b28:	20000990 	.word	0x20000990
 8002b2c:	20000989 	.word	0x20000989
 8002b30:	20000a64 	.word	0x20000a64
 8002b34:	20000988 	.word	0x20000988
 8002b38:	20000888 	.word	0x20000888
 8002b3c:	20000084 	.word	0x20000084
 8002b40:	20000876 	.word	0x20000876
 8002b44:	20000877 	.word	0x20000877
 8002b48:	20000087 	.word	0x20000087
 8002b4c:	20000879 	.word	0x20000879
 8002b50:	20000878 	.word	0x20000878
                }
                else if (memcmp(TDC_INIT_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002b54:	f107 0308 	add.w	r3, r7, #8
 8002b58:	2206      	movs	r2, #6
 8002b5a:	4924      	ldr	r1, [pc, #144]	; (8002bec <Test_status+0x3ac>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fed7 	bl	8007910 <memcmp>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <Test_status+0x33e>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_INIT, 0x01);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2006      	movs	r0, #6
 8002b6c:	f7fe fa98 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002b70:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <Test_status+0x3b0>)
 8002b72:	2206      	movs	r2, #6
 8002b74:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_9;
 8002b76:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <Test_status+0x3b4>)
 8002b78:	220a      	movs	r2, #10
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e012      	b.n	8002ba4 <Test_status+0x364>
                }
                else if (memcmp(TDC_CAL_BUFF, LiDAR_RX_BUFF, 6) == 0)
 8002b7e:	463b      	mov	r3, r7
 8002b80:	2206      	movs	r2, #6
 8002b82:	491a      	ldr	r1, [pc, #104]	; (8002bec <Test_status+0x3ac>)
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fec3 	bl	8007910 <memcmp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <Test_status+0x364>
                {
                    GUI_Protocol_Tx(GUI_COMMAND_TDC_CAL, 0x01);
 8002b90:	2101      	movs	r1, #1
 8002b92:	2007      	movs	r0, #7
 8002b94:	f7fe fa84 	bl	80010a0 <GUI_Protocol_Tx>
                    g_Status = kStatus_Result;
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <Test_status+0x3b0>)
 8002b9a:	2206      	movs	r2, #6
 8002b9c:	701a      	strb	r2, [r3, #0]
                    g_Result = kResult_Err_10;
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <Test_status+0x3b4>)
 8002ba0:	220b      	movs	r2, #11
 8002ba2:	701a      	strb	r2, [r3, #0]
                }
                else
                {
                };
                memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4810      	ldr	r0, [pc, #64]	; (8002bec <Test_status+0x3ac>)
 8002bac:	f004 fec0 	bl	8007930 <memset>
                LiDAR_RX_Cnt = 0;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <Test_status+0x3b8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e008      	b.n	8002bca <Test_status+0x38a>
            }
            else
            {
                memset(LiDAR_RX_BUFF, 0x00, sizeof(LiDAR_RX_BUFF));
 8002bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	480b      	ldr	r0, [pc, #44]	; (8002bec <Test_status+0x3ac>)
 8002bc0:	f004 feb6 	bl	8007930 <memset>
                LiDAR_RX_Cnt = 0;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <Test_status+0x3b8>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    while (LiDARQueue.data > 0)
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <Test_status+0x3bc>)
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f47f ae78 	bne.w	80028c4 <Test_status+0x84>
            }
        }
    }
    LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 8002bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bd8:	f7ff fb54 	bl	8002284 <LL_EXTI_EnableIT_0_31>
    HAL_TIM_Base_Stop_IT(&htim2);
 8002bdc:	4808      	ldr	r0, [pc, #32]	; (8002c00 <Test_status+0x3c0>)
 8002bde:	f002 fbb3 	bl	8005348 <HAL_TIM_Base_Stop_IT>
}
 8002be2:	bf00      	nop
 8002be4:	3730      	adds	r7, #48	; 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000888 	.word	0x20000888
 8002bf0:	20000084 	.word	0x20000084
 8002bf4:	20000087 	.word	0x20000087
 8002bf8:	20000988 	.word	0x20000988
 8002bfc:	20000088 	.word	0x20000088
 8002c00:	20000990 	.word	0x20000990

08002c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_MspInit+0x4c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4013      	ands	r3, r2
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40013c00 	.word	0x40013c00

08002c80 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6153      	str	r3, [r2, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <NMI_Handler+0x4>

08002ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cec:	f000 fd20 	bl	8003730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  switch_check();
 8002cf8:	f000 f8e8 	bl	8002ecc <switch_check>
  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7ff ffa9 	bl	8002c54 <LL_EXTI_IsActiveFlag_0_31>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002d08:	2001      	movs	r0, #1
 8002d0a:	f7ff ffb9 	bl	8002c80 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <TIM2_IRQHandler+0x10>)
 8002d1a:	f002 fcd5 	bl	80056c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000990 	.word	0x20000990

08002d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (Mode_data == 0) // jig mode
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <EXTI15_10_IRQHandler+0x68>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <EXTI15_10_IRQHandler+0x14>
  {
    g_Status = kStatus_Test;
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <EXTI15_10_IRQHandler+0x6c>)
 8002d36:	2205      	movs	r2, #5
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e01b      	b.n	8002d74 <EXTI15_10_IRQHandler+0x4c>
  }
  else // tx mode
  {
    if (tx_start_flag == 0)
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <EXTI15_10_IRQHandler+0x70>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <EXTI15_10_IRQHandler+0x36>
    {
      tx_start_flag = 1;
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <EXTI15_10_IRQHandler+0x70>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
      __HAL_UART_DISABLE_IT(&hViewer, UART_IT_RXNE);
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <EXTI15_10_IRQHandler+0x74>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <EXTI15_10_IRQHandler+0x74>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0220 	bic.w	r2, r2, #32
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e00a      	b.n	8002d74 <EXTI15_10_IRQHandler+0x4c>
    }
    else
    {
      tx_start_flag = 0;
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <EXTI15_10_IRQHandler+0x70>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(&hViewer, UART_IT_RXNE);
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <EXTI15_10_IRQHandler+0x74>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <EXTI15_10_IRQHandler+0x74>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	60da      	str	r2, [r3, #12]
    }
  }

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002d74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d78:	f7ff ff6c 	bl	8002c54 <LL_EXTI_IsActiveFlag_0_31>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <EXTI15_10_IRQHandler+0x62>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002d82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d86:	f7ff ff7b 	bl	8002c80 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000098b 	.word	0x2000098b
 8002d94:	20000084 	.word	0x20000084
 8002d98:	2000098a 	.word	0x2000098a
 8002d9c:	20000a20 	.word	0x20000a20

08002da0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  if (g_Status == kStatus_Idle)
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <UART5_IRQHandler+0x54>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11a      	bne.n	8002de6 <UART5_IRQHandler+0x46>
  {
    if ((__HAL_UART_GET_FLAG(&hViewer, UART_FLAG_RXNE) != RESET))
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <UART5_IRQHandler+0x58>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d107      	bne.n	8002dce <UART5_IRQHandler+0x2e>
    {
      PutDataToUartQueue(&hViewer, (uint8_t)(hViewer.Instance->DR & (uint8_t)0x00FF));
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <UART5_IRQHandler+0x58>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480b      	ldr	r0, [pc, #44]	; (8002df8 <UART5_IRQHandler+0x58>)
 8002dca:	f7ff f9f1 	bl	80021b0 <PutDataToUartQueue>
    }
    __HAL_UART_CLEAR_PEFLAG(&hViewer); /* clear event flag */
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <UART5_IRQHandler+0x58>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <UART5_IRQHandler+0x58>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
    return;
 8002de4:	e002      	b.n	8002dec <UART5_IRQHandler+0x4c>
  }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002de6:	4804      	ldr	r0, [pc, #16]	; (8002df8 <UART5_IRQHandler+0x58>)
 8002de8:	f003 fba8 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000084 	.word	0x20000084
 8002df8:	20000a20 	.word	0x20000a20

08002dfc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&hLiDAR, UART_FLAG_RXNE) != RESET))
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <USART6_IRQHandler+0x44>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d107      	bne.n	8002e20 <USART6_IRQHandler+0x24>
  {
    PutDataToUartQueue(&hLiDAR, (uint8_t)(hLiDAR.Instance->DR & (uint8_t)0x00FF));
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <USART6_IRQHandler+0x44>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <USART6_IRQHandler+0x44>)
 8002e1c:	f7ff f9c8 	bl	80021b0 <PutDataToUartQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&hLiDAR); /* clear event flag */
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <USART6_IRQHandler+0x44>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <USART6_IRQHandler+0x44>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
  return;
 8002e36:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000a64 	.word	0x20000a64

08002e44 <LL_GPIO_SetOutputPin>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	619a      	str	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_GPIO_ResetOutputPin>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <LL_EXTI_EnableIT_0_31>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40013c00 	.word	0x40013c00

08002ea4 <LL_EXTI_DisableIT_0_31>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <LL_EXTI_DisableIT_0_31+0x24>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <switch_check>:
#include "switch.h"

uint8_t Mode_data;

void switch_check(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(MODE_SW_GPIO_Port, MODE_SW_Pin)) // factory jig
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4816      	ldr	r0, [pc, #88]	; (8002f2c <switch_check+0x60>)
 8002ed4:	f001 fb94 	bl	8004600 <HAL_GPIO_ReadPin>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d014      	beq.n	8002f08 <switch_check+0x3c>
    {
        Mode_data = 0x00U;
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <switch_check+0x64>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ee8:	4810      	ldr	r0, [pc, #64]	; (8002f2c <switch_check+0x60>)
 8002eea:	f7ff ffab 	bl	8002e44 <LL_GPIO_SetOutputPin>
        LL_GPIO_ResetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	4810      	ldr	r0, [pc, #64]	; (8002f34 <switch_check+0x68>)
 8002ef2:	f7ff ffb5 	bl	8002e60 <LL_GPIO_ResetOutputPin>
        if (connect)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <switch_check+0x6c>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <switch_check+0x5c>
        {
            LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15); // Viewer start button enable only
 8002efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f02:	f7ff ffcf 	bl	8002ea4 <LL_EXTI_DisableIT_0_31>
        Mode_data = 0x01U;
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
        LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
    }
 8002f06:	e00f      	b.n	8002f28 <switch_check+0x5c>
        Mode_data = 0x01U;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <switch_check+0x64>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
        LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8002f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f12:	4806      	ldr	r0, [pc, #24]	; (8002f2c <switch_check+0x60>)
 8002f14:	f7ff ffa4 	bl	8002e60 <LL_GPIO_ResetOutputPin>
        LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <switch_check+0x68>)
 8002f1c:	f7ff ff92 	bl	8002e44 <LL_GPIO_SetOutputPin>
        LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15);
 8002f20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f24:	f7ff ffac 	bl	8002e80 <LL_EXTI_EnableIT_0_31>
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40020400 	.word	0x40020400
 8002f30:	2000098b 	.word	0x2000098b
 8002f34:	40020000 	.word	0x40020000
 8002f38:	20000866 	.word	0x20000866

08002f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <SystemInit+0x20>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <SystemInit+0x20>)
 8002f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <LL_GPIO_SetOutputPin>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	619a      	str	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_GPIO_ResetOutputPin>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	619a      	str	r2, [r3, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fc2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002fc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2250;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fd0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8002fd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fe2:	4814      	ldr	r0, [pc, #80]	; (8003034 <MX_TIM2_Init+0x98>)
 8002fe4:	f002 f8f0 	bl	80051c8 <HAL_TIM_Base_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002fee:	f7fd ffd1 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ff8:	f107 0308 	add.w	r3, r7, #8
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	480d      	ldr	r0, [pc, #52]	; (8003034 <MX_TIM2_Init+0x98>)
 8003000:	f002 fd2c 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800300a:	f7fd ffc3 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003016:	463b      	mov	r3, r7
 8003018:	4619      	mov	r1, r3
 800301a:	4806      	ldr	r0, [pc, #24]	; (8003034 <MX_TIM2_Init+0x98>)
 800301c:	f003 f91e 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003026:	f7fd ffb5 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000990 	.word	0x20000990

08003038 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800303e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800304c:	f107 0320 	add.w	r3, r7, #32
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	60da      	str	r2, [r3, #12]
 8003062:	611a      	str	r2, [r3, #16]
 8003064:	615a      	str	r2, [r3, #20]
 8003066:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <MX_TIM3_Init+0xe4>)
 800306a:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <MX_TIM3_Init+0xe8>)
 800306c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45-1;
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <MX_TIM3_Init+0xe4>)
 8003070:	222c      	movs	r2, #44	; 0x2c
 8003072:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <MX_TIM3_Init+0xe4>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 800307a:	4b28      	ldr	r3, [pc, #160]	; (800311c <MX_TIM3_Init+0xe4>)
 800307c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003080:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <MX_TIM3_Init+0xe4>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003088:	4b24      	ldr	r3, [pc, #144]	; (800311c <MX_TIM3_Init+0xe4>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800308e:	4823      	ldr	r0, [pc, #140]	; (800311c <MX_TIM3_Init+0xe4>)
 8003090:	f002 f89a 	bl	80051c8 <HAL_TIM_Base_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800309a:	f7fd ff7b 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a8:	4619      	mov	r1, r3
 80030aa:	481c      	ldr	r0, [pc, #112]	; (800311c <MX_TIM3_Init+0xe4>)
 80030ac:	f002 fcd6 	bl	8005a5c <HAL_TIM_ConfigClockSource>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030b6:	f7fd ff6d 	bl	8000f94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030ba:	4818      	ldr	r0, [pc, #96]	; (800311c <MX_TIM3_Init+0xe4>)
 80030bc:	f002 f973 	bl	80053a6 <HAL_TIM_PWM_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030c6:	f7fd ff65 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030d2:	f107 0320 	add.w	r3, r7, #32
 80030d6:	4619      	mov	r1, r3
 80030d8:	4810      	ldr	r0, [pc, #64]	; (800311c <MX_TIM3_Init+0xe4>)
 80030da:	f003 f8bf 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80030e4:	f7fd ff56 	bl	8000f94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e8:	2360      	movs	r3, #96	; 0x60
 80030ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 80030ec:	23f9      	movs	r3, #249	; 0xf9
 80030ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2208      	movs	r2, #8
 80030fc:	4619      	mov	r1, r3
 80030fe:	4807      	ldr	r0, [pc, #28]	; (800311c <MX_TIM3_Init+0xe4>)
 8003100:	f002 fbea 	bl	80058d8 <HAL_TIM_PWM_ConfigChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800310a:	f7fd ff43 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800310e:	4803      	ldr	r0, [pc, #12]	; (800311c <MX_TIM3_Init+0xe4>)
 8003110:	f000 f864 	bl	80031dc <HAL_TIM_MspPostInit>

}
 8003114:	bf00      	nop
 8003116:	3738      	adds	r7, #56	; 0x38
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200009d8 	.word	0x200009d8
 8003120:	40000400 	.word	0x40000400

08003124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d12c      	bne.n	80031a0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800317e:	2304      	movs	r3, #4
 8003180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800318e:	2301      	movs	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	480e      	ldr	r0, [pc, #56]	; (80031d4 <HAL_TIM_Base_MspInit+0xb0>)
 800319a:	f001 f89d 	bl	80042d8 <HAL_GPIO_Init>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800319e:	e012      	b.n	80031c6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <HAL_TIM_Base_MspInit+0xb4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10d      	bne.n	80031c6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_TIM_Base_MspInit+0xac>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40000400 	.word	0x40000400

080031dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_TIM_MspPostInit+0x68>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d11e      	bne.n	800323c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HAL_TIM_MspPostInit+0x6c>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <HAL_TIM_MspPostInit+0x6c>)
 8003208:	f043 0304 	orr.w	r3, r3, #4
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_TIM_MspPostInit+0x6c>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800321a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800321e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800322c:	2302      	movs	r3, #2
 800322e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	4619      	mov	r1, r3
 8003236:	4805      	ldr	r0, [pc, #20]	; (800324c <HAL_TIM_MspPostInit+0x70>)
 8003238:	f001 f84e 	bl	80042d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40000400 	.word	0x40000400
 8003248:	40023800 	.word	0x40023800
 800324c:	40020800 	.word	0x40020800

08003250 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	f040 80de 	bne.w	8003420 <HAL_TIM_PeriodElapsedCallback+0x1d0>
  {
    switch (loading_count)
 8003264:	4b71      	ldr	r3, [pc, #452]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b0b      	cmp	r3, #11
 800326c:	f200 80d9 	bhi.w	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 8003270:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	080032a9 	.word	0x080032a9
 800327c:	080032cb 	.word	0x080032cb
 8003280:	080032e3 	.word	0x080032e3
 8003284:	080032fd 	.word	0x080032fd
 8003288:	0800331f 	.word	0x0800331f
 800328c:	08003343 	.word	0x08003343
 8003290:	08003369 	.word	0x08003369
 8003294:	08003383 	.word	0x08003383
 8003298:	0800339b 	.word	0x0800339b
 800329c:	080033b5 	.word	0x080033b5
 80032a0:	080033db 	.word	0x080033db
 80032a4:	080033ff 	.word	0x080033ff
    {
    case 0:
      LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80032a8:	2104      	movs	r1, #4
 80032aa:	4861      	ldr	r0, [pc, #388]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032ac:	f7ff fe58 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80032b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032b4:	485e      	ldr	r0, [pc, #376]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032b6:	f7ff fe61 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80032ba:	2101      	movs	r1, #1
 80032bc:	485c      	ldr	r0, [pc, #368]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032be:	f7ff fe4f 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 1;
 80032c2:	4b5a      	ldr	r3, [pc, #360]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
      break;
 80032c8:	e0ab      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 1:
      LL_GPIO_ResetOutputPin(FND_F_GPIO_Port, FND_F_Pin);
 80032ca:	2101      	movs	r1, #1
 80032cc:	4858      	ldr	r0, [pc, #352]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032ce:	f7ff fe55 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80032d2:	2102      	movs	r1, #2
 80032d4:	4856      	ldr	r0, [pc, #344]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032d6:	f7ff fe43 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 2;
 80032da:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032dc:	2202      	movs	r2, #2
 80032de:	701a      	strb	r2, [r3, #0]
      break;
 80032e0:	e09f      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 2:
      LL_GPIO_ResetOutputPin(FND_E_GPIO_Port, FND_E_Pin);
 80032e2:	2102      	movs	r1, #2
 80032e4:	4852      	ldr	r0, [pc, #328]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80032e6:	f7ff fe49 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 80032ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ee:	4851      	ldr	r0, [pc, #324]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80032f0:	f7ff fe36 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 3;
 80032f4:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032f6:	2203      	movs	r2, #3
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	e092      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 3:
      LL_GPIO_ResetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 80032fc:	2104      	movs	r1, #4
 80032fe:	484c      	ldr	r0, [pc, #304]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003300:	f7ff fe3c 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 8003304:	2120      	movs	r1, #32
 8003306:	484b      	ldr	r0, [pc, #300]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003308:	f7ff fe2a 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 800330c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003310:	4848      	ldr	r0, [pc, #288]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003312:	f7ff fe25 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 4;
 8003316:	4b45      	ldr	r3, [pc, #276]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003318:	2204      	movs	r2, #4
 800331a:	701a      	strb	r2, [r3, #0]
      break;
 800331c:	e081      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 4:
      LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 800331e:	2120      	movs	r1, #32
 8003320:	4844      	ldr	r0, [pc, #272]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003322:	f7ff fe2b 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8003326:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800332a:	4841      	ldr	r0, [pc, #260]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800332c:	f7ff fe18 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8003330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003334:	483f      	ldr	r0, [pc, #252]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003336:	f7ff fe13 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 5;
 800333a:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800333c:	2205      	movs	r2, #5
 800333e:	701a      	strb	r2, [r3, #0]
      break;
 8003340:	e06f      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 5:
      LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 8003342:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003346:	483a      	ldr	r0, [pc, #232]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003348:	f7ff fe18 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 800334c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003350:	4837      	ldr	r0, [pc, #220]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003352:	f7ff fe05 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8003356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800335a:	4836      	ldr	r0, [pc, #216]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800335c:	f7ff fe00 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 6;
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003362:	2206      	movs	r2, #6
 8003364:	701a      	strb	r2, [r3, #0]
      break;
 8003366:	e05c      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 6:
      LL_GPIO_ResetOutputPin(FND_D_GPIO_Port, FND_D_Pin);
 8003368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800336c:	4831      	ldr	r0, [pc, #196]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800336e:	f7ff fe05 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8003372:	2140      	movs	r1, #64	; 0x40
 8003374:	482f      	ldr	r0, [pc, #188]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003376:	f7ff fdf3 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 7;
 800337a:	4b2c      	ldr	r3, [pc, #176]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800337c:	2207      	movs	r2, #7
 800337e:	701a      	strb	r2, [r3, #0]
      break;
 8003380:	e04f      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 7:
      LL_GPIO_ResetOutputPin(FND_C_GPIO_Port, FND_C_Pin);
 8003382:	2140      	movs	r1, #64	; 0x40
 8003384:	482b      	ldr	r0, [pc, #172]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003386:	f7ff fdf9 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	4829      	ldr	r0, [pc, #164]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800338e:	f7ff fde7 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 8;
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003394:	2208      	movs	r2, #8
 8003396:	701a      	strb	r2, [r3, #0]
      break;
 8003398:	e043      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 8:
      LL_GPIO_ResetOutputPin(FND_B_GPIO_Port, FND_B_Pin);
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	4825      	ldr	r0, [pc, #148]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800339e:	f7ff fded 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80033a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033a6:	4822      	ldr	r0, [pc, #136]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033a8:	f7ff fdda 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 9;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033ae:	2209      	movs	r2, #9
 80033b0:	701a      	strb	r2, [r3, #0]
      break;
 80033b2:	e036      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 9:
      LL_GPIO_ResetOutputPin(FND4_SIG_GPIO_Port, FND4_SIG_Pin);
 80033b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033b8:	481d      	ldr	r0, [pc, #116]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033ba:	f7ff fddf 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80033be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033c2:	481b      	ldr	r0, [pc, #108]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033c4:	f7ff fdcc 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80033c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033cc:	4818      	ldr	r0, [pc, #96]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033ce:	f7ff fdc7 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 10;
 80033d2:	4b16      	ldr	r3, [pc, #88]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033d4:	220a      	movs	r2, #10
 80033d6:	701a      	strb	r2, [r3, #0]
      break;
 80033d8:	e023      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 10:
      LL_GPIO_ResetOutputPin(FND3_SIG_GPIO_Port, FND3_SIG_Pin);
 80033da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033de:	4814      	ldr	r0, [pc, #80]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033e0:	f7ff fdcc 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80033e4:	2120      	movs	r1, #32
 80033e6:	4813      	ldr	r0, [pc, #76]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80033e8:	f7ff fdba 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 80033ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f0:	480f      	ldr	r0, [pc, #60]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80033f2:	f7ff fdb5 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 11;
 80033f6:	4b0d      	ldr	r3, [pc, #52]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033f8:	220b      	movs	r2, #11
 80033fa:	701a      	strb	r2, [r3, #0]
      break;
 80033fc:	e011      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>

    case 11:
      LL_GPIO_ResetOutputPin(FND2_SIG_GPIO_Port, FND2_SIG_Pin);
 80033fe:	2120      	movs	r1, #32
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003402:	f7ff fdbb 	bl	8002f7c <LL_GPIO_ResetOutputPin>
      LL_GPIO_SetOutputPin(FND1_SIG_GPIO_Port, FND1_SIG_Pin);
 8003406:	2104      	movs	r1, #4
 8003408:	4809      	ldr	r0, [pc, #36]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800340a:	f7ff fda9 	bl	8002f60 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin(FND_A_GPIO_Port, FND_A_Pin);
 800340e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003412:	4807      	ldr	r0, [pc, #28]	; (8003430 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003414:	f7ff fda4 	bl	8002f60 <LL_GPIO_SetOutputPin>
      loading_count = 0;
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
      break;
 800341e:	e000      	b.n	8003422 <HAL_TIM_PeriodElapsedCallback+0x1d2>
    }
  }
 8003420:	bf00      	nop
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000098c 	.word	0x2000098c
 8003430:	40020800 	.word	0x40020800
 8003434:	40020400 	.word	0x40020400

08003438 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart6;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <MX_UART5_Init+0x4c>)
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <MX_UART5_Init+0x50>)
 8003440:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <MX_UART5_Init+0x4c>)
 8003444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003448:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_UART5_Init+0x4c>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <MX_UART5_Init+0x4c>)
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <MX_UART5_Init+0x4c>)
 8003458:	2200      	movs	r2, #0
 800345a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <MX_UART5_Init+0x4c>)
 800345e:	220c      	movs	r2, #12
 8003460:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <MX_UART5_Init+0x4c>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <MX_UART5_Init+0x4c>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <MX_UART5_Init+0x4c>)
 8003470:	f002 ff84 	bl	800637c <HAL_UART_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800347a:	f7fd fd8b 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000a20 	.word	0x20000a20
 8003488:	40005000 	.word	0x40005000

0800348c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <MX_USART6_UART_Init+0x50>)
 8003494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 921600;
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 8003498:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800349c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034b2:	220c      	movs	r2, #12
 80034b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80034c2:	4805      	ldr	r0, [pc, #20]	; (80034d8 <MX_USART6_UART_Init+0x4c>)
 80034c4:	f002 ff5a 	bl	800637c <HAL_UART_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80034ce:	f7fd fd61 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000a64 	.word	0x20000a64
 80034dc:	40011400 	.word	0x40011400

080034e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_UART_MspInit+0x144>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d153      	bne.n	80035aa <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	4b48      	ldr	r3, [pc, #288]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_UART_MspInit+0x148>)
 800350c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b45      	ldr	r3, [pc, #276]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a40      	ldr	r2, [pc, #256]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a39      	ldr	r2, [pc, #228]	; (8003628 <HAL_UART_MspInit+0x148>)
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b37      	ldr	r3, [pc, #220]	; (8003628 <HAL_UART_MspInit+0x148>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003568:	2308      	movs	r3, #8
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	4619      	mov	r1, r3
 8003572:	482e      	ldr	r0, [pc, #184]	; (800362c <HAL_UART_MspInit+0x14c>)
 8003574:	f000 feb0 	bl	80042d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003578:	2304      	movs	r3, #4
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003588:	2308      	movs	r3, #8
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	4827      	ldr	r0, [pc, #156]	; (8003630 <HAL_UART_MspInit+0x150>)
 8003594:	f000 fea0 	bl	80042d8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2100      	movs	r1, #0
 800359c:	2035      	movs	r0, #53	; 0x35
 800359e:	f000 fdd2 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035a2:	2035      	movs	r0, #53	; 0x35
 80035a4:	f000 fdeb 	bl	800417e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80035a8:	e038      	b.n	800361c <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART6)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_UART_MspInit+0x154>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d133      	bne.n	800361c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_UART_MspInit+0x148>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_UART_MspInit+0x148>)
 80035be:	f043 0320 	orr.w	r3, r3, #32
 80035c2:	6453      	str	r3, [r2, #68]	; 0x44
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_UART_MspInit+0x148>)
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_UART_MspInit+0x148>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4a13      	ldr	r2, [pc, #76]	; (8003628 <HAL_UART_MspInit+0x148>)
 80035da:	f043 0304 	orr.w	r3, r3, #4
 80035de:	6313      	str	r3, [r2, #48]	; 0x30
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_UART_MspInit+0x148>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035ec:	23c0      	movs	r3, #192	; 0xc0
 80035ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035fc:	2308      	movs	r3, #8
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	4619      	mov	r1, r3
 8003606:	4809      	ldr	r0, [pc, #36]	; (800362c <HAL_UART_MspInit+0x14c>)
 8003608:	f000 fe66 	bl	80042d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	2047      	movs	r0, #71	; 0x47
 8003612:	f000 fd98 	bl	8004146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003616:	2047      	movs	r0, #71	; 0x47
 8003618:	f000 fdb1 	bl	800417e <HAL_NVIC_EnableIRQ>
}
 800361c:	bf00      	nop
 800361e:	3730      	adds	r7, #48	; 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40005000 	.word	0x40005000
 8003628:	40023800 	.word	0x40023800
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40011400 	.word	0x40011400

08003638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800363e:	490e      	ldr	r1, [pc, #56]	; (8003678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003640:	4a0e      	ldr	r2, [pc, #56]	; (800367c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003644:	e002      	b.n	800364c <LoopCopyDataInit>

08003646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364a:	3304      	adds	r3, #4

0800364c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800364c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003650:	d3f9      	bcc.n	8003646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003652:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003654:	4c0b      	ldr	r4, [pc, #44]	; (8003684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003658:	e001      	b.n	800365e <LoopFillZerobss>

0800365a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800365c:	3204      	adds	r2, #4

0800365e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003660:	d3fb      	bcc.n	800365a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003662:	f7ff fc6b 	bl	8002f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003666:	f004 f92f 	bl	80078c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800366a:	f7fd fb65 	bl	8000d38 <main>
  bx  lr    
 800366e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003678:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800367c:	08007a50 	.word	0x08007a50
  ldr r2, =_sbss
 8003680:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003684:	20000aac 	.word	0x20000aac

08003688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003688:	e7fe      	b.n	8003688 <ADC_IRQHandler>
	...

0800368c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003690:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <HAL_Init+0x40>)
 8003696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800369a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_Init+0x40>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_Init+0x40>)
 80036a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a07      	ldr	r2, [pc, #28]	; (80036cc <HAL_Init+0x40>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b4:	2003      	movs	r0, #3
 80036b6:	f000 fd3b 	bl	8004130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ba:	200f      	movs	r0, #15
 80036bc:	f000 f808 	bl	80036d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c0:	f7ff faa0 	bl	8002c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_InitTick+0x54>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_InitTick+0x58>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fd53 	bl	800419a <HAL_SYSTICK_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e00e      	b.n	800371c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b0f      	cmp	r3, #15
 8003702:	d80a      	bhi.n	800371a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003704:	2200      	movs	r2, #0
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	f000 fd1b 	bl	8004146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003710:	4a06      	ldr	r2, [pc, #24]	; (800372c <HAL_InitTick+0x5c>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e000      	b.n	800371c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000008 	.word	0x20000008
 8003728:	20000010 	.word	0x20000010
 800372c:	2000000c 	.word	0x2000000c

08003730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_IncTick+0x20>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_IncTick+0x24>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4413      	add	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_IncTick+0x24>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000010 	.word	0x20000010
 8003754:	20000aa8 	.word	0x20000aa8

08003758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return uwTick;
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <HAL_GetTick+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000aa8 	.word	0x20000aa8

08003770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e033      	b.n	80037ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fc ff0c 	bl	80005ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037b6:	f023 0302 	bic.w	r3, r3, #2
 80037ba:	f043 0202 	orr.w	r2, r3, #2
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fae8 	bl	8003d98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40
 80037de:	e001      	b.n	80037e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_ADC_Start+0x1a>
 800380e:	2302      	movs	r3, #2
 8003810:	e0b2      	b.n	8003978 <HAL_ADC_Start+0x180>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d018      	beq.n	800385a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003838:	4b52      	ldr	r3, [pc, #328]	; (8003984 <HAL_ADC_Start+0x18c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_ADC_Start+0x190>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	0c9a      	lsrs	r2, r3, #18
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800384c:	e002      	b.n	8003854 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3b01      	subs	r3, #1
 8003852:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f9      	bne.n	800384e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d17a      	bne.n	800395e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	d106      	bne.n	80038b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f023 0206 	bic.w	r2, r3, #6
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
 80038b4:	e002      	b.n	80038bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038c4:	4b31      	ldr	r3, [pc, #196]	; (800398c <HAL_ADC_Start+0x194>)
 80038c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d12a      	bne.n	8003934 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <HAL_ADC_Start+0x198>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d015      	beq.n	8003914 <HAL_ADC_Start+0x11c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_ADC_Start+0x19c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d105      	bne.n	80038fe <HAL_ADC_Start+0x106>
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_ADC_Start+0x194>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <HAL_ADC_Start+0x1a0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d136      	bne.n	8003976 <HAL_ADC_Start+0x17e>
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_ADC_Start+0x194>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d130      	bne.n	8003976 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d129      	bne.n	8003976 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	e020      	b.n	8003976 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <HAL_ADC_Start+0x198>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d11b      	bne.n	8003976 <HAL_ADC_Start+0x17e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d114      	bne.n	8003976 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	e00b      	b.n	8003976 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f043 0210 	orr.w	r2, r3, #16
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	20000008 	.word	0x20000008
 8003988:	431bde83 	.word	0x431bde83
 800398c:	40012300 	.word	0x40012300
 8003990:	40012000 	.word	0x40012000
 8003994:	40012100 	.word	0x40012100
 8003998:	40012200 	.word	0x40012200

0800399c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_Stop+0x16>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e021      	b.n	80039f6 <HAL_ADC_Stop+0x5a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d109      	bne.n	80039ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d113      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2e:	d10b      	bne.n	8003a48 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e063      	b.n	8003b10 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a48:	f7ff fe86 	bl	8003758 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a4e:	e021      	b.n	8003a94 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d01d      	beq.n	8003a94 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_ADC_PollForConversion+0x6c>
 8003a5e:	f7ff fe7b 	bl	8003758 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d212      	bcs.n	8003a94 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d00b      	beq.n	8003a94 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e03d      	b.n	8003b10 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d1d6      	bne.n	8003a50 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0212 	mvn.w	r2, #18
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d123      	bne.n	8003b0e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11f      	bne.n	8003b0e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d111      	bne.n	8003b0e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d105      	bne.n	8003b0e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e113      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x244>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d925      	bls.n	8003bac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68d9      	ldr	r1, [r3, #12]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4613      	mov	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	3b1e      	subs	r3, #30
 8003b76:	2207      	movs	r2, #7
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	400a      	ands	r2, r1
 8003b84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68d9      	ldr	r1, [r3, #12]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	4603      	mov	r3, r0
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4403      	add	r3, r0
 8003b9e:	3b1e      	subs	r3, #30
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	e022      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6919      	ldr	r1, [r3, #16]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	400a      	ands	r2, r1
 8003bce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6919      	ldr	r1, [r3, #16]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4618      	mov	r0, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4403      	add	r3, r0
 8003be8:	409a      	lsls	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d824      	bhi.n	8003c44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	3b05      	subs	r3, #5
 8003c0c:	221f      	movs	r2, #31
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	400a      	ands	r2, r1
 8003c1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	4618      	mov	r0, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	3b05      	subs	r3, #5
 8003c36:	fa00 f203 	lsl.w	r2, r0, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34
 8003c42:	e04c      	b.n	8003cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d824      	bhi.n	8003c96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3b23      	subs	r3, #35	; 0x23
 8003c5e:	221f      	movs	r2, #31
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43da      	mvns	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	3b23      	subs	r3, #35	; 0x23
 8003c88:	fa00 f203 	lsl.w	r2, r0, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
 8003c94:	e023      	b.n	8003cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3b41      	subs	r3, #65	; 0x41
 8003ca8:	221f      	movs	r2, #31
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	3b41      	subs	r3, #65	; 0x41
 8003cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_ADC_ConfigChannel+0x250>)
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a28      	ldr	r2, [pc, #160]	; (8003d88 <HAL_ADC_ConfigChannel+0x254>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10f      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x1d8>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b12      	cmp	r3, #18
 8003cf2:	d10b      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_ADC_ConfigChannel+0x254>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d12b      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x23a>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_ADC_ConfigChannel+0x258>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_ADC_ConfigChannel+0x1f4>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b11      	cmp	r3, #17
 8003d26:	d122      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_ADC_ConfigChannel+0x258>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d111      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_ADC_ConfigChannel+0x25c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_ADC_ConfigChannel+0x260>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	0c9a      	lsrs	r2, r3, #18
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d60:	e002      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f9      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	40012300 	.word	0x40012300
 8003d88:	40012000 	.word	0x40012000
 8003d8c:	10000012 	.word	0x10000012
 8003d90:	20000008 	.word	0x20000008
 8003d94:	431bde83 	.word	0x431bde83

08003d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da0:	4b79      	ldr	r3, [pc, #484]	; (8003f88 <ADC_Init+0x1f0>)
 8003da2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	431a      	orrs	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	021a      	lsls	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003df0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6899      	ldr	r1, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <ADC_Init+0x1f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	e00f      	b.n	8003e96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0202 	bic.w	r2, r2, #2
 8003ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7e1b      	ldrb	r3, [r3, #24]
 8003eb0:	005a      	lsls	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ee2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6859      	ldr	r1, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	035a      	lsls	r2, r3, #13
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	e007      	b.n	8003f0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	051a      	lsls	r2, r3, #20
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6899      	ldr	r1, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f4e:	025a      	lsls	r2, r3, #9
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6899      	ldr	r1, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	029a      	lsls	r2, r3, #10
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40012300 	.word	0x40012300
 8003f8c:	0f000001 	.word	0x0f000001

08003f90 <__NVIC_SetPriorityGrouping>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fac:	4013      	ands	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	60d3      	str	r3, [r2, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_GetPriorityGrouping>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 0307 	and.w	r3, r3, #7
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_EnableIRQ>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	2b00      	cmp	r3, #0
 8004004:	db0b      	blt.n	800401e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	f003 021f 	and.w	r2, r3, #31
 800400c:	4907      	ldr	r1, [pc, #28]	; (800402c <__NVIC_EnableIRQ+0x38>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2001      	movs	r0, #1
 8004016:	fa00 f202 	lsl.w	r2, r0, r2
 800401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000e100 	.word	0xe000e100

08004030 <__NVIC_SetPriority>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	db0a      	blt.n	800405a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	490c      	ldr	r1, [pc, #48]	; (800407c <__NVIC_SetPriority+0x4c>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	0112      	lsls	r2, r2, #4
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	440b      	add	r3, r1
 8004054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004058:	e00a      	b.n	8004070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4908      	ldr	r1, [pc, #32]	; (8004080 <__NVIC_SetPriority+0x50>)
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3b04      	subs	r3, #4
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	440b      	add	r3, r1
 800406e:	761a      	strb	r2, [r3, #24]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000e100 	.word	0xe000e100
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <NVIC_EncodePriority>:
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f1c3 0307 	rsb	r3, r3, #7
 800409e:	2b04      	cmp	r3, #4
 80040a0:	bf28      	it	cs
 80040a2:	2304      	movcs	r3, #4
 80040a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d902      	bls.n	80040b4 <NVIC_EncodePriority+0x30>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3b03      	subs	r3, #3
 80040b2:	e000      	b.n	80040b6 <NVIC_EncodePriority+0x32>
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	401a      	ands	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43d9      	mvns	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	4313      	orrs	r3, r2
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	; 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040fc:	d301      	bcc.n	8004102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040fe:	2301      	movs	r3, #1
 8004100:	e00f      	b.n	8004122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <SysTick_Config+0x40>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800410a:	210f      	movs	r1, #15
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f7ff ff8e 	bl	8004030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <SysTick_Config+0x40>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <SysTick_Config+0x40>)
 800411c:	2207      	movs	r2, #7
 800411e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	e000e010 	.word	0xe000e010

08004130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff29 	bl	8003f90 <__NVIC_SetPriorityGrouping>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004158:	f7ff ff3e 	bl	8003fd8 <__NVIC_GetPriorityGrouping>
 800415c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f7ff ff8e 	bl	8004084 <NVIC_EncodePriority>
 8004168:	4602      	mov	r2, r0
 800416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff5d 	bl	8004030 <__NVIC_SetPriority>
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	4603      	mov	r3, r0
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff31 	bl	8003ff4 <__NVIC_EnableIRQ>
}
 8004192:	bf00      	nop
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ffa2 	bl	80040ec <SysTick_Config>
 80041a8:	4603      	mov	r3, r0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff faca 	bl	8003758 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d008      	beq.n	80041e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e052      	b.n	800428a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0216 	bic.w	r2, r2, #22
 80041f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004202:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <HAL_DMA_Abort+0x62>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0208 	bic.w	r2, r2, #8
 8004222:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004234:	e013      	b.n	800425e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004236:	f7ff fa8f 	bl	8003758 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b05      	cmp	r3, #5
 8004242:	d90c      	bls.n	800425e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2203      	movs	r2, #3
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e015      	b.n	800428a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e4      	bne.n	8004236 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	223f      	movs	r2, #63	; 0x3f
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d004      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2280      	movs	r2, #128	; 0x80
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e00c      	b.n	80042ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2205      	movs	r2, #5
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e165      	b.n	80045c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f4:	2201      	movs	r2, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	f040 8154 	bne.w	80045ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d005      	beq.n	800432a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004326:	2b02      	cmp	r3, #2
 8004328:	d130      	bne.n	800438c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004360:	2201      	movs	r2, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 0201 	and.w	r2, r3, #1
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b03      	cmp	r3, #3
 8004396:	d017      	beq.n	80043c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d123      	bne.n	800441c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	08da      	lsrs	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3208      	adds	r2, #8
 80043dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	220f      	movs	r2, #15
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	08da      	lsrs	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3208      	adds	r2, #8
 8004416:	69b9      	ldr	r1, [r7, #24]
 8004418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2203      	movs	r2, #3
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0203 	and.w	r2, r3, #3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80ae 	beq.w	80045ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	4b5d      	ldr	r3, [pc, #372]	; (80045d8 <HAL_GPIO_Init+0x300>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	4a5c      	ldr	r2, [pc, #368]	; (80045d8 <HAL_GPIO_Init+0x300>)
 8004468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446c:	6453      	str	r3, [r2, #68]	; 0x44
 800446e:	4b5a      	ldr	r3, [pc, #360]	; (80045d8 <HAL_GPIO_Init+0x300>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800447a:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_GPIO_Init+0x304>)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	3302      	adds	r3, #2
 8004482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	220f      	movs	r2, #15
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <HAL_GPIO_Init+0x308>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d025      	beq.n	80044f2 <HAL_GPIO_Init+0x21a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <HAL_GPIO_Init+0x30c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01f      	beq.n	80044ee <HAL_GPIO_Init+0x216>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <HAL_GPIO_Init+0x310>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d019      	beq.n	80044ea <HAL_GPIO_Init+0x212>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_GPIO_Init+0x314>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_GPIO_Init+0x20e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_GPIO_Init+0x318>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00d      	beq.n	80044e2 <HAL_GPIO_Init+0x20a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_GPIO_Init+0x31c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <HAL_GPIO_Init+0x206>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a49      	ldr	r2, [pc, #292]	; (80045f8 <HAL_GPIO_Init+0x320>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_GPIO_Init+0x202>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e00c      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044da:	2307      	movs	r3, #7
 80044dc:	e00a      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044de:	2305      	movs	r3, #5
 80044e0:	e008      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044e2:	2304      	movs	r3, #4
 80044e4:	e006      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044e6:	2303      	movs	r3, #3
 80044e8:	e004      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e002      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <HAL_GPIO_Init+0x21c>
 80044f2:	2300      	movs	r3, #0
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f002 0203 	and.w	r2, r2, #3
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	4093      	lsls	r3, r2
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004504:	4935      	ldr	r1, [pc, #212]	; (80045dc <HAL_GPIO_Init+0x304>)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	3302      	adds	r3, #2
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004512:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <HAL_GPIO_Init+0x324>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004536:	4a31      	ldr	r2, [pc, #196]	; (80045fc <HAL_GPIO_Init+0x324>)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800453c:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_GPIO_Init+0x324>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004560:	4a26      	ldr	r2, [pc, #152]	; (80045fc <HAL_GPIO_Init+0x324>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004566:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_GPIO_Init+0x324>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_GPIO_Init+0x324>)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_GPIO_Init+0x324>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <HAL_GPIO_Init+0x324>)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b0f      	cmp	r3, #15
 80045c4:	f67f ae96 	bls.w	80042f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40013800 	.word	0x40013800
 80045e0:	40020000 	.word	0x40020000
 80045e4:	40020400 	.word	0x40020400
 80045e8:	40020800 	.word	0x40020800
 80045ec:	40020c00 	.word	0x40020c00
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40021400 	.word	0x40021400
 80045f8:	40021800 	.word	0x40021800
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	887b      	ldrh	r3, [r7, #2]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
 800461c:	e001      	b.n	8004622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004642:	887a      	ldrh	r2, [r7, #2]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4013      	ands	r3, r2
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	43d9      	mvns	r1, r3
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	400b      	ands	r3, r1
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800468a:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004690:	f7ff f862 	bl	8003758 <HAL_GetTick>
 8004694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004696:	e009      	b.n	80046ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004698:	f7ff f85e 	bl	8003758 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a6:	d901      	bls.n	80046ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e01f      	b.n	80046ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_PWREx_EnableOverDrive+0x98>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d1ee      	bne.n	8004698 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c0:	f7ff f84a 	bl	8003758 <HAL_GetTick>
 80046c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046c6:	e009      	b.n	80046dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046c8:	f7ff f846 	bl	8003758 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d6:	d901      	bls.n	80046dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e007      	b.n	80046ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046dc:	4b07      	ldr	r3, [pc, #28]	; (80046fc <HAL_PWREx_EnableOverDrive+0x98>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e8:	d1ee      	bne.n	80046c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40023800 	.word	0x40023800
 80046f8:	420e0040 	.word	0x420e0040
 80046fc:	40007000 	.word	0x40007000
 8004700:	420e0044 	.word	0x420e0044

08004704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0cc      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b68      	ldr	r3, [pc, #416]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d90c      	bls.n	8004740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b65      	ldr	r3, [pc, #404]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0b8      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d020      	beq.n	800478e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	494d      	ldr	r1, [pc, #308]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d044      	beq.n	8004824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d119      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e06f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e067      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e2:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 0203 	bic.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4934      	ldr	r1, [pc, #208]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f4:	f7fe ffb0 	bl	8003758 <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fc:	f7fe ffac 	bl	8003758 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e04f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 020c 	and.w	r2, r3, #12
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	429a      	cmp	r2, r3
 8004822:	d1eb      	bne.n	80047fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d20c      	bcs.n	800484c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b22      	ldr	r3, [pc, #136]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e032      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4916      	ldr	r1, [pc, #88]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	490e      	ldr	r1, [pc, #56]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800488a:	f000 f855 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	490a      	ldr	r1, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	5ccb      	ldrb	r3, [r1, r3]
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1c8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe ff10 	bl	80036d0 <HAL_InitTick>

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023c00 	.word	0x40023c00
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08007a28 	.word	0x08007a28
 80048c8:	20000008 	.word	0x20000008
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d6:	681b      	ldr	r3, [r3, #0]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000008 	.word	0x20000008

080048e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048ec:	f7ff fff0 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	0a9b      	lsrs	r3, r3, #10
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4903      	ldr	r1, [pc, #12]	; (800490c <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40023800 	.word	0x40023800
 800490c:	08007a38 	.word	0x08007a38

08004910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004914:	f7ff ffdc 	bl	80048d0 <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	0b5b      	lsrs	r3, r3, #13
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4903      	ldr	r1, [pc, #12]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40023800 	.word	0x40023800
 8004934:	08007a38 	.word	0x08007a38

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b0a6      	sub	sp, #152	; 0x98
 800493e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800495e:	4bc8      	ldr	r3, [pc, #800]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	2b0c      	cmp	r3, #12
 8004968:	f200 817e 	bhi.w	8004c68 <HAL_RCC_GetSysClockFreq+0x330>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <HAL_RCC_GetSysClockFreq+0x3c>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	080049a9 	.word	0x080049a9
 8004978:	08004c69 	.word	0x08004c69
 800497c:	08004c69 	.word	0x08004c69
 8004980:	08004c69 	.word	0x08004c69
 8004984:	080049b1 	.word	0x080049b1
 8004988:	08004c69 	.word	0x08004c69
 800498c:	08004c69 	.word	0x08004c69
 8004990:	08004c69 	.word	0x08004c69
 8004994:	080049b9 	.word	0x080049b9
 8004998:	08004c69 	.word	0x08004c69
 800499c:	08004c69 	.word	0x08004c69
 80049a0:	08004c69 	.word	0x08004c69
 80049a4:	08004b23 	.word	0x08004b23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4bb6      	ldr	r3, [pc, #728]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80049ae:	e15f      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b0:	4bb5      	ldr	r3, [pc, #724]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x350>)
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049b6:	e15b      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b8:	4bb1      	ldr	r3, [pc, #708]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c4:	4bae      	ldr	r3, [pc, #696]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d031      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d0:	4bab      	ldr	r3, [pc, #684]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	099b      	lsrs	r3, r3, #6
 80049d6:	2200      	movs	r2, #0
 80049d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	663b      	str	r3, [r7, #96]	; 0x60
 80049e4:	2300      	movs	r3, #0
 80049e6:	667b      	str	r3, [r7, #100]	; 0x64
 80049e8:	4ba7      	ldr	r3, [pc, #668]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x350>)
 80049ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049ee:	462a      	mov	r2, r5
 80049f0:	fb03 f202 	mul.w	r2, r3, r2
 80049f4:	2300      	movs	r3, #0
 80049f6:	4621      	mov	r1, r4
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	4aa2      	ldr	r2, [pc, #648]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a00:	4621      	mov	r1, r4
 8004a02:	fba1 1202 	umull	r1, r2, r1, r2
 8004a06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a08:	460a      	mov	r2, r1
 8004a0a:	67ba      	str	r2, [r7, #120]	; 0x78
 8004a0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a0e:	4413      	add	r3, r2
 8004a10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a16:	2200      	movs	r2, #0
 8004a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a20:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004a24:	f7fb fbee 	bl	8000204 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a32:	e064      	b.n	8004afe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a34:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	099b      	lsrs	r3, r3, #6
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a3e:	657a      	str	r2, [r7, #84]	; 0x54
 8004a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a48:	2300      	movs	r3, #0
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004a50:	4622      	mov	r2, r4
 8004a52:	462b      	mov	r3, r5
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f04f 0100 	mov.w	r1, #0
 8004a5c:	0159      	lsls	r1, r3, #5
 8004a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a62:	0150      	lsls	r0, r2, #5
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4621      	mov	r1, r4
 8004a6a:	1a51      	subs	r1, r2, r1
 8004a6c:	6139      	str	r1, [r7, #16]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	eb63 0301 	sbc.w	r3, r3, r1
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a82:	4659      	mov	r1, fp
 8004a84:	018b      	lsls	r3, r1, #6
 8004a86:	4651      	mov	r1, sl
 8004a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	018a      	lsls	r2, r1, #6
 8004a90:	4651      	mov	r1, sl
 8004a92:	ebb2 0801 	subs.w	r8, r2, r1
 8004a96:	4659      	mov	r1, fp
 8004a98:	eb63 0901 	sbc.w	r9, r3, r1
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	4699      	mov	r9, r3
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	eb18 0303 	adds.w	r3, r8, r3
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	462b      	mov	r3, r5
 8004abe:	eb49 0303 	adc.w	r3, r9, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	028b      	lsls	r3, r1, #10
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ada:	4621      	mov	r1, r4
 8004adc:	028a      	lsls	r2, r1, #10
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aea:	647a      	str	r2, [r7, #68]	; 0x44
 8004aec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004af0:	f7fb fb88 	bl	8000204 <__aeabi_uldivmod>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4613      	mov	r3, r2
 8004afa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004afe:	4b60      	ldr	r3, [pc, #384]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004b10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b20:	e0a6      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b22:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b2e:	4b54      	ldr	r3, [pc, #336]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02a      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3a:	4b51      	ldr	r3, [pc, #324]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	099b      	lsrs	r3, r3, #6
 8004b40:	2200      	movs	r2, #0
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4b4e      	ldr	r3, [pc, #312]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b50:	fb03 f201 	mul.w	r2, r3, r1
 8004b54:	2300      	movs	r3, #0
 8004b56:	fb00 f303 	mul.w	r3, r0, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4a4a      	ldr	r2, [pc, #296]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x350>)
 8004b5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004b62:	677a      	str	r2, [r7, #116]	; 0x74
 8004b64:	460a      	mov	r2, r1
 8004b66:	673a      	str	r2, [r7, #112]	; 0x70
 8004b68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b6a:	4413      	add	r3, r2
 8004b6c:	677b      	str	r3, [r7, #116]	; 0x74
 8004b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b72:	2200      	movs	r2, #0
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30
 8004b76:	637a      	str	r2, [r7, #52]	; 0x34
 8004b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b80:	f7fb fb40 	bl	8000204 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b8e:	e05b      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b3b      	ldr	r3, [pc, #236]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	2200      	movs	r2, #0
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bac:	4642      	mov	r2, r8
 8004bae:	464b      	mov	r3, r9
 8004bb0:	f04f 0000 	mov.w	r0, #0
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	0159      	lsls	r1, r3, #5
 8004bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bbe:	0150      	lsls	r0, r2, #5
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004be4:	ebb2 040a 	subs.w	r4, r2, sl
 8004be8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	00eb      	lsls	r3, r5, #3
 8004bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bfa:	00e2      	lsls	r2, r4, #3
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	461d      	mov	r5, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	18e3      	adds	r3, r4, r3
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	464b      	mov	r3, r9
 8004c08:	eb45 0303 	adc.w	r3, r5, r3
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	028b      	lsls	r3, r1, #10
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c24:	4621      	mov	r1, r4
 8004c26:	028a      	lsls	r2, r1, #10
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c30:	2200      	movs	r2, #0
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c3a:	f7fb fae3 	bl	8000204 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4613      	mov	r3, r2
 8004c44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	0f1b      	lsrs	r3, r3, #28
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c66:	e003      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3798      	adds	r7, #152	; 0x98
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	00f42400 	.word	0x00f42400
 8004c88:	016e3600 	.word	0x016e3600

08004c8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e28d      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8083 	beq.w	8004db2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cac:	4b94      	ldr	r3, [pc, #592]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030c 	and.w	r3, r3, #12
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d019      	beq.n	8004cec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cb8:	4b91      	ldr	r3, [pc, #580]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cc4:	4b8e      	ldr	r3, [pc, #568]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd0:	d00c      	beq.n	8004cec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd2:	4b8b      	ldr	r3, [pc, #556]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4b88      	ldr	r3, [pc, #544]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	4b84      	ldr	r3, [pc, #528]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05b      	beq.n	8004db0 <HAL_RCC_OscConfig+0x124>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d157      	bne.n	8004db0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e25a      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x90>
 8004d0e:	4b7c      	ldr	r3, [pc, #496]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a7b      	ldr	r2, [pc, #492]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xcc>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0xb4>
 8004d26:	4b76      	ldr	r3, [pc, #472]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a75      	ldr	r2, [pc, #468]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a72      	ldr	r2, [pc, #456]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xcc>
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6e      	ldr	r2, [pc, #440]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b6c      	ldr	r3, [pc, #432]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6b      	ldr	r2, [pc, #428]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fe fcfa 	bl	8003758 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fe fcf6 	bl	8003758 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e21f      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b61      	ldr	r3, [pc, #388]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xdc>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe fce6 	bl	8003758 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fe fce2 	bl	8003758 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e20b      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b57      	ldr	r3, [pc, #348]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x104>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d06f      	beq.n	8004e9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dbe:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dca:	4b4d      	ldr	r3, [pc, #308]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d105      	bne.n	8004de2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d11c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dee:	4b44      	ldr	r3, [pc, #272]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d116      	bne.n	8004e28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dfa:	4b41      	ldr	r3, [pc, #260]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_RCC_OscConfig+0x186>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e1d3      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4937      	ldr	r1, [pc, #220]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e26:	e03a      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e30:	4b34      	ldr	r3, [pc, #208]	; (8004f04 <HAL_RCC_OscConfig+0x278>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fe fc8f 	bl	8003758 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fe fc8b 	bl	8003758 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e1b4      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4925      	ldr	r1, [pc, #148]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
 8004e70:	e015      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <HAL_RCC_OscConfig+0x278>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fe fc6e 	bl	8003758 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e80:	f7fe fc6a 	bl	8003758 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e193      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e92:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d036      	beq.n	8004f18 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <HAL_RCC_OscConfig+0x27c>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fc4e 	bl	8003758 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fe fc4a 	bl	8003758 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e173      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x234>
 8004ede:	e01b      	b.n	8004f18 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <HAL_RCC_OscConfig+0x27c>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee6:	f7fe fc37 	bl	8003758 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	e00e      	b.n	8004f0c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eee:	f7fe fc33 	bl	8003758 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d907      	bls.n	8004f0c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e15c      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
 8004f00:	40023800 	.word	0x40023800
 8004f04:	42470000 	.word	0x42470000
 8004f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	4b8a      	ldr	r3, [pc, #552]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ea      	bne.n	8004eee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8097 	beq.w	8005054 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2a:	4b83      	ldr	r3, [pc, #524]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10f      	bne.n	8004f56 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	4b7f      	ldr	r3, [pc, #508]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a7e      	ldr	r2, [pc, #504]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
 8004f46:	4b7c      	ldr	r3, [pc, #496]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b79      	ldr	r3, [pc, #484]	; (800513c <HAL_RCC_OscConfig+0x4b0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f62:	4b76      	ldr	r3, [pc, #472]	; (800513c <HAL_RCC_OscConfig+0x4b0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a75      	ldr	r2, [pc, #468]	; (800513c <HAL_RCC_OscConfig+0x4b0>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fe fbf3 	bl	8003758 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fe fbef 	bl	8003758 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e118      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCC_OscConfig+0x4b0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x31e>
 8004f9c:	4b66      	ldr	r3, [pc, #408]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	4a65      	ldr	r2, [pc, #404]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa8:	e01c      	b.n	8004fe4 <HAL_RCC_OscConfig+0x358>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x340>
 8004fb2:	4b61      	ldr	r3, [pc, #388]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	4a60      	ldr	r2, [pc, #384]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbe:	4b5e      	ldr	r3, [pc, #376]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a5d      	ldr	r2, [pc, #372]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0x358>
 8004fcc:	4b5a      	ldr	r3, [pc, #360]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd0:	4a59      	ldr	r2, [pc, #356]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd8:	4b57      	ldr	r3, [pc, #348]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fdc:	4a56      	ldr	r2, [pc, #344]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	f023 0304 	bic.w	r3, r3, #4
 8004fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d015      	beq.n	8005018 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fec:	f7fe fbb4 	bl	8003758 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff4:	f7fe fbb0 	bl	8003758 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0d7      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500a:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ee      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x368>
 8005016:	e014      	b.n	8005042 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fe fb9e 	bl	8003758 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fe fb9a 	bl	8003758 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0c1      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005036:	4b40      	ldr	r3, [pc, #256]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1ee      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005048:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80ad 	beq.w	80051b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b08      	cmp	r3, #8
 8005068:	d060      	beq.n	800512c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d145      	bne.n	80050fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b33      	ldr	r3, [pc, #204]	; (8005140 <HAL_RCC_OscConfig+0x4b4>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fe fb6e 	bl	8003758 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fe fb6a 	bl	8003758 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e093      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	019b      	lsls	r3, r3, #6
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	3b01      	subs	r3, #1
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	071b      	lsls	r3, r3, #28
 80050ca:	491b      	ldr	r1, [pc, #108]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_RCC_OscConfig+0x4b4>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fe fb3f 	bl	8003758 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050de:	f7fe fb3b 	bl	8003758 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e064      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f0:	4b11      	ldr	r3, [pc, #68]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x452>
 80050fc:	e05c      	b.n	80051b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_RCC_OscConfig+0x4b4>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fe fb28 	bl	8003758 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800510c:	f7fe fb24 	bl	8003758 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e04d      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_RCC_OscConfig+0x4ac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x480>
 800512a:	e045      	b.n	80051b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e040      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
 8005138:	40023800 	.word	0x40023800
 800513c:	40007000 	.word	0x40007000
 8005140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005144:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <HAL_RCC_OscConfig+0x538>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d030      	beq.n	80051b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515c:	429a      	cmp	r2, r3
 800515e:	d129      	bne.n	80051b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d122      	bne.n	80051b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800517a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800517c:	4293      	cmp	r3, r2
 800517e:	d119      	bne.n	80051b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	3b01      	subs	r3, #1
 800518e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d10f      	bne.n	80051b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023800 	.word	0x40023800

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e041      	b.n	800525e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd ff98 	bl	8003124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fd18 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d001      	beq.n	8005280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e04e      	b.n	800531e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a23      	ldr	r2, [pc, #140]	; (800532c <HAL_TIM_Base_Start_IT+0xc4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d022      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052aa:	d01d      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <HAL_TIM_Base_Start_IT+0xc8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d018      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <HAL_TIM_Base_Start_IT+0xcc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1c      	ldr	r2, [pc, #112]	; (8005338 <HAL_TIM_Base_Start_IT+0xd0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1b      	ldr	r2, [pc, #108]	; (800533c <HAL_TIM_Base_Start_IT+0xd4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_TIM_Base_Start_IT+0xd8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a18      	ldr	r2, [pc, #96]	; (8005344 <HAL_TIM_Base_Start_IT+0xdc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d111      	bne.n	800530c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d010      	beq.n	800531c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	e007      	b.n	800531c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40010000 	.word	0x40010000
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00
 800533c:	40010400 	.word	0x40010400
 8005340:	40014000 	.word	0x40014000
 8005344:	40001800 	.word	0x40001800

08005348 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	f241 1311 	movw	r3, #4369	; 0x1111
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10f      	bne.n	8005390 <HAL_TIM_Base_Stop_IT+0x48>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6a1a      	ldr	r2, [r3, #32]
 8005376:	f240 4344 	movw	r3, #1092	; 0x444
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <HAL_TIM_Base_Stop_IT+0x48>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e041      	b.n	800543c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f839 	bl	8005444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3304      	adds	r3, #4
 80053e2:	4619      	mov	r1, r3
 80053e4:	4610      	mov	r0, r2
 80053e6:	f000 fc29 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_TIM_PWM_Start+0x24>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e022      	b.n	80054c2 <HAL_TIM_PWM_Start+0x6a>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d109      	bne.n	8005496 <HAL_TIM_PWM_Start+0x3e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e015      	b.n	80054c2 <HAL_TIM_PWM_Start+0x6a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d109      	bne.n	80054b0 <HAL_TIM_PWM_Start+0x58>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e008      	b.n	80054c2 <HAL_TIM_PWM_Start+0x6a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e07c      	b.n	80055c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start+0x82>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	e013      	b.n	8005502 <HAL_TIM_PWM_Start+0xaa>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0x92>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_PWM_Start+0xaa>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054f8:	e003      	b.n	8005502 <HAL_TIM_PWM_Start+0xaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2201      	movs	r2, #1
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fe80 	bl	8006210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <HAL_TIM_PWM_Start+0x174>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_PWM_Start+0xcc>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <HAL_TIM_PWM_Start+0x178>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_TIM_PWM_Start+0xd0>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_TIM_PWM_Start+0xd2>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_TIM_PWM_Start+0x174>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d01d      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_TIM_PWM_Start+0x17c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <HAL_TIM_PWM_Start+0x180>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <HAL_TIM_PWM_Start+0x184>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <HAL_TIM_PWM_Start+0x178>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_TIM_PWM_Start+0x188>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIM_PWM_Start+0x136>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_TIM_PWM_Start+0x18c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d111      	bne.n	80055b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b06      	cmp	r3, #6
 800559e:	d010      	beq.n	80055c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	e007      	b.n	80055c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40014000 	.word	0x40014000
 80055e4:	40001800 	.word	0x40001800

080055e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2200      	movs	r2, #0
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fe08 	bl	8006210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2e      	ldr	r2, [pc, #184]	; (80056c0 <HAL_TIM_PWM_Stop+0xd8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIM_PWM_Stop+0x2c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2d      	ldr	r2, [pc, #180]	; (80056c4 <HAL_TIM_PWM_Stop+0xdc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d101      	bne.n	8005618 <HAL_TIM_PWM_Stop+0x30>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_TIM_PWM_Stop+0x32>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d017      	beq.n	800564e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	f241 1311 	movw	r3, #4369	; 0x1111
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_TIM_PWM_Stop+0x66>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	f240 4344 	movw	r3, #1092	; 0x444
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <HAL_TIM_PWM_Stop+0x66>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6a1a      	ldr	r2, [r3, #32]
 8005654:	f241 1311 	movw	r3, #4369	; 0x1111
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <HAL_TIM_PWM_Stop+0x96>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	f240 4344 	movw	r3, #1092	; 0x444
 8005668:	4013      	ands	r3, r2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <HAL_TIM_PWM_Stop+0x96>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0201 	bic.w	r2, r2, #1
 800567c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Stop+0xa6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800568c:	e013      	b.n	80056b6 <HAL_TIM_PWM_Stop+0xce>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Stop+0xb6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	e00b      	b.n	80056b6 <HAL_TIM_PWM_Stop+0xce>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_PWM_Stop+0xc6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ac:	e003      	b.n	80056b6 <HAL_TIM_PWM_Stop+0xce>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40010400 	.word	0x40010400

080056c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0202 	mvn.w	r2, #2
 80056f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa77 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa69 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fa7a 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d122      	bne.n	8005778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b04      	cmp	r3, #4
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0204 	mvn.w	r2, #4
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa4d 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa3f 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa50 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b08      	cmp	r3, #8
 8005784:	d122      	bne.n	80057cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d11b      	bne.n	80057cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0208 	mvn.w	r2, #8
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa23 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa15 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa26 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d122      	bne.n	8005820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0210 	mvn.w	r2, #16
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2208      	movs	r2, #8
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9f9 	bl	8005bfe <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f9eb 	bl	8005bea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f9fc 	bl	8005c12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0201 	mvn.w	r2, #1
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd fd02 	bl	8003250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b80      	cmp	r3, #128	; 0x80
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fd78 	bl	8006368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d10e      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9c1 	bl	8005c26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0220 	mvn.w	r2, #32
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fd42 	bl	8006354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d0:	bf00      	nop
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e0ae      	b.n	8005a54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	f200 809f 	bhi.w	8005a44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005941 	.word	0x08005941
 8005910:	08005a45 	.word	0x08005a45
 8005914:	08005a45 	.word	0x08005a45
 8005918:	08005a45 	.word	0x08005a45
 800591c:	08005981 	.word	0x08005981
 8005920:	08005a45 	.word	0x08005a45
 8005924:	08005a45 	.word	0x08005a45
 8005928:	08005a45 	.word	0x08005a45
 800592c:	080059c3 	.word	0x080059c3
 8005930:	08005a45 	.word	0x08005a45
 8005934:	08005a45 	.word	0x08005a45
 8005938:	08005a45 	.word	0x08005a45
 800593c:	08005a03 	.word	0x08005a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fa18 	bl	8005d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0208 	orr.w	r2, r2, #8
 800595a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0204 	bic.w	r2, r2, #4
 800596a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6999      	ldr	r1, [r3, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	619a      	str	r2, [r3, #24]
      break;
 800597e:	e064      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fa68 	bl	8005e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
      break;
 80059c0:	e043      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fabd 	bl	8005f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0208 	orr.w	r2, r2, #8
 80059dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0204 	bic.w	r2, r2, #4
 80059ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69d9      	ldr	r1, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	61da      	str	r2, [r3, #28]
      break;
 8005a00:	e023      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fb11 	bl	8006030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	021a      	lsls	r2, r3, #8
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	61da      	str	r2, [r3, #28]
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	75fb      	strb	r3, [r7, #23]
      break;
 8005a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_ConfigClockSource+0x1c>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e0b4      	b.n	8005be2 <HAL_TIM_ConfigClockSource+0x186>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab0:	d03e      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0xd4>
 8005ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab6:	f200 8087 	bhi.w	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abe:	f000 8086 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x172>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac6:	d87f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac8:	2b70      	cmp	r3, #112	; 0x70
 8005aca:	d01a      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xa6>
 8005acc:	2b70      	cmp	r3, #112	; 0x70
 8005ace:	d87b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad0:	2b60      	cmp	r3, #96	; 0x60
 8005ad2:	d050      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x11a>
 8005ad4:	2b60      	cmp	r3, #96	; 0x60
 8005ad6:	d877      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad8:	2b50      	cmp	r3, #80	; 0x50
 8005ada:	d03c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0xfa>
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d873      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d058      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x13a>
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d86f      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d064      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005aec:	2b30      	cmp	r3, #48	; 0x30
 8005aee:	d86b      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d060      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d867      	bhi.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d05c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d05a      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x15a>
 8005b00:	e062      	b.n	8005bc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6899      	ldr	r1, [r3, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f000 fb5d 	bl	80061d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	609a      	str	r2, [r3, #8]
      break;
 8005b2e:	e04f      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6899      	ldr	r1, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f000 fb46 	bl	80061d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b52:	609a      	str	r2, [r3, #8]
      break;
 8005b54:	e03c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 faba 	bl	80060dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2150      	movs	r1, #80	; 0x50
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fb13 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005b74:	e02c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 fad9 	bl	800613a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2160      	movs	r1, #96	; 0x60
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fb03 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005b94:	e01c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 fa9a 	bl	80060dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2140      	movs	r1, #64	; 0x40
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 faf3 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e00c      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 faea 	bl	800619a <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e003      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e000      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a40      	ldr	r2, [pc, #256]	; (8005d50 <TIM_Base_SetConfig+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5a:	d00f      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3d      	ldr	r2, [pc, #244]	; (8005d54 <TIM_Base_SetConfig+0x118>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a3c      	ldr	r2, [pc, #240]	; (8005d58 <TIM_Base_SetConfig+0x11c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d007      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a3b      	ldr	r2, [pc, #236]	; (8005d5c <TIM_Base_SetConfig+0x120>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a3a      	ldr	r2, [pc, #232]	; (8005d60 <TIM_Base_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d108      	bne.n	8005c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <TIM_Base_SetConfig+0x114>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d02b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9c:	d027      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2c      	ldr	r2, [pc, #176]	; (8005d54 <TIM_Base_SetConfig+0x118>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d023      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2b      	ldr	r2, [pc, #172]	; (8005d58 <TIM_Base_SetConfig+0x11c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01f      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <TIM_Base_SetConfig+0x120>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <TIM_Base_SetConfig+0x124>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d017      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <TIM_Base_SetConfig+0x128>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <TIM_Base_SetConfig+0x12c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <TIM_Base_SetConfig+0x130>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a25      	ldr	r2, [pc, #148]	; (8005d70 <TIM_Base_SetConfig+0x134>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a24      	ldr	r2, [pc, #144]	; (8005d74 <TIM_Base_SetConfig+0x138>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <TIM_Base_SetConfig+0x13c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d108      	bne.n	8005d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <TIM_Base_SetConfig+0x114>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_Base_SetConfig+0xf8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <TIM_Base_SetConfig+0x124>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d103      	bne.n	8005d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	615a      	str	r2, [r3, #20]
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40014400 	.word	0x40014400
 8005d6c:	40014800 	.word	0x40014800
 8005d70:	40001800 	.word	0x40001800
 8005d74:	40001c00 	.word	0x40001c00
 8005d78:	40002000 	.word	0x40002000

08005d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 0302 	bic.w	r3, r3, #2
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a20      	ldr	r2, [pc, #128]	; (8005e54 <TIM_OC1_SetConfig+0xd8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC1_SetConfig+0x64>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1f      	ldr	r2, [pc, #124]	; (8005e58 <TIM_OC1_SetConfig+0xdc>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10c      	bne.n	8005dfa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0308 	bic.w	r3, r3, #8
 8005de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f023 0304 	bic.w	r3, r3, #4
 8005df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <TIM_OC1_SetConfig+0xd8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_OC1_SetConfig+0x8e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <TIM_OC1_SetConfig+0xdc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d111      	bne.n	8005e2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	621a      	str	r2, [r3, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40010400 	.word	0x40010400

08005e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0210 	bic.w	r2, r3, #16
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0320 	bic.w	r3, r3, #32
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a22      	ldr	r2, [pc, #136]	; (8005f40 <TIM_OC2_SetConfig+0xe4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC2_SetConfig+0x68>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a21      	ldr	r2, [pc, #132]	; (8005f44 <TIM_OC2_SetConfig+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10d      	bne.n	8005ee0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ede:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <TIM_OC2_SetConfig+0xe4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_OC2_SetConfig+0x94>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <TIM_OC2_SetConfig+0xe8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d113      	bne.n	8005f18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40010000 	.word	0x40010000
 8005f44:	40010400 	.word	0x40010400

08005f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a21      	ldr	r2, [pc, #132]	; (8006028 <TIM_OC3_SetConfig+0xe0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_OC3_SetConfig+0x66>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a20      	ldr	r2, [pc, #128]	; (800602c <TIM_OC3_SetConfig+0xe4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d10d      	bne.n	8005fca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a16      	ldr	r2, [pc, #88]	; (8006028 <TIM_OC3_SetConfig+0xe0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d003      	beq.n	8005fda <TIM_OC3_SetConfig+0x92>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <TIM_OC3_SetConfig+0xe4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d113      	bne.n	8006002 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	621a      	str	r2, [r3, #32]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	40010000 	.word	0x40010000
 800602c:	40010400 	.word	0x40010400

08006030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006030:	b480      	push	{r7}
 8006032:	b087      	sub	sp, #28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800607a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <TIM_OC4_SetConfig+0xa4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_OC4_SetConfig+0x68>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a11      	ldr	r2, [pc, #68]	; (80060d8 <TIM_OC4_SetConfig+0xa8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d109      	bne.n	80060ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800609e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40010400 	.word	0x40010400

080060dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 030a 	bic.w	r3, r3, #10
 8006118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0210 	bic.w	r2, r3, #16
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f043 0307 	orr.w	r3, r3, #7
 80061bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	609a      	str	r2, [r3, #8]
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	021a      	lsls	r2, r3, #8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	609a      	str	r2, [r3, #8]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2201      	movs	r2, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006270:	2302      	movs	r3, #2
 8006272:	e05a      	b.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a21      	ldr	r2, [pc, #132]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c0:	d01d      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1d      	ldr	r2, [pc, #116]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a18      	ldr	r2, [pc, #96]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a17      	ldr	r2, [pc, #92]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a15      	ldr	r2, [pc, #84]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d10c      	bne.n	8006318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4313      	orrs	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	40010000 	.word	0x40010000
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	40010400 	.word	0x40010400
 800634c:	40014000 	.word	0x40014000
 8006350:	40001800 	.word	0x40001800

08006354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e03f      	b.n	800640e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fd f89c 	bl	80034e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd7b 	bl	8006ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695a      	ldr	r2, [r3, #20]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b08a      	sub	sp, #40	; 0x28
 800641a:	af02      	add	r7, sp, #8
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b20      	cmp	r3, #32
 8006434:	d17c      	bne.n	8006530 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HAL_UART_Transmit+0x2c>
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e075      	b.n	8006532 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_UART_Transmit+0x3e>
 8006450:	2302      	movs	r3, #2
 8006452:	e06e      	b.n	8006532 <HAL_UART_Transmit+0x11c>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2221      	movs	r2, #33	; 0x21
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646a:	f7fd f975 	bl	8003758 <HAL_GetTick>
 800646e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	88fa      	ldrh	r2, [r7, #6]
 800647a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006484:	d108      	bne.n	8006498 <HAL_UART_Transmit+0x82>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d104      	bne.n	8006498 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	e003      	b.n	80064a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064a8:	e02a      	b.n	8006500 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 faf9 	bl	8006aac <UART_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e036      	b.n	8006532 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	3302      	adds	r3, #2
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	e007      	b.n	80064f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	3301      	adds	r3, #1
 80064f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1cf      	bne.n	80064aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2200      	movs	r2, #0
 8006512:	2140      	movs	r1, #64	; 0x40
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fac9 	bl	8006aac <UART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e000      	b.n	8006532 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b0ba      	sub	sp, #232	; 0xe8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006562:	2300      	movs	r3, #0
 8006564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800657a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <HAL_UART_IRQHandler+0x66>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fbd3 	bl	8006d46 <UART_Receive_IT>
      return;
 80065a0:	e256      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80de 	beq.w	8006768 <HAL_UART_IRQHandler+0x22c>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80d1 	beq.w	8006768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xae>
 80065d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <HAL_UART_IRQHandler+0xd2>
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f043 0202 	orr.w	r2, r3, #2
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00b      	beq.n	8006632 <HAL_UART_IRQHandler+0xf6>
 800661a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	f043 0204 	orr.w	r2, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d011      	beq.n	8006662 <HAL_UART_IRQHandler+0x126>
 800663e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f043 0208 	orr.w	r2, r3, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 81ed 	beq.w	8006a46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b00      	cmp	r3, #0
 8006676:	d008      	beq.n	800668a <HAL_UART_IRQHandler+0x14e>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fb5e 	bl	8006d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	bf0c      	ite	eq
 8006698:	2301      	moveq	r3, #1
 800669a:	2300      	movne	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_UART_IRQHandler+0x17a>
 80066ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d04f      	beq.n	8006756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa66 	bl	8006b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d141      	bne.n	800674e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3314      	adds	r3, #20
 80066d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800670e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1d9      	bne.n	80066ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	2b00      	cmp	r3, #0
 800671c:	d013      	beq.n	8006746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	4a7d      	ldr	r2, [pc, #500]	; (8006918 <HAL_UART_IRQHandler+0x3dc>)
 8006724:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd fdb1 	bl	8004292 <HAL_DMA_Abort_IT>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	e00e      	b.n	8006764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f99a 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e00a      	b.n	8006764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f996 	bl	8006a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e006      	b.n	8006764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f992 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006762:	e170      	b.n	8006a46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	bf00      	nop
    return;
 8006766:	e16e      	b.n	8006a46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676c:	2b01      	cmp	r3, #1
 800676e:	f040 814a 	bne.w	8006a06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8143 	beq.w	8006a06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 813c 	beq.w	8006a06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	f040 80b4 	bne.w	800691c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8140 	beq.w	8006a4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067d2:	429a      	cmp	r2, r3
 80067d4:	f080 8139 	bcs.w	8006a4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	f000 8088 	beq.w	80068fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	330c      	adds	r3, #12
 8006816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800681a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800681e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1d9      	bne.n	80067ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800684a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3314      	adds	r3, #20
 800685a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800685e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e1      	bne.n	800683a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800688c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3314      	adds	r3, #20
 8006896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800689a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800689c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e3      	bne.n	8006876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	330c      	adds	r3, #12
 80068c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	330c      	adds	r3, #12
 80068dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80068e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e3      	bne.n	80068bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fc5a 	bl	80041b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006906:	b29b      	uxth	r3, r3
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	b29b      	uxth	r3, r3
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f8c0 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006914:	e099      	b.n	8006a4a <HAL_UART_IRQHandler+0x50e>
 8006916:	bf00      	nop
 8006918:	08006c4f 	.word	0x08006c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006924:	b29b      	uxth	r3, r3
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 808b 	beq.w	8006a4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8086 	beq.w	8006a4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	330c      	adds	r3, #12
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006966:	647a      	str	r2, [r7, #68]	; 0x44
 8006968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800696c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e3      	bne.n	8006942 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	623b      	str	r3, [r7, #32]
   return(result);
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3314      	adds	r3, #20
 800699a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800699e:	633a      	str	r2, [r7, #48]	; 0x30
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e3      	bne.n	800697a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0310 	bic.w	r3, r3, #16
 80069d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069e4:	61fa      	str	r2, [r7, #28]
 80069e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e8:	69b9      	ldr	r1, [r7, #24]
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	e841 2300 	strex	r3, r2, [r1]
 80069f0:	617b      	str	r3, [r7, #20]
   return(result);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1e3      	bne.n	80069c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f848 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a04:	e023      	b.n	8006a4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_UART_IRQHandler+0x4ea>
 8006a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f929 	bl	8006c76 <UART_Transmit_IT>
    return;
 8006a24:	e014      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <HAL_UART_IRQHandler+0x514>
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f969 	bl	8006d16 <UART_EndTransmit_IT>
    return;
 8006a44:	e004      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
    return;
 8006a46:	bf00      	nop
 8006a48:	e002      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
      return;
 8006a4a:	bf00      	nop
 8006a4c:	e000      	b.n	8006a50 <HAL_UART_IRQHandler+0x514>
      return;
 8006a4e:	bf00      	nop
  }
}
 8006a50:	37e8      	adds	r7, #232	; 0xe8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop

08006a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b090      	sub	sp, #64	; 0x40
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006abc:	e050      	b.n	8006b60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d04c      	beq.n	8006b60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <UART_WaitOnFlagUntilTimeout+0x30>
 8006acc:	f7fc fe44 	bl	8003758 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d241      	bcs.n	8006b60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006afc:	637a      	str	r2, [r7, #52]	; 0x34
 8006afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b30:	623a      	str	r2, [r7, #32]
 8006b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	69f9      	ldr	r1, [r7, #28]
 8006b36:	6a3a      	ldr	r2, [r7, #32]
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e00f      	b.n	8006b80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d09f      	beq.n	8006abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3740      	adds	r7, #64	; 0x40
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b095      	sub	sp, #84	; 0x54
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bb0:	643a      	str	r2, [r7, #64]	; 0x40
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d119      	bne.n	8006c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c20:	61ba      	str	r2, [r7, #24]
 8006c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6979      	ldr	r1, [r7, #20]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e5      	bne.n	8006c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c42:	bf00      	nop
 8006c44:	3754      	adds	r7, #84	; 0x54
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff ff09 	bl	8006a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b21      	cmp	r3, #33	; 0x21
 8006c88:	d13e      	bne.n	8006d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c92:	d114      	bne.n	8006cbe <UART_Transmit_IT+0x48>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d110      	bne.n	8006cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	621a      	str	r2, [r3, #32]
 8006cbc:	e008      	b.n	8006cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6211      	str	r1, [r2, #32]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10f      	bne.n	8006d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fe8e 	bl	8006a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b08c      	sub	sp, #48	; 0x30
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b22      	cmp	r3, #34	; 0x22
 8006d58:	f040 80ab 	bne.w	8006eb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d117      	bne.n	8006d96 <UART_Receive_IT+0x50>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d113      	bne.n	8006d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
 8006d94:	e026      	b.n	8006de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d007      	beq.n	8006dba <UART_Receive_IT+0x74>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <UART_Receive_IT+0x82>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e008      	b.n	8006dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4619      	mov	r1, r3
 8006df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d15a      	bne.n	8006eae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0220 	bic.w	r2, r2, #32
 8006e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d135      	bne.n	8006ea4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f023 0310 	bic.w	r3, r3, #16
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	623a      	str	r2, [r7, #32]
 8006e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	69f9      	ldr	r1, [r7, #28]
 8006e64:	6a3a      	ldr	r2, [r7, #32]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d10a      	bne.n	8006e96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff fdf9 	bl	8006a94 <HAL_UARTEx_RxEventCallback>
 8006ea2:	e002      	b.n	8006eaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fde1 	bl	8006a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e002      	b.n	8006eb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	e000      	b.n	8006eb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3730      	adds	r7, #48	; 0x30
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec0:	b0c0      	sub	sp, #256	; 0x100
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	68d9      	ldr	r1, [r3, #12]
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	ea40 0301 	orr.w	r3, r0, r1
 8006ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f14:	f021 010c 	bic.w	r1, r1, #12
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f22:	430b      	orrs	r3, r1
 8006f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	6999      	ldr	r1, [r3, #24]
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	ea40 0301 	orr.w	r3, r0, r1
 8006f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b8f      	ldr	r3, [pc, #572]	; (8007188 <UART_SetConfig+0x2cc>)
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d005      	beq.n	8006f5c <UART_SetConfig+0xa0>
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8d      	ldr	r3, [pc, #564]	; (800718c <UART_SetConfig+0x2d0>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d104      	bne.n	8006f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fd fcd8 	bl	8004910 <HAL_RCC_GetPCLK2Freq>
 8006f60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f64:	e003      	b.n	8006f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f66:	f7fd fcbf 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 8006f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f72:	69db      	ldr	r3, [r3, #28]
 8006f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f78:	f040 810c 	bne.w	8007194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f8e:	4622      	mov	r2, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f96:	415b      	adcs	r3, r3
 8006f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	eb12 0801 	adds.w	r8, r2, r1
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eb43 0901 	adc.w	r9, r3, r1
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fbe:	4690      	mov	r8, r2
 8006fc0:	4699      	mov	r9, r3
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	eb18 0303 	adds.w	r3, r8, r3
 8006fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fcc:	462b      	mov	r3, r5
 8006fce:	eb49 0303 	adc.w	r3, r9, r3
 8006fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fea:	460b      	mov	r3, r1
 8006fec:	18db      	adds	r3, r3, r3
 8006fee:	653b      	str	r3, [r7, #80]	; 0x50
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	eb42 0303 	adc.w	r3, r2, r3
 8006ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007000:	f7f9 f900 	bl	8000204 <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4b61      	ldr	r3, [pc, #388]	; (8007190 <UART_SetConfig+0x2d4>)
 800700a:	fba3 2302 	umull	r2, r3, r3, r2
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	011c      	lsls	r4, r3, #4
 8007012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007016:	2200      	movs	r2, #0
 8007018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800701c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	64b9      	str	r1, [r7, #72]	; 0x48
 800702c:	415b      	adcs	r3, r3
 800702e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007034:	4641      	mov	r1, r8
 8007036:	eb12 0a01 	adds.w	sl, r2, r1
 800703a:	4649      	mov	r1, r9
 800703c:	eb43 0b01 	adc.w	fp, r3, r1
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800704c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007054:	4692      	mov	sl, r2
 8007056:	469b      	mov	fp, r3
 8007058:	4643      	mov	r3, r8
 800705a:	eb1a 0303 	adds.w	r3, sl, r3
 800705e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007062:	464b      	mov	r3, r9
 8007064:	eb4b 0303 	adc.w	r3, fp, r3
 8007068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007078:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800707c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007080:	460b      	mov	r3, r1
 8007082:	18db      	adds	r3, r3, r3
 8007084:	643b      	str	r3, [r7, #64]	; 0x40
 8007086:	4613      	mov	r3, r2
 8007088:	eb42 0303 	adc.w	r3, r2, r3
 800708c:	647b      	str	r3, [r7, #68]	; 0x44
 800708e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007096:	f7f9 f8b5 	bl	8000204 <__aeabi_uldivmod>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	4b3b      	ldr	r3, [pc, #236]	; (8007190 <UART_SetConfig+0x2d4>)
 80070a2:	fba3 2301 	umull	r2, r3, r3, r1
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2264      	movs	r2, #100	; 0x64
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	1acb      	subs	r3, r1, r3
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070b6:	4b36      	ldr	r3, [pc, #216]	; (8007190 <UART_SetConfig+0x2d4>)
 80070b8:	fba3 2302 	umull	r2, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070c4:	441c      	add	r4, r3
 80070c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	1891      	adds	r1, r2, r2
 80070de:	63b9      	str	r1, [r7, #56]	; 0x38
 80070e0:	415b      	adcs	r3, r3
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070e8:	4641      	mov	r1, r8
 80070ea:	1851      	adds	r1, r2, r1
 80070ec:	6339      	str	r1, [r7, #48]	; 0x30
 80070ee:	4649      	mov	r1, r9
 80070f0:	414b      	adcs	r3, r1
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007100:	4659      	mov	r1, fp
 8007102:	00cb      	lsls	r3, r1, #3
 8007104:	4651      	mov	r1, sl
 8007106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710a:	4651      	mov	r1, sl
 800710c:	00ca      	lsls	r2, r1, #3
 800710e:	4610      	mov	r0, r2
 8007110:	4619      	mov	r1, r3
 8007112:	4603      	mov	r3, r0
 8007114:	4642      	mov	r2, r8
 8007116:	189b      	adds	r3, r3, r2
 8007118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800711c:	464b      	mov	r3, r9
 800711e:	460a      	mov	r2, r1
 8007120:	eb42 0303 	adc.w	r3, r2, r3
 8007124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007134:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800713c:	460b      	mov	r3, r1
 800713e:	18db      	adds	r3, r3, r3
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
 8007142:	4613      	mov	r3, r2
 8007144:	eb42 0303 	adc.w	r3, r2, r3
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800714a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800714e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007152:	f7f9 f857 	bl	8000204 <__aeabi_uldivmod>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <UART_SetConfig+0x2d4>)
 800715c:	fba3 1302 	umull	r1, r3, r3, r2
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2164      	movs	r1, #100	; 0x64
 8007164:	fb01 f303 	mul.w	r3, r1, r3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a08      	ldr	r2, [pc, #32]	; (8007190 <UART_SetConfig+0x2d4>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 0207 	and.w	r2, r3, #7
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4422      	add	r2, r4
 8007182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007184:	e105      	b.n	8007392 <UART_SetConfig+0x4d6>
 8007186:	bf00      	nop
 8007188:	40011000 	.word	0x40011000
 800718c:	40011400 	.word	0x40011400
 8007190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800719e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071a6:	4642      	mov	r2, r8
 80071a8:	464b      	mov	r3, r9
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	6239      	str	r1, [r7, #32]
 80071ae:	415b      	adcs	r3, r3
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071b6:	4641      	mov	r1, r8
 80071b8:	1854      	adds	r4, r2, r1
 80071ba:	4649      	mov	r1, r9
 80071bc:	eb43 0501 	adc.w	r5, r3, r1
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	00eb      	lsls	r3, r5, #3
 80071ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ce:	00e2      	lsls	r2, r4, #3
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	4643      	mov	r3, r8
 80071d6:	18e3      	adds	r3, r4, r3
 80071d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071dc:	464b      	mov	r3, r9
 80071de:	eb45 0303 	adc.w	r3, r5, r3
 80071e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007202:	4629      	mov	r1, r5
 8007204:	008b      	lsls	r3, r1, #2
 8007206:	4621      	mov	r1, r4
 8007208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720c:	4621      	mov	r1, r4
 800720e:	008a      	lsls	r2, r1, #2
 8007210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007214:	f7f8 fff6 	bl	8000204 <__aeabi_uldivmod>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4b60      	ldr	r3, [pc, #384]	; (80073a0 <UART_SetConfig+0x4e4>)
 800721e:	fba3 2302 	umull	r2, r3, r3, r2
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	011c      	lsls	r4, r3, #4
 8007226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722a:	2200      	movs	r2, #0
 800722c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007238:	4642      	mov	r2, r8
 800723a:	464b      	mov	r3, r9
 800723c:	1891      	adds	r1, r2, r2
 800723e:	61b9      	str	r1, [r7, #24]
 8007240:	415b      	adcs	r3, r3
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007248:	4641      	mov	r1, r8
 800724a:	1851      	adds	r1, r2, r1
 800724c:	6139      	str	r1, [r7, #16]
 800724e:	4649      	mov	r1, r9
 8007250:	414b      	adcs	r3, r1
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	f04f 0200 	mov.w	r2, #0
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007260:	4659      	mov	r1, fp
 8007262:	00cb      	lsls	r3, r1, #3
 8007264:	4651      	mov	r1, sl
 8007266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726a:	4651      	mov	r1, sl
 800726c:	00ca      	lsls	r2, r1, #3
 800726e:	4610      	mov	r0, r2
 8007270:	4619      	mov	r1, r3
 8007272:	4603      	mov	r3, r0
 8007274:	4642      	mov	r2, r8
 8007276:	189b      	adds	r3, r3, r2
 8007278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800727c:	464b      	mov	r3, r9
 800727e:	460a      	mov	r2, r1
 8007280:	eb42 0303 	adc.w	r3, r2, r3
 8007284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	67bb      	str	r3, [r7, #120]	; 0x78
 8007292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072a0:	4649      	mov	r1, r9
 80072a2:	008b      	lsls	r3, r1, #2
 80072a4:	4641      	mov	r1, r8
 80072a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072aa:	4641      	mov	r1, r8
 80072ac:	008a      	lsls	r2, r1, #2
 80072ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072b2:	f7f8 ffa7 	bl	8000204 <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4b39      	ldr	r3, [pc, #228]	; (80073a0 <UART_SetConfig+0x4e4>)
 80072bc:	fba3 1302 	umull	r1, r3, r3, r2
 80072c0:	095b      	lsrs	r3, r3, #5
 80072c2:	2164      	movs	r1, #100	; 0x64
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	3332      	adds	r3, #50	; 0x32
 80072ce:	4a34      	ldr	r2, [pc, #208]	; (80073a0 <UART_SetConfig+0x4e4>)
 80072d0:	fba2 2303 	umull	r2, r3, r2, r3
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072da:	441c      	add	r4, r3
 80072dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e0:	2200      	movs	r2, #0
 80072e2:	673b      	str	r3, [r7, #112]	; 0x70
 80072e4:	677a      	str	r2, [r7, #116]	; 0x74
 80072e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072ea:	4642      	mov	r2, r8
 80072ec:	464b      	mov	r3, r9
 80072ee:	1891      	adds	r1, r2, r2
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	415b      	adcs	r3, r3
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fa:	4641      	mov	r1, r8
 80072fc:	1851      	adds	r1, r2, r1
 80072fe:	6039      	str	r1, [r7, #0]
 8007300:	4649      	mov	r1, r9
 8007302:	414b      	adcs	r3, r1
 8007304:	607b      	str	r3, [r7, #4]
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007312:	4659      	mov	r1, fp
 8007314:	00cb      	lsls	r3, r1, #3
 8007316:	4651      	mov	r1, sl
 8007318:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800731c:	4651      	mov	r1, sl
 800731e:	00ca      	lsls	r2, r1, #3
 8007320:	4610      	mov	r0, r2
 8007322:	4619      	mov	r1, r3
 8007324:	4603      	mov	r3, r0
 8007326:	4642      	mov	r2, r8
 8007328:	189b      	adds	r3, r3, r2
 800732a:	66bb      	str	r3, [r7, #104]	; 0x68
 800732c:	464b      	mov	r3, r9
 800732e:	460a      	mov	r2, r1
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	663b      	str	r3, [r7, #96]	; 0x60
 8007340:	667a      	str	r2, [r7, #100]	; 0x64
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800734e:	4649      	mov	r1, r9
 8007350:	008b      	lsls	r3, r1, #2
 8007352:	4641      	mov	r1, r8
 8007354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007358:	4641      	mov	r1, r8
 800735a:	008a      	lsls	r2, r1, #2
 800735c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007360:	f7f8 ff50 	bl	8000204 <__aeabi_uldivmod>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <UART_SetConfig+0x4e4>)
 800736a:	fba3 1302 	umull	r1, r3, r3, r2
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	2164      	movs	r1, #100	; 0x64
 8007372:	fb01 f303 	mul.w	r3, r1, r3
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	3332      	adds	r3, #50	; 0x32
 800737c:	4a08      	ldr	r2, [pc, #32]	; (80073a0 <UART_SetConfig+0x4e4>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4422      	add	r2, r4
 8007390:	609a      	str	r2, [r3, #8]
}
 8007392:	bf00      	nop
 8007394:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007398:	46bd      	mov	sp, r7
 800739a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800739e:	bf00      	nop
 80073a0:	51eb851f 	.word	0x51eb851f

080073a4 <LL_EXTI_EnableIT_0_31>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4904      	ldr	r1, [pc, #16]	; (80073c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40013c00 	.word	0x40013c00

080073c8 <LL_EXTI_DisableIT_0_31>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80073d0:	4b06      	ldr	r3, [pc, #24]	; (80073ec <LL_EXTI_DisableIT_0_31+0x24>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	43db      	mvns	r3, r3
 80073d8:	4904      	ldr	r1, [pc, #16]	; (80073ec <LL_EXTI_DisableIT_0_31+0x24>)
 80073da:	4013      	ands	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40013c00 	.word	0x40013c00

080073f0 <LL_EXTI_EnableEvent_0_31>:
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80073f8:	4b05      	ldr	r3, [pc, #20]	; (8007410 <LL_EXTI_EnableEvent_0_31+0x20>)
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4904      	ldr	r1, [pc, #16]	; (8007410 <LL_EXTI_EnableEvent_0_31+0x20>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4313      	orrs	r3, r2
 8007402:	604b      	str	r3, [r1, #4]
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40013c00 	.word	0x40013c00

08007414 <LL_EXTI_DisableEvent_0_31>:
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <LL_EXTI_DisableEvent_0_31+0x24>)
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	43db      	mvns	r3, r3
 8007424:	4904      	ldr	r1, [pc, #16]	; (8007438 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007426:	4013      	ands	r3, r2
 8007428:	604b      	str	r3, [r1, #4]
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40013c00 	.word	0x40013c00

0800743c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	4904      	ldr	r1, [pc, #16]	; (800745c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4313      	orrs	r3, r2
 800744e:	608b      	str	r3, [r1, #8]
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	40013c00 	.word	0x40013c00

08007460 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	43db      	mvns	r3, r3
 8007470:	4904      	ldr	r1, [pc, #16]	; (8007484 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007472:	4013      	ands	r3, r2
 8007474:	608b      	str	r3, [r1, #8]
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40013c00 	.word	0x40013c00

08007488 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	4904      	ldr	r1, [pc, #16]	; (80074a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4313      	orrs	r3, r2
 800749a:	60cb      	str	r3, [r1, #12]
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40013c00 	.word	0x40013c00

080074ac <LL_EXTI_DisableFallingTrig_0_31>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	43db      	mvns	r3, r3
 80074bc:	4904      	ldr	r1, [pc, #16]	; (80074d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80074be:	4013      	ands	r3, r2
 80074c0:	60cb      	str	r3, [r1, #12]
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40013c00 	.word	0x40013c00

080074d4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80074dc:	2300      	movs	r3, #0
 80074de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	791b      	ldrb	r3, [r3, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d065      	beq.n	80075b4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d06c      	beq.n	80075ca <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	795b      	ldrb	r3, [r3, #5]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d01c      	beq.n	8007532 <LL_EXTI_Init+0x5e>
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	dc25      	bgt.n	8007548 <LL_EXTI_Init+0x74>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <LL_EXTI_Init+0x32>
 8007500:	2b01      	cmp	r3, #1
 8007502:	d00b      	beq.n	800751c <LL_EXTI_Init+0x48>
 8007504:	e020      	b.n	8007548 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff ff82 	bl	8007414 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff ff45 	bl	80073a4 <LL_EXTI_EnableIT_0_31>
          break;
 800751a:	e018      	b.n	800754e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff ff51 	bl	80073c8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff ff60 	bl	80073f0 <LL_EXTI_EnableEvent_0_31>
          break;
 8007530:	e00d      	b.n	800754e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff ff34 	bl	80073a4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff ff55 	bl	80073f0 <LL_EXTI_EnableEvent_0_31>
          break;
 8007546:	e002      	b.n	800754e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
          break;
 800754c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	799b      	ldrb	r3, [r3, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d039      	beq.n	80075ca <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	799b      	ldrb	r3, [r3, #6]
 800755a:	2b03      	cmp	r3, #3
 800755c:	d01c      	beq.n	8007598 <LL_EXTI_Init+0xc4>
 800755e:	2b03      	cmp	r3, #3
 8007560:	dc25      	bgt.n	80075ae <LL_EXTI_Init+0xda>
 8007562:	2b01      	cmp	r3, #1
 8007564:	d002      	beq.n	800756c <LL_EXTI_Init+0x98>
 8007566:	2b02      	cmp	r3, #2
 8007568:	d00b      	beq.n	8007582 <LL_EXTI_Init+0xae>
 800756a:	e020      	b.n	80075ae <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff9b 	bl	80074ac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff ff5e 	bl	800743c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007580:	e024      	b.n	80075cc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff ff6a 	bl	8007460 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff ff79 	bl	8007488 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007596:	e019      	b.n	80075cc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff ff4d 	bl	800743c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff ff6e 	bl	8007488 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80075ac:	e00e      	b.n	80075cc <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
            break;
 80075b2:	e00b      	b.n	80075cc <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff ff05 	bl	80073c8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff ff26 	bl	8007414 <LL_EXTI_DisableEvent_0_31>
 80075c8:	e000      	b.n	80075cc <LL_EXTI_Init+0xf8>
      }
 80075ca:	bf00      	nop
  }
  return status;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <LL_GPIO_SetPinMode>:
{
 80075d6:	b480      	push	{r7}
 80075d8:	b089      	sub	sp, #36	; 0x24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	fa93 f3a3 	rbit	r3, r3
 80075f0:	613b      	str	r3, [r7, #16]
  return result;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	fab3 f383 	clz	r3, r3
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	2103      	movs	r1, #3
 80075fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007602:	43db      	mvns	r3, r3
 8007604:	401a      	ands	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	fa93 f3a3 	rbit	r3, r3
 8007610:	61bb      	str	r3, [r7, #24]
  return result;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	fab3 f383 	clz	r3, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	fa01 f303 	lsl.w	r3, r1, r3
 8007622:	431a      	orrs	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	601a      	str	r2, [r3, #0]
}
 8007628:	bf00      	nop
 800762a:	3724      	adds	r7, #36	; 0x24
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <LL_GPIO_SetPinOutputType>:
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	43db      	mvns	r3, r3
 8007648:	401a      	ands	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	605a      	str	r2, [r3, #4]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <LL_GPIO_SetPinSpeed>:
{
 8007664:	b480      	push	{r7}
 8007666:	b089      	sub	sp, #36	; 0x24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	fa93 f3a3 	rbit	r3, r3
 800767e:	613b      	str	r3, [r7, #16]
  return result;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	fab3 f383 	clz	r3, r3
 8007686:	b2db      	uxtb	r3, r3
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	2103      	movs	r1, #3
 800768c:	fa01 f303 	lsl.w	r3, r1, r3
 8007690:	43db      	mvns	r3, r3
 8007692:	401a      	ands	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	fa93 f3a3 	rbit	r3, r3
 800769e:	61bb      	str	r3, [r7, #24]
  return result;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	fab3 f383 	clz	r3, r3
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	fa01 f303 	lsl.w	r3, r1, r3
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	609a      	str	r2, [r3, #8]
}
 80076b6:	bf00      	nop
 80076b8:	3724      	adds	r7, #36	; 0x24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <LL_GPIO_SetPinPull>:
{
 80076c2:	b480      	push	{r7}
 80076c4:	b089      	sub	sp, #36	; 0x24
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	fa93 f3a3 	rbit	r3, r3
 80076dc:	613b      	str	r3, [r7, #16]
  return result;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	fab3 f383 	clz	r3, r3
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	2103      	movs	r1, #3
 80076ea:	fa01 f303 	lsl.w	r3, r1, r3
 80076ee:	43db      	mvns	r3, r3
 80076f0:	401a      	ands	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	fa93 f3a3 	rbit	r3, r3
 80076fc:	61bb      	str	r3, [r7, #24]
  return result;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	fab3 f383 	clz	r3, r3
 8007704:	b2db      	uxtb	r3, r3
 8007706:	005b      	lsls	r3, r3, #1
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	431a      	orrs	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	60da      	str	r2, [r3, #12]
}
 8007714:	bf00      	nop
 8007716:	3724      	adds	r7, #36	; 0x24
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <LL_GPIO_SetAFPin_0_7>:
{
 8007720:	b480      	push	{r7}
 8007722:	b089      	sub	sp, #36	; 0x24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	fa93 f3a3 	rbit	r3, r3
 800773a:	613b      	str	r3, [r7, #16]
  return result;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	fab3 f383 	clz	r3, r3
 8007742:	b2db      	uxtb	r3, r3
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	210f      	movs	r1, #15
 8007748:	fa01 f303 	lsl.w	r3, r1, r3
 800774c:	43db      	mvns	r3, r3
 800774e:	401a      	ands	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	fa93 f3a3 	rbit	r3, r3
 800775a:	61bb      	str	r3, [r7, #24]
  return result;
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	fab3 f383 	clz	r3, r3
 8007762:	b2db      	uxtb	r3, r3
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	431a      	orrs	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	bf00      	nop
 8007774:	3724      	adds	r7, #36	; 0x24
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <LL_GPIO_SetAFPin_8_15>:
{
 800777e:	b480      	push	{r7}
 8007780:	b089      	sub	sp, #36	; 0x24
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	fa93 f3a3 	rbit	r3, r3
 800779a:	613b      	str	r3, [r7, #16]
  return result;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	fab3 f383 	clz	r3, r3
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	210f      	movs	r1, #15
 80077a8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ac:	43db      	mvns	r3, r3
 80077ae:	401a      	ands	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	fa93 f3a3 	rbit	r3, r3
 80077bc:	61bb      	str	r3, [r7, #24]
  return result;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	fab3 f383 	clz	r3, r3
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	fa01 f303 	lsl.w	r3, r1, r3
 80077ce:	431a      	orrs	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80077d4:	bf00      	nop
 80077d6:	3724      	adds	r7, #36	; 0x24
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	fa93 f3a3 	rbit	r3, r3
 80077fe:	613b      	str	r3, [r7, #16]
  return result;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	fab3 f383 	clz	r3, r3
 8007806:	b2db      	uxtb	r3, r3
 8007808:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800780a:	e050      	b.n	80078ae <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	2101      	movs	r1, #1
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	fa01 f303 	lsl.w	r3, r1, r3
 8007818:	4013      	ands	r3, r2
 800781a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d042      	beq.n	80078a8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d003      	beq.n	8007832 <LL_GPIO_Init+0x52>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d10d      	bne.n	800784e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	461a      	mov	r2, r3
 8007838:	69b9      	ldr	r1, [r7, #24]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff ff12 	bl	8007664 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	461a      	mov	r2, r3
 8007846:	69b9      	ldr	r1, [r7, #24]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fef3 	bl	8007634 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	461a      	mov	r2, r3
 8007854:	69b9      	ldr	r1, [r7, #24]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff33 	bl	80076c2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d11a      	bne.n	800789a <LL_GPIO_Init+0xba>
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	fa93 f3a3 	rbit	r3, r3
 800786e:	60bb      	str	r3, [r7, #8]
  return result;
 8007870:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007872:	fab3 f383 	clz	r3, r3
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b07      	cmp	r3, #7
 800787a:	d807      	bhi.n	800788c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	461a      	mov	r2, r3
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ff4b 	bl	8007720 <LL_GPIO_SetAFPin_0_7>
 800788a:	e006      	b.n	800789a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	461a      	mov	r2, r3
 8007892:	69b9      	ldr	r1, [r7, #24]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff ff72 	bl	800777e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	461a      	mov	r2, r3
 80078a0:	69b9      	ldr	r1, [r7, #24]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fe97 	bl	80075d6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1a7      	bne.n	800780c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <__libc_init_array>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	4d0d      	ldr	r5, [pc, #52]	; (8007900 <__libc_init_array+0x38>)
 80078cc:	4c0d      	ldr	r4, [pc, #52]	; (8007904 <__libc_init_array+0x3c>)
 80078ce:	1b64      	subs	r4, r4, r5
 80078d0:	10a4      	asrs	r4, r4, #2
 80078d2:	2600      	movs	r6, #0
 80078d4:	42a6      	cmp	r6, r4
 80078d6:	d109      	bne.n	80078ec <__libc_init_array+0x24>
 80078d8:	4d0b      	ldr	r5, [pc, #44]	; (8007908 <__libc_init_array+0x40>)
 80078da:	4c0c      	ldr	r4, [pc, #48]	; (800790c <__libc_init_array+0x44>)
 80078dc:	f000 f830 	bl	8007940 <_init>
 80078e0:	1b64      	subs	r4, r4, r5
 80078e2:	10a4      	asrs	r4, r4, #2
 80078e4:	2600      	movs	r6, #0
 80078e6:	42a6      	cmp	r6, r4
 80078e8:	d105      	bne.n	80078f6 <__libc_init_array+0x2e>
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f0:	4798      	blx	r3
 80078f2:	3601      	adds	r6, #1
 80078f4:	e7ee      	b.n	80078d4 <__libc_init_array+0xc>
 80078f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fa:	4798      	blx	r3
 80078fc:	3601      	adds	r6, #1
 80078fe:	e7f2      	b.n	80078e6 <__libc_init_array+0x1e>
 8007900:	08007a48 	.word	0x08007a48
 8007904:	08007a48 	.word	0x08007a48
 8007908:	08007a48 	.word	0x08007a48
 800790c:	08007a4c 	.word	0x08007a4c

08007910 <memcmp>:
 8007910:	b510      	push	{r4, lr}
 8007912:	3901      	subs	r1, #1
 8007914:	4402      	add	r2, r0
 8007916:	4290      	cmp	r0, r2
 8007918:	d101      	bne.n	800791e <memcmp+0xe>
 800791a:	2000      	movs	r0, #0
 800791c:	e005      	b.n	800792a <memcmp+0x1a>
 800791e:	7803      	ldrb	r3, [r0, #0]
 8007920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007924:	42a3      	cmp	r3, r4
 8007926:	d001      	beq.n	800792c <memcmp+0x1c>
 8007928:	1b18      	subs	r0, r3, r4
 800792a:	bd10      	pop	{r4, pc}
 800792c:	3001      	adds	r0, #1
 800792e:	e7f2      	b.n	8007916 <memcmp+0x6>

08007930 <memset>:
 8007930:	4402      	add	r2, r0
 8007932:	4603      	mov	r3, r0
 8007934:	4293      	cmp	r3, r2
 8007936:	d100      	bne.n	800793a <memset+0xa>
 8007938:	4770      	bx	lr
 800793a:	f803 1b01 	strb.w	r1, [r3], #1
 800793e:	e7f9      	b.n	8007934 <memset+0x4>

08007940 <_init>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr

0800794c <_fini>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr
